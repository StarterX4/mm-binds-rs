/* automatically generated by rust-bindgen 0.71.1 */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    pub const POSIX: u32 = 1;
    pub const LINUX: u32 = 1;
    pub const _LINUX: u32 = 1;
    pub const COMPILER_GCC: u32 = 1;
    pub const _GLIBCXX_CSTDDEF: u32 = 1;
    pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
    pub const _GLIBCXX_RELEASE: u32 = 15;
    pub const __GLIBCXX__: u32 = 20250425;
    pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
    pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
    pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
    pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
    pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
    pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
    pub const _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED: u32 = 1;
    pub const _GLIBCXX_ASSERTIONS: u32 = 1;
    pub const _GLIBCXX_VERBOSE_ASSERT: u32 = 1;
    pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
    pub const _GLIBCXX_OS_DEFINES: u32 = 1;
    pub const __NO_CTYPE: u32 = 1;
    pub const _FEATURES_H: u32 = 1;
    pub const _ISOC95_SOURCE: u32 = 1;
    pub const _ISOC99_SOURCE: u32 = 1;
    pub const _ISOC11_SOURCE: u32 = 1;
    pub const _ISOC23_SOURCE: u32 = 1;
    pub const _ISOC2Y_SOURCE: u32 = 1;
    pub const _POSIX_SOURCE: u32 = 1;
    pub const _POSIX_C_SOURCE: u32 = 200809;
    pub const _XOPEN_SOURCE: u32 = 700;
    pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
    pub const _LARGEFILE64_SOURCE: u32 = 1;
    pub const _DEFAULT_SOURCE: u32 = 1;
    pub const _ATFILE_SOURCE: u32 = 1;
    pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
    pub const __GLIBC_USE_ISOC2Y: u32 = 1;
    pub const __GLIBC_USE_ISOC23: u32 = 1;
    pub const __USE_ISOC11: u32 = 1;
    pub const __USE_ISOC99: u32 = 1;
    pub const __USE_ISOC95: u32 = 1;
    pub const __USE_ISOCXX11: u32 = 1;
    pub const __USE_POSIX: u32 = 1;
    pub const __USE_POSIX2: u32 = 1;
    pub const __USE_POSIX199309: u32 = 1;
    pub const __USE_POSIX199506: u32 = 1;
    pub const __USE_XOPEN2K: u32 = 1;
    pub const __USE_XOPEN2K8: u32 = 1;
    pub const __USE_XOPEN: u32 = 1;
    pub const __USE_XOPEN_EXTENDED: u32 = 1;
    pub const __USE_UNIX98: u32 = 1;
    pub const _LARGEFILE_SOURCE: u32 = 1;
    pub const __USE_XOPEN2K8XSI: u32 = 1;
    pub const __USE_XOPEN2KXSI: u32 = 1;
    pub const __USE_LARGEFILE: u32 = 1;
    pub const __USE_LARGEFILE64: u32 = 1;
    pub const __WORDSIZE: u32 = 64;
    pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
    pub const __SYSCALL_WORDSIZE: u32 = 64;
    pub const __TIMESIZE: u32 = 64;
    pub const __USE_TIME_BITS64: u32 = 1;
    pub const __USE_MISC: u32 = 1;
    pub const __USE_ATFILE: u32 = 1;
    pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
    pub const __USE_GNU: u32 = 1;
    pub const __USE_FORTIFY_LEVEL: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
    pub const __GLIBC_USE_C23_STRTOL: u32 = 1;
    pub const _STDC_PREDEF_H: u32 = 1;
    pub const __STDC_IEC_559__: u32 = 1;
    pub const __STDC_IEC_60559_BFP__: u32 = 201404;
    pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
    pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
    pub const __STDC_ISO_10646__: u32 = 201706;
    pub const __GNU_LIBRARY__: u32 = 6;
    pub const __GLIBC__: u32 = 2;
    pub const __GLIBC_MINOR__: u32 = 41;
    pub const _SYS_CDEFS_H: u32 = 1;
    pub const __glibc_c99_flexarr_available: u32 = 1;
    pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
    pub const __HAVE_GENERIC_SELECTION: u32 = 0;
    pub const _GLIBCXX_HAVE_FLOAT128_MATH: u32 = 1;
    pub const _GLIBCXX_MAY_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
    pub const _GLIBCXX_GTHREAD_USE_WEAK: u32 = 0;
    pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
    pub const _GLIBCXX_USE_STD_SPEC_FUNCS: u32 = 1;
    pub const _GLIBCXX_FAST_MATH: u32 = 0;
    pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
    pub const _GLIBCXX_FLOAT_IS_IEEE_BINARY32: u32 = 1;
    pub const _GLIBCXX_DOUBLE_IS_IEEE_BINARY64: u32 = 1;
    pub const _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP: u32 = 1;
    pub const _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE: u32 = 1;
    pub const _GLIBCXX_HAVE_BUILTIN_LAUNDER: u32 = 1;
    pub const _PSTL_VERSION: u32 = 17000;
    pub const _PSTL_VERSION_MAJOR: u32 = 17;
    pub const _PSTL_VERSION_MINOR: u32 = 0;
    pub const _PSTL_VERSION_PATCH: u32 = 0;
    pub const _PSTL_USAGE_WARNINGS: u32 = 0;
    pub const _PSTL_PRAGMA_LOCATION: &[u8; 26] = b" [Parallel STL message]: \0";
    pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
    pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
    pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
    pub const _GLIBCXX_HAVE_ARC4RANDOM: u32 = 1;
    pub const _GLIBCXX_HAVE_ARPA_INET_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
    pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
    pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
    pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
    pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
    pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
    pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
    pub const _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY: u32 = 1;
    pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
    pub const _GLIBCXX_HAVE_C99_FLT_EVAL_TYPES: u32 = 1;
    pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
    pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
    pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
    pub const _GLIBCXX_HAVE_COSF: u32 = 1;
    pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
    pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
    pub const _GLIBCXX_HAVE_COSL: u32 = 1;
    pub const _GLIBCXX_HAVE_DECL_STRNLEN: u32 = 1;
    pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_DIRFD: u32 = 1;
    pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
    pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
    pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
    pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FDOPENDIR: u32 = 1;
    pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
    pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
    pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
    pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_GETENTROPY: u32 = 1;
    pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
    pub const _GLIBCXX_HAVE_GETS: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
    pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
    pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
    pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
    pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
    pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
    pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
    pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
    pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
    pub const _GLIBCXX_HAVE_LINK: u32 = 1;
    pub const _GLIBCXX_HAVE_LINK_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_RANDOM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_TYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
    pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
    pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
    pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
    pub const _GLIBCXX_HAVE_LSEEK: u32 = 1;
    pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
    pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
    pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
    pub const _GLIBCXX_HAVE_MODF: u32 = 1;
    pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
    pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
    pub const _GLIBCXX_HAVE_NETDB_H: u32 = 1;
    pub const _GLIBCXX_HAVE_NETINET_IN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_NETINET_TCP_H: u32 = 1;
    pub const _GLIBCXX_HAVE_OPENAT: u32 = 1;
    pub const _GLIBCXX_HAVE_O_NONBLOCK: u32 = 1;
    pub const _GLIBCXX_HAVE_POLL: u32 = 1;
    pub const _GLIBCXX_HAVE_POLL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
    pub const _GLIBCXX_HAVE_POSIX_SEMAPHORE: u32 = 1;
    pub const _GLIBCXX_HAVE_POWF: u32 = 1;
    pub const _GLIBCXX_HAVE_POWL: u32 = 1;
    pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
    pub const _GLIBCXX_HAVE_READLINK: u32 = 1;
    pub const _GLIBCXX_HAVE_SECURE_GETENV: u32 = 1;
    pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
    pub const _GLIBCXX_HAVE_SINF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
    pub const _GLIBCXX_HAVE_SINL: u32 = 1;
    pub const _GLIBCXX_HAVE_SOCKATMARK: u32 = 1;
    pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
    pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
    pub const _GLIBCXX_HAVE_STACKTRACE: u32 = 1;
    pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
    pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
    pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
    pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
    pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
    pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
    pub const _GLIBCXX_HAVE_SYMLINK: u32 = 1;
    pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_MMAN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SDT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SOCKET_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
    pub const _GLIBCXX_HAVE_TANF: u32 = 1;
    pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
    pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
    pub const _GLIBCXX_HAVE_TANL: u32 = 1;
    pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
    pub const _GLIBCXX_HAVE_TIMESPEC_GET: u32 = 1;
    pub const _GLIBCXX_HAVE_TLS: u32 = 1;
    pub const _GLIBCXX_HAVE_TRUNCATE: u32 = 1;
    pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
    pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
    pub const _GLIBCXX_HAVE_UNLINKAT: u32 = 1;
    pub const _GLIBCXX_HAVE_USELOCALE: u32 = 1;
    pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
    pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
    pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
    pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
    pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
    pub const _GLIBCXX_LT_OBJDIR: &[u8; 7] = b".libs/\0";
    pub const _GLIBCXX_PACKAGE_BUGREPORT: &[u8; 1] = b"\0";
    pub const _GLIBCXX_PACKAGE_NAME: &[u8; 15] = b"package-unused\0";
    pub const _GLIBCXX_PACKAGE_STRING: &[u8; 30] = b"package-unused version-unused\0";
    pub const _GLIBCXX_PACKAGE_TARNAME: &[u8; 10] = b"libstdc++\0";
    pub const _GLIBCXX_PACKAGE_URL: &[u8; 1] = b"\0";
    pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &[u8; 15] = b"version-unused\0";
    pub const _GLIBCXX_STDC_HEADERS: u32 = 1;
    pub const _GLIBCXX_DARWIN_USE_64_BIT_INODE: u32 = 1;
    pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
    pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
    pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
    pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
    pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
    pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
    pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
    pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
    pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
    pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
    pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
    pub const _GLIBCXX_CAN_ALIGNAS_DESTRUCTIVE_SIZE: u32 = 1;
    pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
    pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
    pub const _GLIBCXX_RES_LIMITS: u32 = 1;
    pub const _GLIBCXX_STATIC_TZDATA: u32 = 1;
    pub const _GLIBCXX_STDIO_EOF: i32 = -1;
    pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
    pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
    pub const _GLIBCXX_SYMVER: u32 = 1;
    pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
    pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
    pub const _GLIBCXX_USE_C99: u32 = 1;
    pub const _GLIBCXX_USE_C99_COMPLEX_ARC: u32 = 1;
    pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_CTYPE: u32 = 1;
    pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_FENV: u32 = 1;
    pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_MATH_FUNCS: u32 = 1;
    pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_STDINT: u32 = 1;
    pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
    pub const _GLIBCXX_USE_CHDIR: u32 = 1;
    pub const _GLIBCXX_USE_CHMOD: u32 = 1;
    pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
    pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
    pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
    pub const _GLIBCXX_USE_DEV_RANDOM: u32 = 1;
    pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
    pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
    pub const _GLIBCXX_USE_FSEEKO_FTELLO: u32 = 1;
    pub const _GLIBCXX_USE_GETCWD: u32 = 1;
    pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
    pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
    pub const _GLIBCXX_USE_INIT_PRIORITY_ATTRIBUTE: u32 = 1;
    pub const _GLIBCXX_USE_LFS: u32 = 1;
    pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
    pub const _GLIBCXX_USE_LSTAT: u32 = 1;
    pub const _GLIBCXX_USE_MKDIR: u32 = 1;
    pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
    pub const _GLIBCXX_USE_NLS: u32 = 1;
    pub const _GLIBCXX_USE_NL_LANGINFO_L: u32 = 1;
    pub const _GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT: u32 = 1;
    pub const _GLIBCXX_USE_PTHREAD_RWLOCK_CLOCKLOCK: u32 = 1;
    pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
    pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
    pub const _GLIBCXX_USE_REALPATH: u32 = 1;
    pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
    pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
    pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
    pub const _GLIBCXX_USE_STRUCT_TM_TM_ZONE: u32 = 1;
    pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
    pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
    pub const _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_CXX20: u32 = 1;
    pub const _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_FCHAR8_T: u32 = 1;
    pub const _GLIBCXX_USE_UTIME: u32 = 1;
    pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
    pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
    pub const _GLIBCXX_VERBOSE: u32 = 1;
    pub const _GLIBCXX_X86_RDRAND: u32 = 1;
    pub const _GLIBCXX_X86_RDSEED: u32 = 1;
    pub const _GLIBCXX_ZONEINFO_DIR: &[u8; 20] = b"/usr/share/zoneinfo\0";
    pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
    pub const __glibcxx_incomplete_container_elements: u32 = 201505;
    pub const __glibcxx_uncaught_exceptions: u32 = 201411;
    pub const __glibcxx_allocator_traits_is_always_equal: u32 = 201411;
    pub const __glibcxx_is_null_pointer: u32 = 201309;
    pub const __glibcxx_result_of_sfinae: u32 = 201210;
    pub const __glibcxx_shared_ptr_arrays: u32 = 201611;
    pub const __glibcxx_is_swappable: u32 = 201603;
    pub const __glibcxx_void_t: u32 = 201411;
    pub const __glibcxx_enable_shared_from_this: u32 = 201603;
    pub const __glibcxx_math_spec_funcs: u32 = 201003;
    pub const __glibcxx_exchange_function: u32 = 201304;
    pub const __glibcxx_integer_sequence: u32 = 201304;
    pub const __glibcxx_integral_constant_callable: u32 = 201304;
    pub const __glibcxx_is_final: u32 = 201402;
    pub const __glibcxx_make_reverse_iterator: u32 = 201402;
    pub const __glibcxx_null_iterators: u32 = 201304;
    pub const __glibcxx_transformation_trait_aliases: u32 = 201304;
    pub const __glibcxx_transparent_operators: u32 = 201510;
    pub const __glibcxx_tuple_element_t: u32 = 201402;
    pub const __glibcxx_tuples_by_type: u32 = 201304;
    pub const __glibcxx_robust_nonmodifying_seq_ops: u32 = 201304;
    pub const __glibcxx_to_chars: u32 = 201611;
    pub const __glibcxx_chrono_udls: u32 = 201304;
    pub const __glibcxx_complex_udls: u32 = 201309;
    pub const __glibcxx_generic_associative_lookup: u32 = 201304;
    pub const __glibcxx_make_unique: u32 = 201304;
    pub const __glibcxx_quoted_string_io: u32 = 201304;
    pub const __glibcxx_shared_timed_mutex: u32 = 201402;
    pub const __glibcxx_string_udls: u32 = 201304;
    pub const __glibcxx_addressof_constexpr: u32 = 201603;
    pub const __glibcxx_any: u32 = 201606;
    pub const __glibcxx_apply: u32 = 201603;
    pub const __glibcxx_as_const: u32 = 201510;
    pub const __glibcxx_atomic_is_always_lock_free: u32 = 201603;
    pub const __glibcxx_bool_constant: u32 = 201505;
    pub const __glibcxx_byte: u32 = 201603;
    pub const __cpp_lib_byte: u32 = 201603;
    pub const __glibcxx_has_unique_object_representations: u32 = 201606;
    pub const __glibcxx_hardware_interference_size: u32 = 201703;
    pub const __glibcxx_invoke: u32 = 201411;
    pub const __glibcxx_is_aggregate: u32 = 201703;
    pub const __glibcxx_is_invocable: u32 = 201703;
    pub const __glibcxx_launder: u32 = 201606;
    pub const __glibcxx_logical_traits: u32 = 201510;
    pub const __glibcxx_make_from_tuple: u32 = 201606;
    pub const __glibcxx_not_fn: u32 = 201603;
    pub const __glibcxx_type_trait_variable_templates: u32 = 201510;
    pub const __glibcxx_variant: u32 = 202102;
    pub const __glibcxx_lcm: u32 = 201606;
    pub const __glibcxx_gcd: u32 = 201606;
    pub const __glibcxx_gcd_lcm: u32 = 201606;
    pub const __glibcxx_raw_memory_algorithms: u32 = 201606;
    pub const __glibcxx_array_constexpr: u32 = 201803;
    pub const __glibcxx_nonmember_container_access: u32 = 201411;
    pub const __glibcxx_clamp: u32 = 201603;
    pub const __glibcxx_sample: u32 = 201603;
    pub const __glibcxx_boyer_moore_searcher: u32 = 201603;
    pub const __glibcxx_chrono: u32 = 201611;
    pub const __glibcxx_execution: u32 = 201902;
    pub const __glibcxx_filesystem: u32 = 201703;
    pub const __glibcxx_hypot: u32 = 201603;
    pub const __glibcxx_map_try_emplace: u32 = 201411;
    pub const __glibcxx_math_special_functions: u32 = 201603;
    pub const __glibcxx_memory_resource: u32 = 201603;
    pub const __glibcxx_node_extract: u32 = 201606;
    pub const __glibcxx_parallel_algorithm: u32 = 201603;
    pub const __glibcxx_scoped_lock: u32 = 201703;
    pub const __glibcxx_shared_mutex: u32 = 201505;
    pub const __glibcxx_shared_ptr_weak_type: u32 = 201606;
    pub const __glibcxx_string_view: u32 = 201803;
    pub const __glibcxx_unordered_map_try_emplace: u32 = 201411;
    pub const __glibcxx_optional: u32 = 201606;
    pub const __glibcxx_constexpr_char_traits: u32 = 201611;
    pub const __glibcxx_constexpr_string: u32 = 201611;
    pub mod std {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub type nullptr_t = *const ::core::ffi::c_void;
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt21__glibcxx_assert_failPKciS0_S0_"]
            pub fn __glibcxx_assert_fail(
                __file: *const ::core::ffi::c_char,
                __line: ::core::ffi::c_int,
                __function: *const ::core::ffi::c_char,
                __condition: *const ::core::ffi::c_char,
            ) -> !;
        }
        pub type byte = ::core::ffi::c_uchar;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __byte_operand {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_bool__close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_bool__close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_char_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_char_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_signed_char_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_signed_char_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_unsigned_char_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_unsigned_char_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_wchar_t_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_wchar_t_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_char16_t_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_char16_t_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_char32_t_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_char32_t_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_short_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_short_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_unsigned_short_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_unsigned_short_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_int_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_int_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_unsigned_int_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_unsigned_int_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_long_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_long_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_unsigned_long_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_unsigned_long_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_long_long_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_long_long_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_unsigned_long_long_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_unsigned_long_long_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        pub type __byte_op_t = root::std::__byte_operand;
    }
    pub mod __gnu_cxx {
        #[allow(unused_imports)]
        use self::super::super::root;
    }
    #[repr(C)]
    #[repr(align(16))]
    #[derive(Debug, Copy, Clone)]
    pub struct max_align_t {
        pub __clang_max_align_nonce1: ::core::ffi::c_longlong,
        pub __bindgen_padding_0: u64,
        pub __clang_max_align_nonce2: u128,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of max_align_t"][::core::mem::size_of::<max_align_t>() - 32usize];
        ["Alignment of max_align_t"][::core::mem::align_of::<max_align_t>() - 16usize];
        ["Offset of field: max_align_t::__clang_max_align_nonce1"]
            [::core::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
        ["Offset of field: max_align_t::__clang_max_align_nonce2"]
            [::core::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
    };
    pub type QueryValveInterface = ::core::option::Option<
        unsafe extern "C" fn(
            pName: *const ::core::ffi::c_char,
            pReturnCode: *mut ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_void,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IServerPluginCallbacks {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct vsp_bridge_info {
        pub engineFactory: root::QueryValveInterface,
        pub gsFactory: root::QueryValveInterface,
        pub vsp_callbacks: *mut root::IServerPluginCallbacks,
        pub vsp_version: ::core::ffi::c_uint,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of vsp_bridge_info"][::core::mem::size_of::<vsp_bridge_info>() - 32usize];
        ["Alignment of vsp_bridge_info"][::core::mem::align_of::<vsp_bridge_info>() - 8usize];
        ["Offset of field: vsp_bridge_info::engineFactory"]
            [::core::mem::offset_of!(vsp_bridge_info, engineFactory) - 0usize];
        ["Offset of field: vsp_bridge_info::gsFactory"]
            [::core::mem::offset_of!(vsp_bridge_info, gsFactory) - 8usize];
        ["Offset of field: vsp_bridge_info::vsp_callbacks"]
            [::core::mem::offset_of!(vsp_bridge_info, vsp_callbacks) - 16usize];
        ["Offset of field: vsp_bridge_info::vsp_version"]
            [::core::mem::offset_of!(vsp_bridge_info, vsp_version) - 24usize];
    };
    #[repr(C)]
    pub struct IVspBridge__bindgen_vtable(::core::ffi::c_void);
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IVspBridge {
        pub vtable_: *const IVspBridge__bindgen_vtable,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of IVspBridge"][::core::mem::size_of::<IVspBridge>() - 8usize];
        ["Alignment of IVspBridge"][::core::mem::align_of::<IVspBridge>() - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct gamedll_bridge_info {
        pub engineFactory: root::QueryValveInterface,
        pub fsFactory: root::QueryValveInterface,
        pub physicsFactory: root::QueryValveInterface,
        pub gsFactory: root::QueryValveInterface,
        pub pGlobals: *mut ::core::ffi::c_void,
        pub dllVersion: ::core::ffi::c_uint,
        pub dllInterfaceName: *const ::core::ffi::c_char,
        pub isgd: *mut ::core::ffi::c_void,
        pub vsp_listener_path: *const ::core::ffi::c_char,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of gamedll_bridge_info"][::core::mem::size_of::<gamedll_bridge_info>() - 72usize];
        ["Alignment of gamedll_bridge_info"]
            [::core::mem::align_of::<gamedll_bridge_info>() - 8usize];
        ["Offset of field: gamedll_bridge_info::engineFactory"]
            [::core::mem::offset_of!(gamedll_bridge_info, engineFactory) - 0usize];
        ["Offset of field: gamedll_bridge_info::fsFactory"]
            [::core::mem::offset_of!(gamedll_bridge_info, fsFactory) - 8usize];
        ["Offset of field: gamedll_bridge_info::physicsFactory"]
            [::core::mem::offset_of!(gamedll_bridge_info, physicsFactory) - 16usize];
        ["Offset of field: gamedll_bridge_info::gsFactory"]
            [::core::mem::offset_of!(gamedll_bridge_info, gsFactory) - 24usize];
        ["Offset of field: gamedll_bridge_info::pGlobals"]
            [::core::mem::offset_of!(gamedll_bridge_info, pGlobals) - 32usize];
        ["Offset of field: gamedll_bridge_info::dllVersion"]
            [::core::mem::offset_of!(gamedll_bridge_info, dllVersion) - 40usize];
        ["Offset of field: gamedll_bridge_info::dllInterfaceName"]
            [::core::mem::offset_of!(gamedll_bridge_info, dllInterfaceName) - 48usize];
        ["Offset of field: gamedll_bridge_info::isgd"]
            [::core::mem::offset_of!(gamedll_bridge_info, isgd) - 56usize];
        ["Offset of field: gamedll_bridge_info::vsp_listener_path"]
            [::core::mem::offset_of!(gamedll_bridge_info, vsp_listener_path) - 64usize];
    };
    #[repr(C)]
    pub struct IGameDllBridge__bindgen_vtable(::core::ffi::c_void);
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IGameDllBridge {
        pub vtable_: *const IGameDllBridge__bindgen_vtable,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of IGameDllBridge"][::core::mem::size_of::<IGameDllBridge>() - 8usize];
        ["Alignment of IGameDllBridge"][::core::mem::align_of::<IGameDllBridge>() - 8usize];
    };
    unsafe extern "C" {
        #[link_name = "\u{1}_Z17mm_GameDllRequestPKcPi"]
        pub fn mm_GameDllRequest(
            name: *const ::core::ffi::c_char,
            ret: *mut ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub static mut gamedll_bridge: *mut root::IGameDllBridge;
    }
}
