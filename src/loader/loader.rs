/* automatically generated by rust-bindgen 0.71.1 */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[repr(C)]
    pub struct __BindgenUnionField<T>(::core::marker::PhantomData<T>);
    impl<T> __BindgenUnionField<T> {
        #[inline]
        pub const fn new() -> Self {
            __BindgenUnionField(::core::marker::PhantomData)
        }
        #[inline]
        pub unsafe fn as_ref(&self) -> &T {
            ::core::mem::transmute(self)
        }
        #[inline]
        pub unsafe fn as_mut(&mut self) -> &mut T {
            ::core::mem::transmute(self)
        }
    }
    impl<T> ::core::default::Default for __BindgenUnionField<T> {
        #[inline]
        fn default() -> Self {
            Self::new()
        }
    }
    impl<T> ::core::clone::Clone for __BindgenUnionField<T> {
        #[inline]
        fn clone(&self) -> Self {
            *self
        }
    }
    impl<T> ::core::marker::Copy for __BindgenUnionField<T> {}
    impl<T> ::core::fmt::Debug for __BindgenUnionField<T> {
        fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            fmt.write_str("__BindgenUnionField")
        }
    }
    impl<T> ::core::hash::Hash for __BindgenUnionField<T> {
        fn hash<H: ::core::hash::Hasher>(&self, _state: &mut H) {}
    }
    impl<T> ::core::cmp::PartialEq for __BindgenUnionField<T> {
        fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
            true
        }
    }
    impl<T> ::core::cmp::Eq for __BindgenUnionField<T> {}
    #[allow(unused_imports)]
    use self::super::root;
    pub const POSIX: u32 = 1;
    pub const LINUX: u32 = 1;
    pub const _LINUX: u32 = 1;
    pub const COMPILER_GCC: u32 = 1;
    pub const SH_SYS_WIN32: u32 = 1;
    pub const SH_SYS_LINUX: u32 = 2;
    pub const SH_SYS_APPLE: u32 = 3;
    pub const SH_XP_POSIX: u32 = 10;
    pub const SH_XP_WINAPI: u32 = 20;
    pub const SH_COMP_GCC: u32 = 1;
    pub const SH_COMP_MSVC: u32 = 2;
    pub const SH_SYS: u32 = 2;
    pub const SH_XP: u32 = 10;
    pub const SH_COMP: u32 = 1;
    pub const _DLFCN_H: u32 = 1;
    pub const _FEATURES_H: u32 = 1;
    pub const _ISOC95_SOURCE: u32 = 1;
    pub const _ISOC99_SOURCE: u32 = 1;
    pub const _ISOC11_SOURCE: u32 = 1;
    pub const _ISOC23_SOURCE: u32 = 1;
    pub const _ISOC2Y_SOURCE: u32 = 1;
    pub const _POSIX_SOURCE: u32 = 1;
    pub const _POSIX_C_SOURCE: u32 = 200809;
    pub const _XOPEN_SOURCE: u32 = 700;
    pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
    pub const _LARGEFILE64_SOURCE: u32 = 1;
    pub const _DEFAULT_SOURCE: u32 = 1;
    pub const _ATFILE_SOURCE: u32 = 1;
    pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
    pub const __GLIBC_USE_ISOC2Y: u32 = 1;
    pub const __GLIBC_USE_ISOC23: u32 = 1;
    pub const __USE_ISOC11: u32 = 1;
    pub const __USE_ISOC99: u32 = 1;
    pub const __USE_ISOC95: u32 = 1;
    pub const __USE_ISOCXX11: u32 = 1;
    pub const __USE_POSIX: u32 = 1;
    pub const __USE_POSIX2: u32 = 1;
    pub const __USE_POSIX199309: u32 = 1;
    pub const __USE_POSIX199506: u32 = 1;
    pub const __USE_XOPEN2K: u32 = 1;
    pub const __USE_XOPEN2K8: u32 = 1;
    pub const __USE_XOPEN: u32 = 1;
    pub const __USE_XOPEN_EXTENDED: u32 = 1;
    pub const __USE_UNIX98: u32 = 1;
    pub const _LARGEFILE_SOURCE: u32 = 1;
    pub const __USE_XOPEN2K8XSI: u32 = 1;
    pub const __USE_XOPEN2KXSI: u32 = 1;
    pub const __USE_LARGEFILE: u32 = 1;
    pub const __USE_LARGEFILE64: u32 = 1;
    pub const __WORDSIZE: u32 = 64;
    pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
    pub const __SYSCALL_WORDSIZE: u32 = 64;
    pub const __TIMESIZE: u32 = 64;
    pub const __USE_TIME_BITS64: u32 = 1;
    pub const __USE_MISC: u32 = 1;
    pub const __USE_ATFILE: u32 = 1;
    pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
    pub const __USE_GNU: u32 = 1;
    pub const __USE_FORTIFY_LEVEL: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
    pub const __GLIBC_USE_C23_STRTOL: u32 = 1;
    pub const _STDC_PREDEF_H: u32 = 1;
    pub const __STDC_IEC_559__: u32 = 1;
    pub const __STDC_IEC_60559_BFP__: u32 = 201404;
    pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
    pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
    pub const __STDC_ISO_10646__: u32 = 201706;
    pub const __GNU_LIBRARY__: u32 = 6;
    pub const __GLIBC__: u32 = 2;
    pub const __GLIBC_MINOR__: u32 = 41;
    pub const _SYS_CDEFS_H: u32 = 1;
    pub const __glibc_c99_flexarr_available: u32 = 1;
    pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
    pub const __HAVE_GENERIC_SELECTION: u32 = 0;
    pub const RTLD_LAZY: u32 = 1;
    pub const RTLD_NOW: u32 = 2;
    pub const RTLD_BINDING_MASK: u32 = 3;
    pub const RTLD_NOLOAD: u32 = 4;
    pub const RTLD_DEEPBIND: u32 = 8;
    pub const RTLD_GLOBAL: u32 = 256;
    pub const RTLD_LOCAL: u32 = 0;
    pub const RTLD_NODELETE: u32 = 4096;
    pub const DLFO_STRUCT_HAS_EH_DBASE: u32 = 0;
    pub const DLFO_STRUCT_HAS_EH_COUNT: u32 = 0;
    pub const LM_ID_BASE: u32 = 0;
    pub const LM_ID_NEWLM: i32 = -1;
    pub const _DIRENT_H: u32 = 1;
    pub const _BITS_TYPES_H: u32 = 1;
    pub const _BITS_TYPESIZES_H: u32 = 1;
    pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
    pub const __INO_T_MATCHES_INO64_T: u32 = 1;
    pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
    pub const __STATFS_MATCHES_STATFS64: u32 = 1;
    pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
    pub const __FD_SETSIZE: u32 = 1024;
    pub const _BITS_TIME64_H: u32 = 1;
    pub const _DIRENT_MATCHES_DIRENT64: u32 = 1;
    pub const _BITS_POSIX1_LIM_H: u32 = 1;
    pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
    pub const _POSIX_AIO_MAX: u32 = 1;
    pub const _POSIX_ARG_MAX: u32 = 4096;
    pub const _POSIX_CHILD_MAX: u32 = 25;
    pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
    pub const _POSIX_HOST_NAME_MAX: u32 = 255;
    pub const _POSIX_LINK_MAX: u32 = 8;
    pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
    pub const _POSIX_MAX_CANON: u32 = 255;
    pub const _POSIX_MAX_INPUT: u32 = 255;
    pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
    pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
    pub const _POSIX_NAME_MAX: u32 = 14;
    pub const _POSIX_NGROUPS_MAX: u32 = 8;
    pub const _POSIX_OPEN_MAX: u32 = 20;
    pub const _POSIX_FD_SETSIZE: u32 = 20;
    pub const _POSIX_PATH_MAX: u32 = 256;
    pub const _POSIX_PIPE_BUF: u32 = 512;
    pub const _POSIX_RE_DUP_MAX: u32 = 255;
    pub const _POSIX_RTSIG_MAX: u32 = 8;
    pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
    pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
    pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
    pub const _POSIX_SSIZE_MAX: u32 = 32767;
    pub const _POSIX_STREAM_MAX: u32 = 8;
    pub const _POSIX_SYMLINK_MAX: u32 = 255;
    pub const _POSIX_SYMLOOP_MAX: u32 = 8;
    pub const _POSIX_TIMER_MAX: u32 = 32;
    pub const _POSIX_TTY_NAME_MAX: u32 = 9;
    pub const _POSIX_TZNAME_MAX: u32 = 6;
    pub const _POSIX_QLIMIT: u32 = 1;
    pub const _POSIX_HIWAT: u32 = 512;
    pub const _POSIX_UIO_MAXIOV: u32 = 16;
    pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
    pub const NR_OPEN: u32 = 1024;
    pub const NGROUPS_MAX: u32 = 65536;
    pub const ARG_MAX: u32 = 131072;
    pub const LINK_MAX: u32 = 127;
    pub const MAX_CANON: u32 = 255;
    pub const MAX_INPUT: u32 = 255;
    pub const NAME_MAX: u32 = 255;
    pub const PATH_MAX: u32 = 4096;
    pub const PIPE_BUF: u32 = 4096;
    pub const XATTR_NAME_MAX: u32 = 255;
    pub const XATTR_SIZE_MAX: u32 = 65536;
    pub const XATTR_LIST_MAX: u32 = 65536;
    pub const RTSIG_MAX: u32 = 32;
    pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
    pub const PTHREAD_KEYS_MAX: u32 = 1024;
    pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
    pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
    pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
    pub const AIO_PRIO_DELTA_MAX: u32 = 20;
    pub const __SC_THREAD_STACK_MIN_VALUE: u32 = 75;
    pub const DELAYTIMER_MAX: u32 = 2147483647;
    pub const TTY_NAME_MAX: u32 = 32;
    pub const LOGIN_NAME_MAX: u32 = 256;
    pub const HOST_NAME_MAX: u32 = 64;
    pub const MQ_PRIO_MAX: u32 = 32768;
    pub const SEM_VALUE_MAX: u32 = 2147483647;
    pub const MAXNAMLEN: u32 = 255;
    pub const _STDINT_H: u32 = 1;
    pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_EXT: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
    pub const _BITS_WCHAR_H: u32 = 1;
    pub const _BITS_STDINT_INTN_H: u32 = 1;
    pub const _BITS_STDINT_UINTN_H: u32 = 1;
    pub const _BITS_STDINT_LEAST_H: u32 = 1;
    pub const INT8_MIN: i32 = -128;
    pub const INT16_MIN: i32 = -32768;
    pub const INT32_MIN: i32 = -2147483648;
    pub const INT8_MAX: u32 = 127;
    pub const INT16_MAX: u32 = 32767;
    pub const INT32_MAX: u32 = 2147483647;
    pub const UINT8_MAX: u32 = 255;
    pub const UINT16_MAX: u32 = 65535;
    pub const UINT32_MAX: u32 = 4294967295;
    pub const INT_LEAST8_MIN: i32 = -128;
    pub const INT_LEAST16_MIN: i32 = -32768;
    pub const INT_LEAST32_MIN: i32 = -2147483648;
    pub const INT_LEAST8_MAX: u32 = 127;
    pub const INT_LEAST16_MAX: u32 = 32767;
    pub const INT_LEAST32_MAX: u32 = 2147483647;
    pub const UINT_LEAST8_MAX: u32 = 255;
    pub const UINT_LEAST16_MAX: u32 = 65535;
    pub const UINT_LEAST32_MAX: u32 = 4294967295;
    pub const INT_FAST8_MIN: i32 = -128;
    pub const INT_FAST16_MIN: i64 = -9223372036854775808;
    pub const INT_FAST32_MIN: i64 = -9223372036854775808;
    pub const INT_FAST8_MAX: u32 = 127;
    pub const INT_FAST16_MAX: u64 = 9223372036854775807;
    pub const INT_FAST32_MAX: u64 = 9223372036854775807;
    pub const UINT_FAST8_MAX: u32 = 255;
    pub const UINT_FAST16_MAX: i32 = -1;
    pub const UINT_FAST32_MAX: i32 = -1;
    pub const INTPTR_MIN: i64 = -9223372036854775808;
    pub const INTPTR_MAX: u64 = 9223372036854775807;
    pub const UINTPTR_MAX: i32 = -1;
    pub const PTRDIFF_MIN: i64 = -9223372036854775808;
    pub const PTRDIFF_MAX: u64 = 9223372036854775807;
    pub const SIG_ATOMIC_MIN: i32 = -2147483648;
    pub const SIG_ATOMIC_MAX: u32 = 2147483647;
    pub const SIZE_MAX: i32 = -1;
    pub const WINT_MIN: u32 = 0;
    pub const WINT_MAX: u32 = 4294967295;
    pub const INT8_WIDTH: u32 = 8;
    pub const UINT8_WIDTH: u32 = 8;
    pub const INT16_WIDTH: u32 = 16;
    pub const UINT16_WIDTH: u32 = 16;
    pub const INT32_WIDTH: u32 = 32;
    pub const UINT32_WIDTH: u32 = 32;
    pub const INT64_WIDTH: u32 = 64;
    pub const UINT64_WIDTH: u32 = 64;
    pub const INT_LEAST8_WIDTH: u32 = 8;
    pub const UINT_LEAST8_WIDTH: u32 = 8;
    pub const INT_LEAST16_WIDTH: u32 = 16;
    pub const UINT_LEAST16_WIDTH: u32 = 16;
    pub const INT_LEAST32_WIDTH: u32 = 32;
    pub const UINT_LEAST32_WIDTH: u32 = 32;
    pub const INT_LEAST64_WIDTH: u32 = 64;
    pub const UINT_LEAST64_WIDTH: u32 = 64;
    pub const INT_FAST8_WIDTH: u32 = 8;
    pub const UINT_FAST8_WIDTH: u32 = 8;
    pub const INT_FAST16_WIDTH: u32 = 64;
    pub const UINT_FAST16_WIDTH: u32 = 64;
    pub const INT_FAST32_WIDTH: u32 = 64;
    pub const UINT_FAST32_WIDTH: u32 = 64;
    pub const INT_FAST64_WIDTH: u32 = 64;
    pub const UINT_FAST64_WIDTH: u32 = 64;
    pub const INTPTR_WIDTH: u32 = 64;
    pub const UINTPTR_WIDTH: u32 = 64;
    pub const INTMAX_WIDTH: u32 = 64;
    pub const UINTMAX_WIDTH: u32 = 64;
    pub const PTRDIFF_WIDTH: u32 = 64;
    pub const SIG_ATOMIC_WIDTH: u32 = 32;
    pub const SIZE_WIDTH: u32 = 64;
    pub const WCHAR_WIDTH: u32 = 32;
    pub const WINT_WIDTH: u32 = 32;
    pub const _UNISTD_H: u32 = 1;
    pub const _POSIX_VERSION: u32 = 200809;
    pub const __POSIX2_THIS_VERSION: u32 = 200809;
    pub const _POSIX2_VERSION: u32 = 200809;
    pub const _POSIX2_C_VERSION: u32 = 200809;
    pub const _POSIX2_C_BIND: u32 = 200809;
    pub const _POSIX2_C_DEV: u32 = 200809;
    pub const _POSIX2_SW_DEV: u32 = 200809;
    pub const _POSIX2_LOCALEDEF: u32 = 200809;
    pub const _XOPEN_VERSION: u32 = 700;
    pub const _XOPEN_XCU_VERSION: u32 = 4;
    pub const _XOPEN_XPG2: u32 = 1;
    pub const _XOPEN_XPG3: u32 = 1;
    pub const _XOPEN_XPG4: u32 = 1;
    pub const _XOPEN_UNIX: u32 = 1;
    pub const _XOPEN_ENH_I18N: u32 = 1;
    pub const _XOPEN_LEGACY: u32 = 1;
    pub const _BITS_POSIX_OPT_H: u32 = 1;
    pub const _POSIX_JOB_CONTROL: u32 = 1;
    pub const _POSIX_SAVED_IDS: u32 = 1;
    pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
    pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
    pub const _POSIX_FSYNC: u32 = 200809;
    pub const _POSIX_MAPPED_FILES: u32 = 200809;
    pub const _POSIX_MEMLOCK: u32 = 200809;
    pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
    pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
    pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
    pub const _POSIX_VDISABLE: u8 = 0u8;
    pub const _POSIX_NO_TRUNC: u32 = 1;
    pub const _XOPEN_REALTIME: u32 = 1;
    pub const _XOPEN_REALTIME_THREADS: u32 = 1;
    pub const _XOPEN_SHM: u32 = 1;
    pub const _POSIX_THREADS: u32 = 200809;
    pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
    pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
    pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
    pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
    pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
    pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
    pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
    pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
    pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
    pub const _POSIX_SEMAPHORES: u32 = 200809;
    pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
    pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
    pub const _POSIX_ASYNC_IO: u32 = 1;
    pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
    pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
    pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
    pub const _LFS_LARGEFILE: u32 = 1;
    pub const _LFS64_LARGEFILE: u32 = 1;
    pub const _LFS64_STDIO: u32 = 1;
    pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
    pub const _POSIX_CPUTIME: u32 = 0;
    pub const _POSIX_THREAD_CPUTIME: u32 = 0;
    pub const _POSIX_REGEXP: u32 = 1;
    pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
    pub const _POSIX_SHELL: u32 = 1;
    pub const _POSIX_TIMEOUTS: u32 = 200809;
    pub const _POSIX_SPIN_LOCKS: u32 = 200809;
    pub const _POSIX_SPAWN: u32 = 200809;
    pub const _POSIX_TIMERS: u32 = 200809;
    pub const _POSIX_BARRIERS: u32 = 200809;
    pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
    pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
    pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
    pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
    pub const _POSIX_ADVISORY_INFO: u32 = 200809;
    pub const _POSIX_IPV6: u32 = 200809;
    pub const _POSIX_RAW_SOCKETS: u32 = 200809;
    pub const _POSIX2_CHAR_TERM: u32 = 200809;
    pub const _POSIX_SPORADIC_SERVER: i32 = -1;
    pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
    pub const _POSIX_TRACE: i32 = -1;
    pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
    pub const _POSIX_TRACE_INHERIT: i32 = -1;
    pub const _POSIX_TRACE_LOG: i32 = -1;
    pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
    pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
    pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
    pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
    pub const _POSIX_V7_LP64_OFF64: u32 = 1;
    pub const _POSIX_V6_LP64_OFF64: u32 = 1;
    pub const _XBS5_LP64_OFF64: u32 = 1;
    pub const __ILP32_OFF32_CFLAGS: &[u8; 5] = b"-m32\0";
    pub const __ILP32_OFF32_LDFLAGS: &[u8; 5] = b"-m32\0";
    pub const __ILP32_OFFBIG_CFLAGS: &[u8; 48] =
        b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
    pub const __ILP32_OFFBIG_LDFLAGS: &[u8; 5] = b"-m32\0";
    pub const __LP64_OFF64_CFLAGS: &[u8; 5] = b"-m64\0";
    pub const __LP64_OFF64_LDFLAGS: &[u8; 5] = b"-m64\0";
    pub const STDIN_FILENO: u32 = 0;
    pub const STDOUT_FILENO: u32 = 1;
    pub const STDERR_FILENO: u32 = 2;
    pub const R_OK: u32 = 4;
    pub const W_OK: u32 = 2;
    pub const X_OK: u32 = 1;
    pub const F_OK: u32 = 0;
    pub const SEEK_SET: u32 = 0;
    pub const SEEK_CUR: u32 = 1;
    pub const SEEK_END: u32 = 2;
    pub const SEEK_DATA: u32 = 3;
    pub const SEEK_HOLE: u32 = 4;
    pub const L_SET: u32 = 0;
    pub const L_INCR: u32 = 1;
    pub const L_XTND: u32 = 2;
    pub const _GETOPT_POSIX_H: u32 = 1;
    pub const _GETOPT_CORE_H: u32 = 1;
    pub const F_ULOCK: u32 = 0;
    pub const F_LOCK: u32 = 1;
    pub const F_TLOCK: u32 = 2;
    pub const F_TEST: u32 = 3;
    pub const CLOSE_RANGE_UNSHARE: u32 = 2;
    pub const CLOSE_RANGE_CLOEXEC: u32 = 4;
    pub const PLATFORM_MAX_PATH: u32 = 4096;
    pub const PATH_SEP_STR: &[u8; 2] = b"/\0";
    pub const PATH_SEP_CHAR: u8 = 47u8;
    pub const ALT_SEP_CHAR: u8 = 92u8;
    pub const _GLIBCXX_CSTDDEF: u32 = 1;
    pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
    pub const _GLIBCXX_RELEASE: u32 = 15;
    pub const __GLIBCXX__: u32 = 20250425;
    pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
    pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
    pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
    pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
    pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
    pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
    pub const _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED: u32 = 1;
    pub const _GLIBCXX_ASSERTIONS: u32 = 1;
    pub const _GLIBCXX_VERBOSE_ASSERT: u32 = 1;
    pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
    pub const _GLIBCXX_OS_DEFINES: u32 = 1;
    pub const __NO_CTYPE: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOAT128_MATH: u32 = 1;
    pub const _GLIBCXX_MAY_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
    pub const _GLIBCXX_GTHREAD_USE_WEAK: u32 = 0;
    pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
    pub const _GLIBCXX_USE_STD_SPEC_FUNCS: u32 = 1;
    pub const _GLIBCXX_FAST_MATH: u32 = 0;
    pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
    pub const _GLIBCXX_FLOAT_IS_IEEE_BINARY32: u32 = 1;
    pub const _GLIBCXX_DOUBLE_IS_IEEE_BINARY64: u32 = 1;
    pub const _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP: u32 = 1;
    pub const _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE: u32 = 1;
    pub const _GLIBCXX_HAVE_BUILTIN_LAUNDER: u32 = 1;
    pub const _PSTL_VERSION: u32 = 17000;
    pub const _PSTL_VERSION_MAJOR: u32 = 17;
    pub const _PSTL_VERSION_MINOR: u32 = 0;
    pub const _PSTL_VERSION_PATCH: u32 = 0;
    pub const _PSTL_USAGE_WARNINGS: u32 = 0;
    pub const _PSTL_PRAGMA_LOCATION: &[u8; 26] = b" [Parallel STL message]: \0";
    pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
    pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
    pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
    pub const _GLIBCXX_HAVE_ARC4RANDOM: u32 = 1;
    pub const _GLIBCXX_HAVE_ARPA_INET_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
    pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
    pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
    pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
    pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
    pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
    pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
    pub const _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY: u32 = 1;
    pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
    pub const _GLIBCXX_HAVE_C99_FLT_EVAL_TYPES: u32 = 1;
    pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
    pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
    pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
    pub const _GLIBCXX_HAVE_COSF: u32 = 1;
    pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
    pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
    pub const _GLIBCXX_HAVE_COSL: u32 = 1;
    pub const _GLIBCXX_HAVE_DECL_STRNLEN: u32 = 1;
    pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_DIRFD: u32 = 1;
    pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
    pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
    pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
    pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FDOPENDIR: u32 = 1;
    pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
    pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
    pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
    pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_GETENTROPY: u32 = 1;
    pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
    pub const _GLIBCXX_HAVE_GETS: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
    pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
    pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
    pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
    pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
    pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
    pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
    pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
    pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
    pub const _GLIBCXX_HAVE_LINK: u32 = 1;
    pub const _GLIBCXX_HAVE_LINK_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_RANDOM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_TYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
    pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
    pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
    pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
    pub const _GLIBCXX_HAVE_LSEEK: u32 = 1;
    pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
    pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
    pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
    pub const _GLIBCXX_HAVE_MODF: u32 = 1;
    pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
    pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
    pub const _GLIBCXX_HAVE_NETDB_H: u32 = 1;
    pub const _GLIBCXX_HAVE_NETINET_IN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_NETINET_TCP_H: u32 = 1;
    pub const _GLIBCXX_HAVE_OPENAT: u32 = 1;
    pub const _GLIBCXX_HAVE_O_NONBLOCK: u32 = 1;
    pub const _GLIBCXX_HAVE_POLL: u32 = 1;
    pub const _GLIBCXX_HAVE_POLL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
    pub const _GLIBCXX_HAVE_POSIX_SEMAPHORE: u32 = 1;
    pub const _GLIBCXX_HAVE_POWF: u32 = 1;
    pub const _GLIBCXX_HAVE_POWL: u32 = 1;
    pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
    pub const _GLIBCXX_HAVE_READLINK: u32 = 1;
    pub const _GLIBCXX_HAVE_SECURE_GETENV: u32 = 1;
    pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
    pub const _GLIBCXX_HAVE_SINF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
    pub const _GLIBCXX_HAVE_SINL: u32 = 1;
    pub const _GLIBCXX_HAVE_SOCKATMARK: u32 = 1;
    pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
    pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
    pub const _GLIBCXX_HAVE_STACKTRACE: u32 = 1;
    pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
    pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
    pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
    pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
    pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
    pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
    pub const _GLIBCXX_HAVE_SYMLINK: u32 = 1;
    pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_MMAN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SDT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SOCKET_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
    pub const _GLIBCXX_HAVE_TANF: u32 = 1;
    pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
    pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
    pub const _GLIBCXX_HAVE_TANL: u32 = 1;
    pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
    pub const _GLIBCXX_HAVE_TIMESPEC_GET: u32 = 1;
    pub const _GLIBCXX_HAVE_TLS: u32 = 1;
    pub const _GLIBCXX_HAVE_TRUNCATE: u32 = 1;
    pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
    pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
    pub const _GLIBCXX_HAVE_UNLINKAT: u32 = 1;
    pub const _GLIBCXX_HAVE_USELOCALE: u32 = 1;
    pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
    pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
    pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
    pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
    pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
    pub const _GLIBCXX_LT_OBJDIR: &[u8; 7] = b".libs/\0";
    pub const _GLIBCXX_PACKAGE_BUGREPORT: &[u8; 1] = b"\0";
    pub const _GLIBCXX_PACKAGE_NAME: &[u8; 15] = b"package-unused\0";
    pub const _GLIBCXX_PACKAGE_STRING: &[u8; 30] = b"package-unused version-unused\0";
    pub const _GLIBCXX_PACKAGE_TARNAME: &[u8; 10] = b"libstdc++\0";
    pub const _GLIBCXX_PACKAGE_URL: &[u8; 1] = b"\0";
    pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &[u8; 15] = b"version-unused\0";
    pub const _GLIBCXX_STDC_HEADERS: u32 = 1;
    pub const _GLIBCXX_DARWIN_USE_64_BIT_INODE: u32 = 1;
    pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
    pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
    pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
    pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
    pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
    pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
    pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
    pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
    pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
    pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
    pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
    pub const _GLIBCXX_CAN_ALIGNAS_DESTRUCTIVE_SIZE: u32 = 1;
    pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
    pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
    pub const _GLIBCXX_RES_LIMITS: u32 = 1;
    pub const _GLIBCXX_STATIC_TZDATA: u32 = 1;
    pub const _GLIBCXX_STDIO_EOF: i32 = -1;
    pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
    pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
    pub const _GLIBCXX_SYMVER: u32 = 1;
    pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
    pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
    pub const _GLIBCXX_USE_C99: u32 = 1;
    pub const _GLIBCXX_USE_C99_COMPLEX_ARC: u32 = 1;
    pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_CTYPE: u32 = 1;
    pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_FENV: u32 = 1;
    pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_MATH_FUNCS: u32 = 1;
    pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_STDINT: u32 = 1;
    pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
    pub const _GLIBCXX_USE_CHDIR: u32 = 1;
    pub const _GLIBCXX_USE_CHMOD: u32 = 1;
    pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
    pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
    pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
    pub const _GLIBCXX_USE_DEV_RANDOM: u32 = 1;
    pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
    pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
    pub const _GLIBCXX_USE_FSEEKO_FTELLO: u32 = 1;
    pub const _GLIBCXX_USE_GETCWD: u32 = 1;
    pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
    pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
    pub const _GLIBCXX_USE_INIT_PRIORITY_ATTRIBUTE: u32 = 1;
    pub const _GLIBCXX_USE_LFS: u32 = 1;
    pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
    pub const _GLIBCXX_USE_LSTAT: u32 = 1;
    pub const _GLIBCXX_USE_MKDIR: u32 = 1;
    pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
    pub const _GLIBCXX_USE_NLS: u32 = 1;
    pub const _GLIBCXX_USE_NL_LANGINFO_L: u32 = 1;
    pub const _GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT: u32 = 1;
    pub const _GLIBCXX_USE_PTHREAD_RWLOCK_CLOCKLOCK: u32 = 1;
    pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
    pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
    pub const _GLIBCXX_USE_REALPATH: u32 = 1;
    pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
    pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
    pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
    pub const _GLIBCXX_USE_STRUCT_TM_TM_ZONE: u32 = 1;
    pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
    pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
    pub const _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_CXX20: u32 = 1;
    pub const _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_FCHAR8_T: u32 = 1;
    pub const _GLIBCXX_USE_UTIME: u32 = 1;
    pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
    pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
    pub const _GLIBCXX_VERBOSE: u32 = 1;
    pub const _GLIBCXX_X86_RDRAND: u32 = 1;
    pub const _GLIBCXX_X86_RDSEED: u32 = 1;
    pub const _GLIBCXX_ZONEINFO_DIR: &[u8; 20] = b"/usr/share/zoneinfo\0";
    pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
    pub const __glibcxx_incomplete_container_elements: u32 = 201505;
    pub const __glibcxx_uncaught_exceptions: u32 = 201411;
    pub const __glibcxx_allocator_traits_is_always_equal: u32 = 201411;
    pub const __glibcxx_is_null_pointer: u32 = 201309;
    pub const __glibcxx_result_of_sfinae: u32 = 201210;
    pub const __glibcxx_shared_ptr_arrays: u32 = 201611;
    pub const __glibcxx_is_swappable: u32 = 201603;
    pub const __glibcxx_void_t: u32 = 201411;
    pub const __glibcxx_enable_shared_from_this: u32 = 201603;
    pub const __glibcxx_math_spec_funcs: u32 = 201003;
    pub const __glibcxx_exchange_function: u32 = 201304;
    pub const __glibcxx_integer_sequence: u32 = 201304;
    pub const __glibcxx_integral_constant_callable: u32 = 201304;
    pub const __glibcxx_is_final: u32 = 201402;
    pub const __glibcxx_make_reverse_iterator: u32 = 201402;
    pub const __glibcxx_null_iterators: u32 = 201304;
    pub const __glibcxx_transformation_trait_aliases: u32 = 201304;
    pub const __glibcxx_transparent_operators: u32 = 201510;
    pub const __glibcxx_tuple_element_t: u32 = 201402;
    pub const __glibcxx_tuples_by_type: u32 = 201304;
    pub const __glibcxx_robust_nonmodifying_seq_ops: u32 = 201304;
    pub const __glibcxx_to_chars: u32 = 201611;
    pub const __glibcxx_chrono_udls: u32 = 201304;
    pub const __glibcxx_complex_udls: u32 = 201309;
    pub const __glibcxx_generic_associative_lookup: u32 = 201304;
    pub const __glibcxx_make_unique: u32 = 201304;
    pub const __glibcxx_quoted_string_io: u32 = 201304;
    pub const __glibcxx_shared_timed_mutex: u32 = 201402;
    pub const __glibcxx_string_udls: u32 = 201304;
    pub const __glibcxx_addressof_constexpr: u32 = 201603;
    pub const __glibcxx_any: u32 = 201606;
    pub const __glibcxx_apply: u32 = 201603;
    pub const __glibcxx_as_const: u32 = 201510;
    pub const __glibcxx_atomic_is_always_lock_free: u32 = 201603;
    pub const __glibcxx_bool_constant: u32 = 201505;
    pub const __glibcxx_byte: u32 = 201603;
    pub const __cpp_lib_byte: u32 = 201603;
    pub const __glibcxx_has_unique_object_representations: u32 = 201606;
    pub const __glibcxx_hardware_interference_size: u32 = 201703;
    pub const __glibcxx_invoke: u32 = 201411;
    pub const __glibcxx_is_aggregate: u32 = 201703;
    pub const __glibcxx_is_invocable: u32 = 201703;
    pub const __glibcxx_launder: u32 = 201606;
    pub const __glibcxx_logical_traits: u32 = 201510;
    pub const __glibcxx_make_from_tuple: u32 = 201606;
    pub const __glibcxx_not_fn: u32 = 201603;
    pub const __glibcxx_type_trait_variable_templates: u32 = 201510;
    pub const __glibcxx_variant: u32 = 202102;
    pub const __glibcxx_lcm: u32 = 201606;
    pub const __glibcxx_gcd: u32 = 201606;
    pub const __glibcxx_gcd_lcm: u32 = 201606;
    pub const __glibcxx_raw_memory_algorithms: u32 = 201606;
    pub const __glibcxx_array_constexpr: u32 = 201803;
    pub const __glibcxx_nonmember_container_access: u32 = 201411;
    pub const __glibcxx_clamp: u32 = 201603;
    pub const __glibcxx_sample: u32 = 201603;
    pub const __glibcxx_boyer_moore_searcher: u32 = 201603;
    pub const __glibcxx_chrono: u32 = 201611;
    pub const __glibcxx_execution: u32 = 201902;
    pub const __glibcxx_filesystem: u32 = 201703;
    pub const __glibcxx_hypot: u32 = 201603;
    pub const __glibcxx_map_try_emplace: u32 = 201411;
    pub const __glibcxx_math_special_functions: u32 = 201603;
    pub const __glibcxx_memory_resource: u32 = 201603;
    pub const __glibcxx_node_extract: u32 = 201606;
    pub const __glibcxx_parallel_algorithm: u32 = 201603;
    pub const __glibcxx_scoped_lock: u32 = 201703;
    pub const __glibcxx_shared_mutex: u32 = 201505;
    pub const __glibcxx_shared_ptr_weak_type: u32 = 201606;
    pub const __glibcxx_string_view: u32 = 201803;
    pub const __glibcxx_unordered_map_try_emplace: u32 = 201411;
    pub const __glibcxx_optional: u32 = 201606;
    pub const __glibcxx_constexpr_char_traits: u32 = 201611;
    pub const __glibcxx_constexpr_string: u32 = 201611;
    unsafe extern "C" {
        pub fn _dl_mcount_wrapper_check(__selfpc: *mut ::core::ffi::c_void);
    }
    pub type Lmid_t = ::core::ffi::c_long;
    unsafe extern "C" {
        pub fn dlopen(
            __file: *const ::core::ffi::c_char,
            __mode: ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn dlclose(__handle: *mut ::core::ffi::c_void) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn dlsym(
            __handle: *mut ::core::ffi::c_void,
            __name: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn dlmopen(
            __nsid: root::Lmid_t,
            __file: *const ::core::ffi::c_char,
            __mode: ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn dlvsym(
            __handle: *mut ::core::ffi::c_void,
            __name: *const ::core::ffi::c_char,
            __version: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn dlerror() -> *mut ::core::ffi::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Dl_info {
        pub dli_fname: *const ::core::ffi::c_char,
        pub dli_fbase: *mut ::core::ffi::c_void,
        pub dli_sname: *const ::core::ffi::c_char,
        pub dli_saddr: *mut ::core::ffi::c_void,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of Dl_info"][::core::mem::size_of::<Dl_info>() - 32usize];
        ["Alignment of Dl_info"][::core::mem::align_of::<Dl_info>() - 8usize];
        ["Offset of field: Dl_info::dli_fname"]
            [::core::mem::offset_of!(Dl_info, dli_fname) - 0usize];
        ["Offset of field: Dl_info::dli_fbase"]
            [::core::mem::offset_of!(Dl_info, dli_fbase) - 8usize];
        ["Offset of field: Dl_info::dli_sname"]
            [::core::mem::offset_of!(Dl_info, dli_sname) - 16usize];
        ["Offset of field: Dl_info::dli_saddr"]
            [::core::mem::offset_of!(Dl_info, dli_saddr) - 24usize];
    };
    unsafe extern "C" {
        pub fn dladdr(
            __address: *const ::core::ffi::c_void,
            __info: *mut root::Dl_info,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn dladdr1(
            __address: *const ::core::ffi::c_void,
            __info: *mut root::Dl_info,
            __extra_info: *mut *mut ::core::ffi::c_void,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    pub const RTLD_DL_SYMENT: root::_bindgen_ty_1 = 1;
    pub const RTLD_DL_LINKMAP: root::_bindgen_ty_1 = 2;
    pub type _bindgen_ty_1 = ::core::ffi::c_uint;
    unsafe extern "C" {
        pub fn dlinfo(
            __handle: *mut ::core::ffi::c_void,
            __request: ::core::ffi::c_int,
            __arg: *mut ::core::ffi::c_void,
        ) -> ::core::ffi::c_int;
    }
    pub const RTLD_DI_LMID: root::_bindgen_ty_2 = 1;
    pub const RTLD_DI_LINKMAP: root::_bindgen_ty_2 = 2;
    pub const RTLD_DI_CONFIGADDR: root::_bindgen_ty_2 = 3;
    pub const RTLD_DI_SERINFO: root::_bindgen_ty_2 = 4;
    pub const RTLD_DI_SERINFOSIZE: root::_bindgen_ty_2 = 5;
    pub const RTLD_DI_ORIGIN: root::_bindgen_ty_2 = 6;
    pub const RTLD_DI_PROFILENAME: root::_bindgen_ty_2 = 7;
    pub const RTLD_DI_PROFILEOUT: root::_bindgen_ty_2 = 8;
    pub const RTLD_DI_TLS_MODID: root::_bindgen_ty_2 = 9;
    pub const RTLD_DI_TLS_DATA: root::_bindgen_ty_2 = 10;
    pub const RTLD_DI_PHDR: root::_bindgen_ty_2 = 11;
    pub const RTLD_DI_MAX: root::_bindgen_ty_2 = 11;
    pub type _bindgen_ty_2 = ::core::ffi::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Dl_serpath {
        pub dls_name: *mut ::core::ffi::c_char,
        pub dls_flags: ::core::ffi::c_uint,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of Dl_serpath"][::core::mem::size_of::<Dl_serpath>() - 16usize];
        ["Alignment of Dl_serpath"][::core::mem::align_of::<Dl_serpath>() - 8usize];
        ["Offset of field: Dl_serpath::dls_name"]
            [::core::mem::offset_of!(Dl_serpath, dls_name) - 0usize];
        ["Offset of field: Dl_serpath::dls_flags"]
            [::core::mem::offset_of!(Dl_serpath, dls_flags) - 8usize];
    };
    #[repr(C)]
    pub struct Dl_serinfo {
        pub dls_size: usize,
        pub dls_cnt: ::core::ffi::c_uint,
        pub __bindgen_anon_1: root::Dl_serinfo__bindgen_ty_1,
    }
    #[repr(C)]
    pub struct Dl_serinfo__bindgen_ty_1 {
        pub dls_serpath: root::__BindgenUnionField<[root::Dl_serpath; 0usize]>,
        pub __dls_serpath_pad: root::__BindgenUnionField<[root::Dl_serpath; 1usize]>,
        pub bindgen_union_field: [u64; 2usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of Dl_serinfo__bindgen_ty_1"]
            [::core::mem::size_of::<Dl_serinfo__bindgen_ty_1>() - 16usize];
        ["Alignment of Dl_serinfo__bindgen_ty_1"]
            [::core::mem::align_of::<Dl_serinfo__bindgen_ty_1>() - 8usize];
        ["Offset of field: Dl_serinfo__bindgen_ty_1::dls_serpath"]
            [::core::mem::offset_of!(Dl_serinfo__bindgen_ty_1, dls_serpath) - 0usize];
        ["Offset of field: Dl_serinfo__bindgen_ty_1::__dls_serpath_pad"]
            [::core::mem::offset_of!(Dl_serinfo__bindgen_ty_1, __dls_serpath_pad) - 0usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of Dl_serinfo"][::core::mem::size_of::<Dl_serinfo>() - 32usize];
        ["Alignment of Dl_serinfo"][::core::mem::align_of::<Dl_serinfo>() - 8usize];
        ["Offset of field: Dl_serinfo::dls_size"]
            [::core::mem::offset_of!(Dl_serinfo, dls_size) - 0usize];
        ["Offset of field: Dl_serinfo::dls_cnt"]
            [::core::mem::offset_of!(Dl_serinfo, dls_cnt) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct dl_find_object {
        pub dlfo_flags: ::core::ffi::c_ulonglong,
        pub dlfo_map_start: *mut ::core::ffi::c_void,
        pub dlfo_map_end: *mut ::core::ffi::c_void,
        pub dlfo_link_map: *mut root::link_map,
        pub dlfo_eh_frame: *mut ::core::ffi::c_void,
        pub __dflo_reserved: [::core::ffi::c_ulonglong; 7usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of dl_find_object"][::core::mem::size_of::<dl_find_object>() - 96usize];
        ["Alignment of dl_find_object"][::core::mem::align_of::<dl_find_object>() - 8usize];
        ["Offset of field: dl_find_object::dlfo_flags"]
            [::core::mem::offset_of!(dl_find_object, dlfo_flags) - 0usize];
        ["Offset of field: dl_find_object::dlfo_map_start"]
            [::core::mem::offset_of!(dl_find_object, dlfo_map_start) - 8usize];
        ["Offset of field: dl_find_object::dlfo_map_end"]
            [::core::mem::offset_of!(dl_find_object, dlfo_map_end) - 16usize];
        ["Offset of field: dl_find_object::dlfo_link_map"]
            [::core::mem::offset_of!(dl_find_object, dlfo_link_map) - 24usize];
        ["Offset of field: dl_find_object::dlfo_eh_frame"]
            [::core::mem::offset_of!(dl_find_object, dlfo_eh_frame) - 32usize];
        ["Offset of field: dl_find_object::__dflo_reserved"]
            [::core::mem::offset_of!(dl_find_object, __dflo_reserved) - 40usize];
    };
    unsafe extern "C" {
        pub fn _dl_find_object(
            __address: *mut ::core::ffi::c_void,
            __result: *mut root::dl_find_object,
        ) -> ::core::ffi::c_int;
    }
    pub type __u_char = ::core::ffi::c_uchar;
    pub type __u_short = ::core::ffi::c_ushort;
    pub type __u_int = ::core::ffi::c_uint;
    pub type __u_long = ::core::ffi::c_ulong;
    pub type __int8_t = ::core::ffi::c_schar;
    pub type __uint8_t = ::core::ffi::c_uchar;
    pub type __int16_t = ::core::ffi::c_short;
    pub type __uint16_t = ::core::ffi::c_ushort;
    pub type __int32_t = ::core::ffi::c_int;
    pub type __uint32_t = ::core::ffi::c_uint;
    pub type __int64_t = ::core::ffi::c_long;
    pub type __uint64_t = ::core::ffi::c_ulong;
    pub type __int_least8_t = root::__int8_t;
    pub type __uint_least8_t = root::__uint8_t;
    pub type __int_least16_t = root::__int16_t;
    pub type __uint_least16_t = root::__uint16_t;
    pub type __int_least32_t = root::__int32_t;
    pub type __uint_least32_t = root::__uint32_t;
    pub type __int_least64_t = root::__int64_t;
    pub type __uint_least64_t = root::__uint64_t;
    pub type __quad_t = ::core::ffi::c_long;
    pub type __u_quad_t = ::core::ffi::c_ulong;
    pub type __intmax_t = ::core::ffi::c_long;
    pub type __uintmax_t = ::core::ffi::c_ulong;
    pub type __dev_t = ::core::ffi::c_ulong;
    pub type __uid_t = ::core::ffi::c_uint;
    pub type __gid_t = ::core::ffi::c_uint;
    pub type __ino_t = ::core::ffi::c_ulong;
    pub type __ino64_t = ::core::ffi::c_ulong;
    pub type __mode_t = ::core::ffi::c_uint;
    pub type __nlink_t = ::core::ffi::c_ulong;
    pub type __off_t = ::core::ffi::c_long;
    pub type __off64_t = ::core::ffi::c_long;
    pub type __pid_t = ::core::ffi::c_int;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __fsid_t {
        pub __val: [::core::ffi::c_int; 2usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __fsid_t"][::core::mem::size_of::<__fsid_t>() - 8usize];
        ["Alignment of __fsid_t"][::core::mem::align_of::<__fsid_t>() - 4usize];
        ["Offset of field: __fsid_t::__val"][::core::mem::offset_of!(__fsid_t, __val) - 0usize];
    };
    pub type __clock_t = ::core::ffi::c_long;
    pub type __rlim_t = ::core::ffi::c_ulong;
    pub type __rlim64_t = ::core::ffi::c_ulong;
    pub type __id_t = ::core::ffi::c_uint;
    pub type __time_t = ::core::ffi::c_long;
    pub type __useconds_t = ::core::ffi::c_uint;
    pub type __suseconds_t = ::core::ffi::c_long;
    pub type __suseconds64_t = ::core::ffi::c_long;
    pub type __daddr_t = ::core::ffi::c_int;
    pub type __key_t = ::core::ffi::c_int;
    pub type __clockid_t = ::core::ffi::c_int;
    pub type __timer_t = *mut ::core::ffi::c_void;
    pub type __blksize_t = ::core::ffi::c_long;
    pub type __blkcnt_t = ::core::ffi::c_long;
    pub type __blkcnt64_t = ::core::ffi::c_long;
    pub type __fsblkcnt_t = ::core::ffi::c_ulong;
    pub type __fsblkcnt64_t = ::core::ffi::c_ulong;
    pub type __fsfilcnt_t = ::core::ffi::c_ulong;
    pub type __fsfilcnt64_t = ::core::ffi::c_ulong;
    pub type __fsword_t = ::core::ffi::c_long;
    pub type __ssize_t = ::core::ffi::c_long;
    pub type __syscall_slong_t = ::core::ffi::c_long;
    pub type __syscall_ulong_t = ::core::ffi::c_ulong;
    pub type __loff_t = root::__off64_t;
    pub type __caddr_t = *mut ::core::ffi::c_char;
    pub type __intptr_t = ::core::ffi::c_long;
    pub type __socklen_t = ::core::ffi::c_uint;
    pub type __sig_atomic_t = ::core::ffi::c_int;
    pub type ino_t = root::__ino_t;
    pub type ino64_t = root::__ino64_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct dirent {
        pub d_ino: root::__ino_t,
        pub d_off: root::__off_t,
        pub d_reclen: ::core::ffi::c_ushort,
        pub d_type: ::core::ffi::c_uchar,
        pub d_name: [::core::ffi::c_char; 256usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of dirent"][::core::mem::size_of::<dirent>() - 280usize];
        ["Alignment of dirent"][::core::mem::align_of::<dirent>() - 8usize];
        ["Offset of field: dirent::d_ino"][::core::mem::offset_of!(dirent, d_ino) - 0usize];
        ["Offset of field: dirent::d_off"][::core::mem::offset_of!(dirent, d_off) - 8usize];
        ["Offset of field: dirent::d_reclen"][::core::mem::offset_of!(dirent, d_reclen) - 16usize];
        ["Offset of field: dirent::d_type"][::core::mem::offset_of!(dirent, d_type) - 18usize];
        ["Offset of field: dirent::d_name"][::core::mem::offset_of!(dirent, d_name) - 19usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct dirent64 {
        pub d_ino: root::__ino64_t,
        pub d_off: root::__off64_t,
        pub d_reclen: ::core::ffi::c_ushort,
        pub d_type: ::core::ffi::c_uchar,
        pub d_name: [::core::ffi::c_char; 256usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of dirent64"][::core::mem::size_of::<dirent64>() - 280usize];
        ["Alignment of dirent64"][::core::mem::align_of::<dirent64>() - 8usize];
        ["Offset of field: dirent64::d_ino"][::core::mem::offset_of!(dirent64, d_ino) - 0usize];
        ["Offset of field: dirent64::d_off"][::core::mem::offset_of!(dirent64, d_off) - 8usize];
        ["Offset of field: dirent64::d_reclen"]
            [::core::mem::offset_of!(dirent64, d_reclen) - 16usize];
        ["Offset of field: dirent64::d_type"][::core::mem::offset_of!(dirent64, d_type) - 18usize];
        ["Offset of field: dirent64::d_name"][::core::mem::offset_of!(dirent64, d_name) - 19usize];
    };
    pub const DT_UNKNOWN: root::_bindgen_ty_3 = 0;
    pub const DT_FIFO: root::_bindgen_ty_3 = 1;
    pub const DT_CHR: root::_bindgen_ty_3 = 2;
    pub const DT_DIR: root::_bindgen_ty_3 = 4;
    pub const DT_BLK: root::_bindgen_ty_3 = 6;
    pub const DT_REG: root::_bindgen_ty_3 = 8;
    pub const DT_LNK: root::_bindgen_ty_3 = 10;
    pub const DT_SOCK: root::_bindgen_ty_3 = 12;
    pub const DT_WHT: root::_bindgen_ty_3 = 14;
    pub type _bindgen_ty_3 = ::core::ffi::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __dirstream {
        _unused: [u8; 0],
    }
    pub type DIR = root::__dirstream;
    unsafe extern "C" {
        pub fn closedir(__dirp: *mut root::DIR) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn opendir(__name: *const ::core::ffi::c_char) -> *mut root::DIR;
    }
    unsafe extern "C" {
        pub fn fdopendir(__fd: ::core::ffi::c_int) -> *mut root::DIR;
    }
    unsafe extern "C" {
        pub fn readdir(__dirp: *mut root::DIR) -> *mut root::dirent;
    }
    unsafe extern "C" {
        pub fn readdir64(__dirp: *mut root::DIR) -> *mut root::dirent64;
    }
    unsafe extern "C" {
        pub fn readdir_r(
            __dirp: *mut root::DIR,
            __entry: *mut root::dirent,
            __result: *mut *mut root::dirent,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn readdir64_r(
            __dirp: *mut root::DIR,
            __entry: *mut root::dirent64,
            __result: *mut *mut root::dirent64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn rewinddir(__dirp: *mut root::DIR);
    }
    unsafe extern "C" {
        pub fn seekdir(__dirp: *mut root::DIR, __pos: ::core::ffi::c_long);
    }
    unsafe extern "C" {
        pub fn telldir(__dirp: *mut root::DIR) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn dirfd(__dirp: *mut root::DIR) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __sysconf(__name: ::core::ffi::c_int) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn scandir(
            __dir: *const ::core::ffi::c_char,
            __namelist: *mut *mut *mut root::dirent,
            __selector: ::core::option::Option<
                unsafe extern "C" fn(arg1: *const root::dirent) -> ::core::ffi::c_int,
            >,
            __cmp: ::core::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut *const root::dirent,
                    arg2: *mut *const root::dirent,
                ) -> ::core::ffi::c_int,
            >,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn scandir64(
            __dir: *const ::core::ffi::c_char,
            __namelist: *mut *mut *mut root::dirent64,
            __selector: ::core::option::Option<
                unsafe extern "C" fn(arg1: *const root::dirent64) -> ::core::ffi::c_int,
            >,
            __cmp: ::core::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut *const root::dirent64,
                    arg2: *mut *const root::dirent64,
                ) -> ::core::ffi::c_int,
            >,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn scandirat(
            __dfd: ::core::ffi::c_int,
            __dir: *const ::core::ffi::c_char,
            __namelist: *mut *mut *mut root::dirent,
            __selector: ::core::option::Option<
                unsafe extern "C" fn(arg1: *const root::dirent) -> ::core::ffi::c_int,
            >,
            __cmp: ::core::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut *const root::dirent,
                    arg2: *mut *const root::dirent,
                ) -> ::core::ffi::c_int,
            >,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn scandirat64(
            __dfd: ::core::ffi::c_int,
            __dir: *const ::core::ffi::c_char,
            __namelist: *mut *mut *mut root::dirent64,
            __selector: ::core::option::Option<
                unsafe extern "C" fn(arg1: *const root::dirent64) -> ::core::ffi::c_int,
            >,
            __cmp: ::core::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut *const root::dirent64,
                    arg2: *mut *const root::dirent64,
                ) -> ::core::ffi::c_int,
            >,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn alphasort(
            __e1: *mut *const root::dirent,
            __e2: *mut *const root::dirent,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn alphasort64(
            __e1: *mut *const root::dirent64,
            __e2: *mut *const root::dirent64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getdirentries(
            __fd: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __nbytes: usize,
            __basep: *mut root::__off_t,
        ) -> root::__ssize_t;
    }
    unsafe extern "C" {
        pub fn getdirentries64(
            __fd: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __nbytes: usize,
            __basep: *mut root::__off64_t,
        ) -> root::__ssize_t;
    }
    unsafe extern "C" {
        pub fn versionsort(
            __e1: *mut *const root::dirent,
            __e2: *mut *const root::dirent,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn versionsort64(
            __e1: *mut *const root::dirent64,
            __e2: *mut *const root::dirent64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getdents64(
            __fd: ::core::ffi::c_int,
            __buffer: *mut ::core::ffi::c_void,
            __length: usize,
        ) -> root::__ssize_t;
    }
    pub type int_least8_t = root::__int_least8_t;
    pub type int_least16_t = root::__int_least16_t;
    pub type int_least32_t = root::__int_least32_t;
    pub type int_least64_t = root::__int_least64_t;
    pub type uint_least8_t = root::__uint_least8_t;
    pub type uint_least16_t = root::__uint_least16_t;
    pub type uint_least32_t = root::__uint_least32_t;
    pub type uint_least64_t = root::__uint_least64_t;
    pub type int_fast8_t = ::core::ffi::c_schar;
    pub type int_fast16_t = ::core::ffi::c_long;
    pub type int_fast32_t = ::core::ffi::c_long;
    pub type int_fast64_t = ::core::ffi::c_long;
    pub type uint_fast8_t = ::core::ffi::c_uchar;
    pub type uint_fast16_t = ::core::ffi::c_ulong;
    pub type uint_fast32_t = ::core::ffi::c_ulong;
    pub type uint_fast64_t = ::core::ffi::c_ulong;
    pub type intmax_t = root::__intmax_t;
    pub type uintmax_t = root::__uintmax_t;
    pub type gid_t = root::__gid_t;
    pub type uid_t = root::__uid_t;
    pub type off_t = root::__off_t;
    pub type off64_t = root::__off64_t;
    pub type useconds_t = root::__useconds_t;
    pub type pid_t = root::__pid_t;
    pub type socklen_t = root::__socklen_t;
    unsafe extern "C" {
        pub fn access(
            __name: *const ::core::ffi::c_char,
            __type: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn euidaccess(
            __name: *const ::core::ffi::c_char,
            __type: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn eaccess(
            __name: *const ::core::ffi::c_char,
            __type: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn execveat(
            __fd: ::core::ffi::c_int,
            __path: *const ::core::ffi::c_char,
            __argv: *const *mut ::core::ffi::c_char,
            __envp: *const *mut ::core::ffi::c_char,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn faccessat(
            __fd: ::core::ffi::c_int,
            __file: *const ::core::ffi::c_char,
            __type: ::core::ffi::c_int,
            __flag: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn lseek(
            __fd: ::core::ffi::c_int,
            __offset: root::__off_t,
            __whence: ::core::ffi::c_int,
        ) -> root::__off_t;
    }
    unsafe extern "C" {
        pub fn lseek64(
            __fd: ::core::ffi::c_int,
            __offset: root::__off64_t,
            __whence: ::core::ffi::c_int,
        ) -> root::__off64_t;
    }
    unsafe extern "C" {
        pub fn close(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn closefrom(__lowfd: ::core::ffi::c_int);
    }
    unsafe extern "C" {
        pub fn read(
            __fd: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_void,
            __nbytes: usize,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn write(
            __fd: ::core::ffi::c_int,
            __buf: *const ::core::ffi::c_void,
            __n: usize,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn pread(
            __fd: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_void,
            __nbytes: usize,
            __offset: root::__off_t,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn pwrite(
            __fd: ::core::ffi::c_int,
            __buf: *const ::core::ffi::c_void,
            __n: usize,
            __offset: root::__off_t,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn pread64(
            __fd: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_void,
            __nbytes: usize,
            __offset: root::__off64_t,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn pwrite64(
            __fd: ::core::ffi::c_int,
            __buf: *const ::core::ffi::c_void,
            __n: usize,
            __offset: root::__off64_t,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn pipe(__pipedes: *mut ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pipe2(
            __pipedes: *mut ::core::ffi::c_int,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn alarm(__seconds: ::core::ffi::c_uint) -> ::core::ffi::c_uint;
    }
    unsafe extern "C" {
        pub fn sleep(__seconds: ::core::ffi::c_uint) -> ::core::ffi::c_uint;
    }
    unsafe extern "C" {
        pub fn ualarm(
            __value: root::__useconds_t,
            __interval: root::__useconds_t,
        ) -> root::__useconds_t;
    }
    unsafe extern "C" {
        pub fn usleep(__useconds: root::__useconds_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pause() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn chown(
            __file: *const ::core::ffi::c_char,
            __owner: root::__uid_t,
            __group: root::__gid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fchown(
            __fd: ::core::ffi::c_int,
            __owner: root::__uid_t,
            __group: root::__gid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn lchown(
            __file: *const ::core::ffi::c_char,
            __owner: root::__uid_t,
            __group: root::__gid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fchownat(
            __fd: ::core::ffi::c_int,
            __file: *const ::core::ffi::c_char,
            __owner: root::__uid_t,
            __group: root::__gid_t,
            __flag: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn chdir(__path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fchdir(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getcwd(__buf: *mut ::core::ffi::c_char, __size: usize) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn get_current_dir_name() -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn getwd(__buf: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn dup(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn dup2(__fd: ::core::ffi::c_int, __fd2: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn dup3(
            __fd: ::core::ffi::c_int,
            __fd2: ::core::ffi::c_int,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub static mut __environ: *mut *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub static mut environ: *mut *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn execve(
            __path: *const ::core::ffi::c_char,
            __argv: *const *mut ::core::ffi::c_char,
            __envp: *const *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fexecve(
            __fd: ::core::ffi::c_int,
            __argv: *const *mut ::core::ffi::c_char,
            __envp: *const *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn execv(
            __path: *const ::core::ffi::c_char,
            __argv: *const *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn execle(
            __path: *const ::core::ffi::c_char,
            __arg: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn execl(
            __path: *const ::core::ffi::c_char,
            __arg: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn execvp(
            __file: *const ::core::ffi::c_char,
            __argv: *const *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn execlp(
            __file: *const ::core::ffi::c_char,
            __arg: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn execvpe(
            __file: *const ::core::ffi::c_char,
            __argv: *const *mut ::core::ffi::c_char,
            __envp: *const *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn nice(__inc: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn _exit(__status: ::core::ffi::c_int) -> !;
    }
    pub const _PC_LINK_MAX: root::_bindgen_ty_4 = 0;
    pub const _PC_MAX_CANON: root::_bindgen_ty_4 = 1;
    pub const _PC_MAX_INPUT: root::_bindgen_ty_4 = 2;
    pub const _PC_NAME_MAX: root::_bindgen_ty_4 = 3;
    pub const _PC_PATH_MAX: root::_bindgen_ty_4 = 4;
    pub const _PC_PIPE_BUF: root::_bindgen_ty_4 = 5;
    pub const _PC_CHOWN_RESTRICTED: root::_bindgen_ty_4 = 6;
    pub const _PC_NO_TRUNC: root::_bindgen_ty_4 = 7;
    pub const _PC_VDISABLE: root::_bindgen_ty_4 = 8;
    pub const _PC_SYNC_IO: root::_bindgen_ty_4 = 9;
    pub const _PC_ASYNC_IO: root::_bindgen_ty_4 = 10;
    pub const _PC_PRIO_IO: root::_bindgen_ty_4 = 11;
    pub const _PC_SOCK_MAXBUF: root::_bindgen_ty_4 = 12;
    pub const _PC_FILESIZEBITS: root::_bindgen_ty_4 = 13;
    pub const _PC_REC_INCR_XFER_SIZE: root::_bindgen_ty_4 = 14;
    pub const _PC_REC_MAX_XFER_SIZE: root::_bindgen_ty_4 = 15;
    pub const _PC_REC_MIN_XFER_SIZE: root::_bindgen_ty_4 = 16;
    pub const _PC_REC_XFER_ALIGN: root::_bindgen_ty_4 = 17;
    pub const _PC_ALLOC_SIZE_MIN: root::_bindgen_ty_4 = 18;
    pub const _PC_SYMLINK_MAX: root::_bindgen_ty_4 = 19;
    pub const _PC_2_SYMLINKS: root::_bindgen_ty_4 = 20;
    pub type _bindgen_ty_4 = ::core::ffi::c_uint;
    pub const _SC_ARG_MAX: root::_bindgen_ty_5 = 0;
    pub const _SC_CHILD_MAX: root::_bindgen_ty_5 = 1;
    pub const _SC_CLK_TCK: root::_bindgen_ty_5 = 2;
    pub const _SC_NGROUPS_MAX: root::_bindgen_ty_5 = 3;
    pub const _SC_OPEN_MAX: root::_bindgen_ty_5 = 4;
    pub const _SC_STREAM_MAX: root::_bindgen_ty_5 = 5;
    pub const _SC_TZNAME_MAX: root::_bindgen_ty_5 = 6;
    pub const _SC_JOB_CONTROL: root::_bindgen_ty_5 = 7;
    pub const _SC_SAVED_IDS: root::_bindgen_ty_5 = 8;
    pub const _SC_REALTIME_SIGNALS: root::_bindgen_ty_5 = 9;
    pub const _SC_PRIORITY_SCHEDULING: root::_bindgen_ty_5 = 10;
    pub const _SC_TIMERS: root::_bindgen_ty_5 = 11;
    pub const _SC_ASYNCHRONOUS_IO: root::_bindgen_ty_5 = 12;
    pub const _SC_PRIORITIZED_IO: root::_bindgen_ty_5 = 13;
    pub const _SC_SYNCHRONIZED_IO: root::_bindgen_ty_5 = 14;
    pub const _SC_FSYNC: root::_bindgen_ty_5 = 15;
    pub const _SC_MAPPED_FILES: root::_bindgen_ty_5 = 16;
    pub const _SC_MEMLOCK: root::_bindgen_ty_5 = 17;
    pub const _SC_MEMLOCK_RANGE: root::_bindgen_ty_5 = 18;
    pub const _SC_MEMORY_PROTECTION: root::_bindgen_ty_5 = 19;
    pub const _SC_MESSAGE_PASSING: root::_bindgen_ty_5 = 20;
    pub const _SC_SEMAPHORES: root::_bindgen_ty_5 = 21;
    pub const _SC_SHARED_MEMORY_OBJECTS: root::_bindgen_ty_5 = 22;
    pub const _SC_AIO_LISTIO_MAX: root::_bindgen_ty_5 = 23;
    pub const _SC_AIO_MAX: root::_bindgen_ty_5 = 24;
    pub const _SC_AIO_PRIO_DELTA_MAX: root::_bindgen_ty_5 = 25;
    pub const _SC_DELAYTIMER_MAX: root::_bindgen_ty_5 = 26;
    pub const _SC_MQ_OPEN_MAX: root::_bindgen_ty_5 = 27;
    pub const _SC_MQ_PRIO_MAX: root::_bindgen_ty_5 = 28;
    pub const _SC_VERSION: root::_bindgen_ty_5 = 29;
    pub const _SC_PAGESIZE: root::_bindgen_ty_5 = 30;
    pub const _SC_RTSIG_MAX: root::_bindgen_ty_5 = 31;
    pub const _SC_SEM_NSEMS_MAX: root::_bindgen_ty_5 = 32;
    pub const _SC_SEM_VALUE_MAX: root::_bindgen_ty_5 = 33;
    pub const _SC_SIGQUEUE_MAX: root::_bindgen_ty_5 = 34;
    pub const _SC_TIMER_MAX: root::_bindgen_ty_5 = 35;
    pub const _SC_BC_BASE_MAX: root::_bindgen_ty_5 = 36;
    pub const _SC_BC_DIM_MAX: root::_bindgen_ty_5 = 37;
    pub const _SC_BC_SCALE_MAX: root::_bindgen_ty_5 = 38;
    pub const _SC_BC_STRING_MAX: root::_bindgen_ty_5 = 39;
    pub const _SC_COLL_WEIGHTS_MAX: root::_bindgen_ty_5 = 40;
    pub const _SC_EQUIV_CLASS_MAX: root::_bindgen_ty_5 = 41;
    pub const _SC_EXPR_NEST_MAX: root::_bindgen_ty_5 = 42;
    pub const _SC_LINE_MAX: root::_bindgen_ty_5 = 43;
    pub const _SC_RE_DUP_MAX: root::_bindgen_ty_5 = 44;
    pub const _SC_CHARCLASS_NAME_MAX: root::_bindgen_ty_5 = 45;
    pub const _SC_2_VERSION: root::_bindgen_ty_5 = 46;
    pub const _SC_2_C_BIND: root::_bindgen_ty_5 = 47;
    pub const _SC_2_C_DEV: root::_bindgen_ty_5 = 48;
    pub const _SC_2_FORT_DEV: root::_bindgen_ty_5 = 49;
    pub const _SC_2_FORT_RUN: root::_bindgen_ty_5 = 50;
    pub const _SC_2_SW_DEV: root::_bindgen_ty_5 = 51;
    pub const _SC_2_LOCALEDEF: root::_bindgen_ty_5 = 52;
    pub const _SC_PII: root::_bindgen_ty_5 = 53;
    pub const _SC_PII_XTI: root::_bindgen_ty_5 = 54;
    pub const _SC_PII_SOCKET: root::_bindgen_ty_5 = 55;
    pub const _SC_PII_INTERNET: root::_bindgen_ty_5 = 56;
    pub const _SC_PII_OSI: root::_bindgen_ty_5 = 57;
    pub const _SC_POLL: root::_bindgen_ty_5 = 58;
    pub const _SC_SELECT: root::_bindgen_ty_5 = 59;
    pub const _SC_UIO_MAXIOV: root::_bindgen_ty_5 = 60;
    pub const _SC_IOV_MAX: root::_bindgen_ty_5 = 60;
    pub const _SC_PII_INTERNET_STREAM: root::_bindgen_ty_5 = 61;
    pub const _SC_PII_INTERNET_DGRAM: root::_bindgen_ty_5 = 62;
    pub const _SC_PII_OSI_COTS: root::_bindgen_ty_5 = 63;
    pub const _SC_PII_OSI_CLTS: root::_bindgen_ty_5 = 64;
    pub const _SC_PII_OSI_M: root::_bindgen_ty_5 = 65;
    pub const _SC_T_IOV_MAX: root::_bindgen_ty_5 = 66;
    pub const _SC_THREADS: root::_bindgen_ty_5 = 67;
    pub const _SC_THREAD_SAFE_FUNCTIONS: root::_bindgen_ty_5 = 68;
    pub const _SC_GETGR_R_SIZE_MAX: root::_bindgen_ty_5 = 69;
    pub const _SC_GETPW_R_SIZE_MAX: root::_bindgen_ty_5 = 70;
    pub const _SC_LOGIN_NAME_MAX: root::_bindgen_ty_5 = 71;
    pub const _SC_TTY_NAME_MAX: root::_bindgen_ty_5 = 72;
    pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: root::_bindgen_ty_5 = 73;
    pub const _SC_THREAD_KEYS_MAX: root::_bindgen_ty_5 = 74;
    pub const _SC_THREAD_STACK_MIN: root::_bindgen_ty_5 = 75;
    pub const _SC_THREAD_THREADS_MAX: root::_bindgen_ty_5 = 76;
    pub const _SC_THREAD_ATTR_STACKADDR: root::_bindgen_ty_5 = 77;
    pub const _SC_THREAD_ATTR_STACKSIZE: root::_bindgen_ty_5 = 78;
    pub const _SC_THREAD_PRIORITY_SCHEDULING: root::_bindgen_ty_5 = 79;
    pub const _SC_THREAD_PRIO_INHERIT: root::_bindgen_ty_5 = 80;
    pub const _SC_THREAD_PRIO_PROTECT: root::_bindgen_ty_5 = 81;
    pub const _SC_THREAD_PROCESS_SHARED: root::_bindgen_ty_5 = 82;
    pub const _SC_NPROCESSORS_CONF: root::_bindgen_ty_5 = 83;
    pub const _SC_NPROCESSORS_ONLN: root::_bindgen_ty_5 = 84;
    pub const _SC_PHYS_PAGES: root::_bindgen_ty_5 = 85;
    pub const _SC_AVPHYS_PAGES: root::_bindgen_ty_5 = 86;
    pub const _SC_ATEXIT_MAX: root::_bindgen_ty_5 = 87;
    pub const _SC_PASS_MAX: root::_bindgen_ty_5 = 88;
    pub const _SC_XOPEN_VERSION: root::_bindgen_ty_5 = 89;
    pub const _SC_XOPEN_XCU_VERSION: root::_bindgen_ty_5 = 90;
    pub const _SC_XOPEN_UNIX: root::_bindgen_ty_5 = 91;
    pub const _SC_XOPEN_CRYPT: root::_bindgen_ty_5 = 92;
    pub const _SC_XOPEN_ENH_I18N: root::_bindgen_ty_5 = 93;
    pub const _SC_XOPEN_SHM: root::_bindgen_ty_5 = 94;
    pub const _SC_2_CHAR_TERM: root::_bindgen_ty_5 = 95;
    pub const _SC_2_C_VERSION: root::_bindgen_ty_5 = 96;
    pub const _SC_2_UPE: root::_bindgen_ty_5 = 97;
    pub const _SC_XOPEN_XPG2: root::_bindgen_ty_5 = 98;
    pub const _SC_XOPEN_XPG3: root::_bindgen_ty_5 = 99;
    pub const _SC_XOPEN_XPG4: root::_bindgen_ty_5 = 100;
    pub const _SC_CHAR_BIT: root::_bindgen_ty_5 = 101;
    pub const _SC_CHAR_MAX: root::_bindgen_ty_5 = 102;
    pub const _SC_CHAR_MIN: root::_bindgen_ty_5 = 103;
    pub const _SC_INT_MAX: root::_bindgen_ty_5 = 104;
    pub const _SC_INT_MIN: root::_bindgen_ty_5 = 105;
    pub const _SC_LONG_BIT: root::_bindgen_ty_5 = 106;
    pub const _SC_WORD_BIT: root::_bindgen_ty_5 = 107;
    pub const _SC_MB_LEN_MAX: root::_bindgen_ty_5 = 108;
    pub const _SC_NZERO: root::_bindgen_ty_5 = 109;
    pub const _SC_SSIZE_MAX: root::_bindgen_ty_5 = 110;
    pub const _SC_SCHAR_MAX: root::_bindgen_ty_5 = 111;
    pub const _SC_SCHAR_MIN: root::_bindgen_ty_5 = 112;
    pub const _SC_SHRT_MAX: root::_bindgen_ty_5 = 113;
    pub const _SC_SHRT_MIN: root::_bindgen_ty_5 = 114;
    pub const _SC_UCHAR_MAX: root::_bindgen_ty_5 = 115;
    pub const _SC_UINT_MAX: root::_bindgen_ty_5 = 116;
    pub const _SC_ULONG_MAX: root::_bindgen_ty_5 = 117;
    pub const _SC_USHRT_MAX: root::_bindgen_ty_5 = 118;
    pub const _SC_NL_ARGMAX: root::_bindgen_ty_5 = 119;
    pub const _SC_NL_LANGMAX: root::_bindgen_ty_5 = 120;
    pub const _SC_NL_MSGMAX: root::_bindgen_ty_5 = 121;
    pub const _SC_NL_NMAX: root::_bindgen_ty_5 = 122;
    pub const _SC_NL_SETMAX: root::_bindgen_ty_5 = 123;
    pub const _SC_NL_TEXTMAX: root::_bindgen_ty_5 = 124;
    pub const _SC_XBS5_ILP32_OFF32: root::_bindgen_ty_5 = 125;
    pub const _SC_XBS5_ILP32_OFFBIG: root::_bindgen_ty_5 = 126;
    pub const _SC_XBS5_LP64_OFF64: root::_bindgen_ty_5 = 127;
    pub const _SC_XBS5_LPBIG_OFFBIG: root::_bindgen_ty_5 = 128;
    pub const _SC_XOPEN_LEGACY: root::_bindgen_ty_5 = 129;
    pub const _SC_XOPEN_REALTIME: root::_bindgen_ty_5 = 130;
    pub const _SC_XOPEN_REALTIME_THREADS: root::_bindgen_ty_5 = 131;
    pub const _SC_ADVISORY_INFO: root::_bindgen_ty_5 = 132;
    pub const _SC_BARRIERS: root::_bindgen_ty_5 = 133;
    pub const _SC_BASE: root::_bindgen_ty_5 = 134;
    pub const _SC_C_LANG_SUPPORT: root::_bindgen_ty_5 = 135;
    pub const _SC_C_LANG_SUPPORT_R: root::_bindgen_ty_5 = 136;
    pub const _SC_CLOCK_SELECTION: root::_bindgen_ty_5 = 137;
    pub const _SC_CPUTIME: root::_bindgen_ty_5 = 138;
    pub const _SC_THREAD_CPUTIME: root::_bindgen_ty_5 = 139;
    pub const _SC_DEVICE_IO: root::_bindgen_ty_5 = 140;
    pub const _SC_DEVICE_SPECIFIC: root::_bindgen_ty_5 = 141;
    pub const _SC_DEVICE_SPECIFIC_R: root::_bindgen_ty_5 = 142;
    pub const _SC_FD_MGMT: root::_bindgen_ty_5 = 143;
    pub const _SC_FIFO: root::_bindgen_ty_5 = 144;
    pub const _SC_PIPE: root::_bindgen_ty_5 = 145;
    pub const _SC_FILE_ATTRIBUTES: root::_bindgen_ty_5 = 146;
    pub const _SC_FILE_LOCKING: root::_bindgen_ty_5 = 147;
    pub const _SC_FILE_SYSTEM: root::_bindgen_ty_5 = 148;
    pub const _SC_MONOTONIC_CLOCK: root::_bindgen_ty_5 = 149;
    pub const _SC_MULTI_PROCESS: root::_bindgen_ty_5 = 150;
    pub const _SC_SINGLE_PROCESS: root::_bindgen_ty_5 = 151;
    pub const _SC_NETWORKING: root::_bindgen_ty_5 = 152;
    pub const _SC_READER_WRITER_LOCKS: root::_bindgen_ty_5 = 153;
    pub const _SC_SPIN_LOCKS: root::_bindgen_ty_5 = 154;
    pub const _SC_REGEXP: root::_bindgen_ty_5 = 155;
    pub const _SC_REGEX_VERSION: root::_bindgen_ty_5 = 156;
    pub const _SC_SHELL: root::_bindgen_ty_5 = 157;
    pub const _SC_SIGNALS: root::_bindgen_ty_5 = 158;
    pub const _SC_SPAWN: root::_bindgen_ty_5 = 159;
    pub const _SC_SPORADIC_SERVER: root::_bindgen_ty_5 = 160;
    pub const _SC_THREAD_SPORADIC_SERVER: root::_bindgen_ty_5 = 161;
    pub const _SC_SYSTEM_DATABASE: root::_bindgen_ty_5 = 162;
    pub const _SC_SYSTEM_DATABASE_R: root::_bindgen_ty_5 = 163;
    pub const _SC_TIMEOUTS: root::_bindgen_ty_5 = 164;
    pub const _SC_TYPED_MEMORY_OBJECTS: root::_bindgen_ty_5 = 165;
    pub const _SC_USER_GROUPS: root::_bindgen_ty_5 = 166;
    pub const _SC_USER_GROUPS_R: root::_bindgen_ty_5 = 167;
    pub const _SC_2_PBS: root::_bindgen_ty_5 = 168;
    pub const _SC_2_PBS_ACCOUNTING: root::_bindgen_ty_5 = 169;
    pub const _SC_2_PBS_LOCATE: root::_bindgen_ty_5 = 170;
    pub const _SC_2_PBS_MESSAGE: root::_bindgen_ty_5 = 171;
    pub const _SC_2_PBS_TRACK: root::_bindgen_ty_5 = 172;
    pub const _SC_SYMLOOP_MAX: root::_bindgen_ty_5 = 173;
    pub const _SC_STREAMS: root::_bindgen_ty_5 = 174;
    pub const _SC_2_PBS_CHECKPOINT: root::_bindgen_ty_5 = 175;
    pub const _SC_V6_ILP32_OFF32: root::_bindgen_ty_5 = 176;
    pub const _SC_V6_ILP32_OFFBIG: root::_bindgen_ty_5 = 177;
    pub const _SC_V6_LP64_OFF64: root::_bindgen_ty_5 = 178;
    pub const _SC_V6_LPBIG_OFFBIG: root::_bindgen_ty_5 = 179;
    pub const _SC_HOST_NAME_MAX: root::_bindgen_ty_5 = 180;
    pub const _SC_TRACE: root::_bindgen_ty_5 = 181;
    pub const _SC_TRACE_EVENT_FILTER: root::_bindgen_ty_5 = 182;
    pub const _SC_TRACE_INHERIT: root::_bindgen_ty_5 = 183;
    pub const _SC_TRACE_LOG: root::_bindgen_ty_5 = 184;
    pub const _SC_LEVEL1_ICACHE_SIZE: root::_bindgen_ty_5 = 185;
    pub const _SC_LEVEL1_ICACHE_ASSOC: root::_bindgen_ty_5 = 186;
    pub const _SC_LEVEL1_ICACHE_LINESIZE: root::_bindgen_ty_5 = 187;
    pub const _SC_LEVEL1_DCACHE_SIZE: root::_bindgen_ty_5 = 188;
    pub const _SC_LEVEL1_DCACHE_ASSOC: root::_bindgen_ty_5 = 189;
    pub const _SC_LEVEL1_DCACHE_LINESIZE: root::_bindgen_ty_5 = 190;
    pub const _SC_LEVEL2_CACHE_SIZE: root::_bindgen_ty_5 = 191;
    pub const _SC_LEVEL2_CACHE_ASSOC: root::_bindgen_ty_5 = 192;
    pub const _SC_LEVEL2_CACHE_LINESIZE: root::_bindgen_ty_5 = 193;
    pub const _SC_LEVEL3_CACHE_SIZE: root::_bindgen_ty_5 = 194;
    pub const _SC_LEVEL3_CACHE_ASSOC: root::_bindgen_ty_5 = 195;
    pub const _SC_LEVEL3_CACHE_LINESIZE: root::_bindgen_ty_5 = 196;
    pub const _SC_LEVEL4_CACHE_SIZE: root::_bindgen_ty_5 = 197;
    pub const _SC_LEVEL4_CACHE_ASSOC: root::_bindgen_ty_5 = 198;
    pub const _SC_LEVEL4_CACHE_LINESIZE: root::_bindgen_ty_5 = 199;
    pub const _SC_IPV6: root::_bindgen_ty_5 = 235;
    pub const _SC_RAW_SOCKETS: root::_bindgen_ty_5 = 236;
    pub const _SC_V7_ILP32_OFF32: root::_bindgen_ty_5 = 237;
    pub const _SC_V7_ILP32_OFFBIG: root::_bindgen_ty_5 = 238;
    pub const _SC_V7_LP64_OFF64: root::_bindgen_ty_5 = 239;
    pub const _SC_V7_LPBIG_OFFBIG: root::_bindgen_ty_5 = 240;
    pub const _SC_SS_REPL_MAX: root::_bindgen_ty_5 = 241;
    pub const _SC_TRACE_EVENT_NAME_MAX: root::_bindgen_ty_5 = 242;
    pub const _SC_TRACE_NAME_MAX: root::_bindgen_ty_5 = 243;
    pub const _SC_TRACE_SYS_MAX: root::_bindgen_ty_5 = 244;
    pub const _SC_TRACE_USER_EVENT_MAX: root::_bindgen_ty_5 = 245;
    pub const _SC_XOPEN_STREAMS: root::_bindgen_ty_5 = 246;
    pub const _SC_THREAD_ROBUST_PRIO_INHERIT: root::_bindgen_ty_5 = 247;
    pub const _SC_THREAD_ROBUST_PRIO_PROTECT: root::_bindgen_ty_5 = 248;
    pub const _SC_MINSIGSTKSZ: root::_bindgen_ty_5 = 249;
    pub const _SC_SIGSTKSZ: root::_bindgen_ty_5 = 250;
    pub type _bindgen_ty_5 = ::core::ffi::c_uint;
    pub const _CS_PATH: root::_bindgen_ty_6 = 0;
    pub const _CS_V6_WIDTH_RESTRICTED_ENVS: root::_bindgen_ty_6 = 1;
    pub const _CS_GNU_LIBC_VERSION: root::_bindgen_ty_6 = 2;
    pub const _CS_GNU_LIBPTHREAD_VERSION: root::_bindgen_ty_6 = 3;
    pub const _CS_V5_WIDTH_RESTRICTED_ENVS: root::_bindgen_ty_6 = 4;
    pub const _CS_V7_WIDTH_RESTRICTED_ENVS: root::_bindgen_ty_6 = 5;
    pub const _CS_LFS_CFLAGS: root::_bindgen_ty_6 = 1000;
    pub const _CS_LFS_LDFLAGS: root::_bindgen_ty_6 = 1001;
    pub const _CS_LFS_LIBS: root::_bindgen_ty_6 = 1002;
    pub const _CS_LFS_LINTFLAGS: root::_bindgen_ty_6 = 1003;
    pub const _CS_LFS64_CFLAGS: root::_bindgen_ty_6 = 1004;
    pub const _CS_LFS64_LDFLAGS: root::_bindgen_ty_6 = 1005;
    pub const _CS_LFS64_LIBS: root::_bindgen_ty_6 = 1006;
    pub const _CS_LFS64_LINTFLAGS: root::_bindgen_ty_6 = 1007;
    pub const _CS_XBS5_ILP32_OFF32_CFLAGS: root::_bindgen_ty_6 = 1100;
    pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: root::_bindgen_ty_6 = 1101;
    pub const _CS_XBS5_ILP32_OFF32_LIBS: root::_bindgen_ty_6 = 1102;
    pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: root::_bindgen_ty_6 = 1103;
    pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: root::_bindgen_ty_6 = 1104;
    pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: root::_bindgen_ty_6 = 1105;
    pub const _CS_XBS5_ILP32_OFFBIG_LIBS: root::_bindgen_ty_6 = 1106;
    pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: root::_bindgen_ty_6 = 1107;
    pub const _CS_XBS5_LP64_OFF64_CFLAGS: root::_bindgen_ty_6 = 1108;
    pub const _CS_XBS5_LP64_OFF64_LDFLAGS: root::_bindgen_ty_6 = 1109;
    pub const _CS_XBS5_LP64_OFF64_LIBS: root::_bindgen_ty_6 = 1110;
    pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: root::_bindgen_ty_6 = 1111;
    pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: root::_bindgen_ty_6 = 1112;
    pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: root::_bindgen_ty_6 = 1113;
    pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: root::_bindgen_ty_6 = 1114;
    pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: root::_bindgen_ty_6 = 1115;
    pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: root::_bindgen_ty_6 = 1116;
    pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: root::_bindgen_ty_6 = 1117;
    pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: root::_bindgen_ty_6 = 1118;
    pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: root::_bindgen_ty_6 = 1119;
    pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: root::_bindgen_ty_6 = 1120;
    pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: root::_bindgen_ty_6 = 1121;
    pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: root::_bindgen_ty_6 = 1122;
    pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: root::_bindgen_ty_6 = 1123;
    pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: root::_bindgen_ty_6 = 1124;
    pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: root::_bindgen_ty_6 = 1125;
    pub const _CS_POSIX_V6_LP64_OFF64_LIBS: root::_bindgen_ty_6 = 1126;
    pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: root::_bindgen_ty_6 = 1127;
    pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: root::_bindgen_ty_6 = 1128;
    pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: root::_bindgen_ty_6 = 1129;
    pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: root::_bindgen_ty_6 = 1130;
    pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: root::_bindgen_ty_6 = 1131;
    pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: root::_bindgen_ty_6 = 1132;
    pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: root::_bindgen_ty_6 = 1133;
    pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: root::_bindgen_ty_6 = 1134;
    pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: root::_bindgen_ty_6 = 1135;
    pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: root::_bindgen_ty_6 = 1136;
    pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: root::_bindgen_ty_6 = 1137;
    pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: root::_bindgen_ty_6 = 1138;
    pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: root::_bindgen_ty_6 = 1139;
    pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: root::_bindgen_ty_6 = 1140;
    pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: root::_bindgen_ty_6 = 1141;
    pub const _CS_POSIX_V7_LP64_OFF64_LIBS: root::_bindgen_ty_6 = 1142;
    pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: root::_bindgen_ty_6 = 1143;
    pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: root::_bindgen_ty_6 = 1144;
    pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: root::_bindgen_ty_6 = 1145;
    pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: root::_bindgen_ty_6 = 1146;
    pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: root::_bindgen_ty_6 = 1147;
    pub const _CS_V6_ENV: root::_bindgen_ty_6 = 1148;
    pub const _CS_V7_ENV: root::_bindgen_ty_6 = 1149;
    pub type _bindgen_ty_6 = ::core::ffi::c_uint;
    unsafe extern "C" {
        pub fn pathconf(
            __path: *const ::core::ffi::c_char,
            __name: ::core::ffi::c_int,
        ) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn fpathconf(
            __fd: ::core::ffi::c_int,
            __name: ::core::ffi::c_int,
        ) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn sysconf(__name: ::core::ffi::c_int) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn confstr(
            __name: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __len: usize,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn getpid() -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn getppid() -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn getpgrp() -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn __getpgid(__pid: root::__pid_t) -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn getpgid(__pid: root::__pid_t) -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn setpgid(__pid: root::__pid_t, __pgid: root::__pid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setpgrp() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setsid() -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn getsid(__pid: root::__pid_t) -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn getuid() -> root::__uid_t;
    }
    unsafe extern "C" {
        pub fn geteuid() -> root::__uid_t;
    }
    unsafe extern "C" {
        pub fn getgid() -> root::__gid_t;
    }
    unsafe extern "C" {
        pub fn getegid() -> root::__gid_t;
    }
    unsafe extern "C" {
        pub fn getgroups(
            __size: ::core::ffi::c_int,
            __list: *mut root::__gid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn group_member(__gid: root::__gid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setuid(__uid: root::__uid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setreuid(__ruid: root::__uid_t, __euid: root::__uid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn seteuid(__uid: root::__uid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setgid(__gid: root::__gid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setregid(__rgid: root::__gid_t, __egid: root::__gid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setegid(__gid: root::__gid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getresuid(
            __ruid: *mut root::__uid_t,
            __euid: *mut root::__uid_t,
            __suid: *mut root::__uid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getresgid(
            __rgid: *mut root::__gid_t,
            __egid: *mut root::__gid_t,
            __sgid: *mut root::__gid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setresuid(
            __ruid: root::__uid_t,
            __euid: root::__uid_t,
            __suid: root::__uid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setresgid(
            __rgid: root::__gid_t,
            __egid: root::__gid_t,
            __sgid: root::__gid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fork() -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn vfork() -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn _Fork() -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn ttyname(__fd: ::core::ffi::c_int) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn ttyname_r(
            __fd: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __buflen: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn isatty(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ttyslot() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn link(
            __from: *const ::core::ffi::c_char,
            __to: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn linkat(
            __fromfd: ::core::ffi::c_int,
            __from: *const ::core::ffi::c_char,
            __tofd: ::core::ffi::c_int,
            __to: *const ::core::ffi::c_char,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn symlink(
            __from: *const ::core::ffi::c_char,
            __to: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn readlink(
            __path: *const ::core::ffi::c_char,
            __buf: *mut ::core::ffi::c_char,
            __len: usize,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn symlinkat(
            __from: *const ::core::ffi::c_char,
            __tofd: ::core::ffi::c_int,
            __to: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn readlinkat(
            __fd: ::core::ffi::c_int,
            __path: *const ::core::ffi::c_char,
            __buf: *mut ::core::ffi::c_char,
            __len: usize,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn unlink(__name: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn unlinkat(
            __fd: ::core::ffi::c_int,
            __name: *const ::core::ffi::c_char,
            __flag: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn rmdir(__path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn tcgetpgrp(__fd: ::core::ffi::c_int) -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn tcsetpgrp(__fd: ::core::ffi::c_int, __pgrp_id: root::__pid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getlogin() -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn getlogin_r(
            __name: *mut ::core::ffi::c_char,
            __name_len: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setlogin(__name: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub static mut optarg: *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub static mut optind: ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub static mut opterr: ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub static mut optopt: ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getopt(
            ___argc: ::core::ffi::c_int,
            ___argv: *const *mut ::core::ffi::c_char,
            __shortopts: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn gethostname(__name: *mut ::core::ffi::c_char, __len: usize) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sethostname(__name: *const ::core::ffi::c_char, __len: usize) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sethostid(__id: ::core::ffi::c_long) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getdomainname(__name: *mut ::core::ffi::c_char, __len: usize) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setdomainname(
            __name: *const ::core::ffi::c_char,
            __len: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vhangup() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn revoke(__file: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn profil(
            __sample_buffer: *mut ::core::ffi::c_ushort,
            __size: usize,
            __offset: usize,
            __scale: ::core::ffi::c_uint,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn acct(__name: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getusershell() -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn endusershell();
    }
    unsafe extern "C" {
        pub fn setusershell();
    }
    unsafe extern "C" {
        pub fn daemon(
            __nochdir: ::core::ffi::c_int,
            __noclose: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn chroot(__path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getpass(__prompt: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn fsync(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn syncfs(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn gethostid() -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn sync();
    }
    unsafe extern "C" {
        pub fn getpagesize() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getdtablesize() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn truncate(
            __file: *const ::core::ffi::c_char,
            __length: root::__off_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn truncate64(
            __file: *const ::core::ffi::c_char,
            __length: root::__off64_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ftruncate(__fd: ::core::ffi::c_int, __length: root::__off_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ftruncate64(
            __fd: ::core::ffi::c_int,
            __length: root::__off64_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn brk(__addr: *mut ::core::ffi::c_void) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sbrk(__delta: isize) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn syscall(__sysno: ::core::ffi::c_long, ...) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn lockf(
            __fd: ::core::ffi::c_int,
            __cmd: ::core::ffi::c_int,
            __len: root::__off_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn lockf64(
            __fd: ::core::ffi::c_int,
            __cmd: ::core::ffi::c_int,
            __len: root::__off64_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn copy_file_range(
            __infd: ::core::ffi::c_int,
            __pinoff: *mut root::__off64_t,
            __outfd: ::core::ffi::c_int,
            __poutoff: *mut root::__off64_t,
            __length: usize,
            __flags: ::core::ffi::c_uint,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn fdatasync(__fildes: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn crypt(
            __key: *const ::core::ffi::c_char,
            __salt: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn swab(__from: *const ::core::ffi::c_void, __to: *mut ::core::ffi::c_void, __n: isize);
    }
    unsafe extern "C" {
        pub fn getentropy(
            __buffer: *mut ::core::ffi::c_void,
            __length: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn close_range(
            __fd: ::core::ffi::c_uint,
            __max_fd: ::core::ffi::c_uint,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn gettid() -> root::__pid_t;
    }
    pub type HMODULE = *mut ::core::ffi::c_void;
    pub mod std {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub type nullptr_t = *const ::core::ffi::c_void;
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt21__glibcxx_assert_failPKciS0_S0_"]
            pub fn __glibcxx_assert_fail(
                __file: *const ::core::ffi::c_char,
                __line: ::core::ffi::c_int,
                __function: *const ::core::ffi::c_char,
                __condition: *const ::core::ffi::c_char,
            ) -> !;
        }
        pub type byte = ::core::ffi::c_uchar;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __byte_operand {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_bool__close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_bool__close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_char_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_char_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_signed_char_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_signed_char_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_unsigned_char_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_unsigned_char_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_wchar_t_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_wchar_t_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_char16_t_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_char16_t_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_char32_t_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_char32_t_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_short_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_short_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_unsigned_short_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_unsigned_short_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_int_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_int_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_unsigned_int_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_unsigned_int_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_long_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_long_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_unsigned_long_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_unsigned_long_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_long_long_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_long_long_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_unsigned_long_long_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_unsigned_long_long_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        pub type __byte_op_t = root::std::__byte_operand;
    }
    pub mod __gnu_cxx {
        #[allow(unused_imports)]
        use self::super::super::root;
    }
    #[repr(C)]
    #[repr(align(16))]
    #[derive(Debug, Copy, Clone)]
    pub struct max_align_t {
        pub __clang_max_align_nonce1: ::core::ffi::c_longlong,
        pub __bindgen_padding_0: u64,
        pub __clang_max_align_nonce2: u128,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of max_align_t"][::core::mem::size_of::<max_align_t>() - 32usize];
        ["Alignment of max_align_t"][::core::mem::align_of::<max_align_t>() - 16usize];
        ["Offset of field: max_align_t::__clang_max_align_nonce1"]
            [::core::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
        ["Offset of field: max_align_t::__clang_max_align_nonce2"]
            [::core::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
    };
    pub type QueryValveInterface = ::core::option::Option<
        unsafe extern "C" fn(
            pName: *const ::core::ffi::c_char,
            pReturnCode: *mut ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_void,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IServerPluginCallbacks {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct vsp_bridge_info {
        pub engineFactory: root::QueryValveInterface,
        pub gsFactory: root::QueryValveInterface,
        pub vsp_callbacks: *mut root::IServerPluginCallbacks,
        pub vsp_version: ::core::ffi::c_uint,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of vsp_bridge_info"][::core::mem::size_of::<vsp_bridge_info>() - 32usize];
        ["Alignment of vsp_bridge_info"][::core::mem::align_of::<vsp_bridge_info>() - 8usize];
        ["Offset of field: vsp_bridge_info::engineFactory"]
            [::core::mem::offset_of!(vsp_bridge_info, engineFactory) - 0usize];
        ["Offset of field: vsp_bridge_info::gsFactory"]
            [::core::mem::offset_of!(vsp_bridge_info, gsFactory) - 8usize];
        ["Offset of field: vsp_bridge_info::vsp_callbacks"]
            [::core::mem::offset_of!(vsp_bridge_info, vsp_callbacks) - 16usize];
        ["Offset of field: vsp_bridge_info::vsp_version"]
            [::core::mem::offset_of!(vsp_bridge_info, vsp_version) - 24usize];
    };
    #[repr(C)]
    pub struct IVspBridge__bindgen_vtable(::core::ffi::c_void);
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IVspBridge {
        pub vtable_: *const IVspBridge__bindgen_vtable,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of IVspBridge"][::core::mem::size_of::<IVspBridge>() - 8usize];
        ["Alignment of IVspBridge"][::core::mem::align_of::<IVspBridge>() - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct gamedll_bridge_info {
        pub engineFactory: root::QueryValveInterface,
        pub fsFactory: root::QueryValveInterface,
        pub physicsFactory: root::QueryValveInterface,
        pub gsFactory: root::QueryValveInterface,
        pub pGlobals: *mut ::core::ffi::c_void,
        pub dllVersion: ::core::ffi::c_uint,
        pub dllInterfaceName: *const ::core::ffi::c_char,
        pub isgd: *mut ::core::ffi::c_void,
        pub vsp_listener_path: *const ::core::ffi::c_char,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of gamedll_bridge_info"][::core::mem::size_of::<gamedll_bridge_info>() - 72usize];
        ["Alignment of gamedll_bridge_info"]
            [::core::mem::align_of::<gamedll_bridge_info>() - 8usize];
        ["Offset of field: gamedll_bridge_info::engineFactory"]
            [::core::mem::offset_of!(gamedll_bridge_info, engineFactory) - 0usize];
        ["Offset of field: gamedll_bridge_info::fsFactory"]
            [::core::mem::offset_of!(gamedll_bridge_info, fsFactory) - 8usize];
        ["Offset of field: gamedll_bridge_info::physicsFactory"]
            [::core::mem::offset_of!(gamedll_bridge_info, physicsFactory) - 16usize];
        ["Offset of field: gamedll_bridge_info::gsFactory"]
            [::core::mem::offset_of!(gamedll_bridge_info, gsFactory) - 24usize];
        ["Offset of field: gamedll_bridge_info::pGlobals"]
            [::core::mem::offset_of!(gamedll_bridge_info, pGlobals) - 32usize];
        ["Offset of field: gamedll_bridge_info::dllVersion"]
            [::core::mem::offset_of!(gamedll_bridge_info, dllVersion) - 40usize];
        ["Offset of field: gamedll_bridge_info::dllInterfaceName"]
            [::core::mem::offset_of!(gamedll_bridge_info, dllInterfaceName) - 48usize];
        ["Offset of field: gamedll_bridge_info::isgd"]
            [::core::mem::offset_of!(gamedll_bridge_info, isgd) - 56usize];
        ["Offset of field: gamedll_bridge_info::vsp_listener_path"]
            [::core::mem::offset_of!(gamedll_bridge_info, vsp_listener_path) - 64usize];
    };
    #[repr(C)]
    pub struct IGameDllBridge__bindgen_vtable(::core::ffi::c_void);
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct IGameDllBridge {
        pub vtable_: *const IGameDllBridge__bindgen_vtable,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of IGameDllBridge"][::core::mem::size_of::<IGameDllBridge>() - 8usize];
        ["Alignment of IGameDllBridge"][::core::mem::align_of::<IGameDllBridge>() - 8usize];
    };
    pub const MetamodBackend_MMBackend_Episode1: root::MetamodBackend = 0;
    pub const MetamodBackend_MMBackend_DarkMessiah: root::MetamodBackend = 1;
    pub const MetamodBackend_MMBackend_Episode2: root::MetamodBackend = 2;
    pub const MetamodBackend_MMBackend_BloodyGoodTime: root::MetamodBackend = 3;
    pub const MetamodBackend_MMBackend_EYE: root::MetamodBackend = 4;
    pub const MetamodBackend_MMBackend_CSS: root::MetamodBackend = 5;
    pub const MetamodBackend_MMBackend_Episode2Valve_OBSOLETE: root::MetamodBackend = 6;
    pub const MetamodBackend_MMBackend_Left4Dead: root::MetamodBackend = 7;
    pub const MetamodBackend_MMBackend_Left4Dead2: root::MetamodBackend = 8;
    pub const MetamodBackend_MMBackend_AlienSwarm: root::MetamodBackend = 9;
    pub const MetamodBackend_MMBackend_Portal2: root::MetamodBackend = 10;
    pub const MetamodBackend_MMBackend_CSGO: root::MetamodBackend = 11;
    pub const MetamodBackend_MMBackend_DOTA: root::MetamodBackend = 12;
    pub const MetamodBackend_MMBackend_HL2DM: root::MetamodBackend = 13;
    pub const MetamodBackend_MMBackend_DODS: root::MetamodBackend = 14;
    pub const MetamodBackend_MMBackend_TF2: root::MetamodBackend = 15;
    pub const MetamodBackend_MMBackend_NuclearDawn: root::MetamodBackend = 16;
    pub const MetamodBackend_MMBackend_SDK2013: root::MetamodBackend = 17;
    pub const MetamodBackend_MMBackend_Blade: root::MetamodBackend = 18;
    pub const MetamodBackend_MMBackend_Insurgency: root::MetamodBackend = 19;
    pub const MetamodBackend_MMBackend_Contagion: root::MetamodBackend = 20;
    pub const MetamodBackend_MMBackend_BMS: root::MetamodBackend = 21;
    pub const MetamodBackend_MMBackend_DOI: root::MetamodBackend = 22;
    pub const MetamodBackend_MMBackend_Mock: root::MetamodBackend = 23;
    pub const MetamodBackend_MMBackend_PVKII: root::MetamodBackend = 24;
    pub const MetamodBackend_MMBackend_MCV: root::MetamodBackend = 25;
    pub const MetamodBackend_MMBackend_CS2: root::MetamodBackend = 26;
    pub const MetamodBackend_MMBackend_Deadlock: root::MetamodBackend = 27;
    pub const MetamodBackend_MMBackend_UNKNOWN: root::MetamodBackend = 28;
    pub type MetamodBackend = ::core::ffi::c_uint;
    unsafe extern "C" {
        #[link_name = "\u{1}_Z21mm_LoadMetamodLibrary14MetamodBackendPcm"]
        pub fn mm_LoadMetamodLibrary(
            backend: root::MetamodBackend,
            buffer: *mut ::core::ffi::c_char,
            maxlength: usize,
        ) -> bool;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_Z17mm_GetProcAddressPKc"]
        pub fn mm_GetProcAddress(name: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_Z23mm_UnloadMetamodLibraryv"]
        pub fn mm_UnloadMetamodLibrary();
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_Z11mm_LogFatalPKcz"]
        pub fn mm_LogFatal(message: *const ::core::ffi::c_char, ...);
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_Z14mm_GetGameNamePcm"]
        pub fn mm_GetGameName(buffer: *mut ::core::ffi::c_char, size: usize);
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_Z21mm_DetermineBackendS1PFPvPKcPiES4_S1_"]
        pub fn mm_DetermineBackendS1(
            engineFactory: root::QueryValveInterface,
            serverFactory: root::QueryValveInterface,
            game_name: *const ::core::ffi::c_char,
        ) -> root::MetamodBackend;
    }
    unsafe extern "C" {
        pub static mut mm_backend: root::MetamodBackend;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct link_map {
        pub _address: u8,
    }
}
