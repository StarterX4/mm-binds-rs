/* automatically generated by rust-bindgen 0.71.1 */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[repr(C)]
    #[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
    pub struct __BindgenBitfieldUnit<Storage> {
        storage: Storage,
    }
    impl<Storage> __BindgenBitfieldUnit<Storage> {
        #[inline]
        pub const fn new(storage: Storage) -> Self {
            Self { storage }
        }
    }
    impl<Storage> __BindgenBitfieldUnit<Storage>
    where
        Storage: AsRef<[u8]> + AsMut<[u8]>,
    {
        #[inline]
        fn extract_bit(byte: u8, index: usize) -> bool {
            let bit_index = if cfg!(target_endian = "big") {
                7 - (index % 8)
            } else {
                index % 8
            };
            let mask = 1 << bit_index;
            byte & mask == mask
        }
        #[inline]
        pub fn get_bit(&self, index: usize) -> bool {
            debug_assert!(index / 8 < self.storage.as_ref().len());
            let byte_index = index / 8;
            let byte = self.storage.as_ref()[byte_index];
            Self::extract_bit(byte, index)
        }
        #[inline]
        pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
            debug_assert!(index / 8 < core::mem::size_of::<Storage>());
            let byte_index = index / 8;
            let byte =
                *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize);
            Self::extract_bit(byte, index)
        }
        #[inline]
        fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
            let bit_index = if cfg!(target_endian = "big") {
                7 - (index % 8)
            } else {
                index % 8
            };
            let mask = 1 << bit_index;
            if val {
                byte | mask
            } else {
                byte & !mask
            }
        }
        #[inline]
        pub fn set_bit(&mut self, index: usize, val: bool) {
            debug_assert!(index / 8 < self.storage.as_ref().len());
            let byte_index = index / 8;
            let byte = &mut self.storage.as_mut()[byte_index];
            *byte = Self::change_bit(*byte, index, val);
        }
        #[inline]
        pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
            debug_assert!(index / 8 < core::mem::size_of::<Storage>());
            let byte_index = index / 8;
            let byte =
                (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize);
            *byte = Self::change_bit(*byte, index, val);
        }
        #[inline]
        pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
            debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
            let mut val = 0;
            for i in 0..(bit_width as usize) {
                if self.get_bit(i + bit_offset) {
                    let index = if cfg!(target_endian = "big") {
                        bit_width as usize - 1 - i
                    } else {
                        i
                    };
                    val |= 1 << index;
                }
            }
            val
        }
        #[inline]
        pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
            debug_assert!(
                (bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>()
            );
            let mut val = 0;
            for i in 0..(bit_width as usize) {
                if Self::raw_get_bit(this, i + bit_offset) {
                    let index = if cfg!(target_endian = "big") {
                        bit_width as usize - 1 - i
                    } else {
                        i
                    };
                    val |= 1 << index;
                }
            }
            val
        }
        #[inline]
        pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
            debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
            for i in 0..(bit_width as usize) {
                let mask = 1 << i;
                let val_bit_is_set = val & mask == mask;
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                self.set_bit(index + bit_offset, val_bit_is_set);
            }
        }
        #[inline]
        pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
            debug_assert!(
                (bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>()
            );
            for i in 0..(bit_width as usize) {
                let mask = 1 << i;
                let val_bit_is_set = val & mask == mask;
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                Self::raw_set_bit(this, index + bit_offset, val_bit_is_set);
            }
        }
    }
    #[doc = r" If Bindgen could only determine the size and alignment of a"]
    #[doc = r" type, it is represented like this."]
    #[derive(PartialEq, Copy, Clone, Debug, Hash)]
    #[repr(C)]
    pub struct __BindgenOpaqueArray<T: Copy, const N: usize>(pub [T; N]);
    impl<T: Copy + Default, const N: usize> Default for __BindgenOpaqueArray<T, N> {
        fn default() -> Self {
            Self([<T as Default>::default(); N])
        }
    }
    #[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
    #[repr(C)]
    pub struct __BindgenComplex<T> {
        pub re: T,
        pub im: T,
    }
    #[repr(C)]
    pub struct __BindgenUnionField<T>(::core::marker::PhantomData<T>);
    impl<T> __BindgenUnionField<T> {
        #[inline]
        pub const fn new() -> Self {
            __BindgenUnionField(::core::marker::PhantomData)
        }
        #[inline]
        pub unsafe fn as_ref(&self) -> &T {
            ::core::mem::transmute(self)
        }
        #[inline]
        pub unsafe fn as_mut(&mut self) -> &mut T {
            ::core::mem::transmute(self)
        }
    }
    impl<T> ::core::default::Default for __BindgenUnionField<T> {
        #[inline]
        fn default() -> Self {
            Self::new()
        }
    }
    impl<T> ::core::clone::Clone for __BindgenUnionField<T> {
        #[inline]
        fn clone(&self) -> Self {
            *self
        }
    }
    impl<T> ::core::marker::Copy for __BindgenUnionField<T> {}
    impl<T> ::core::fmt::Debug for __BindgenUnionField<T> {
        fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            fmt.write_str("__BindgenUnionField")
        }
    }
    impl<T> ::core::hash::Hash for __BindgenUnionField<T> {
        fn hash<H: ::core::hash::Hasher>(&self, _state: &mut H) {}
    }
    impl<T> ::core::cmp::PartialEq for __BindgenUnionField<T> {
        fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
            true
        }
    }
    impl<T> ::core::cmp::Eq for __BindgenUnionField<T> {}
    #[allow(unused_imports)]
    use self::super::root;
    pub const POSIX: u32 = 1;
    pub const LINUX: u32 = 1;
    pub const _LINUX: u32 = 1;
    pub const COMPILER_GCC: u32 = 1;
    pub const _DLFCN_H: u32 = 1;
    pub const _FEATURES_H: u32 = 1;
    pub const _ISOC95_SOURCE: u32 = 1;
    pub const _ISOC99_SOURCE: u32 = 1;
    pub const _ISOC11_SOURCE: u32 = 1;
    pub const _ISOC23_SOURCE: u32 = 1;
    pub const _ISOC2Y_SOURCE: u32 = 1;
    pub const _POSIX_SOURCE: u32 = 1;
    pub const _POSIX_C_SOURCE: u32 = 200809;
    pub const _XOPEN_SOURCE: u32 = 700;
    pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
    pub const _LARGEFILE64_SOURCE: u32 = 1;
    pub const _DEFAULT_SOURCE: u32 = 1;
    pub const _ATFILE_SOURCE: u32 = 1;
    pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
    pub const __GLIBC_USE_ISOC2Y: u32 = 1;
    pub const __GLIBC_USE_ISOC23: u32 = 1;
    pub const __USE_ISOC11: u32 = 1;
    pub const __USE_ISOC99: u32 = 1;
    pub const __USE_ISOC95: u32 = 1;
    pub const __USE_ISOCXX11: u32 = 1;
    pub const __USE_POSIX: u32 = 1;
    pub const __USE_POSIX2: u32 = 1;
    pub const __USE_POSIX199309: u32 = 1;
    pub const __USE_POSIX199506: u32 = 1;
    pub const __USE_XOPEN2K: u32 = 1;
    pub const __USE_XOPEN2K8: u32 = 1;
    pub const __USE_XOPEN: u32 = 1;
    pub const __USE_XOPEN_EXTENDED: u32 = 1;
    pub const __USE_UNIX98: u32 = 1;
    pub const _LARGEFILE_SOURCE: u32 = 1;
    pub const __USE_XOPEN2K8XSI: u32 = 1;
    pub const __USE_XOPEN2KXSI: u32 = 1;
    pub const __USE_LARGEFILE: u32 = 1;
    pub const __USE_LARGEFILE64: u32 = 1;
    pub const __WORDSIZE: u32 = 64;
    pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
    pub const __SYSCALL_WORDSIZE: u32 = 64;
    pub const __TIMESIZE: u32 = 64;
    pub const __USE_TIME_BITS64: u32 = 1;
    pub const __USE_MISC: u32 = 1;
    pub const __USE_ATFILE: u32 = 1;
    pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
    pub const __USE_GNU: u32 = 1;
    pub const __USE_FORTIFY_LEVEL: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
    pub const __GLIBC_USE_C23_STRTOL: u32 = 1;
    pub const _STDC_PREDEF_H: u32 = 1;
    pub const __STDC_IEC_559__: u32 = 1;
    pub const __STDC_IEC_60559_BFP__: u32 = 201404;
    pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
    pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
    pub const __STDC_ISO_10646__: u32 = 201706;
    pub const __GNU_LIBRARY__: u32 = 6;
    pub const __GLIBC__: u32 = 2;
    pub const __GLIBC_MINOR__: u32 = 41;
    pub const _SYS_CDEFS_H: u32 = 1;
    pub const __glibc_c99_flexarr_available: u32 = 1;
    pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
    pub const __HAVE_GENERIC_SELECTION: u32 = 0;
    pub const RTLD_LAZY: u32 = 1;
    pub const RTLD_NOW: u32 = 2;
    pub const RTLD_BINDING_MASK: u32 = 3;
    pub const RTLD_NOLOAD: u32 = 4;
    pub const RTLD_DEEPBIND: u32 = 8;
    pub const RTLD_GLOBAL: u32 = 256;
    pub const RTLD_LOCAL: u32 = 0;
    pub const RTLD_NODELETE: u32 = 4096;
    pub const DLFO_STRUCT_HAS_EH_DBASE: u32 = 0;
    pub const DLFO_STRUCT_HAS_EH_COUNT: u32 = 0;
    pub const LM_ID_BASE: u32 = 0;
    pub const LM_ID_NEWLM: i32 = -1;
    pub const _UNISTD_H: u32 = 1;
    pub const _POSIX_VERSION: u32 = 200809;
    pub const __POSIX2_THIS_VERSION: u32 = 200809;
    pub const _POSIX2_VERSION: u32 = 200809;
    pub const _POSIX2_C_VERSION: u32 = 200809;
    pub const _POSIX2_C_BIND: u32 = 200809;
    pub const _POSIX2_C_DEV: u32 = 200809;
    pub const _POSIX2_SW_DEV: u32 = 200809;
    pub const _POSIX2_LOCALEDEF: u32 = 200809;
    pub const _XOPEN_VERSION: u32 = 700;
    pub const _XOPEN_XCU_VERSION: u32 = 4;
    pub const _XOPEN_XPG2: u32 = 1;
    pub const _XOPEN_XPG3: u32 = 1;
    pub const _XOPEN_XPG4: u32 = 1;
    pub const _XOPEN_UNIX: u32 = 1;
    pub const _XOPEN_ENH_I18N: u32 = 1;
    pub const _XOPEN_LEGACY: u32 = 1;
    pub const _BITS_POSIX_OPT_H: u32 = 1;
    pub const _POSIX_JOB_CONTROL: u32 = 1;
    pub const _POSIX_SAVED_IDS: u32 = 1;
    pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
    pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
    pub const _POSIX_FSYNC: u32 = 200809;
    pub const _POSIX_MAPPED_FILES: u32 = 200809;
    pub const _POSIX_MEMLOCK: u32 = 200809;
    pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
    pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
    pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
    pub const _POSIX_VDISABLE: u8 = 0u8;
    pub const _POSIX_NO_TRUNC: u32 = 1;
    pub const _XOPEN_REALTIME: u32 = 1;
    pub const _XOPEN_REALTIME_THREADS: u32 = 1;
    pub const _XOPEN_SHM: u32 = 1;
    pub const _POSIX_THREADS: u32 = 200809;
    pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
    pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
    pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
    pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
    pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
    pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
    pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
    pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
    pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
    pub const _POSIX_SEMAPHORES: u32 = 200809;
    pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
    pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
    pub const _POSIX_ASYNC_IO: u32 = 1;
    pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
    pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
    pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
    pub const _LFS_LARGEFILE: u32 = 1;
    pub const _LFS64_LARGEFILE: u32 = 1;
    pub const _LFS64_STDIO: u32 = 1;
    pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
    pub const _POSIX_CPUTIME: u32 = 0;
    pub const _POSIX_THREAD_CPUTIME: u32 = 0;
    pub const _POSIX_REGEXP: u32 = 1;
    pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
    pub const _POSIX_SHELL: u32 = 1;
    pub const _POSIX_TIMEOUTS: u32 = 200809;
    pub const _POSIX_SPIN_LOCKS: u32 = 200809;
    pub const _POSIX_SPAWN: u32 = 200809;
    pub const _POSIX_TIMERS: u32 = 200809;
    pub const _POSIX_BARRIERS: u32 = 200809;
    pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
    pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
    pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
    pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
    pub const _POSIX_ADVISORY_INFO: u32 = 200809;
    pub const _POSIX_IPV6: u32 = 200809;
    pub const _POSIX_RAW_SOCKETS: u32 = 200809;
    pub const _POSIX2_CHAR_TERM: u32 = 200809;
    pub const _POSIX_SPORADIC_SERVER: i32 = -1;
    pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
    pub const _POSIX_TRACE: i32 = -1;
    pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
    pub const _POSIX_TRACE_INHERIT: i32 = -1;
    pub const _POSIX_TRACE_LOG: i32 = -1;
    pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
    pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
    pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
    pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
    pub const _POSIX_V7_LP64_OFF64: u32 = 1;
    pub const _POSIX_V6_LP64_OFF64: u32 = 1;
    pub const _XBS5_LP64_OFF64: u32 = 1;
    pub const __ILP32_OFF32_CFLAGS: &[u8; 5] = b"-m32\0";
    pub const __ILP32_OFF32_LDFLAGS: &[u8; 5] = b"-m32\0";
    pub const __ILP32_OFFBIG_CFLAGS: &[u8; 48] =
        b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
    pub const __ILP32_OFFBIG_LDFLAGS: &[u8; 5] = b"-m32\0";
    pub const __LP64_OFF64_CFLAGS: &[u8; 5] = b"-m64\0";
    pub const __LP64_OFF64_LDFLAGS: &[u8; 5] = b"-m64\0";
    pub const STDIN_FILENO: u32 = 0;
    pub const STDOUT_FILENO: u32 = 1;
    pub const STDERR_FILENO: u32 = 2;
    pub const _BITS_TYPES_H: u32 = 1;
    pub const _BITS_TYPESIZES_H: u32 = 1;
    pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
    pub const __INO_T_MATCHES_INO64_T: u32 = 1;
    pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
    pub const __STATFS_MATCHES_STATFS64: u32 = 1;
    pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
    pub const __FD_SETSIZE: u32 = 1024;
    pub const _BITS_TIME64_H: u32 = 1;
    pub const R_OK: u32 = 4;
    pub const W_OK: u32 = 2;
    pub const X_OK: u32 = 1;
    pub const F_OK: u32 = 0;
    pub const SEEK_SET: u32 = 0;
    pub const SEEK_CUR: u32 = 1;
    pub const SEEK_END: u32 = 2;
    pub const SEEK_DATA: u32 = 3;
    pub const SEEK_HOLE: u32 = 4;
    pub const L_SET: u32 = 0;
    pub const L_INCR: u32 = 1;
    pub const L_XTND: u32 = 2;
    pub const _GETOPT_POSIX_H: u32 = 1;
    pub const _GETOPT_CORE_H: u32 = 1;
    pub const F_ULOCK: u32 = 0;
    pub const F_LOCK: u32 = 1;
    pub const F_TLOCK: u32 = 2;
    pub const F_TEST: u32 = 3;
    pub const CLOSE_RANGE_UNSHARE: u32 = 2;
    pub const CLOSE_RANGE_CLOEXEC: u32 = 4;
    pub const _SYS_TYPES_H: u32 = 1;
    pub const __clock_t_defined: u32 = 1;
    pub const __clockid_t_defined: u32 = 1;
    pub const __time_t_defined: u32 = 1;
    pub const __timer_t_defined: u32 = 1;
    pub const _BITS_STDINT_INTN_H: u32 = 1;
    pub const __BIT_TYPES_DEFINED__: u32 = 1;
    pub const _ENDIAN_H: u32 = 1;
    pub const _BITS_ENDIAN_H: u32 = 1;
    pub const __LITTLE_ENDIAN: u32 = 1234;
    pub const __BIG_ENDIAN: u32 = 4321;
    pub const __PDP_ENDIAN: u32 = 3412;
    pub const _BITS_ENDIANNESS_H: u32 = 1;
    pub const __BYTE_ORDER: u32 = 1234;
    pub const __FLOAT_WORD_ORDER: u32 = 1234;
    pub const LITTLE_ENDIAN: u32 = 1234;
    pub const BIG_ENDIAN: u32 = 4321;
    pub const PDP_ENDIAN: u32 = 3412;
    pub const BYTE_ORDER: u32 = 1234;
    pub const _BITS_BYTESWAP_H: u32 = 1;
    pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
    pub const _SYS_SELECT_H: u32 = 1;
    pub const __sigset_t_defined: u32 = 1;
    pub const __timeval_defined: u32 = 1;
    pub const _STRUCT_TIMESPEC: u32 = 1;
    pub const FD_SETSIZE: u32 = 1024;
    pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
    pub const _THREAD_SHARED_TYPES_H: u32 = 1;
    pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
    pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
    pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
    pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
    pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
    pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
    pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
    pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
    pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
    pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
    pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
    pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
    pub const __have_pthread_attr_t: u32 = 1;
    pub const _DIRENT_H: u32 = 1;
    pub const _DIRENT_MATCHES_DIRENT64: u32 = 1;
    pub const _BITS_POSIX1_LIM_H: u32 = 1;
    pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
    pub const _POSIX_AIO_MAX: u32 = 1;
    pub const _POSIX_ARG_MAX: u32 = 4096;
    pub const _POSIX_CHILD_MAX: u32 = 25;
    pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
    pub const _POSIX_HOST_NAME_MAX: u32 = 255;
    pub const _POSIX_LINK_MAX: u32 = 8;
    pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
    pub const _POSIX_MAX_CANON: u32 = 255;
    pub const _POSIX_MAX_INPUT: u32 = 255;
    pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
    pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
    pub const _POSIX_NAME_MAX: u32 = 14;
    pub const _POSIX_NGROUPS_MAX: u32 = 8;
    pub const _POSIX_OPEN_MAX: u32 = 20;
    pub const _POSIX_FD_SETSIZE: u32 = 20;
    pub const _POSIX_PATH_MAX: u32 = 256;
    pub const _POSIX_PIPE_BUF: u32 = 512;
    pub const _POSIX_RE_DUP_MAX: u32 = 255;
    pub const _POSIX_RTSIG_MAX: u32 = 8;
    pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
    pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
    pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
    pub const _POSIX_SSIZE_MAX: u32 = 32767;
    pub const _POSIX_STREAM_MAX: u32 = 8;
    pub const _POSIX_SYMLINK_MAX: u32 = 255;
    pub const _POSIX_SYMLOOP_MAX: u32 = 8;
    pub const _POSIX_TIMER_MAX: u32 = 32;
    pub const _POSIX_TTY_NAME_MAX: u32 = 9;
    pub const _POSIX_TZNAME_MAX: u32 = 6;
    pub const _POSIX_QLIMIT: u32 = 1;
    pub const _POSIX_HIWAT: u32 = 512;
    pub const _POSIX_UIO_MAXIOV: u32 = 16;
    pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
    pub const NR_OPEN: u32 = 1024;
    pub const NGROUPS_MAX: u32 = 65536;
    pub const ARG_MAX: u32 = 131072;
    pub const LINK_MAX: u32 = 127;
    pub const MAX_CANON: u32 = 255;
    pub const MAX_INPUT: u32 = 255;
    pub const NAME_MAX: u32 = 255;
    pub const PATH_MAX: u32 = 4096;
    pub const PIPE_BUF: u32 = 4096;
    pub const XATTR_NAME_MAX: u32 = 255;
    pub const XATTR_SIZE_MAX: u32 = 65536;
    pub const XATTR_LIST_MAX: u32 = 65536;
    pub const RTSIG_MAX: u32 = 32;
    pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
    pub const PTHREAD_KEYS_MAX: u32 = 1024;
    pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
    pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
    pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
    pub const AIO_PRIO_DELTA_MAX: u32 = 20;
    pub const __SC_THREAD_STACK_MIN_VALUE: u32 = 75;
    pub const DELAYTIMER_MAX: u32 = 2147483647;
    pub const TTY_NAME_MAX: u32 = 32;
    pub const LOGIN_NAME_MAX: u32 = 256;
    pub const HOST_NAME_MAX: u32 = 64;
    pub const MQ_PRIO_MAX: u32 = 32768;
    pub const SEM_VALUE_MAX: u32 = 2147483647;
    pub const MAXNAMLEN: u32 = 255;
    pub const PATH_SEP_STR: &[u8; 2] = b"/\0";
    pub const PATH_SEP_CHAR: u8 = 47u8;
    pub const ALT_SEP_CHAR: u8 = 92u8;
    pub const PATH_SIZE: u32 = 4096;
    pub const _GLIBCXX_CERRNO: u32 = 1;
    pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
    pub const _GLIBCXX_RELEASE: u32 = 15;
    pub const __GLIBCXX__: u32 = 20250425;
    pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
    pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
    pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
    pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
    pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
    pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
    pub const _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED: u32 = 1;
    pub const _GLIBCXX_ASSERTIONS: u32 = 1;
    pub const _GLIBCXX_VERBOSE_ASSERT: u32 = 1;
    pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
    pub const _GLIBCXX_OS_DEFINES: u32 = 1;
    pub const __NO_CTYPE: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOAT128_MATH: u32 = 1;
    pub const _GLIBCXX_MAY_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
    pub const _GLIBCXX_GTHREAD_USE_WEAK: u32 = 0;
    pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
    pub const _GLIBCXX_FAST_MATH: u32 = 0;
    pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
    pub const _GLIBCXX_FLOAT_IS_IEEE_BINARY32: u32 = 1;
    pub const _GLIBCXX_DOUBLE_IS_IEEE_BINARY64: u32 = 1;
    pub const _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP: u32 = 1;
    pub const _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE: u32 = 1;
    pub const _GLIBCXX_HAVE_BUILTIN_LAUNDER: u32 = 1;
    pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
    pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
    pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
    pub const _GLIBCXX_HAVE_ARC4RANDOM: u32 = 1;
    pub const _GLIBCXX_HAVE_ARPA_INET_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
    pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
    pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
    pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
    pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
    pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
    pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
    pub const _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY: u32 = 1;
    pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
    pub const _GLIBCXX_HAVE_C99_FLT_EVAL_TYPES: u32 = 1;
    pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
    pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
    pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
    pub const _GLIBCXX_HAVE_COSF: u32 = 1;
    pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
    pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
    pub const _GLIBCXX_HAVE_COSL: u32 = 1;
    pub const _GLIBCXX_HAVE_DECL_STRNLEN: u32 = 1;
    pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_DIRFD: u32 = 1;
    pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
    pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
    pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
    pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FDOPENDIR: u32 = 1;
    pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
    pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
    pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
    pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_GETENTROPY: u32 = 1;
    pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
    pub const _GLIBCXX_HAVE_GETS: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
    pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
    pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
    pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
    pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
    pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
    pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
    pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
    pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
    pub const _GLIBCXX_HAVE_LINK: u32 = 1;
    pub const _GLIBCXX_HAVE_LINK_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_RANDOM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_TYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
    pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
    pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
    pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
    pub const _GLIBCXX_HAVE_LSEEK: u32 = 1;
    pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
    pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
    pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
    pub const _GLIBCXX_HAVE_MODF: u32 = 1;
    pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
    pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
    pub const _GLIBCXX_HAVE_NETDB_H: u32 = 1;
    pub const _GLIBCXX_HAVE_NETINET_IN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_NETINET_TCP_H: u32 = 1;
    pub const _GLIBCXX_HAVE_OPENAT: u32 = 1;
    pub const _GLIBCXX_HAVE_O_NONBLOCK: u32 = 1;
    pub const _GLIBCXX_HAVE_POLL: u32 = 1;
    pub const _GLIBCXX_HAVE_POLL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
    pub const _GLIBCXX_HAVE_POSIX_SEMAPHORE: u32 = 1;
    pub const _GLIBCXX_HAVE_POWF: u32 = 1;
    pub const _GLIBCXX_HAVE_POWL: u32 = 1;
    pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
    pub const _GLIBCXX_HAVE_READLINK: u32 = 1;
    pub const _GLIBCXX_HAVE_SECURE_GETENV: u32 = 1;
    pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
    pub const _GLIBCXX_HAVE_SINF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
    pub const _GLIBCXX_HAVE_SINL: u32 = 1;
    pub const _GLIBCXX_HAVE_SOCKATMARK: u32 = 1;
    pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
    pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
    pub const _GLIBCXX_HAVE_STACKTRACE: u32 = 1;
    pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
    pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
    pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
    pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
    pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
    pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
    pub const _GLIBCXX_HAVE_SYMLINK: u32 = 1;
    pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_MMAN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SDT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SOCKET_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
    pub const _GLIBCXX_HAVE_TANF: u32 = 1;
    pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
    pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
    pub const _GLIBCXX_HAVE_TANL: u32 = 1;
    pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
    pub const _GLIBCXX_HAVE_TIMESPEC_GET: u32 = 1;
    pub const _GLIBCXX_HAVE_TLS: u32 = 1;
    pub const _GLIBCXX_HAVE_TRUNCATE: u32 = 1;
    pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
    pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
    pub const _GLIBCXX_HAVE_UNLINKAT: u32 = 1;
    pub const _GLIBCXX_HAVE_USELOCALE: u32 = 1;
    pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
    pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
    pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
    pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
    pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
    pub const _GLIBCXX_LT_OBJDIR: &[u8; 7] = b".libs/\0";
    pub const _GLIBCXX_PACKAGE_BUGREPORT: &[u8; 1] = b"\0";
    pub const _GLIBCXX_PACKAGE_NAME: &[u8; 15] = b"package-unused\0";
    pub const _GLIBCXX_PACKAGE_STRING: &[u8; 30] = b"package-unused version-unused\0";
    pub const _GLIBCXX_PACKAGE_TARNAME: &[u8; 10] = b"libstdc++\0";
    pub const _GLIBCXX_PACKAGE_URL: &[u8; 1] = b"\0";
    pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &[u8; 15] = b"version-unused\0";
    pub const _GLIBCXX_STDC_HEADERS: u32 = 1;
    pub const _GLIBCXX_DARWIN_USE_64_BIT_INODE: u32 = 1;
    pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
    pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
    pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
    pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
    pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
    pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
    pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
    pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
    pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
    pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
    pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
    pub const _GLIBCXX_CAN_ALIGNAS_DESTRUCTIVE_SIZE: u32 = 1;
    pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
    pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
    pub const _GLIBCXX_RES_LIMITS: u32 = 1;
    pub const _GLIBCXX_STATIC_TZDATA: u32 = 1;
    pub const _GLIBCXX_STDIO_EOF: i32 = -1;
    pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
    pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
    pub const _GLIBCXX_SYMVER: u32 = 1;
    pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
    pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
    pub const _GLIBCXX_USE_C99: u32 = 1;
    pub const _GLIBCXX_USE_C99_COMPLEX_ARC: u32 = 1;
    pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_CTYPE: u32 = 1;
    pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_FENV: u32 = 1;
    pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_MATH_FUNCS: u32 = 1;
    pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_STDINT: u32 = 1;
    pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
    pub const _GLIBCXX_USE_CHDIR: u32 = 1;
    pub const _GLIBCXX_USE_CHMOD: u32 = 1;
    pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
    pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
    pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
    pub const _GLIBCXX_USE_DEV_RANDOM: u32 = 1;
    pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
    pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
    pub const _GLIBCXX_USE_FSEEKO_FTELLO: u32 = 1;
    pub const _GLIBCXX_USE_GETCWD: u32 = 1;
    pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
    pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
    pub const _GLIBCXX_USE_INIT_PRIORITY_ATTRIBUTE: u32 = 1;
    pub const _GLIBCXX_USE_LFS: u32 = 1;
    pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
    pub const _GLIBCXX_USE_LSTAT: u32 = 1;
    pub const _GLIBCXX_USE_MKDIR: u32 = 1;
    pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
    pub const _GLIBCXX_USE_NLS: u32 = 1;
    pub const _GLIBCXX_USE_NL_LANGINFO_L: u32 = 1;
    pub const _GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT: u32 = 1;
    pub const _GLIBCXX_USE_PTHREAD_RWLOCK_CLOCKLOCK: u32 = 1;
    pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
    pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
    pub const _GLIBCXX_USE_REALPATH: u32 = 1;
    pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
    pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
    pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
    pub const _GLIBCXX_USE_STRUCT_TM_TM_ZONE: u32 = 1;
    pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
    pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
    pub const _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_CXX20: u32 = 1;
    pub const _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_FCHAR8_T: u32 = 1;
    pub const _GLIBCXX_USE_UTIME: u32 = 1;
    pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
    pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
    pub const _GLIBCXX_VERBOSE: u32 = 1;
    pub const _GLIBCXX_X86_RDRAND: u32 = 1;
    pub const _GLIBCXX_X86_RDSEED: u32 = 1;
    pub const _GLIBCXX_ZONEINFO_DIR: &[u8; 20] = b"/usr/share/zoneinfo\0";
    pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
    pub const _ERRNO_H: u32 = 1;
    pub const _BITS_ERRNO_H: u32 = 1;
    pub const EPERM: u32 = 1;
    pub const ENOENT: u32 = 2;
    pub const ESRCH: u32 = 3;
    pub const EINTR: u32 = 4;
    pub const EIO: u32 = 5;
    pub const ENXIO: u32 = 6;
    pub const E2BIG: u32 = 7;
    pub const ENOEXEC: u32 = 8;
    pub const EBADF: u32 = 9;
    pub const ECHILD: u32 = 10;
    pub const EAGAIN: u32 = 11;
    pub const ENOMEM: u32 = 12;
    pub const EACCES: u32 = 13;
    pub const EFAULT: u32 = 14;
    pub const ENOTBLK: u32 = 15;
    pub const EBUSY: u32 = 16;
    pub const EEXIST: u32 = 17;
    pub const EXDEV: u32 = 18;
    pub const ENODEV: u32 = 19;
    pub const ENOTDIR: u32 = 20;
    pub const EISDIR: u32 = 21;
    pub const EINVAL: u32 = 22;
    pub const ENFILE: u32 = 23;
    pub const EMFILE: u32 = 24;
    pub const ENOTTY: u32 = 25;
    pub const ETXTBSY: u32 = 26;
    pub const EFBIG: u32 = 27;
    pub const ENOSPC: u32 = 28;
    pub const ESPIPE: u32 = 29;
    pub const EROFS: u32 = 30;
    pub const EMLINK: u32 = 31;
    pub const EPIPE: u32 = 32;
    pub const EDOM: u32 = 33;
    pub const ERANGE: u32 = 34;
    pub const EDEADLK: u32 = 35;
    pub const ENAMETOOLONG: u32 = 36;
    pub const ENOLCK: u32 = 37;
    pub const ENOSYS: u32 = 38;
    pub const ENOTEMPTY: u32 = 39;
    pub const ELOOP: u32 = 40;
    pub const EWOULDBLOCK: u32 = 11;
    pub const ENOMSG: u32 = 42;
    pub const EIDRM: u32 = 43;
    pub const ECHRNG: u32 = 44;
    pub const EL2NSYNC: u32 = 45;
    pub const EL3HLT: u32 = 46;
    pub const EL3RST: u32 = 47;
    pub const ELNRNG: u32 = 48;
    pub const EUNATCH: u32 = 49;
    pub const ENOCSI: u32 = 50;
    pub const EL2HLT: u32 = 51;
    pub const EBADE: u32 = 52;
    pub const EBADR: u32 = 53;
    pub const EXFULL: u32 = 54;
    pub const ENOANO: u32 = 55;
    pub const EBADRQC: u32 = 56;
    pub const EBADSLT: u32 = 57;
    pub const EDEADLOCK: u32 = 35;
    pub const EBFONT: u32 = 59;
    pub const ENOSTR: u32 = 60;
    pub const ENODATA: u32 = 61;
    pub const ETIME: u32 = 62;
    pub const ENOSR: u32 = 63;
    pub const ENONET: u32 = 64;
    pub const ENOPKG: u32 = 65;
    pub const EREMOTE: u32 = 66;
    pub const ENOLINK: u32 = 67;
    pub const EADV: u32 = 68;
    pub const ESRMNT: u32 = 69;
    pub const ECOMM: u32 = 70;
    pub const EPROTO: u32 = 71;
    pub const EMULTIHOP: u32 = 72;
    pub const EDOTDOT: u32 = 73;
    pub const EBADMSG: u32 = 74;
    pub const EOVERFLOW: u32 = 75;
    pub const ENOTUNIQ: u32 = 76;
    pub const EBADFD: u32 = 77;
    pub const EREMCHG: u32 = 78;
    pub const ELIBACC: u32 = 79;
    pub const ELIBBAD: u32 = 80;
    pub const ELIBSCN: u32 = 81;
    pub const ELIBMAX: u32 = 82;
    pub const ELIBEXEC: u32 = 83;
    pub const EILSEQ: u32 = 84;
    pub const ERESTART: u32 = 85;
    pub const ESTRPIPE: u32 = 86;
    pub const EUSERS: u32 = 87;
    pub const ENOTSOCK: u32 = 88;
    pub const EDESTADDRREQ: u32 = 89;
    pub const EMSGSIZE: u32 = 90;
    pub const EPROTOTYPE: u32 = 91;
    pub const ENOPROTOOPT: u32 = 92;
    pub const EPROTONOSUPPORT: u32 = 93;
    pub const ESOCKTNOSUPPORT: u32 = 94;
    pub const EOPNOTSUPP: u32 = 95;
    pub const EPFNOSUPPORT: u32 = 96;
    pub const EAFNOSUPPORT: u32 = 97;
    pub const EADDRINUSE: u32 = 98;
    pub const EADDRNOTAVAIL: u32 = 99;
    pub const ENETDOWN: u32 = 100;
    pub const ENETUNREACH: u32 = 101;
    pub const ENETRESET: u32 = 102;
    pub const ECONNABORTED: u32 = 103;
    pub const ECONNRESET: u32 = 104;
    pub const ENOBUFS: u32 = 105;
    pub const EISCONN: u32 = 106;
    pub const ENOTCONN: u32 = 107;
    pub const ESHUTDOWN: u32 = 108;
    pub const ETOOMANYREFS: u32 = 109;
    pub const ETIMEDOUT: u32 = 110;
    pub const ECONNREFUSED: u32 = 111;
    pub const EHOSTDOWN: u32 = 112;
    pub const EHOSTUNREACH: u32 = 113;
    pub const EALREADY: u32 = 114;
    pub const EINPROGRESS: u32 = 115;
    pub const ESTALE: u32 = 116;
    pub const EUCLEAN: u32 = 117;
    pub const ENOTNAM: u32 = 118;
    pub const ENAVAIL: u32 = 119;
    pub const EISNAM: u32 = 120;
    pub const EREMOTEIO: u32 = 121;
    pub const EDQUOT: u32 = 122;
    pub const ENOMEDIUM: u32 = 123;
    pub const EMEDIUMTYPE: u32 = 124;
    pub const ECANCELED: u32 = 125;
    pub const ENOKEY: u32 = 126;
    pub const EKEYEXPIRED: u32 = 127;
    pub const EKEYREVOKED: u32 = 128;
    pub const EKEYREJECTED: u32 = 129;
    pub const EOWNERDEAD: u32 = 130;
    pub const ENOTRECOVERABLE: u32 = 131;
    pub const ERFKILL: u32 = 132;
    pub const EHWPOISON: u32 = 133;
    pub const ENOTSUP: u32 = 95;
    pub const __error_t_defined: u32 = 1;
    pub const _GLIBCXX_CSTDINT: u32 = 1;
    pub const _STDINT_H: u32 = 1;
    pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_EXT: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
    pub const _BITS_WCHAR_H: u32 = 1;
    pub const _BITS_STDINT_UINTN_H: u32 = 1;
    pub const _BITS_STDINT_LEAST_H: u32 = 1;
    pub const INT8_MIN: i32 = -128;
    pub const INT16_MIN: i32 = -32768;
    pub const INT32_MIN: i32 = -2147483648;
    pub const INT8_MAX: u32 = 127;
    pub const INT16_MAX: u32 = 32767;
    pub const INT32_MAX: u32 = 2147483647;
    pub const UINT8_MAX: u32 = 255;
    pub const UINT16_MAX: u32 = 65535;
    pub const UINT32_MAX: u32 = 4294967295;
    pub const INT_LEAST8_MIN: i32 = -128;
    pub const INT_LEAST16_MIN: i32 = -32768;
    pub const INT_LEAST32_MIN: i32 = -2147483648;
    pub const INT_LEAST8_MAX: u32 = 127;
    pub const INT_LEAST16_MAX: u32 = 32767;
    pub const INT_LEAST32_MAX: u32 = 2147483647;
    pub const UINT_LEAST8_MAX: u32 = 255;
    pub const UINT_LEAST16_MAX: u32 = 65535;
    pub const UINT_LEAST32_MAX: u32 = 4294967295;
    pub const INT_FAST8_MIN: i32 = -128;
    pub const INT_FAST16_MIN: i64 = -9223372036854775808;
    pub const INT_FAST32_MIN: i64 = -9223372036854775808;
    pub const INT_FAST8_MAX: u32 = 127;
    pub const INT_FAST16_MAX: u64 = 9223372036854775807;
    pub const INT_FAST32_MAX: u64 = 9223372036854775807;
    pub const UINT_FAST8_MAX: u32 = 255;
    pub const UINT_FAST16_MAX: i32 = -1;
    pub const UINT_FAST32_MAX: i32 = -1;
    pub const INTPTR_MIN: i64 = -9223372036854775808;
    pub const INTPTR_MAX: u64 = 9223372036854775807;
    pub const UINTPTR_MAX: i32 = -1;
    pub const PTRDIFF_MIN: i64 = -9223372036854775808;
    pub const PTRDIFF_MAX: u64 = 9223372036854775807;
    pub const SIG_ATOMIC_MIN: i32 = -2147483648;
    pub const SIG_ATOMIC_MAX: u32 = 2147483647;
    pub const SIZE_MAX: i32 = -1;
    pub const WINT_MIN: u32 = 0;
    pub const WINT_MAX: u32 = 4294967295;
    pub const INT8_WIDTH: u32 = 8;
    pub const UINT8_WIDTH: u32 = 8;
    pub const INT16_WIDTH: u32 = 16;
    pub const UINT16_WIDTH: u32 = 16;
    pub const INT32_WIDTH: u32 = 32;
    pub const UINT32_WIDTH: u32 = 32;
    pub const INT64_WIDTH: u32 = 64;
    pub const UINT64_WIDTH: u32 = 64;
    pub const INT_LEAST8_WIDTH: u32 = 8;
    pub const UINT_LEAST8_WIDTH: u32 = 8;
    pub const INT_LEAST16_WIDTH: u32 = 16;
    pub const UINT_LEAST16_WIDTH: u32 = 16;
    pub const INT_LEAST32_WIDTH: u32 = 32;
    pub const UINT_LEAST32_WIDTH: u32 = 32;
    pub const INT_LEAST64_WIDTH: u32 = 64;
    pub const UINT_LEAST64_WIDTH: u32 = 64;
    pub const INT_FAST8_WIDTH: u32 = 8;
    pub const UINT_FAST8_WIDTH: u32 = 8;
    pub const INT_FAST16_WIDTH: u32 = 64;
    pub const UINT_FAST16_WIDTH: u32 = 64;
    pub const INT_FAST32_WIDTH: u32 = 64;
    pub const UINT_FAST32_WIDTH: u32 = 64;
    pub const INT_FAST64_WIDTH: u32 = 64;
    pub const UINT_FAST64_WIDTH: u32 = 64;
    pub const INTPTR_WIDTH: u32 = 64;
    pub const UINTPTR_WIDTH: u32 = 64;
    pub const INTMAX_WIDTH: u32 = 64;
    pub const UINTMAX_WIDTH: u32 = 64;
    pub const PTRDIFF_WIDTH: u32 = 64;
    pub const SIG_ATOMIC_WIDTH: u32 = 32;
    pub const SIZE_WIDTH: u32 = 64;
    pub const WCHAR_WIDTH: u32 = 32;
    pub const WINT_WIDTH: u32 = 32;
    pub const _GLIBCXX_STDLIB_H: u32 = 1;
    pub const _GLIBCXX_CSTDLIB: u32 = 1;
    pub const _STDLIB_H: u32 = 1;
    pub const WNOHANG: u32 = 1;
    pub const WUNTRACED: u32 = 2;
    pub const WSTOPPED: u32 = 2;
    pub const WEXITED: u32 = 4;
    pub const WCONTINUED: u32 = 8;
    pub const WNOWAIT: u32 = 16777216;
    pub const __WNOTHREAD: u32 = 536870912;
    pub const __WALL: u32 = 1073741824;
    pub const __WCLONE: u32 = 2147483648;
    pub const __W_CONTINUED: u32 = 65535;
    pub const __WCOREFLAG: u32 = 128;
    pub const __HAVE_FLOAT128: u32 = 1;
    pub const __HAVE_DISTINCT_FLOAT128: u32 = 1;
    pub const __HAVE_FLOAT64X: u32 = 1;
    pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
    pub const __HAVE_FLOAT16: u32 = 0;
    pub const __HAVE_FLOAT32: u32 = 1;
    pub const __HAVE_FLOAT64: u32 = 1;
    pub const __HAVE_FLOAT32X: u32 = 1;
    pub const __HAVE_FLOAT128X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
    pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
    pub const __ldiv_t_defined: u32 = 1;
    pub const __lldiv_t_defined: u32 = 1;
    pub const RAND_MAX: u32 = 2147483647;
    pub const EXIT_FAILURE: u32 = 1;
    pub const EXIT_SUCCESS: u32 = 0;
    pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
    pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
    pub const _ALLOCA_H: u32 = 1;
    pub const SH_IFACE_VERSION: u32 = 5;
    pub const SH_IMPL_VERSION: u32 = 5;
    pub const SH_HOOKMAN_VERSION: u32 = 1;
    pub const SH_HOOKMANAUTOGEN_IFACE_VERSION: u32 = 1;
    pub const SH_HOOKMANAUTOGEN_IMPL_VERSION: u32 = 1;
    pub const SH_SYS_WIN32: u32 = 1;
    pub const SH_SYS_LINUX: u32 = 2;
    pub const SH_SYS_APPLE: u32 = 3;
    pub const SH_XP_POSIX: u32 = 10;
    pub const SH_XP_WINAPI: u32 = 20;
    pub const SH_SYS: u32 = 2;
    pub const SH_XP: u32 = 10;
    pub const SH_COMP_GCC: u32 = 1;
    pub const SH_COMP_MSVC: u32 = 2;
    pub const SH_COMP: u32 = 1;
    pub const _MEMORY_H: u32 = 1;
    pub const _STRING_H: u32 = 1;
    pub const _STRINGS_H: u32 = 1;
    pub const _SYS_MMAN_H: u32 = 1;
    pub const MAP_32BIT: u32 = 64;
    pub const MAP_ABOVE4G: u32 = 128;
    pub const SHADOW_STACK_SET_TOKEN: u32 = 1;
    pub const MAP_GROWSDOWN: u32 = 256;
    pub const MAP_DENYWRITE: u32 = 2048;
    pub const MAP_EXECUTABLE: u32 = 4096;
    pub const MAP_LOCKED: u32 = 8192;
    pub const MAP_NORESERVE: u32 = 16384;
    pub const MAP_POPULATE: u32 = 32768;
    pub const MAP_NONBLOCK: u32 = 65536;
    pub const MAP_STACK: u32 = 131072;
    pub const MAP_HUGETLB: u32 = 262144;
    pub const MAP_SYNC: u32 = 524288;
    pub const MAP_FIXED_NOREPLACE: u32 = 1048576;
    pub const PROT_READ: u32 = 1;
    pub const PROT_WRITE: u32 = 2;
    pub const PROT_EXEC: u32 = 4;
    pub const PROT_NONE: u32 = 0;
    pub const PROT_GROWSDOWN: u32 = 16777216;
    pub const PROT_GROWSUP: u32 = 33554432;
    pub const MAP_SHARED: u32 = 1;
    pub const MAP_PRIVATE: u32 = 2;
    pub const MAP_SHARED_VALIDATE: u32 = 3;
    pub const MAP_DROPPABLE: u32 = 8;
    pub const MAP_TYPE: u32 = 15;
    pub const MAP_FIXED: u32 = 16;
    pub const MAP_FILE: u32 = 0;
    pub const MAP_ANONYMOUS: u32 = 32;
    pub const MAP_ANON: u32 = 32;
    pub const MAP_HUGE_SHIFT: u32 = 26;
    pub const MAP_HUGE_MASK: u32 = 63;
    pub const MAP_HUGE_16KB: u32 = 939524096;
    pub const MAP_HUGE_64KB: u32 = 1073741824;
    pub const MAP_HUGE_512KB: u32 = 1275068416;
    pub const MAP_HUGE_1MB: u32 = 1342177280;
    pub const MAP_HUGE_2MB: u32 = 1409286144;
    pub const MAP_HUGE_8MB: u32 = 1543503872;
    pub const MAP_HUGE_16MB: u32 = 1610612736;
    pub const MAP_HUGE_32MB: u32 = 1677721600;
    pub const MAP_HUGE_256MB: u32 = 1879048192;
    pub const MAP_HUGE_512MB: u32 = 1946157056;
    pub const MAP_HUGE_1GB: u32 = 2013265920;
    pub const MAP_HUGE_2GB: u32 = 2080374784;
    pub const MAP_HUGE_16GB: u32 = 2281701376;
    pub const MS_ASYNC: u32 = 1;
    pub const MS_SYNC: u32 = 4;
    pub const MS_INVALIDATE: u32 = 2;
    pub const MADV_NORMAL: u32 = 0;
    pub const MADV_RANDOM: u32 = 1;
    pub const MADV_SEQUENTIAL: u32 = 2;
    pub const MADV_WILLNEED: u32 = 3;
    pub const MADV_DONTNEED: u32 = 4;
    pub const MADV_FREE: u32 = 8;
    pub const MADV_REMOVE: u32 = 9;
    pub const MADV_DONTFORK: u32 = 10;
    pub const MADV_DOFORK: u32 = 11;
    pub const MADV_MERGEABLE: u32 = 12;
    pub const MADV_UNMERGEABLE: u32 = 13;
    pub const MADV_HUGEPAGE: u32 = 14;
    pub const MADV_NOHUGEPAGE: u32 = 15;
    pub const MADV_DONTDUMP: u32 = 16;
    pub const MADV_DODUMP: u32 = 17;
    pub const MADV_WIPEONFORK: u32 = 18;
    pub const MADV_KEEPONFORK: u32 = 19;
    pub const MADV_COLD: u32 = 20;
    pub const MADV_PAGEOUT: u32 = 21;
    pub const MADV_POPULATE_READ: u32 = 22;
    pub const MADV_POPULATE_WRITE: u32 = 23;
    pub const MADV_DONTNEED_LOCKED: u32 = 24;
    pub const MADV_COLLAPSE: u32 = 25;
    pub const MADV_HWPOISON: u32 = 100;
    pub const POSIX_MADV_NORMAL: u32 = 0;
    pub const POSIX_MADV_RANDOM: u32 = 1;
    pub const POSIX_MADV_SEQUENTIAL: u32 = 2;
    pub const POSIX_MADV_WILLNEED: u32 = 3;
    pub const POSIX_MADV_DONTNEED: u32 = 4;
    pub const MCL_CURRENT: u32 = 1;
    pub const MCL_FUTURE: u32 = 2;
    pub const MCL_ONFAULT: u32 = 4;
    pub const MREMAP_MAYMOVE: u32 = 1;
    pub const MREMAP_FIXED: u32 = 2;
    pub const MREMAP_DONTUNMAP: u32 = 4;
    pub const MFD_CLOEXEC: u32 = 1;
    pub const MFD_ALLOW_SEALING: u32 = 2;
    pub const MFD_HUGETLB: u32 = 4;
    pub const MFD_NOEXEC_SEAL: u32 = 8;
    pub const MFD_EXEC: u32 = 16;
    pub const MLOCK_ONFAULT: u32 = 1;
    pub const PKEY_DISABLE_ACCESS: u32 = 1;
    pub const PKEY_DISABLE_WRITE: u32 = 2;
    pub const _STDIO_H: u32 = 1;
    pub const _____fpos_t_defined: u32 = 1;
    pub const ____mbstate_t_defined: u32 = 1;
    pub const _____fpos64_t_defined: u32 = 1;
    pub const ____FILE_defined: u32 = 1;
    pub const __FILE_defined: u32 = 1;
    pub const __struct_FILE_defined: u32 = 1;
    pub const _IO_EOF_SEEN: u32 = 16;
    pub const _IO_ERR_SEEN: u32 = 32;
    pub const _IO_USER_LOCK: u32 = 32768;
    pub const __cookie_io_functions_t_defined: u32 = 1;
    pub const _IOFBF: u32 = 0;
    pub const _IOLBF: u32 = 1;
    pub const _IONBF: u32 = 2;
    pub const BUFSIZ: u32 = 8192;
    pub const EOF: i32 = -1;
    pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
    pub const L_tmpnam: u32 = 20;
    pub const TMP_MAX: u32 = 238328;
    pub const _BITS_STDIO_LIM_H: u32 = 1;
    pub const FILENAME_MAX: u32 = 4096;
    pub const L_ctermid: u32 = 9;
    pub const L_cuserid: u32 = 9;
    pub const FOPEN_MAX: u32 = 16;
    pub const _PRINTF_NAN_LEN_MAX: u32 = 4;
    pub const RENAME_NOREPLACE: u32 = 1;
    pub const RENAME_EXCHANGE: u32 = 2;
    pub const RENAME_WHITEOUT: u32 = 4;
    pub const _BITS_SIGNUM_GENERIC_H: u32 = 1;
    pub const SIGINT: u32 = 2;
    pub const SIGILL: u32 = 4;
    pub const SIGABRT: u32 = 6;
    pub const SIGFPE: u32 = 8;
    pub const SIGSEGV: u32 = 11;
    pub const SIGTERM: u32 = 15;
    pub const SIGHUP: u32 = 1;
    pub const SIGQUIT: u32 = 3;
    pub const SIGTRAP: u32 = 5;
    pub const SIGKILL: u32 = 9;
    pub const SIGPIPE: u32 = 13;
    pub const SIGALRM: u32 = 14;
    pub const SIGIOT: u32 = 6;
    pub const _BITS_SIGNUM_ARCH_H: u32 = 1;
    pub const SIGSTKFLT: u32 = 16;
    pub const SIGPWR: u32 = 30;
    pub const SIGBUS: u32 = 7;
    pub const SIGSYS: u32 = 31;
    pub const SIGURG: u32 = 23;
    pub const SIGSTOP: u32 = 19;
    pub const SIGTSTP: u32 = 20;
    pub const SIGCONT: u32 = 18;
    pub const SIGCHLD: u32 = 17;
    pub const SIGTTIN: u32 = 21;
    pub const SIGTTOU: u32 = 22;
    pub const SIGPOLL: u32 = 29;
    pub const SIGXFSZ: u32 = 25;
    pub const SIGXCPU: u32 = 24;
    pub const SIGVTALRM: u32 = 26;
    pub const SIGPROF: u32 = 27;
    pub const SIGUSR1: u32 = 10;
    pub const SIGUSR2: u32 = 12;
    pub const SIGWINCH: u32 = 28;
    pub const SIGIO: u32 = 29;
    pub const SIGCLD: u32 = 17;
    pub const __SIGRTMIN: u32 = 32;
    pub const __SIGRTMAX: u32 = 64;
    pub const _NSIG: u32 = 65;
    pub const __sig_atomic_t_defined: u32 = 1;
    pub const __siginfo_t_defined: u32 = 1;
    pub const __SI_MAX_SIZE: u32 = 128;
    pub const _BITS_SIGINFO_ARCH_H: u32 = 1;
    pub const __SI_ERRNO_THEN_CODE: u32 = 1;
    pub const __SI_HAVE_SIGSYS: u32 = 1;
    pub const _BITS_SIGINFO_CONSTS_H: u32 = 1;
    pub const __SI_ASYNCIO_AFTER_SIGIO: u32 = 1;
    pub const _BITS_SIGINFO_CONSTS_ARCH_H: u32 = 1;
    pub const __sigevent_t_defined: u32 = 1;
    pub const __SIGEV_MAX_SIZE: u32 = 64;
    pub const _BITS_SIGEVENT_CONSTS_H: u32 = 1;
    pub const NSIG: u32 = 65;
    pub const _BITS_SIGACTION_H: u32 = 1;
    pub const SA_NOCLDSTOP: u32 = 1;
    pub const SA_NOCLDWAIT: u32 = 2;
    pub const SA_SIGINFO: u32 = 4;
    pub const SA_ONSTACK: u32 = 134217728;
    pub const SA_RESTART: u32 = 268435456;
    pub const SA_NODEFER: u32 = 1073741824;
    pub const SA_RESETHAND: u32 = 2147483648;
    pub const SA_INTERRUPT: u32 = 536870912;
    pub const SA_NOMASK: u32 = 1073741824;
    pub const SA_ONESHOT: u32 = 2147483648;
    pub const SA_STACK: u32 = 134217728;
    pub const SIG_BLOCK: u32 = 0;
    pub const SIG_UNBLOCK: u32 = 1;
    pub const SIG_SETMASK: u32 = 2;
    pub const _BITS_SIGCONTEXT_H: u32 = 1;
    pub const FP_XSTATE_MAGIC1: u32 = 1179670611;
    pub const FP_XSTATE_MAGIC2: u32 = 1179670597;
    pub const __stack_t_defined: u32 = 1;
    pub const _SYS_UCONTEXT_H: u32 = 1;
    pub const __NGREG: u32 = 23;
    pub const NGREG: u32 = 23;
    pub const _BITS_SIGSTACK_H: u32 = 1;
    pub const MINSIGSTKSZ: u32 = 2048;
    pub const SIGSTKSZ: u32 = 8192;
    pub const _BITS_SS_FLAGS_H: u32 = 1;
    pub const __sigstack_defined: u32 = 1;
    pub const _BITS_SIGTHREAD_H: u32 = 1;
    pub const _SETJMP_H: u32 = 1;
    pub const _BITS_SETJMP_H: u32 = 1;
    pub const __jmp_buf_tag_defined: u32 = 1;
    pub const _LIBC_LIMITS_H_: u32 = 1;
    pub const MB_LEN_MAX: u32 = 16;
    pub const CHAR_WIDTH: u32 = 8;
    pub const SCHAR_WIDTH: u32 = 8;
    pub const UCHAR_WIDTH: u32 = 8;
    pub const SHRT_WIDTH: u32 = 16;
    pub const USHRT_WIDTH: u32 = 16;
    pub const INT_WIDTH: u32 = 32;
    pub const UINT_WIDTH: u32 = 32;
    pub const LONG_WIDTH: u32 = 64;
    pub const ULONG_WIDTH: u32 = 64;
    pub const LLONG_WIDTH: u32 = 64;
    pub const ULLONG_WIDTH: u32 = 64;
    pub const BOOL_MAX: u32 = 1;
    pub const BOOL_WIDTH: u32 = 1;
    pub const _BITS_POSIX2_LIM_H: u32 = 1;
    pub const _POSIX2_BC_BASE_MAX: u32 = 99;
    pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
    pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
    pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
    pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
    pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
    pub const _POSIX2_LINE_MAX: u32 = 2048;
    pub const _POSIX2_RE_DUP_MAX: u32 = 255;
    pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
    pub const BC_BASE_MAX: u32 = 99;
    pub const BC_DIM_MAX: u32 = 2048;
    pub const BC_SCALE_MAX: u32 = 99;
    pub const BC_STRING_MAX: u32 = 1000;
    pub const COLL_WEIGHTS_MAX: u32 = 255;
    pub const EXPR_NEST_MAX: u32 = 32;
    pub const LINE_MAX: u32 = 2048;
    pub const CHARCLASS_NAME_MAX: u32 = 2048;
    pub const RE_DUP_MAX: u32 = 32767;
    pub const _XOPEN_LIM_H: u32 = 1;
    pub const _XOPEN_IOV_MAX: u32 = 16;
    pub const _BITS_UIO_LIM_H: u32 = 1;
    pub const __IOV_MAX: u32 = 1024;
    pub const IOV_MAX: u32 = 1024;
    pub const NL_ARGMAX: u32 = 4096;
    pub const NL_LANGMAX: u32 = 2048;
    pub const NZERO: u32 = 20;
    pub const WORD_BIT: u32 = 32;
    pub const LONG_BIT: u32 = 64;
    pub const PAGESIZE: u32 = 4096;
    pub const SH_MEM_READ: u32 = 1;
    pub const SH_MEM_WRITE: u32 = 2;
    pub const SH_MEM_EXEC: u32 = 4;
    unsafe extern "C" {
        pub fn _dl_mcount_wrapper_check(__selfpc: *mut ::core::ffi::c_void);
    }
    pub type Lmid_t = ::core::ffi::c_long;
    unsafe extern "C" {
        pub fn dlopen(
            __file: *const ::core::ffi::c_char,
            __mode: ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn dlclose(__handle: *mut ::core::ffi::c_void) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn dlsym(
            __handle: *mut ::core::ffi::c_void,
            __name: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn dlmopen(
            __nsid: root::Lmid_t,
            __file: *const ::core::ffi::c_char,
            __mode: ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn dlvsym(
            __handle: *mut ::core::ffi::c_void,
            __name: *const ::core::ffi::c_char,
            __version: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn dlerror() -> *mut ::core::ffi::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Dl_info {
        pub dli_fname: *const ::core::ffi::c_char,
        pub dli_fbase: *mut ::core::ffi::c_void,
        pub dli_sname: *const ::core::ffi::c_char,
        pub dli_saddr: *mut ::core::ffi::c_void,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of Dl_info"][::core::mem::size_of::<Dl_info>() - 32usize];
        ["Alignment of Dl_info"][::core::mem::align_of::<Dl_info>() - 8usize];
        ["Offset of field: Dl_info::dli_fname"]
            [::core::mem::offset_of!(Dl_info, dli_fname) - 0usize];
        ["Offset of field: Dl_info::dli_fbase"]
            [::core::mem::offset_of!(Dl_info, dli_fbase) - 8usize];
        ["Offset of field: Dl_info::dli_sname"]
            [::core::mem::offset_of!(Dl_info, dli_sname) - 16usize];
        ["Offset of field: Dl_info::dli_saddr"]
            [::core::mem::offset_of!(Dl_info, dli_saddr) - 24usize];
    };
    unsafe extern "C" {
        pub fn dladdr(
            __address: *const ::core::ffi::c_void,
            __info: *mut root::Dl_info,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn dladdr1(
            __address: *const ::core::ffi::c_void,
            __info: *mut root::Dl_info,
            __extra_info: *mut *mut ::core::ffi::c_void,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    pub const RTLD_DL_SYMENT: root::_bindgen_ty_1 = 1;
    pub const RTLD_DL_LINKMAP: root::_bindgen_ty_1 = 2;
    pub type _bindgen_ty_1 = ::core::ffi::c_uint;
    unsafe extern "C" {
        pub fn dlinfo(
            __handle: *mut ::core::ffi::c_void,
            __request: ::core::ffi::c_int,
            __arg: *mut ::core::ffi::c_void,
        ) -> ::core::ffi::c_int;
    }
    pub const RTLD_DI_LMID: root::_bindgen_ty_2 = 1;
    pub const RTLD_DI_LINKMAP: root::_bindgen_ty_2 = 2;
    pub const RTLD_DI_CONFIGADDR: root::_bindgen_ty_2 = 3;
    pub const RTLD_DI_SERINFO: root::_bindgen_ty_2 = 4;
    pub const RTLD_DI_SERINFOSIZE: root::_bindgen_ty_2 = 5;
    pub const RTLD_DI_ORIGIN: root::_bindgen_ty_2 = 6;
    pub const RTLD_DI_PROFILENAME: root::_bindgen_ty_2 = 7;
    pub const RTLD_DI_PROFILEOUT: root::_bindgen_ty_2 = 8;
    pub const RTLD_DI_TLS_MODID: root::_bindgen_ty_2 = 9;
    pub const RTLD_DI_TLS_DATA: root::_bindgen_ty_2 = 10;
    pub const RTLD_DI_PHDR: root::_bindgen_ty_2 = 11;
    pub const RTLD_DI_MAX: root::_bindgen_ty_2 = 11;
    pub type _bindgen_ty_2 = ::core::ffi::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Dl_serpath {
        pub dls_name: *mut ::core::ffi::c_char,
        pub dls_flags: ::core::ffi::c_uint,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of Dl_serpath"][::core::mem::size_of::<Dl_serpath>() - 16usize];
        ["Alignment of Dl_serpath"][::core::mem::align_of::<Dl_serpath>() - 8usize];
        ["Offset of field: Dl_serpath::dls_name"]
            [::core::mem::offset_of!(Dl_serpath, dls_name) - 0usize];
        ["Offset of field: Dl_serpath::dls_flags"]
            [::core::mem::offset_of!(Dl_serpath, dls_flags) - 8usize];
    };
    #[repr(C)]
    pub struct Dl_serinfo {
        pub dls_size: usize,
        pub dls_cnt: ::core::ffi::c_uint,
        pub __bindgen_anon_1: root::Dl_serinfo__bindgen_ty_1,
    }
    #[repr(C)]
    pub struct Dl_serinfo__bindgen_ty_1 {
        pub dls_serpath: root::__BindgenUnionField<[root::Dl_serpath; 0usize]>,
        pub __dls_serpath_pad: root::__BindgenUnionField<[root::Dl_serpath; 1usize]>,
        pub bindgen_union_field: [u64; 2usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of Dl_serinfo__bindgen_ty_1"]
            [::core::mem::size_of::<Dl_serinfo__bindgen_ty_1>() - 16usize];
        ["Alignment of Dl_serinfo__bindgen_ty_1"]
            [::core::mem::align_of::<Dl_serinfo__bindgen_ty_1>() - 8usize];
        ["Offset of field: Dl_serinfo__bindgen_ty_1::dls_serpath"]
            [::core::mem::offset_of!(Dl_serinfo__bindgen_ty_1, dls_serpath) - 0usize];
        ["Offset of field: Dl_serinfo__bindgen_ty_1::__dls_serpath_pad"]
            [::core::mem::offset_of!(Dl_serinfo__bindgen_ty_1, __dls_serpath_pad) - 0usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of Dl_serinfo"][::core::mem::size_of::<Dl_serinfo>() - 32usize];
        ["Alignment of Dl_serinfo"][::core::mem::align_of::<Dl_serinfo>() - 8usize];
        ["Offset of field: Dl_serinfo::dls_size"]
            [::core::mem::offset_of!(Dl_serinfo, dls_size) - 0usize];
        ["Offset of field: Dl_serinfo::dls_cnt"]
            [::core::mem::offset_of!(Dl_serinfo, dls_cnt) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct dl_find_object {
        pub dlfo_flags: ::core::ffi::c_ulonglong,
        pub dlfo_map_start: *mut ::core::ffi::c_void,
        pub dlfo_map_end: *mut ::core::ffi::c_void,
        pub dlfo_link_map: *mut root::link_map,
        pub dlfo_eh_frame: *mut ::core::ffi::c_void,
        pub __dflo_reserved: [::core::ffi::c_ulonglong; 7usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of dl_find_object"][::core::mem::size_of::<dl_find_object>() - 96usize];
        ["Alignment of dl_find_object"][::core::mem::align_of::<dl_find_object>() - 8usize];
        ["Offset of field: dl_find_object::dlfo_flags"]
            [::core::mem::offset_of!(dl_find_object, dlfo_flags) - 0usize];
        ["Offset of field: dl_find_object::dlfo_map_start"]
            [::core::mem::offset_of!(dl_find_object, dlfo_map_start) - 8usize];
        ["Offset of field: dl_find_object::dlfo_map_end"]
            [::core::mem::offset_of!(dl_find_object, dlfo_map_end) - 16usize];
        ["Offset of field: dl_find_object::dlfo_link_map"]
            [::core::mem::offset_of!(dl_find_object, dlfo_link_map) - 24usize];
        ["Offset of field: dl_find_object::dlfo_eh_frame"]
            [::core::mem::offset_of!(dl_find_object, dlfo_eh_frame) - 32usize];
        ["Offset of field: dl_find_object::__dflo_reserved"]
            [::core::mem::offset_of!(dl_find_object, __dflo_reserved) - 40usize];
    };
    unsafe extern "C" {
        pub fn _dl_find_object(
            __address: *mut ::core::ffi::c_void,
            __result: *mut root::dl_find_object,
        ) -> ::core::ffi::c_int;
    }
    pub type __u_char = ::core::ffi::c_uchar;
    pub type __u_short = ::core::ffi::c_ushort;
    pub type __u_int = ::core::ffi::c_uint;
    pub type __u_long = ::core::ffi::c_ulong;
    pub type __int8_t = ::core::ffi::c_schar;
    pub type __uint8_t = ::core::ffi::c_uchar;
    pub type __int16_t = ::core::ffi::c_short;
    pub type __uint16_t = ::core::ffi::c_ushort;
    pub type __int32_t = ::core::ffi::c_int;
    pub type __uint32_t = ::core::ffi::c_uint;
    pub type __int64_t = ::core::ffi::c_long;
    pub type __uint64_t = ::core::ffi::c_ulong;
    pub type __int_least8_t = root::__int8_t;
    pub type __uint_least8_t = root::__uint8_t;
    pub type __int_least16_t = root::__int16_t;
    pub type __uint_least16_t = root::__uint16_t;
    pub type __int_least32_t = root::__int32_t;
    pub type __uint_least32_t = root::__uint32_t;
    pub type __int_least64_t = root::__int64_t;
    pub type __uint_least64_t = root::__uint64_t;
    pub type __quad_t = ::core::ffi::c_long;
    pub type __u_quad_t = ::core::ffi::c_ulong;
    pub type __intmax_t = ::core::ffi::c_long;
    pub type __uintmax_t = ::core::ffi::c_ulong;
    pub type __dev_t = ::core::ffi::c_ulong;
    pub type __uid_t = ::core::ffi::c_uint;
    pub type __gid_t = ::core::ffi::c_uint;
    pub type __ino_t = ::core::ffi::c_ulong;
    pub type __ino64_t = ::core::ffi::c_ulong;
    pub type __mode_t = ::core::ffi::c_uint;
    pub type __nlink_t = ::core::ffi::c_ulong;
    pub type __off_t = ::core::ffi::c_long;
    pub type __off64_t = ::core::ffi::c_long;
    pub type __pid_t = ::core::ffi::c_int;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __fsid_t {
        pub __val: [::core::ffi::c_int; 2usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __fsid_t"][::core::mem::size_of::<__fsid_t>() - 8usize];
        ["Alignment of __fsid_t"][::core::mem::align_of::<__fsid_t>() - 4usize];
        ["Offset of field: __fsid_t::__val"][::core::mem::offset_of!(__fsid_t, __val) - 0usize];
    };
    pub type __clock_t = ::core::ffi::c_long;
    pub type __rlim_t = ::core::ffi::c_ulong;
    pub type __rlim64_t = ::core::ffi::c_ulong;
    pub type __id_t = ::core::ffi::c_uint;
    pub type __time_t = ::core::ffi::c_long;
    pub type __useconds_t = ::core::ffi::c_uint;
    pub type __suseconds_t = ::core::ffi::c_long;
    pub type __suseconds64_t = ::core::ffi::c_long;
    pub type __daddr_t = ::core::ffi::c_int;
    pub type __key_t = ::core::ffi::c_int;
    pub type __clockid_t = ::core::ffi::c_int;
    pub type __timer_t = *mut ::core::ffi::c_void;
    pub type __blksize_t = ::core::ffi::c_long;
    pub type __blkcnt_t = ::core::ffi::c_long;
    pub type __blkcnt64_t = ::core::ffi::c_long;
    pub type __fsblkcnt_t = ::core::ffi::c_ulong;
    pub type __fsblkcnt64_t = ::core::ffi::c_ulong;
    pub type __fsfilcnt_t = ::core::ffi::c_ulong;
    pub type __fsfilcnt64_t = ::core::ffi::c_ulong;
    pub type __fsword_t = ::core::ffi::c_long;
    pub type __ssize_t = ::core::ffi::c_long;
    pub type __syscall_slong_t = ::core::ffi::c_long;
    pub type __syscall_ulong_t = ::core::ffi::c_ulong;
    pub type __loff_t = root::__off64_t;
    pub type __caddr_t = *mut ::core::ffi::c_char;
    pub type __intptr_t = ::core::ffi::c_long;
    pub type __socklen_t = ::core::ffi::c_uint;
    pub type __sig_atomic_t = ::core::ffi::c_int;
    pub type gid_t = root::__gid_t;
    pub type uid_t = root::__uid_t;
    pub type off_t = root::__off_t;
    pub type off64_t = root::__off64_t;
    pub type useconds_t = root::__useconds_t;
    pub type pid_t = root::__pid_t;
    pub type socklen_t = root::__socklen_t;
    unsafe extern "C" {
        pub fn access(
            __name: *const ::core::ffi::c_char,
            __type: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn euidaccess(
            __name: *const ::core::ffi::c_char,
            __type: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn eaccess(
            __name: *const ::core::ffi::c_char,
            __type: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn execveat(
            __fd: ::core::ffi::c_int,
            __path: *const ::core::ffi::c_char,
            __argv: *const *mut ::core::ffi::c_char,
            __envp: *const *mut ::core::ffi::c_char,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn faccessat(
            __fd: ::core::ffi::c_int,
            __file: *const ::core::ffi::c_char,
            __type: ::core::ffi::c_int,
            __flag: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn lseek(
            __fd: ::core::ffi::c_int,
            __offset: root::__off_t,
            __whence: ::core::ffi::c_int,
        ) -> root::__off_t;
    }
    unsafe extern "C" {
        pub fn lseek64(
            __fd: ::core::ffi::c_int,
            __offset: root::__off64_t,
            __whence: ::core::ffi::c_int,
        ) -> root::__off64_t;
    }
    unsafe extern "C" {
        pub fn close(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn closefrom(__lowfd: ::core::ffi::c_int);
    }
    unsafe extern "C" {
        pub fn read(
            __fd: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_void,
            __nbytes: usize,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn write(
            __fd: ::core::ffi::c_int,
            __buf: *const ::core::ffi::c_void,
            __n: usize,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn pread(
            __fd: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_void,
            __nbytes: usize,
            __offset: root::__off_t,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn pwrite(
            __fd: ::core::ffi::c_int,
            __buf: *const ::core::ffi::c_void,
            __n: usize,
            __offset: root::__off_t,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn pread64(
            __fd: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_void,
            __nbytes: usize,
            __offset: root::__off64_t,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn pwrite64(
            __fd: ::core::ffi::c_int,
            __buf: *const ::core::ffi::c_void,
            __n: usize,
            __offset: root::__off64_t,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn pipe(__pipedes: *mut ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pipe2(
            __pipedes: *mut ::core::ffi::c_int,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn alarm(__seconds: ::core::ffi::c_uint) -> ::core::ffi::c_uint;
    }
    unsafe extern "C" {
        pub fn sleep(__seconds: ::core::ffi::c_uint) -> ::core::ffi::c_uint;
    }
    unsafe extern "C" {
        pub fn ualarm(
            __value: root::__useconds_t,
            __interval: root::__useconds_t,
        ) -> root::__useconds_t;
    }
    unsafe extern "C" {
        pub fn usleep(__useconds: root::__useconds_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pause() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn chown(
            __file: *const ::core::ffi::c_char,
            __owner: root::__uid_t,
            __group: root::__gid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fchown(
            __fd: ::core::ffi::c_int,
            __owner: root::__uid_t,
            __group: root::__gid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn lchown(
            __file: *const ::core::ffi::c_char,
            __owner: root::__uid_t,
            __group: root::__gid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fchownat(
            __fd: ::core::ffi::c_int,
            __file: *const ::core::ffi::c_char,
            __owner: root::__uid_t,
            __group: root::__gid_t,
            __flag: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn chdir(__path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fchdir(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getcwd(__buf: *mut ::core::ffi::c_char, __size: usize) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn get_current_dir_name() -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn getwd(__buf: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn dup(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn dup2(__fd: ::core::ffi::c_int, __fd2: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn dup3(
            __fd: ::core::ffi::c_int,
            __fd2: ::core::ffi::c_int,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub static mut __environ: *mut *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub static mut environ: *mut *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn execve(
            __path: *const ::core::ffi::c_char,
            __argv: *const *mut ::core::ffi::c_char,
            __envp: *const *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fexecve(
            __fd: ::core::ffi::c_int,
            __argv: *const *mut ::core::ffi::c_char,
            __envp: *const *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn execv(
            __path: *const ::core::ffi::c_char,
            __argv: *const *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn execle(
            __path: *const ::core::ffi::c_char,
            __arg: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn execl(
            __path: *const ::core::ffi::c_char,
            __arg: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn execvp(
            __file: *const ::core::ffi::c_char,
            __argv: *const *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn execlp(
            __file: *const ::core::ffi::c_char,
            __arg: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn execvpe(
            __file: *const ::core::ffi::c_char,
            __argv: *const *mut ::core::ffi::c_char,
            __envp: *const *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn nice(__inc: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn _exit(__status: ::core::ffi::c_int) -> !;
    }
    pub const _PC_LINK_MAX: root::_bindgen_ty_3 = 0;
    pub const _PC_MAX_CANON: root::_bindgen_ty_3 = 1;
    pub const _PC_MAX_INPUT: root::_bindgen_ty_3 = 2;
    pub const _PC_NAME_MAX: root::_bindgen_ty_3 = 3;
    pub const _PC_PATH_MAX: root::_bindgen_ty_3 = 4;
    pub const _PC_PIPE_BUF: root::_bindgen_ty_3 = 5;
    pub const _PC_CHOWN_RESTRICTED: root::_bindgen_ty_3 = 6;
    pub const _PC_NO_TRUNC: root::_bindgen_ty_3 = 7;
    pub const _PC_VDISABLE: root::_bindgen_ty_3 = 8;
    pub const _PC_SYNC_IO: root::_bindgen_ty_3 = 9;
    pub const _PC_ASYNC_IO: root::_bindgen_ty_3 = 10;
    pub const _PC_PRIO_IO: root::_bindgen_ty_3 = 11;
    pub const _PC_SOCK_MAXBUF: root::_bindgen_ty_3 = 12;
    pub const _PC_FILESIZEBITS: root::_bindgen_ty_3 = 13;
    pub const _PC_REC_INCR_XFER_SIZE: root::_bindgen_ty_3 = 14;
    pub const _PC_REC_MAX_XFER_SIZE: root::_bindgen_ty_3 = 15;
    pub const _PC_REC_MIN_XFER_SIZE: root::_bindgen_ty_3 = 16;
    pub const _PC_REC_XFER_ALIGN: root::_bindgen_ty_3 = 17;
    pub const _PC_ALLOC_SIZE_MIN: root::_bindgen_ty_3 = 18;
    pub const _PC_SYMLINK_MAX: root::_bindgen_ty_3 = 19;
    pub const _PC_2_SYMLINKS: root::_bindgen_ty_3 = 20;
    pub type _bindgen_ty_3 = ::core::ffi::c_uint;
    pub const _SC_ARG_MAX: root::_bindgen_ty_4 = 0;
    pub const _SC_CHILD_MAX: root::_bindgen_ty_4 = 1;
    pub const _SC_CLK_TCK: root::_bindgen_ty_4 = 2;
    pub const _SC_NGROUPS_MAX: root::_bindgen_ty_4 = 3;
    pub const _SC_OPEN_MAX: root::_bindgen_ty_4 = 4;
    pub const _SC_STREAM_MAX: root::_bindgen_ty_4 = 5;
    pub const _SC_TZNAME_MAX: root::_bindgen_ty_4 = 6;
    pub const _SC_JOB_CONTROL: root::_bindgen_ty_4 = 7;
    pub const _SC_SAVED_IDS: root::_bindgen_ty_4 = 8;
    pub const _SC_REALTIME_SIGNALS: root::_bindgen_ty_4 = 9;
    pub const _SC_PRIORITY_SCHEDULING: root::_bindgen_ty_4 = 10;
    pub const _SC_TIMERS: root::_bindgen_ty_4 = 11;
    pub const _SC_ASYNCHRONOUS_IO: root::_bindgen_ty_4 = 12;
    pub const _SC_PRIORITIZED_IO: root::_bindgen_ty_4 = 13;
    pub const _SC_SYNCHRONIZED_IO: root::_bindgen_ty_4 = 14;
    pub const _SC_FSYNC: root::_bindgen_ty_4 = 15;
    pub const _SC_MAPPED_FILES: root::_bindgen_ty_4 = 16;
    pub const _SC_MEMLOCK: root::_bindgen_ty_4 = 17;
    pub const _SC_MEMLOCK_RANGE: root::_bindgen_ty_4 = 18;
    pub const _SC_MEMORY_PROTECTION: root::_bindgen_ty_4 = 19;
    pub const _SC_MESSAGE_PASSING: root::_bindgen_ty_4 = 20;
    pub const _SC_SEMAPHORES: root::_bindgen_ty_4 = 21;
    pub const _SC_SHARED_MEMORY_OBJECTS: root::_bindgen_ty_4 = 22;
    pub const _SC_AIO_LISTIO_MAX: root::_bindgen_ty_4 = 23;
    pub const _SC_AIO_MAX: root::_bindgen_ty_4 = 24;
    pub const _SC_AIO_PRIO_DELTA_MAX: root::_bindgen_ty_4 = 25;
    pub const _SC_DELAYTIMER_MAX: root::_bindgen_ty_4 = 26;
    pub const _SC_MQ_OPEN_MAX: root::_bindgen_ty_4 = 27;
    pub const _SC_MQ_PRIO_MAX: root::_bindgen_ty_4 = 28;
    pub const _SC_VERSION: root::_bindgen_ty_4 = 29;
    pub const _SC_PAGESIZE: root::_bindgen_ty_4 = 30;
    pub const _SC_RTSIG_MAX: root::_bindgen_ty_4 = 31;
    pub const _SC_SEM_NSEMS_MAX: root::_bindgen_ty_4 = 32;
    pub const _SC_SEM_VALUE_MAX: root::_bindgen_ty_4 = 33;
    pub const _SC_SIGQUEUE_MAX: root::_bindgen_ty_4 = 34;
    pub const _SC_TIMER_MAX: root::_bindgen_ty_4 = 35;
    pub const _SC_BC_BASE_MAX: root::_bindgen_ty_4 = 36;
    pub const _SC_BC_DIM_MAX: root::_bindgen_ty_4 = 37;
    pub const _SC_BC_SCALE_MAX: root::_bindgen_ty_4 = 38;
    pub const _SC_BC_STRING_MAX: root::_bindgen_ty_4 = 39;
    pub const _SC_COLL_WEIGHTS_MAX: root::_bindgen_ty_4 = 40;
    pub const _SC_EQUIV_CLASS_MAX: root::_bindgen_ty_4 = 41;
    pub const _SC_EXPR_NEST_MAX: root::_bindgen_ty_4 = 42;
    pub const _SC_LINE_MAX: root::_bindgen_ty_4 = 43;
    pub const _SC_RE_DUP_MAX: root::_bindgen_ty_4 = 44;
    pub const _SC_CHARCLASS_NAME_MAX: root::_bindgen_ty_4 = 45;
    pub const _SC_2_VERSION: root::_bindgen_ty_4 = 46;
    pub const _SC_2_C_BIND: root::_bindgen_ty_4 = 47;
    pub const _SC_2_C_DEV: root::_bindgen_ty_4 = 48;
    pub const _SC_2_FORT_DEV: root::_bindgen_ty_4 = 49;
    pub const _SC_2_FORT_RUN: root::_bindgen_ty_4 = 50;
    pub const _SC_2_SW_DEV: root::_bindgen_ty_4 = 51;
    pub const _SC_2_LOCALEDEF: root::_bindgen_ty_4 = 52;
    pub const _SC_PII: root::_bindgen_ty_4 = 53;
    pub const _SC_PII_XTI: root::_bindgen_ty_4 = 54;
    pub const _SC_PII_SOCKET: root::_bindgen_ty_4 = 55;
    pub const _SC_PII_INTERNET: root::_bindgen_ty_4 = 56;
    pub const _SC_PII_OSI: root::_bindgen_ty_4 = 57;
    pub const _SC_POLL: root::_bindgen_ty_4 = 58;
    pub const _SC_SELECT: root::_bindgen_ty_4 = 59;
    pub const _SC_UIO_MAXIOV: root::_bindgen_ty_4 = 60;
    pub const _SC_IOV_MAX: root::_bindgen_ty_4 = 60;
    pub const _SC_PII_INTERNET_STREAM: root::_bindgen_ty_4 = 61;
    pub const _SC_PII_INTERNET_DGRAM: root::_bindgen_ty_4 = 62;
    pub const _SC_PII_OSI_COTS: root::_bindgen_ty_4 = 63;
    pub const _SC_PII_OSI_CLTS: root::_bindgen_ty_4 = 64;
    pub const _SC_PII_OSI_M: root::_bindgen_ty_4 = 65;
    pub const _SC_T_IOV_MAX: root::_bindgen_ty_4 = 66;
    pub const _SC_THREADS: root::_bindgen_ty_4 = 67;
    pub const _SC_THREAD_SAFE_FUNCTIONS: root::_bindgen_ty_4 = 68;
    pub const _SC_GETGR_R_SIZE_MAX: root::_bindgen_ty_4 = 69;
    pub const _SC_GETPW_R_SIZE_MAX: root::_bindgen_ty_4 = 70;
    pub const _SC_LOGIN_NAME_MAX: root::_bindgen_ty_4 = 71;
    pub const _SC_TTY_NAME_MAX: root::_bindgen_ty_4 = 72;
    pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: root::_bindgen_ty_4 = 73;
    pub const _SC_THREAD_KEYS_MAX: root::_bindgen_ty_4 = 74;
    pub const _SC_THREAD_STACK_MIN: root::_bindgen_ty_4 = 75;
    pub const _SC_THREAD_THREADS_MAX: root::_bindgen_ty_4 = 76;
    pub const _SC_THREAD_ATTR_STACKADDR: root::_bindgen_ty_4 = 77;
    pub const _SC_THREAD_ATTR_STACKSIZE: root::_bindgen_ty_4 = 78;
    pub const _SC_THREAD_PRIORITY_SCHEDULING: root::_bindgen_ty_4 = 79;
    pub const _SC_THREAD_PRIO_INHERIT: root::_bindgen_ty_4 = 80;
    pub const _SC_THREAD_PRIO_PROTECT: root::_bindgen_ty_4 = 81;
    pub const _SC_THREAD_PROCESS_SHARED: root::_bindgen_ty_4 = 82;
    pub const _SC_NPROCESSORS_CONF: root::_bindgen_ty_4 = 83;
    pub const _SC_NPROCESSORS_ONLN: root::_bindgen_ty_4 = 84;
    pub const _SC_PHYS_PAGES: root::_bindgen_ty_4 = 85;
    pub const _SC_AVPHYS_PAGES: root::_bindgen_ty_4 = 86;
    pub const _SC_ATEXIT_MAX: root::_bindgen_ty_4 = 87;
    pub const _SC_PASS_MAX: root::_bindgen_ty_4 = 88;
    pub const _SC_XOPEN_VERSION: root::_bindgen_ty_4 = 89;
    pub const _SC_XOPEN_XCU_VERSION: root::_bindgen_ty_4 = 90;
    pub const _SC_XOPEN_UNIX: root::_bindgen_ty_4 = 91;
    pub const _SC_XOPEN_CRYPT: root::_bindgen_ty_4 = 92;
    pub const _SC_XOPEN_ENH_I18N: root::_bindgen_ty_4 = 93;
    pub const _SC_XOPEN_SHM: root::_bindgen_ty_4 = 94;
    pub const _SC_2_CHAR_TERM: root::_bindgen_ty_4 = 95;
    pub const _SC_2_C_VERSION: root::_bindgen_ty_4 = 96;
    pub const _SC_2_UPE: root::_bindgen_ty_4 = 97;
    pub const _SC_XOPEN_XPG2: root::_bindgen_ty_4 = 98;
    pub const _SC_XOPEN_XPG3: root::_bindgen_ty_4 = 99;
    pub const _SC_XOPEN_XPG4: root::_bindgen_ty_4 = 100;
    pub const _SC_CHAR_BIT: root::_bindgen_ty_4 = 101;
    pub const _SC_CHAR_MAX: root::_bindgen_ty_4 = 102;
    pub const _SC_CHAR_MIN: root::_bindgen_ty_4 = 103;
    pub const _SC_INT_MAX: root::_bindgen_ty_4 = 104;
    pub const _SC_INT_MIN: root::_bindgen_ty_4 = 105;
    pub const _SC_LONG_BIT: root::_bindgen_ty_4 = 106;
    pub const _SC_WORD_BIT: root::_bindgen_ty_4 = 107;
    pub const _SC_MB_LEN_MAX: root::_bindgen_ty_4 = 108;
    pub const _SC_NZERO: root::_bindgen_ty_4 = 109;
    pub const _SC_SSIZE_MAX: root::_bindgen_ty_4 = 110;
    pub const _SC_SCHAR_MAX: root::_bindgen_ty_4 = 111;
    pub const _SC_SCHAR_MIN: root::_bindgen_ty_4 = 112;
    pub const _SC_SHRT_MAX: root::_bindgen_ty_4 = 113;
    pub const _SC_SHRT_MIN: root::_bindgen_ty_4 = 114;
    pub const _SC_UCHAR_MAX: root::_bindgen_ty_4 = 115;
    pub const _SC_UINT_MAX: root::_bindgen_ty_4 = 116;
    pub const _SC_ULONG_MAX: root::_bindgen_ty_4 = 117;
    pub const _SC_USHRT_MAX: root::_bindgen_ty_4 = 118;
    pub const _SC_NL_ARGMAX: root::_bindgen_ty_4 = 119;
    pub const _SC_NL_LANGMAX: root::_bindgen_ty_4 = 120;
    pub const _SC_NL_MSGMAX: root::_bindgen_ty_4 = 121;
    pub const _SC_NL_NMAX: root::_bindgen_ty_4 = 122;
    pub const _SC_NL_SETMAX: root::_bindgen_ty_4 = 123;
    pub const _SC_NL_TEXTMAX: root::_bindgen_ty_4 = 124;
    pub const _SC_XBS5_ILP32_OFF32: root::_bindgen_ty_4 = 125;
    pub const _SC_XBS5_ILP32_OFFBIG: root::_bindgen_ty_4 = 126;
    pub const _SC_XBS5_LP64_OFF64: root::_bindgen_ty_4 = 127;
    pub const _SC_XBS5_LPBIG_OFFBIG: root::_bindgen_ty_4 = 128;
    pub const _SC_XOPEN_LEGACY: root::_bindgen_ty_4 = 129;
    pub const _SC_XOPEN_REALTIME: root::_bindgen_ty_4 = 130;
    pub const _SC_XOPEN_REALTIME_THREADS: root::_bindgen_ty_4 = 131;
    pub const _SC_ADVISORY_INFO: root::_bindgen_ty_4 = 132;
    pub const _SC_BARRIERS: root::_bindgen_ty_4 = 133;
    pub const _SC_BASE: root::_bindgen_ty_4 = 134;
    pub const _SC_C_LANG_SUPPORT: root::_bindgen_ty_4 = 135;
    pub const _SC_C_LANG_SUPPORT_R: root::_bindgen_ty_4 = 136;
    pub const _SC_CLOCK_SELECTION: root::_bindgen_ty_4 = 137;
    pub const _SC_CPUTIME: root::_bindgen_ty_4 = 138;
    pub const _SC_THREAD_CPUTIME: root::_bindgen_ty_4 = 139;
    pub const _SC_DEVICE_IO: root::_bindgen_ty_4 = 140;
    pub const _SC_DEVICE_SPECIFIC: root::_bindgen_ty_4 = 141;
    pub const _SC_DEVICE_SPECIFIC_R: root::_bindgen_ty_4 = 142;
    pub const _SC_FD_MGMT: root::_bindgen_ty_4 = 143;
    pub const _SC_FIFO: root::_bindgen_ty_4 = 144;
    pub const _SC_PIPE: root::_bindgen_ty_4 = 145;
    pub const _SC_FILE_ATTRIBUTES: root::_bindgen_ty_4 = 146;
    pub const _SC_FILE_LOCKING: root::_bindgen_ty_4 = 147;
    pub const _SC_FILE_SYSTEM: root::_bindgen_ty_4 = 148;
    pub const _SC_MONOTONIC_CLOCK: root::_bindgen_ty_4 = 149;
    pub const _SC_MULTI_PROCESS: root::_bindgen_ty_4 = 150;
    pub const _SC_SINGLE_PROCESS: root::_bindgen_ty_4 = 151;
    pub const _SC_NETWORKING: root::_bindgen_ty_4 = 152;
    pub const _SC_READER_WRITER_LOCKS: root::_bindgen_ty_4 = 153;
    pub const _SC_SPIN_LOCKS: root::_bindgen_ty_4 = 154;
    pub const _SC_REGEXP: root::_bindgen_ty_4 = 155;
    pub const _SC_REGEX_VERSION: root::_bindgen_ty_4 = 156;
    pub const _SC_SHELL: root::_bindgen_ty_4 = 157;
    pub const _SC_SIGNALS: root::_bindgen_ty_4 = 158;
    pub const _SC_SPAWN: root::_bindgen_ty_4 = 159;
    pub const _SC_SPORADIC_SERVER: root::_bindgen_ty_4 = 160;
    pub const _SC_THREAD_SPORADIC_SERVER: root::_bindgen_ty_4 = 161;
    pub const _SC_SYSTEM_DATABASE: root::_bindgen_ty_4 = 162;
    pub const _SC_SYSTEM_DATABASE_R: root::_bindgen_ty_4 = 163;
    pub const _SC_TIMEOUTS: root::_bindgen_ty_4 = 164;
    pub const _SC_TYPED_MEMORY_OBJECTS: root::_bindgen_ty_4 = 165;
    pub const _SC_USER_GROUPS: root::_bindgen_ty_4 = 166;
    pub const _SC_USER_GROUPS_R: root::_bindgen_ty_4 = 167;
    pub const _SC_2_PBS: root::_bindgen_ty_4 = 168;
    pub const _SC_2_PBS_ACCOUNTING: root::_bindgen_ty_4 = 169;
    pub const _SC_2_PBS_LOCATE: root::_bindgen_ty_4 = 170;
    pub const _SC_2_PBS_MESSAGE: root::_bindgen_ty_4 = 171;
    pub const _SC_2_PBS_TRACK: root::_bindgen_ty_4 = 172;
    pub const _SC_SYMLOOP_MAX: root::_bindgen_ty_4 = 173;
    pub const _SC_STREAMS: root::_bindgen_ty_4 = 174;
    pub const _SC_2_PBS_CHECKPOINT: root::_bindgen_ty_4 = 175;
    pub const _SC_V6_ILP32_OFF32: root::_bindgen_ty_4 = 176;
    pub const _SC_V6_ILP32_OFFBIG: root::_bindgen_ty_4 = 177;
    pub const _SC_V6_LP64_OFF64: root::_bindgen_ty_4 = 178;
    pub const _SC_V6_LPBIG_OFFBIG: root::_bindgen_ty_4 = 179;
    pub const _SC_HOST_NAME_MAX: root::_bindgen_ty_4 = 180;
    pub const _SC_TRACE: root::_bindgen_ty_4 = 181;
    pub const _SC_TRACE_EVENT_FILTER: root::_bindgen_ty_4 = 182;
    pub const _SC_TRACE_INHERIT: root::_bindgen_ty_4 = 183;
    pub const _SC_TRACE_LOG: root::_bindgen_ty_4 = 184;
    pub const _SC_LEVEL1_ICACHE_SIZE: root::_bindgen_ty_4 = 185;
    pub const _SC_LEVEL1_ICACHE_ASSOC: root::_bindgen_ty_4 = 186;
    pub const _SC_LEVEL1_ICACHE_LINESIZE: root::_bindgen_ty_4 = 187;
    pub const _SC_LEVEL1_DCACHE_SIZE: root::_bindgen_ty_4 = 188;
    pub const _SC_LEVEL1_DCACHE_ASSOC: root::_bindgen_ty_4 = 189;
    pub const _SC_LEVEL1_DCACHE_LINESIZE: root::_bindgen_ty_4 = 190;
    pub const _SC_LEVEL2_CACHE_SIZE: root::_bindgen_ty_4 = 191;
    pub const _SC_LEVEL2_CACHE_ASSOC: root::_bindgen_ty_4 = 192;
    pub const _SC_LEVEL2_CACHE_LINESIZE: root::_bindgen_ty_4 = 193;
    pub const _SC_LEVEL3_CACHE_SIZE: root::_bindgen_ty_4 = 194;
    pub const _SC_LEVEL3_CACHE_ASSOC: root::_bindgen_ty_4 = 195;
    pub const _SC_LEVEL3_CACHE_LINESIZE: root::_bindgen_ty_4 = 196;
    pub const _SC_LEVEL4_CACHE_SIZE: root::_bindgen_ty_4 = 197;
    pub const _SC_LEVEL4_CACHE_ASSOC: root::_bindgen_ty_4 = 198;
    pub const _SC_LEVEL4_CACHE_LINESIZE: root::_bindgen_ty_4 = 199;
    pub const _SC_IPV6: root::_bindgen_ty_4 = 235;
    pub const _SC_RAW_SOCKETS: root::_bindgen_ty_4 = 236;
    pub const _SC_V7_ILP32_OFF32: root::_bindgen_ty_4 = 237;
    pub const _SC_V7_ILP32_OFFBIG: root::_bindgen_ty_4 = 238;
    pub const _SC_V7_LP64_OFF64: root::_bindgen_ty_4 = 239;
    pub const _SC_V7_LPBIG_OFFBIG: root::_bindgen_ty_4 = 240;
    pub const _SC_SS_REPL_MAX: root::_bindgen_ty_4 = 241;
    pub const _SC_TRACE_EVENT_NAME_MAX: root::_bindgen_ty_4 = 242;
    pub const _SC_TRACE_NAME_MAX: root::_bindgen_ty_4 = 243;
    pub const _SC_TRACE_SYS_MAX: root::_bindgen_ty_4 = 244;
    pub const _SC_TRACE_USER_EVENT_MAX: root::_bindgen_ty_4 = 245;
    pub const _SC_XOPEN_STREAMS: root::_bindgen_ty_4 = 246;
    pub const _SC_THREAD_ROBUST_PRIO_INHERIT: root::_bindgen_ty_4 = 247;
    pub const _SC_THREAD_ROBUST_PRIO_PROTECT: root::_bindgen_ty_4 = 248;
    pub const _SC_MINSIGSTKSZ: root::_bindgen_ty_4 = 249;
    pub const _SC_SIGSTKSZ: root::_bindgen_ty_4 = 250;
    pub type _bindgen_ty_4 = ::core::ffi::c_uint;
    pub const _CS_PATH: root::_bindgen_ty_5 = 0;
    pub const _CS_V6_WIDTH_RESTRICTED_ENVS: root::_bindgen_ty_5 = 1;
    pub const _CS_GNU_LIBC_VERSION: root::_bindgen_ty_5 = 2;
    pub const _CS_GNU_LIBPTHREAD_VERSION: root::_bindgen_ty_5 = 3;
    pub const _CS_V5_WIDTH_RESTRICTED_ENVS: root::_bindgen_ty_5 = 4;
    pub const _CS_V7_WIDTH_RESTRICTED_ENVS: root::_bindgen_ty_5 = 5;
    pub const _CS_LFS_CFLAGS: root::_bindgen_ty_5 = 1000;
    pub const _CS_LFS_LDFLAGS: root::_bindgen_ty_5 = 1001;
    pub const _CS_LFS_LIBS: root::_bindgen_ty_5 = 1002;
    pub const _CS_LFS_LINTFLAGS: root::_bindgen_ty_5 = 1003;
    pub const _CS_LFS64_CFLAGS: root::_bindgen_ty_5 = 1004;
    pub const _CS_LFS64_LDFLAGS: root::_bindgen_ty_5 = 1005;
    pub const _CS_LFS64_LIBS: root::_bindgen_ty_5 = 1006;
    pub const _CS_LFS64_LINTFLAGS: root::_bindgen_ty_5 = 1007;
    pub const _CS_XBS5_ILP32_OFF32_CFLAGS: root::_bindgen_ty_5 = 1100;
    pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: root::_bindgen_ty_5 = 1101;
    pub const _CS_XBS5_ILP32_OFF32_LIBS: root::_bindgen_ty_5 = 1102;
    pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: root::_bindgen_ty_5 = 1103;
    pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: root::_bindgen_ty_5 = 1104;
    pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: root::_bindgen_ty_5 = 1105;
    pub const _CS_XBS5_ILP32_OFFBIG_LIBS: root::_bindgen_ty_5 = 1106;
    pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: root::_bindgen_ty_5 = 1107;
    pub const _CS_XBS5_LP64_OFF64_CFLAGS: root::_bindgen_ty_5 = 1108;
    pub const _CS_XBS5_LP64_OFF64_LDFLAGS: root::_bindgen_ty_5 = 1109;
    pub const _CS_XBS5_LP64_OFF64_LIBS: root::_bindgen_ty_5 = 1110;
    pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: root::_bindgen_ty_5 = 1111;
    pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: root::_bindgen_ty_5 = 1112;
    pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: root::_bindgen_ty_5 = 1113;
    pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: root::_bindgen_ty_5 = 1114;
    pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: root::_bindgen_ty_5 = 1115;
    pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: root::_bindgen_ty_5 = 1116;
    pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: root::_bindgen_ty_5 = 1117;
    pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: root::_bindgen_ty_5 = 1118;
    pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: root::_bindgen_ty_5 = 1119;
    pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: root::_bindgen_ty_5 = 1120;
    pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: root::_bindgen_ty_5 = 1121;
    pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: root::_bindgen_ty_5 = 1122;
    pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: root::_bindgen_ty_5 = 1123;
    pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: root::_bindgen_ty_5 = 1124;
    pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: root::_bindgen_ty_5 = 1125;
    pub const _CS_POSIX_V6_LP64_OFF64_LIBS: root::_bindgen_ty_5 = 1126;
    pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: root::_bindgen_ty_5 = 1127;
    pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: root::_bindgen_ty_5 = 1128;
    pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: root::_bindgen_ty_5 = 1129;
    pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: root::_bindgen_ty_5 = 1130;
    pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: root::_bindgen_ty_5 = 1131;
    pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: root::_bindgen_ty_5 = 1132;
    pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: root::_bindgen_ty_5 = 1133;
    pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: root::_bindgen_ty_5 = 1134;
    pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: root::_bindgen_ty_5 = 1135;
    pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: root::_bindgen_ty_5 = 1136;
    pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: root::_bindgen_ty_5 = 1137;
    pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: root::_bindgen_ty_5 = 1138;
    pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: root::_bindgen_ty_5 = 1139;
    pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: root::_bindgen_ty_5 = 1140;
    pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: root::_bindgen_ty_5 = 1141;
    pub const _CS_POSIX_V7_LP64_OFF64_LIBS: root::_bindgen_ty_5 = 1142;
    pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: root::_bindgen_ty_5 = 1143;
    pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: root::_bindgen_ty_5 = 1144;
    pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: root::_bindgen_ty_5 = 1145;
    pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: root::_bindgen_ty_5 = 1146;
    pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: root::_bindgen_ty_5 = 1147;
    pub const _CS_V6_ENV: root::_bindgen_ty_5 = 1148;
    pub const _CS_V7_ENV: root::_bindgen_ty_5 = 1149;
    pub type _bindgen_ty_5 = ::core::ffi::c_uint;
    unsafe extern "C" {
        pub fn pathconf(
            __path: *const ::core::ffi::c_char,
            __name: ::core::ffi::c_int,
        ) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn fpathconf(
            __fd: ::core::ffi::c_int,
            __name: ::core::ffi::c_int,
        ) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn sysconf(__name: ::core::ffi::c_int) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn confstr(
            __name: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __len: usize,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn getpid() -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn getppid() -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn getpgrp() -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn __getpgid(__pid: root::__pid_t) -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn getpgid(__pid: root::__pid_t) -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn setpgid(__pid: root::__pid_t, __pgid: root::__pid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setpgrp() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setsid() -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn getsid(__pid: root::__pid_t) -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn getuid() -> root::__uid_t;
    }
    unsafe extern "C" {
        pub fn geteuid() -> root::__uid_t;
    }
    unsafe extern "C" {
        pub fn getgid() -> root::__gid_t;
    }
    unsafe extern "C" {
        pub fn getegid() -> root::__gid_t;
    }
    unsafe extern "C" {
        pub fn getgroups(
            __size: ::core::ffi::c_int,
            __list: *mut root::__gid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn group_member(__gid: root::__gid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setuid(__uid: root::__uid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setreuid(__ruid: root::__uid_t, __euid: root::__uid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn seteuid(__uid: root::__uid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setgid(__gid: root::__gid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setregid(__rgid: root::__gid_t, __egid: root::__gid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setegid(__gid: root::__gid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getresuid(
            __ruid: *mut root::__uid_t,
            __euid: *mut root::__uid_t,
            __suid: *mut root::__uid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getresgid(
            __rgid: *mut root::__gid_t,
            __egid: *mut root::__gid_t,
            __sgid: *mut root::__gid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setresuid(
            __ruid: root::__uid_t,
            __euid: root::__uid_t,
            __suid: root::__uid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setresgid(
            __rgid: root::__gid_t,
            __egid: root::__gid_t,
            __sgid: root::__gid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fork() -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn vfork() -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn _Fork() -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn ttyname(__fd: ::core::ffi::c_int) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn ttyname_r(
            __fd: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __buflen: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn isatty(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ttyslot() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn link(
            __from: *const ::core::ffi::c_char,
            __to: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn linkat(
            __fromfd: ::core::ffi::c_int,
            __from: *const ::core::ffi::c_char,
            __tofd: ::core::ffi::c_int,
            __to: *const ::core::ffi::c_char,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn symlink(
            __from: *const ::core::ffi::c_char,
            __to: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn readlink(
            __path: *const ::core::ffi::c_char,
            __buf: *mut ::core::ffi::c_char,
            __len: usize,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn symlinkat(
            __from: *const ::core::ffi::c_char,
            __tofd: ::core::ffi::c_int,
            __to: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn readlinkat(
            __fd: ::core::ffi::c_int,
            __path: *const ::core::ffi::c_char,
            __buf: *mut ::core::ffi::c_char,
            __len: usize,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn unlink(__name: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn unlinkat(
            __fd: ::core::ffi::c_int,
            __name: *const ::core::ffi::c_char,
            __flag: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn rmdir(__path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn tcgetpgrp(__fd: ::core::ffi::c_int) -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn tcsetpgrp(__fd: ::core::ffi::c_int, __pgrp_id: root::__pid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getlogin() -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn getlogin_r(
            __name: *mut ::core::ffi::c_char,
            __name_len: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setlogin(__name: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub static mut optarg: *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub static mut optind: ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub static mut opterr: ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub static mut optopt: ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getopt(
            ___argc: ::core::ffi::c_int,
            ___argv: *const *mut ::core::ffi::c_char,
            __shortopts: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn gethostname(__name: *mut ::core::ffi::c_char, __len: usize) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sethostname(__name: *const ::core::ffi::c_char, __len: usize) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sethostid(__id: ::core::ffi::c_long) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getdomainname(__name: *mut ::core::ffi::c_char, __len: usize) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setdomainname(
            __name: *const ::core::ffi::c_char,
            __len: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vhangup() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn revoke(__file: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn profil(
            __sample_buffer: *mut ::core::ffi::c_ushort,
            __size: usize,
            __offset: usize,
            __scale: ::core::ffi::c_uint,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn acct(__name: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getusershell() -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn endusershell();
    }
    unsafe extern "C" {
        pub fn setusershell();
    }
    unsafe extern "C" {
        pub fn daemon(
            __nochdir: ::core::ffi::c_int,
            __noclose: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn chroot(__path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getpass(__prompt: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn fsync(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn syncfs(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn gethostid() -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn sync();
    }
    unsafe extern "C" {
        pub fn getpagesize() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getdtablesize() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn truncate(
            __file: *const ::core::ffi::c_char,
            __length: root::__off_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn truncate64(
            __file: *const ::core::ffi::c_char,
            __length: root::__off64_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ftruncate(__fd: ::core::ffi::c_int, __length: root::__off_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ftruncate64(
            __fd: ::core::ffi::c_int,
            __length: root::__off64_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn brk(__addr: *mut ::core::ffi::c_void) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sbrk(__delta: isize) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn syscall(__sysno: ::core::ffi::c_long, ...) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn lockf(
            __fd: ::core::ffi::c_int,
            __cmd: ::core::ffi::c_int,
            __len: root::__off_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn lockf64(
            __fd: ::core::ffi::c_int,
            __cmd: ::core::ffi::c_int,
            __len: root::__off64_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn copy_file_range(
            __infd: ::core::ffi::c_int,
            __pinoff: *mut root::__off64_t,
            __outfd: ::core::ffi::c_int,
            __poutoff: *mut root::__off64_t,
            __length: usize,
            __flags: ::core::ffi::c_uint,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn fdatasync(__fildes: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn crypt(
            __key: *const ::core::ffi::c_char,
            __salt: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn swab(__from: *const ::core::ffi::c_void, __to: *mut ::core::ffi::c_void, __n: isize);
    }
    unsafe extern "C" {
        pub fn getentropy(
            __buffer: *mut ::core::ffi::c_void,
            __length: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn close_range(
            __fd: ::core::ffi::c_uint,
            __max_fd: ::core::ffi::c_uint,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn gettid() -> root::__pid_t;
    }
    pub type u_char = root::__u_char;
    pub type u_short = root::__u_short;
    pub type u_int = root::__u_int;
    pub type u_long = root::__u_long;
    pub type quad_t = root::__quad_t;
    pub type u_quad_t = root::__u_quad_t;
    pub type fsid_t = root::__fsid_t;
    pub type loff_t = root::__loff_t;
    pub type ino_t = root::__ino_t;
    pub type ino64_t = root::__ino64_t;
    pub type dev_t = root::__dev_t;
    pub type mode_t = root::__mode_t;
    pub type nlink_t = root::__nlink_t;
    pub type id_t = root::__id_t;
    pub type daddr_t = root::__daddr_t;
    pub type caddr_t = root::__caddr_t;
    pub type key_t = root::__key_t;
    pub type clock_t = root::__clock_t;
    pub type clockid_t = root::__clockid_t;
    pub type time_t = root::__time_t;
    pub type timer_t = root::__timer_t;
    pub type suseconds_t = root::__suseconds_t;
    pub type ulong = ::core::ffi::c_ulong;
    pub type ushort = ::core::ffi::c_ushort;
    pub type uint = ::core::ffi::c_uint;
    pub type u_int8_t = root::__uint8_t;
    pub type u_int16_t = root::__uint16_t;
    pub type u_int32_t = root::__uint32_t;
    pub type u_int64_t = root::__uint64_t;
    pub type register_t = ::core::ffi::c_long;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __sigset_t {
        pub __val: [::core::ffi::c_ulong; 16usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __sigset_t"][::core::mem::size_of::<__sigset_t>() - 128usize];
        ["Alignment of __sigset_t"][::core::mem::align_of::<__sigset_t>() - 8usize];
        ["Offset of field: __sigset_t::__val"][::core::mem::offset_of!(__sigset_t, __val) - 0usize];
    };
    pub type sigset_t = root::__sigset_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct timeval {
        pub tv_sec: root::__time_t,
        pub tv_usec: root::__suseconds_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of timeval"][::core::mem::size_of::<timeval>() - 16usize];
        ["Alignment of timeval"][::core::mem::align_of::<timeval>() - 8usize];
        ["Offset of field: timeval::tv_sec"][::core::mem::offset_of!(timeval, tv_sec) - 0usize];
        ["Offset of field: timeval::tv_usec"][::core::mem::offset_of!(timeval, tv_usec) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct timespec {
        pub tv_sec: root::__time_t,
        pub tv_nsec: root::__syscall_slong_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of timespec"][::core::mem::size_of::<timespec>() - 16usize];
        ["Alignment of timespec"][::core::mem::align_of::<timespec>() - 8usize];
        ["Offset of field: timespec::tv_sec"][::core::mem::offset_of!(timespec, tv_sec) - 0usize];
        ["Offset of field: timespec::tv_nsec"][::core::mem::offset_of!(timespec, tv_nsec) - 8usize];
    };
    pub type __fd_mask = ::core::ffi::c_long;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct fd_set {
        pub fds_bits: [root::__fd_mask; 16usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of fd_set"][::core::mem::size_of::<fd_set>() - 128usize];
        ["Alignment of fd_set"][::core::mem::align_of::<fd_set>() - 8usize];
        ["Offset of field: fd_set::fds_bits"][::core::mem::offset_of!(fd_set, fds_bits) - 0usize];
    };
    pub type fd_mask = root::__fd_mask;
    unsafe extern "C" {
        pub fn select(
            __nfds: ::core::ffi::c_int,
            __readfds: *mut root::fd_set,
            __writefds: *mut root::fd_set,
            __exceptfds: *mut root::fd_set,
            __timeout: *mut root::timeval,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pselect(
            __nfds: ::core::ffi::c_int,
            __readfds: *mut root::fd_set,
            __writefds: *mut root::fd_set,
            __exceptfds: *mut root::fd_set,
            __timeout: *const root::timespec,
            __sigmask: *const root::__sigset_t,
        ) -> ::core::ffi::c_int;
    }
    pub type blksize_t = root::__blksize_t;
    pub type blkcnt_t = root::__blkcnt_t;
    pub type fsblkcnt_t = root::__fsblkcnt_t;
    pub type fsfilcnt_t = root::__fsfilcnt_t;
    pub type blkcnt64_t = root::__blkcnt64_t;
    pub type fsblkcnt64_t = root::__fsblkcnt64_t;
    pub type fsfilcnt64_t = root::__fsfilcnt64_t;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __atomic_wide_counter {
        pub __value64: ::core::ffi::c_ulonglong,
        pub __value32: root::__atomic_wide_counter__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __atomic_wide_counter__bindgen_ty_1 {
        pub __low: ::core::ffi::c_uint,
        pub __high: ::core::ffi::c_uint,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __atomic_wide_counter__bindgen_ty_1"]
            [::core::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>() - 8usize];
        ["Alignment of __atomic_wide_counter__bindgen_ty_1"]
            [::core::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>() - 4usize];
        ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__low"]
            [::core::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __low) - 0usize];
        ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__high"]
            [::core::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __high) - 4usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __atomic_wide_counter"][::core::mem::size_of::<__atomic_wide_counter>() - 8usize];
        ["Alignment of __atomic_wide_counter"]
            [::core::mem::align_of::<__atomic_wide_counter>() - 8usize];
        ["Offset of field: __atomic_wide_counter::__value64"]
            [::core::mem::offset_of!(__atomic_wide_counter, __value64) - 0usize];
        ["Offset of field: __atomic_wide_counter::__value32"]
            [::core::mem::offset_of!(__atomic_wide_counter, __value32) - 0usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_internal_list {
        pub __prev: *mut root::__pthread_internal_list,
        pub __next: *mut root::__pthread_internal_list,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_internal_list"]
            [::core::mem::size_of::<__pthread_internal_list>() - 16usize];
        ["Alignment of __pthread_internal_list"]
            [::core::mem::align_of::<__pthread_internal_list>() - 8usize];
        ["Offset of field: __pthread_internal_list::__prev"]
            [::core::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
        ["Offset of field: __pthread_internal_list::__next"]
            [::core::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
    };
    pub type __pthread_list_t = root::__pthread_internal_list;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_internal_slist {
        pub __next: *mut root::__pthread_internal_slist,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_internal_slist"]
            [::core::mem::size_of::<__pthread_internal_slist>() - 8usize];
        ["Alignment of __pthread_internal_slist"]
            [::core::mem::align_of::<__pthread_internal_slist>() - 8usize];
        ["Offset of field: __pthread_internal_slist::__next"]
            [::core::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
    };
    pub type __pthread_slist_t = root::__pthread_internal_slist;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_mutex_s {
        pub __lock: ::core::ffi::c_int,
        pub __count: ::core::ffi::c_uint,
        pub __owner: ::core::ffi::c_int,
        pub __nusers: ::core::ffi::c_uint,
        pub __kind: ::core::ffi::c_int,
        pub __spins: ::core::ffi::c_short,
        pub __elision: ::core::ffi::c_short,
        pub __list: root::__pthread_list_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_mutex_s"][::core::mem::size_of::<__pthread_mutex_s>() - 40usize];
        ["Alignment of __pthread_mutex_s"][::core::mem::align_of::<__pthread_mutex_s>() - 8usize];
        ["Offset of field: __pthread_mutex_s::__lock"]
            [::core::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
        ["Offset of field: __pthread_mutex_s::__count"]
            [::core::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
        ["Offset of field: __pthread_mutex_s::__owner"]
            [::core::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
        ["Offset of field: __pthread_mutex_s::__nusers"]
            [::core::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
        ["Offset of field: __pthread_mutex_s::__kind"]
            [::core::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
        ["Offset of field: __pthread_mutex_s::__spins"]
            [::core::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
        ["Offset of field: __pthread_mutex_s::__elision"]
            [::core::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
        ["Offset of field: __pthread_mutex_s::__list"]
            [::core::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_rwlock_arch_t {
        pub __readers: ::core::ffi::c_uint,
        pub __writers: ::core::ffi::c_uint,
        pub __wrphase_futex: ::core::ffi::c_uint,
        pub __writers_futex: ::core::ffi::c_uint,
        pub __pad3: ::core::ffi::c_uint,
        pub __pad4: ::core::ffi::c_uint,
        pub __cur_writer: ::core::ffi::c_int,
        pub __shared: ::core::ffi::c_int,
        pub __rwelision: ::core::ffi::c_schar,
        pub __pad1: [::core::ffi::c_uchar; 7usize],
        pub __pad2: ::core::ffi::c_ulong,
        pub __flags: ::core::ffi::c_uint,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_rwlock_arch_t"]
            [::core::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
        ["Alignment of __pthread_rwlock_arch_t"]
            [::core::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
        ["Offset of field: __pthread_rwlock_arch_t::__readers"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
        ["Offset of field: __pthread_rwlock_arch_t::__writers"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
        ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
        ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
        ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
        ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
        ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
        ["Offset of field: __pthread_rwlock_arch_t::__shared"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
        ["Offset of field: __pthread_rwlock_arch_t::__rwelision"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __rwelision) - 32usize];
        ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
        ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
        ["Offset of field: __pthread_rwlock_arch_t::__flags"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __pthread_cond_s {
        pub __wseq: root::__atomic_wide_counter,
        pub __g1_start: root::__atomic_wide_counter,
        pub __g_size: [::core::ffi::c_uint; 2usize],
        pub __g1_orig_size: ::core::ffi::c_uint,
        pub __wrefs: ::core::ffi::c_uint,
        pub __g_signals: [::core::ffi::c_uint; 2usize],
        pub __unused_initialized_1: ::core::ffi::c_uint,
        pub __unused_initialized_2: ::core::ffi::c_uint,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_cond_s"][::core::mem::size_of::<__pthread_cond_s>() - 48usize];
        ["Alignment of __pthread_cond_s"][::core::mem::align_of::<__pthread_cond_s>() - 8usize];
        ["Offset of field: __pthread_cond_s::__wseq"]
            [::core::mem::offset_of!(__pthread_cond_s, __wseq) - 0usize];
        ["Offset of field: __pthread_cond_s::__g1_start"]
            [::core::mem::offset_of!(__pthread_cond_s, __g1_start) - 8usize];
        ["Offset of field: __pthread_cond_s::__g_size"]
            [::core::mem::offset_of!(__pthread_cond_s, __g_size) - 16usize];
        ["Offset of field: __pthread_cond_s::__g1_orig_size"]
            [::core::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 24usize];
        ["Offset of field: __pthread_cond_s::__wrefs"]
            [::core::mem::offset_of!(__pthread_cond_s, __wrefs) - 28usize];
        ["Offset of field: __pthread_cond_s::__g_signals"]
            [::core::mem::offset_of!(__pthread_cond_s, __g_signals) - 32usize];
        ["Offset of field: __pthread_cond_s::__unused_initialized_1"]
            [::core::mem::offset_of!(__pthread_cond_s, __unused_initialized_1) - 40usize];
        ["Offset of field: __pthread_cond_s::__unused_initialized_2"]
            [::core::mem::offset_of!(__pthread_cond_s, __unused_initialized_2) - 44usize];
    };
    pub type __tss_t = ::core::ffi::c_uint;
    pub type __thrd_t = ::core::ffi::c_ulong;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __once_flag {
        pub __data: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __once_flag"][::core::mem::size_of::<__once_flag>() - 4usize];
        ["Alignment of __once_flag"][::core::mem::align_of::<__once_flag>() - 4usize];
        ["Offset of field: __once_flag::__data"]
            [::core::mem::offset_of!(__once_flag, __data) - 0usize];
    };
    pub type pthread_t = ::core::ffi::c_ulong;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_mutexattr_t {
        pub __size: [::core::ffi::c_char; 4usize],
        pub __align: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_mutexattr_t"][::core::mem::size_of::<pthread_mutexattr_t>() - 4usize];
        ["Alignment of pthread_mutexattr_t"]
            [::core::mem::align_of::<pthread_mutexattr_t>() - 4usize];
        ["Offset of field: pthread_mutexattr_t::__size"]
            [::core::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
        ["Offset of field: pthread_mutexattr_t::__align"]
            [::core::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_condattr_t {
        pub __size: [::core::ffi::c_char; 4usize],
        pub __align: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_condattr_t"][::core::mem::size_of::<pthread_condattr_t>() - 4usize];
        ["Alignment of pthread_condattr_t"][::core::mem::align_of::<pthread_condattr_t>() - 4usize];
        ["Offset of field: pthread_condattr_t::__size"]
            [::core::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
        ["Offset of field: pthread_condattr_t::__align"]
            [::core::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
    };
    pub type pthread_key_t = ::core::ffi::c_uint;
    pub type pthread_once_t = ::core::ffi::c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_attr_t {
        pub __size: [::core::ffi::c_char; 56usize],
        pub __align: ::core::ffi::c_long,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_attr_t"][::core::mem::size_of::<pthread_attr_t>() - 56usize];
        ["Alignment of pthread_attr_t"][::core::mem::align_of::<pthread_attr_t>() - 8usize];
        ["Offset of field: pthread_attr_t::__size"]
            [::core::mem::offset_of!(pthread_attr_t, __size) - 0usize];
        ["Offset of field: pthread_attr_t::__align"]
            [::core::mem::offset_of!(pthread_attr_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_mutex_t {
        pub __data: root::__pthread_mutex_s,
        pub __size: [::core::ffi::c_char; 40usize],
        pub __align: ::core::ffi::c_long,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_mutex_t"][::core::mem::size_of::<pthread_mutex_t>() - 40usize];
        ["Alignment of pthread_mutex_t"][::core::mem::align_of::<pthread_mutex_t>() - 8usize];
        ["Offset of field: pthread_mutex_t::__data"]
            [::core::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
        ["Offset of field: pthread_mutex_t::__size"]
            [::core::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
        ["Offset of field: pthread_mutex_t::__align"]
            [::core::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_cond_t {
        pub __data: root::__pthread_cond_s,
        pub __size: [::core::ffi::c_char; 48usize],
        pub __align: ::core::ffi::c_longlong,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_cond_t"][::core::mem::size_of::<pthread_cond_t>() - 48usize];
        ["Alignment of pthread_cond_t"][::core::mem::align_of::<pthread_cond_t>() - 8usize];
        ["Offset of field: pthread_cond_t::__data"]
            [::core::mem::offset_of!(pthread_cond_t, __data) - 0usize];
        ["Offset of field: pthread_cond_t::__size"]
            [::core::mem::offset_of!(pthread_cond_t, __size) - 0usize];
        ["Offset of field: pthread_cond_t::__align"]
            [::core::mem::offset_of!(pthread_cond_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_rwlock_t {
        pub __data: root::__pthread_rwlock_arch_t,
        pub __size: [::core::ffi::c_char; 56usize],
        pub __align: ::core::ffi::c_long,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_rwlock_t"][::core::mem::size_of::<pthread_rwlock_t>() - 56usize];
        ["Alignment of pthread_rwlock_t"][::core::mem::align_of::<pthread_rwlock_t>() - 8usize];
        ["Offset of field: pthread_rwlock_t::__data"]
            [::core::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
        ["Offset of field: pthread_rwlock_t::__size"]
            [::core::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
        ["Offset of field: pthread_rwlock_t::__align"]
            [::core::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_rwlockattr_t {
        pub __size: [::core::ffi::c_char; 8usize],
        pub __align: ::core::ffi::c_long,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_rwlockattr_t"][::core::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
        ["Alignment of pthread_rwlockattr_t"]
            [::core::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
        ["Offset of field: pthread_rwlockattr_t::__size"]
            [::core::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
        ["Offset of field: pthread_rwlockattr_t::__align"]
            [::core::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
    };
    pub type pthread_spinlock_t = ::core::ffi::c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_barrier_t {
        pub __size: [::core::ffi::c_char; 32usize],
        pub __align: ::core::ffi::c_long,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_barrier_t"][::core::mem::size_of::<pthread_barrier_t>() - 32usize];
        ["Alignment of pthread_barrier_t"][::core::mem::align_of::<pthread_barrier_t>() - 8usize];
        ["Offset of field: pthread_barrier_t::__size"]
            [::core::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
        ["Offset of field: pthread_barrier_t::__align"]
            [::core::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_barrierattr_t {
        pub __size: [::core::ffi::c_char; 4usize],
        pub __align: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_barrierattr_t"][::core::mem::size_of::<pthread_barrierattr_t>() - 4usize];
        ["Alignment of pthread_barrierattr_t"]
            [::core::mem::align_of::<pthread_barrierattr_t>() - 4usize];
        ["Offset of field: pthread_barrierattr_t::__size"]
            [::core::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
        ["Offset of field: pthread_barrierattr_t::__align"]
            [::core::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct dirent {
        pub d_ino: root::__ino_t,
        pub d_off: root::__off_t,
        pub d_reclen: ::core::ffi::c_ushort,
        pub d_type: ::core::ffi::c_uchar,
        pub d_name: [::core::ffi::c_char; 256usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of dirent"][::core::mem::size_of::<dirent>() - 280usize];
        ["Alignment of dirent"][::core::mem::align_of::<dirent>() - 8usize];
        ["Offset of field: dirent::d_ino"][::core::mem::offset_of!(dirent, d_ino) - 0usize];
        ["Offset of field: dirent::d_off"][::core::mem::offset_of!(dirent, d_off) - 8usize];
        ["Offset of field: dirent::d_reclen"][::core::mem::offset_of!(dirent, d_reclen) - 16usize];
        ["Offset of field: dirent::d_type"][::core::mem::offset_of!(dirent, d_type) - 18usize];
        ["Offset of field: dirent::d_name"][::core::mem::offset_of!(dirent, d_name) - 19usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct dirent64 {
        pub d_ino: root::__ino64_t,
        pub d_off: root::__off64_t,
        pub d_reclen: ::core::ffi::c_ushort,
        pub d_type: ::core::ffi::c_uchar,
        pub d_name: [::core::ffi::c_char; 256usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of dirent64"][::core::mem::size_of::<dirent64>() - 280usize];
        ["Alignment of dirent64"][::core::mem::align_of::<dirent64>() - 8usize];
        ["Offset of field: dirent64::d_ino"][::core::mem::offset_of!(dirent64, d_ino) - 0usize];
        ["Offset of field: dirent64::d_off"][::core::mem::offset_of!(dirent64, d_off) - 8usize];
        ["Offset of field: dirent64::d_reclen"]
            [::core::mem::offset_of!(dirent64, d_reclen) - 16usize];
        ["Offset of field: dirent64::d_type"][::core::mem::offset_of!(dirent64, d_type) - 18usize];
        ["Offset of field: dirent64::d_name"][::core::mem::offset_of!(dirent64, d_name) - 19usize];
    };
    pub const DT_UNKNOWN: root::_bindgen_ty_6 = 0;
    pub const DT_FIFO: root::_bindgen_ty_6 = 1;
    pub const DT_CHR: root::_bindgen_ty_6 = 2;
    pub const DT_DIR: root::_bindgen_ty_6 = 4;
    pub const DT_BLK: root::_bindgen_ty_6 = 6;
    pub const DT_REG: root::_bindgen_ty_6 = 8;
    pub const DT_LNK: root::_bindgen_ty_6 = 10;
    pub const DT_SOCK: root::_bindgen_ty_6 = 12;
    pub const DT_WHT: root::_bindgen_ty_6 = 14;
    pub type _bindgen_ty_6 = ::core::ffi::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __dirstream {
        _unused: [u8; 0],
    }
    pub type DIR = root::__dirstream;
    unsafe extern "C" {
        pub fn closedir(__dirp: *mut root::DIR) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn opendir(__name: *const ::core::ffi::c_char) -> *mut root::DIR;
    }
    unsafe extern "C" {
        pub fn fdopendir(__fd: ::core::ffi::c_int) -> *mut root::DIR;
    }
    unsafe extern "C" {
        pub fn readdir(__dirp: *mut root::DIR) -> *mut root::dirent;
    }
    unsafe extern "C" {
        pub fn readdir64(__dirp: *mut root::DIR) -> *mut root::dirent64;
    }
    unsafe extern "C" {
        pub fn readdir_r(
            __dirp: *mut root::DIR,
            __entry: *mut root::dirent,
            __result: *mut *mut root::dirent,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn readdir64_r(
            __dirp: *mut root::DIR,
            __entry: *mut root::dirent64,
            __result: *mut *mut root::dirent64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn rewinddir(__dirp: *mut root::DIR);
    }
    unsafe extern "C" {
        pub fn seekdir(__dirp: *mut root::DIR, __pos: ::core::ffi::c_long);
    }
    unsafe extern "C" {
        pub fn telldir(__dirp: *mut root::DIR) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn dirfd(__dirp: *mut root::DIR) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __sysconf(__name: ::core::ffi::c_int) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn scandir(
            __dir: *const ::core::ffi::c_char,
            __namelist: *mut *mut *mut root::dirent,
            __selector: ::core::option::Option<
                unsafe extern "C" fn(arg1: *const root::dirent) -> ::core::ffi::c_int,
            >,
            __cmp: ::core::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut *const root::dirent,
                    arg2: *mut *const root::dirent,
                ) -> ::core::ffi::c_int,
            >,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn scandir64(
            __dir: *const ::core::ffi::c_char,
            __namelist: *mut *mut *mut root::dirent64,
            __selector: ::core::option::Option<
                unsafe extern "C" fn(arg1: *const root::dirent64) -> ::core::ffi::c_int,
            >,
            __cmp: ::core::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut *const root::dirent64,
                    arg2: *mut *const root::dirent64,
                ) -> ::core::ffi::c_int,
            >,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn scandirat(
            __dfd: ::core::ffi::c_int,
            __dir: *const ::core::ffi::c_char,
            __namelist: *mut *mut *mut root::dirent,
            __selector: ::core::option::Option<
                unsafe extern "C" fn(arg1: *const root::dirent) -> ::core::ffi::c_int,
            >,
            __cmp: ::core::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut *const root::dirent,
                    arg2: *mut *const root::dirent,
                ) -> ::core::ffi::c_int,
            >,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn scandirat64(
            __dfd: ::core::ffi::c_int,
            __dir: *const ::core::ffi::c_char,
            __namelist: *mut *mut *mut root::dirent64,
            __selector: ::core::option::Option<
                unsafe extern "C" fn(arg1: *const root::dirent64) -> ::core::ffi::c_int,
            >,
            __cmp: ::core::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut *const root::dirent64,
                    arg2: *mut *const root::dirent64,
                ) -> ::core::ffi::c_int,
            >,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn alphasort(
            __e1: *mut *const root::dirent,
            __e2: *mut *const root::dirent,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn alphasort64(
            __e1: *mut *const root::dirent64,
            __e2: *mut *const root::dirent64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getdirentries(
            __fd: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __nbytes: usize,
            __basep: *mut root::__off_t,
        ) -> root::__ssize_t;
    }
    unsafe extern "C" {
        pub fn getdirentries64(
            __fd: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __nbytes: usize,
            __basep: *mut root::__off64_t,
        ) -> root::__ssize_t;
    }
    unsafe extern "C" {
        pub fn versionsort(
            __e1: *mut *const root::dirent,
            __e2: *mut *const root::dirent,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn versionsort64(
            __e1: *mut *const root::dirent64,
            __e2: *mut *const root::dirent64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getdents64(
            __fd: ::core::ffi::c_int,
            __buffer: *mut ::core::ffi::c_void,
            __length: usize,
        ) -> root::__ssize_t;
    }
    pub type HINSTANCE = *mut ::core::ffi::c_void;
    pub mod std {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub type nullptr_t = *const ::core::ffi::c_void;
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt21__glibcxx_assert_failPKciS0_S0_"]
            pub fn __glibcxx_assert_fail(
                __file: *const ::core::ffi::c_char,
                __line: ::core::ffi::c_int,
                __function: *const ::core::ffi::c_char,
                __condition: *const ::core::ffi::c_char,
            ) -> !;
        }
    }
    pub mod __gnu_cxx {
        #[allow(unused_imports)]
        use self::super::super::root;
    }
    unsafe extern "C" {
        pub fn __errno_location() -> *mut ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub static mut program_invocation_name: *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub static mut program_invocation_short_name: *mut ::core::ffi::c_char;
    }
    pub type error_t = ::core::ffi::c_int;
    unsafe extern "C" {
        #[link_name = "\u{1}_Z12GetLastErrorv"]
        pub fn GetLastError() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_Z16GetFileOfAddressPvPcm"]
        pub fn GetFileOfAddress(
            pAddr: *mut ::core::ffi::c_void,
            buffer: *mut ::core::ffi::c_char,
            maxlength: usize,
        ) -> bool;
    }
    pub type int_least8_t = root::__int_least8_t;
    pub type int_least16_t = root::__int_least16_t;
    pub type int_least32_t = root::__int_least32_t;
    pub type int_least64_t = root::__int_least64_t;
    pub type uint_least8_t = root::__uint_least8_t;
    pub type uint_least16_t = root::__uint_least16_t;
    pub type uint_least32_t = root::__uint_least32_t;
    pub type uint_least64_t = root::__uint_least64_t;
    pub type int_fast8_t = ::core::ffi::c_schar;
    pub type int_fast16_t = ::core::ffi::c_long;
    pub type int_fast32_t = ::core::ffi::c_long;
    pub type int_fast64_t = ::core::ffi::c_long;
    pub type uint_fast8_t = ::core::ffi::c_uchar;
    pub type uint_fast16_t = ::core::ffi::c_ulong;
    pub type uint_fast32_t = ::core::ffi::c_ulong;
    pub type uint_fast64_t = ::core::ffi::c_ulong;
    pub type intmax_t = root::__intmax_t;
    pub type uintmax_t = root::__uintmax_t;
    pub type __cfloat128 = root::__BindgenComplex<u128>;
    pub type _Float128 = u128;
    pub type _Float32 = f32;
    pub type _Float64 = f64;
    pub type _Float32x = f64;
    pub type _Float64x = u128;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct div_t {
        pub quot: ::core::ffi::c_int,
        pub rem: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of div_t"][::core::mem::size_of::<div_t>() - 8usize];
        ["Alignment of div_t"][::core::mem::align_of::<div_t>() - 4usize];
        ["Offset of field: div_t::quot"][::core::mem::offset_of!(div_t, quot) - 0usize];
        ["Offset of field: div_t::rem"][::core::mem::offset_of!(div_t, rem) - 4usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ldiv_t {
        pub quot: ::core::ffi::c_long,
        pub rem: ::core::ffi::c_long,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of ldiv_t"][::core::mem::size_of::<ldiv_t>() - 16usize];
        ["Alignment of ldiv_t"][::core::mem::align_of::<ldiv_t>() - 8usize];
        ["Offset of field: ldiv_t::quot"][::core::mem::offset_of!(ldiv_t, quot) - 0usize];
        ["Offset of field: ldiv_t::rem"][::core::mem::offset_of!(ldiv_t, rem) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lldiv_t {
        pub quot: ::core::ffi::c_longlong,
        pub rem: ::core::ffi::c_longlong,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of lldiv_t"][::core::mem::size_of::<lldiv_t>() - 16usize];
        ["Alignment of lldiv_t"][::core::mem::align_of::<lldiv_t>() - 8usize];
        ["Offset of field: lldiv_t::quot"][::core::mem::offset_of!(lldiv_t, quot) - 0usize];
        ["Offset of field: lldiv_t::rem"][::core::mem::offset_of!(lldiv_t, rem) - 8usize];
    };
    unsafe extern "C" {
        pub fn __ctype_get_mb_cur_max() -> usize;
    }
    unsafe extern "C" {
        pub fn atof(__nptr: *const ::core::ffi::c_char) -> f64;
    }
    unsafe extern "C" {
        pub fn atoi(__nptr: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn atol(__nptr: *const ::core::ffi::c_char) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn atoll(__nptr: *const ::core::ffi::c_char) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn strtod(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
        ) -> f64;
    }
    unsafe extern "C" {
        pub fn strtof(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
        ) -> f32;
    }
    unsafe extern "C" {
        pub fn strtold(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
        ) -> u128;
    }
    unsafe extern "C" {
        pub fn strtof32(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
        ) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn strtof64(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
        ) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn strtof128(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
        ) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn strtof32x(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
        ) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn strtof64x(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
        ) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn strtol(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn strtoul(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_ulong;
    }
    unsafe extern "C" {
        pub fn strtoq(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn strtouq(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_ulonglong;
    }
    unsafe extern "C" {
        pub fn strtoll(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn strtoull(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_ulonglong;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_strtol"]
        pub fn strtol1(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_strtoul"]
        pub fn strtoul1(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_ulong;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_strtoll"]
        pub fn strtoq1(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_strtoull"]
        pub fn strtouq1(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_ulonglong;
    }
    unsafe extern "C" {
        pub fn strfromd(
            __dest: *mut ::core::ffi::c_char,
            __size: usize,
            __format: *const ::core::ffi::c_char,
            __f: f64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strfromf(
            __dest: *mut ::core::ffi::c_char,
            __size: usize,
            __format: *const ::core::ffi::c_char,
            __f: f32,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strfroml(
            __dest: *mut ::core::ffi::c_char,
            __size: usize,
            __format: *const ::core::ffi::c_char,
            __f: u128,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strfromf32(
            __dest: *mut ::core::ffi::c_char,
            __size: usize,
            __format: *const ::core::ffi::c_char,
            __f: root::_Float32,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strfromf64(
            __dest: *mut ::core::ffi::c_char,
            __size: usize,
            __format: *const ::core::ffi::c_char,
            __f: root::_Float64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strfromf128(
            __dest: *mut ::core::ffi::c_char,
            __size: usize,
            __format: *const ::core::ffi::c_char,
            __f: root::_Float128,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strfromf32x(
            __dest: *mut ::core::ffi::c_char,
            __size: usize,
            __format: *const ::core::ffi::c_char,
            __f: root::_Float32x,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strfromf64x(
            __dest: *mut ::core::ffi::c_char,
            __size: usize,
            __format: *const ::core::ffi::c_char,
            __f: root::_Float64x,
        ) -> ::core::ffi::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __locale_struct {
        pub __locales: [*mut root::__locale_data; 13usize],
        pub __ctype_b: *const ::core::ffi::c_ushort,
        pub __ctype_tolower: *const ::core::ffi::c_int,
        pub __ctype_toupper: *const ::core::ffi::c_int,
        pub __names: [*const ::core::ffi::c_char; 13usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __locale_struct"][::core::mem::size_of::<__locale_struct>() - 232usize];
        ["Alignment of __locale_struct"][::core::mem::align_of::<__locale_struct>() - 8usize];
        ["Offset of field: __locale_struct::__locales"]
            [::core::mem::offset_of!(__locale_struct, __locales) - 0usize];
        ["Offset of field: __locale_struct::__ctype_b"]
            [::core::mem::offset_of!(__locale_struct, __ctype_b) - 104usize];
        ["Offset of field: __locale_struct::__ctype_tolower"]
            [::core::mem::offset_of!(__locale_struct, __ctype_tolower) - 112usize];
        ["Offset of field: __locale_struct::__ctype_toupper"]
            [::core::mem::offset_of!(__locale_struct, __ctype_toupper) - 120usize];
        ["Offset of field: __locale_struct::__names"]
            [::core::mem::offset_of!(__locale_struct, __names) - 128usize];
    };
    pub type __locale_t = *mut root::__locale_struct;
    pub type locale_t = root::__locale_t;
    unsafe extern "C" {
        pub fn strtol_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn strtoul_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_ulong;
    }
    unsafe extern "C" {
        pub fn strtoll_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn strtoull_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_ulonglong;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_strtol_l"]
        pub fn strtol_l1(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_strtoul_l"]
        pub fn strtoul_l1(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_ulong;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_strtoll_l"]
        pub fn strtoll_l1(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_strtoull_l"]
        pub fn strtoull_l1(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_ulonglong;
    }
    unsafe extern "C" {
        pub fn strtod_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __loc: root::locale_t,
        ) -> f64;
    }
    unsafe extern "C" {
        pub fn strtof_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __loc: root::locale_t,
        ) -> f32;
    }
    unsafe extern "C" {
        pub fn strtold_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __loc: root::locale_t,
        ) -> u128;
    }
    unsafe extern "C" {
        pub fn strtof32_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __loc: root::locale_t,
        ) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn strtof64_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __loc: root::locale_t,
        ) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn strtof128_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __loc: root::locale_t,
        ) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn strtof32x_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __loc: root::locale_t,
        ) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn strtof64x_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __loc: root::locale_t,
        ) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn l64a(__n: ::core::ffi::c_long) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn a64l(__s: *const ::core::ffi::c_char) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn random() -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn srandom(__seed: ::core::ffi::c_uint);
    }
    unsafe extern "C" {
        pub fn initstate(
            __seed: ::core::ffi::c_uint,
            __statebuf: *mut ::core::ffi::c_char,
            __statelen: usize,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn setstate(__statebuf: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct random_data {
        pub fptr: *mut i32,
        pub rptr: *mut i32,
        pub state: *mut i32,
        pub rand_type: ::core::ffi::c_int,
        pub rand_deg: ::core::ffi::c_int,
        pub rand_sep: ::core::ffi::c_int,
        pub end_ptr: *mut i32,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of random_data"][::core::mem::size_of::<random_data>() - 48usize];
        ["Alignment of random_data"][::core::mem::align_of::<random_data>() - 8usize];
        ["Offset of field: random_data::fptr"][::core::mem::offset_of!(random_data, fptr) - 0usize];
        ["Offset of field: random_data::rptr"][::core::mem::offset_of!(random_data, rptr) - 8usize];
        ["Offset of field: random_data::state"]
            [::core::mem::offset_of!(random_data, state) - 16usize];
        ["Offset of field: random_data::rand_type"]
            [::core::mem::offset_of!(random_data, rand_type) - 24usize];
        ["Offset of field: random_data::rand_deg"]
            [::core::mem::offset_of!(random_data, rand_deg) - 28usize];
        ["Offset of field: random_data::rand_sep"]
            [::core::mem::offset_of!(random_data, rand_sep) - 32usize];
        ["Offset of field: random_data::end_ptr"]
            [::core::mem::offset_of!(random_data, end_ptr) - 40usize];
    };
    unsafe extern "C" {
        pub fn random_r(__buf: *mut root::random_data, __result: *mut i32) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn srandom_r(
            __seed: ::core::ffi::c_uint,
            __buf: *mut root::random_data,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn initstate_r(
            __seed: ::core::ffi::c_uint,
            __statebuf: *mut ::core::ffi::c_char,
            __statelen: usize,
            __buf: *mut root::random_data,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setstate_r(
            __statebuf: *mut ::core::ffi::c_char,
            __buf: *mut root::random_data,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn rand() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn srand(__seed: ::core::ffi::c_uint);
    }
    unsafe extern "C" {
        pub fn rand_r(__seed: *mut ::core::ffi::c_uint) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn drand48() -> f64;
    }
    unsafe extern "C" {
        pub fn erand48(__xsubi: *mut ::core::ffi::c_ushort) -> f64;
    }
    unsafe extern "C" {
        pub fn lrand48() -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn nrand48(__xsubi: *mut ::core::ffi::c_ushort) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn mrand48() -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn jrand48(__xsubi: *mut ::core::ffi::c_ushort) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn srand48(__seedval: ::core::ffi::c_long);
    }
    unsafe extern "C" {
        pub fn seed48(__seed16v: *mut ::core::ffi::c_ushort) -> *mut ::core::ffi::c_ushort;
    }
    unsafe extern "C" {
        pub fn lcong48(__param: *mut ::core::ffi::c_ushort);
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct drand48_data {
        pub __x: [::core::ffi::c_ushort; 3usize],
        pub __old_x: [::core::ffi::c_ushort; 3usize],
        pub __c: ::core::ffi::c_ushort,
        pub __init: ::core::ffi::c_ushort,
        pub __a: ::core::ffi::c_ulonglong,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of drand48_data"][::core::mem::size_of::<drand48_data>() - 24usize];
        ["Alignment of drand48_data"][::core::mem::align_of::<drand48_data>() - 8usize];
        ["Offset of field: drand48_data::__x"][::core::mem::offset_of!(drand48_data, __x) - 0usize];
        ["Offset of field: drand48_data::__old_x"]
            [::core::mem::offset_of!(drand48_data, __old_x) - 6usize];
        ["Offset of field: drand48_data::__c"]
            [::core::mem::offset_of!(drand48_data, __c) - 12usize];
        ["Offset of field: drand48_data::__init"]
            [::core::mem::offset_of!(drand48_data, __init) - 14usize];
        ["Offset of field: drand48_data::__a"]
            [::core::mem::offset_of!(drand48_data, __a) - 16usize];
    };
    unsafe extern "C" {
        pub fn drand48_r(
            __buffer: *mut root::drand48_data,
            __result: *mut f64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn erand48_r(
            __xsubi: *mut ::core::ffi::c_ushort,
            __buffer: *mut root::drand48_data,
            __result: *mut f64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn lrand48_r(
            __buffer: *mut root::drand48_data,
            __result: *mut ::core::ffi::c_long,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn nrand48_r(
            __xsubi: *mut ::core::ffi::c_ushort,
            __buffer: *mut root::drand48_data,
            __result: *mut ::core::ffi::c_long,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mrand48_r(
            __buffer: *mut root::drand48_data,
            __result: *mut ::core::ffi::c_long,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn jrand48_r(
            __xsubi: *mut ::core::ffi::c_ushort,
            __buffer: *mut root::drand48_data,
            __result: *mut ::core::ffi::c_long,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn srand48_r(
            __seedval: ::core::ffi::c_long,
            __buffer: *mut root::drand48_data,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn seed48_r(
            __seed16v: *mut ::core::ffi::c_ushort,
            __buffer: *mut root::drand48_data,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn lcong48_r(
            __param: *mut ::core::ffi::c_ushort,
            __buffer: *mut root::drand48_data,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn arc4random() -> root::__uint32_t;
    }
    unsafe extern "C" {
        pub fn arc4random_buf(__buf: *mut ::core::ffi::c_void, __size: usize);
    }
    unsafe extern "C" {
        pub fn arc4random_uniform(__upper_bound: root::__uint32_t) -> root::__uint32_t;
    }
    unsafe extern "C" {
        pub fn malloc(__size: usize) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn calloc(__nmemb: usize, __size: usize) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn realloc(__ptr: *mut ::core::ffi::c_void, __size: usize) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn free(__ptr: *mut ::core::ffi::c_void);
    }
    unsafe extern "C" {
        pub fn reallocarray(
            __ptr: *mut ::core::ffi::c_void,
            __nmemb: usize,
            __size: usize,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn alloca(__size: usize) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn valloc(__size: usize) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn posix_memalign(
            __memptr: *mut *mut ::core::ffi::c_void,
            __alignment: usize,
            __size: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn abort() -> !;
    }
    unsafe extern "C" {
        pub fn atexit(__func: ::core::option::Option<unsafe extern "C" fn()>)
            -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn at_quick_exit(
            __func: ::core::option::Option<unsafe extern "C" fn()>,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn on_exit(
            __func: ::core::option::Option<
                unsafe extern "C" fn(__status: ::core::ffi::c_int, __arg: *mut ::core::ffi::c_void),
            >,
            __arg: *mut ::core::ffi::c_void,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn exit(__status: ::core::ffi::c_int) -> !;
    }
    unsafe extern "C" {
        pub fn quick_exit(__status: ::core::ffi::c_int) -> !;
    }
    unsafe extern "C" {
        pub fn _Exit(__status: ::core::ffi::c_int) -> !;
    }
    unsafe extern "C" {
        pub fn getenv(__name: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn secure_getenv(__name: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn putenv(__string: *mut ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setenv(
            __name: *const ::core::ffi::c_char,
            __value: *const ::core::ffi::c_char,
            __replace: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn unsetenv(__name: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn clearenv() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mktemp(__template: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn mkstemp(__template: *mut ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mkstemp64(__template: *mut ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mkstemps(
            __template: *mut ::core::ffi::c_char,
            __suffixlen: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mkstemps64(
            __template: *mut ::core::ffi::c_char,
            __suffixlen: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mkdtemp(__template: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn mkostemp(
            __template: *mut ::core::ffi::c_char,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mkostemp64(
            __template: *mut ::core::ffi::c_char,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mkostemps(
            __template: *mut ::core::ffi::c_char,
            __suffixlen: ::core::ffi::c_int,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mkostemps64(
            __template: *mut ::core::ffi::c_char,
            __suffixlen: ::core::ffi::c_int,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn system(__command: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn canonicalize_file_name(
            __name: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn realpath(
            __name: *const ::core::ffi::c_char,
            __resolved: *mut ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    pub type __compar_fn_t = ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::core::ffi::c_void,
            arg2: *const ::core::ffi::c_void,
        ) -> ::core::ffi::c_int,
    >;
    pub type comparison_fn_t = root::__compar_fn_t;
    pub type __compar_d_fn_t = ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::core::ffi::c_void,
            arg2: *const ::core::ffi::c_void,
            arg3: *mut ::core::ffi::c_void,
        ) -> ::core::ffi::c_int,
    >;
    unsafe extern "C" {
        pub fn bsearch(
            __key: *const ::core::ffi::c_void,
            __base: *const ::core::ffi::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: root::__compar_fn_t,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn qsort(
            __base: *mut ::core::ffi::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: root::__compar_fn_t,
        );
    }
    unsafe extern "C" {
        pub fn qsort_r(
            __base: *mut ::core::ffi::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: root::__compar_d_fn_t,
            __arg: *mut ::core::ffi::c_void,
        );
    }
    unsafe extern "C" {
        pub fn abs(__x: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn labs(__x: ::core::ffi::c_long) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn llabs(__x: ::core::ffi::c_longlong) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn div(__numer: ::core::ffi::c_int, __denom: ::core::ffi::c_int) -> root::div_t;
    }
    unsafe extern "C" {
        pub fn ldiv(__numer: ::core::ffi::c_long, __denom: ::core::ffi::c_long) -> root::ldiv_t;
    }
    unsafe extern "C" {
        pub fn lldiv(
            __numer: ::core::ffi::c_longlong,
            __denom: ::core::ffi::c_longlong,
        ) -> root::lldiv_t;
    }
    unsafe extern "C" {
        pub fn ecvt(
            __value: f64,
            __ndigit: ::core::ffi::c_int,
            __decpt: *mut ::core::ffi::c_int,
            __sign: *mut ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn fcvt(
            __value: f64,
            __ndigit: ::core::ffi::c_int,
            __decpt: *mut ::core::ffi::c_int,
            __sign: *mut ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn gcvt(
            __value: f64,
            __ndigit: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn qecvt(
            __value: u128,
            __ndigit: ::core::ffi::c_int,
            __decpt: *mut ::core::ffi::c_int,
            __sign: *mut ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn qfcvt(
            __value: u128,
            __ndigit: ::core::ffi::c_int,
            __decpt: *mut ::core::ffi::c_int,
            __sign: *mut ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn qgcvt(
            __value: u128,
            __ndigit: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn ecvt_r(
            __value: f64,
            __ndigit: ::core::ffi::c_int,
            __decpt: *mut ::core::ffi::c_int,
            __sign: *mut ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __len: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fcvt_r(
            __value: f64,
            __ndigit: ::core::ffi::c_int,
            __decpt: *mut ::core::ffi::c_int,
            __sign: *mut ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __len: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn qecvt_r(
            __value: u128,
            __ndigit: ::core::ffi::c_int,
            __decpt: *mut ::core::ffi::c_int,
            __sign: *mut ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __len: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn qfcvt_r(
            __value: u128,
            __ndigit: ::core::ffi::c_int,
            __decpt: *mut ::core::ffi::c_int,
            __sign: *mut ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __len: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mblen(__s: *const ::core::ffi::c_char, __n: usize) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mbtowc(
            __pwc: *mut u32,
            __s: *const ::core::ffi::c_char,
            __n: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn wctomb(__s: *mut ::core::ffi::c_char, __wchar: u32) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mbstowcs(__pwcs: *mut u32, __s: *const ::core::ffi::c_char, __n: usize) -> usize;
    }
    unsafe extern "C" {
        pub fn wcstombs(__s: *mut ::core::ffi::c_char, __pwcs: *const u32, __n: usize) -> usize;
    }
    unsafe extern "C" {
        pub fn rpmatch(__response: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getsubopt(
            __optionp: *mut *mut ::core::ffi::c_char,
            __tokens: *const *mut ::core::ffi::c_char,
            __valuep: *mut *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn posix_openpt(__oflag: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn grantpt(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn unlockpt(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ptsname(__fd: ::core::ffi::c_int) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn ptsname_r(
            __fd: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __buflen: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getpt() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getloadavg(__loadavg: *mut f64, __nelem: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    pub mod SourceHook {
        #[allow(unused_imports)]
        use self::super::super::root;
        #[repr(C)]
        #[derive(Debug)]
        pub struct List<T> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<T>>,
            pub m_Head: *mut root::SourceHook::List_ListNode<T>,
            pub m_Size: usize,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct List_ListNode<T> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<T>>,
            pub obj: T,
            pub next: *mut root::SourceHook::List_ListNode<T>,
            pub prev: *mut root::SourceHook::List_ListNode<T>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct List_iterator<T> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<T>>,
            pub m_This: *mut root::SourceHook::List_ListNode<T>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct MemFuncInfo {
            pub isVirtual: bool,
            pub thisptroffs: ::core::ffi::c_int,
            pub vtblindex: ::core::ffi::c_int,
            pub vtbloffs: ::core::ffi::c_int,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of MemFuncInfo"][::core::mem::size_of::<MemFuncInfo>() - 16usize];
            ["Alignment of MemFuncInfo"][::core::mem::align_of::<MemFuncInfo>() - 4usize];
            ["Offset of field: MemFuncInfo::isVirtual"]
                [::core::mem::offset_of!(MemFuncInfo, isVirtual) - 0usize];
            ["Offset of field: MemFuncInfo::thisptroffs"]
                [::core::mem::offset_of!(MemFuncInfo, thisptroffs) - 4usize];
            ["Offset of field: MemFuncInfo::vtblindex"]
                [::core::mem::offset_of!(MemFuncInfo, vtblindex) - 8usize];
            ["Offset of field: MemFuncInfo::vtbloffs"]
                [::core::mem::offset_of!(MemFuncInfo, vtbloffs) - 12usize];
        };
        #[doc = "   @brief\tSourceHook's debug log function"]
        pub type DebugLogFunc = ::core::option::Option<
            unsafe extern "C" fn(arg1: *const ::core::ffi::c_char, ...) -> ::core::ffi::c_int,
        >;
        #[doc = "\t@brief\tSpecifies the size (in bytes) for the internal buffer of vafmt(printf-like) function handlers"]
        pub const STRBUF_LEN: ::core::ffi::c_int = 4096;
        #[doc = "\t@brief\tAn empty class. No inheritance used. Used for original-function-call hacks"]
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct EmptyClass {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of EmptyClass"][::core::mem::size_of::<EmptyClass>() - 1usize];
            ["Alignment of EmptyClass"][::core::mem::align_of::<EmptyClass>() - 1usize];
        };
        #[doc = "\t@brief A plugin typedef\n\n\tSourceHook doesn't really care what this is. As long as the ==, != and = operators work on it and every\n\tplugin has a unique identifier, everything is ok.\n\tIt should also be possible to set it to 0."]
        pub type Plugin = ::core::ffi::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct CallClass<T> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<T>>,
            pub _base: T,
        }
        pub type ManualCallClass = ::core::ffi::c_void;
        #[doc = "\t@brief Describes the way a parameter/retval is passed."]
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct PassInfo {
            #[doc = "!< Size of the data being passed"]
            pub size: usize,
            #[doc = "!< PassType value"]
            pub type_: ::core::ffi::c_int,
            #[doc = "!< Pass/return flags"]
            pub flags: ::core::ffi::c_uint,
        }
        #[doc = "< Unknown -- no extra info available"]
        pub const PassInfo_PassType_PassType_Unknown: root::SourceHook::PassInfo_PassType = 0;
        #[doc = "< Plain old register data (pointers, integers)"]
        pub const PassInfo_PassType_PassType_Basic: root::SourceHook::PassInfo_PassType = 1;
        #[doc = "< Floating point data"]
        pub const PassInfo_PassType_PassType_Float: root::SourceHook::PassInfo_PassType = 2;
        #[doc = "< Object or structure"]
        pub const PassInfo_PassType_PassType_Object: root::SourceHook::PassInfo_PassType = 3;
        pub type PassInfo_PassType = ::core::ffi::c_uint;
        #[doc = "< Passing by value"]
        pub const PassInfo_PassFlags_PassFlag_ByVal: root::SourceHook::PassInfo_PassFlags = 1;
        #[doc = "< Passing by reference"]
        pub const PassInfo_PassFlags_PassFlag_ByRef: root::SourceHook::PassInfo_PassFlags = 2;
        #[doc = "< Object has a destructor"]
        pub const PassInfo_PassFlags_PassFlag_ODtor: root::SourceHook::PassInfo_PassFlags = 4;
        #[doc = "< Object has a normal non-trivial constructor"]
        pub const PassInfo_PassFlags_PassFlag_OCtor: root::SourceHook::PassInfo_PassFlags = 8;
        #[doc = "< Object has a non-trivial assignment operator"]
        pub const PassInfo_PassFlags_PassFlag_AssignOp: root::SourceHook::PassInfo_PassFlags = 16;
        #[doc = "< Object has a copy constructor (which takes const Object& as only parameter)"]
        pub const PassInfo_PassFlags_PassFlag_CCtor: root::SourceHook::PassInfo_PassFlags = 32;
        #[doc = "< Object is returned in memory (through hidden first param"]
        pub const PassInfo_PassFlags_PassFlag_RetMem: root::SourceHook::PassInfo_PassFlags = 64;
        #[doc = "< Object is returned in EAX(:EDX)/RAX(x86_64)"]
        pub const PassInfo_PassFlags_PassFlag_RetReg: root::SourceHook::PassInfo_PassFlags = 128;
        pub type PassInfo_PassFlags = ::core::ffi::c_uint;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct PassInfo_V2Info {
            pub pNormalCtor: *mut ::core::ffi::c_void,
            pub pCopyCtor: *mut ::core::ffi::c_void,
            pub pDtor: *mut ::core::ffi::c_void,
            pub pAssignOperator: *mut ::core::ffi::c_void,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of PassInfo_V2Info"][::core::mem::size_of::<PassInfo_V2Info>() - 32usize];
            ["Alignment of PassInfo_V2Info"][::core::mem::align_of::<PassInfo_V2Info>() - 8usize];
            ["Offset of field: PassInfo_V2Info::pNormalCtor"]
                [::core::mem::offset_of!(PassInfo_V2Info, pNormalCtor) - 0usize];
            ["Offset of field: PassInfo_V2Info::pCopyCtor"]
                [::core::mem::offset_of!(PassInfo_V2Info, pCopyCtor) - 8usize];
            ["Offset of field: PassInfo_V2Info::pDtor"]
                [::core::mem::offset_of!(PassInfo_V2Info, pDtor) - 16usize];
            ["Offset of field: PassInfo_V2Info::pAssignOperator"]
                [::core::mem::offset_of!(PassInfo_V2Info, pAssignOperator) - 24usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of PassInfo"][::core::mem::size_of::<PassInfo>() - 16usize];
            ["Alignment of PassInfo"][::core::mem::align_of::<PassInfo>() - 8usize];
            ["Offset of field: PassInfo::size"][::core::mem::offset_of!(PassInfo, size) - 0usize];
            ["Offset of field: PassInfo::type_"][::core::mem::offset_of!(PassInfo, type_) - 8usize];
            ["Offset of field: PassInfo::flags"]
                [::core::mem::offset_of!(PassInfo, flags) - 12usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ProtoInfo {
            #[doc = "!< number of parameters"]
            pub numOfParams: ::core::ffi::c_int,
            #[doc = "!< PassInfo for the return value. size=0 -> no retval"]
            pub retPassInfo: root::SourceHook::PassInfo,
            #[doc = "!< PassInfos for the parameters"]
            pub paramsPassInfo: *const root::SourceHook::PassInfo,
            pub convention: ::core::ffi::c_int,
            pub retPassInfo2: root::SourceHook::PassInfo_V2Info,
            pub paramsPassInfo2: *const root::SourceHook::PassInfo_V2Info,
        }
        #[doc = "< Unknown  -- no extra info available (0)"]
        pub const ProtoInfo_CallConvention_CallConv_Unknown:
            root::SourceHook::ProtoInfo_CallConvention = 0;
        #[doc = "< This call (object pointer required) (1)"]
        pub const ProtoInfo_CallConvention_CallConv_ThisCall:
            root::SourceHook::ProtoInfo_CallConvention = 1;
        #[doc = "< C call\t\t\t\t\t\t\t\t (2)"]
        pub const ProtoInfo_CallConvention_CallConv_Cdecl:
            root::SourceHook::ProtoInfo_CallConvention = 2;
        #[doc = "< Windows \"stdcall\"\t\t\t\t\t (3)"]
        pub const ProtoInfo_CallConvention_CallConv_StdCall:
            root::SourceHook::ProtoInfo_CallConvention = 3;
        #[doc = "< Has variable arguments"]
        pub const ProtoInfo_CallConvention_CallConv_HasVarArgs:
            root::SourceHook::ProtoInfo_CallConvention = 65536;
        #[doc = "< last params: const char*, ..."]
        pub const ProtoInfo_CallConvention_CallConv_HasVafmt:
            root::SourceHook::ProtoInfo_CallConvention = 196608;
        pub type ProtoInfo_CallConvention = ::core::ffi::c_uint;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of ProtoInfo"][::core::mem::size_of::<ProtoInfo>() - 80usize];
            ["Alignment of ProtoInfo"][::core::mem::align_of::<ProtoInfo>() - 8usize];
            ["Offset of field: ProtoInfo::numOfParams"]
                [::core::mem::offset_of!(ProtoInfo, numOfParams) - 0usize];
            ["Offset of field: ProtoInfo::retPassInfo"]
                [::core::mem::offset_of!(ProtoInfo, retPassInfo) - 8usize];
            ["Offset of field: ProtoInfo::paramsPassInfo"]
                [::core::mem::offset_of!(ProtoInfo, paramsPassInfo) - 24usize];
            ["Offset of field: ProtoInfo::convention"]
                [::core::mem::offset_of!(ProtoInfo, convention) - 32usize];
            ["Offset of field: ProtoInfo::retPassInfo2"]
                [::core::mem::offset_of!(ProtoInfo, retPassInfo2) - 40usize];
            ["Offset of field: ProtoInfo::paramsPassInfo2"]
                [::core::mem::offset_of!(ProtoInfo, paramsPassInfo2) - 72usize];
        };
        #[doc = "\t@brief Pointer to hook manager interface function\n\n\tThe hook manager should store hi for later use if store==true. It should then call hi->SetInfo(...) if hi\n   is non-null. The hook manager can return 0 for success or a non-zero value if it doesn't want to be used.\n\n\t@param hi A pointer to IHookManagerInfo"]
        pub type HookManagerPubFunc = ::core::option::Option<
            unsafe extern "C" fn(
                store: bool,
                hi: *mut root::SourceHook::IHookManagerInfo,
            ) -> ::core::ffi::c_int,
        >;
        #[repr(C)]
        pub struct ISHDelegate__bindgen_vtable(::core::ffi::c_void);
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ISHDelegate {
            pub vtable_: *const ISHDelegate__bindgen_vtable,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of ISHDelegate"][::core::mem::size_of::<ISHDelegate>() - 8usize];
            ["Alignment of ISHDelegate"][::core::mem::align_of::<ISHDelegate>() - 8usize];
        };
        #[repr(C)]
        pub struct IHookManagerInfo__bindgen_vtable(::core::ffi::c_void);
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct IHookManagerInfo {
            pub vtable_: *const IHookManagerInfo__bindgen_vtable,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of IHookManagerInfo"][::core::mem::size_of::<IHookManagerInfo>() - 8usize];
            ["Alignment of IHookManagerInfo"][::core::mem::align_of::<IHookManagerInfo>() - 8usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ReferenceCarrier {
            pub _address: u8,
        }
        pub type ReferenceCarrier_type<T> = T;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ReferenceUtil {
            pub _address: u8,
        }
        pub type ReferenceUtil_plain_type<T> = T;
        pub type ReferenceUtil_pointer_type<T> = *mut T;
        pub type ReferenceUtil_reference_type<T> = *mut T;
        #[repr(C)]
        pub struct IHookContext__bindgen_vtable(::core::ffi::c_void);
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct IHookContext {
            pub vtable_: *const IHookContext__bindgen_vtable,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of IHookContext"][::core::mem::size_of::<IHookContext>() - 8usize];
            ["Alignment of IHookContext"][::core::mem::align_of::<IHookContext>() - 8usize];
        };
        #[repr(C)]
        pub struct ISourceHook__bindgen_vtable(::core::ffi::c_void);
        #[doc = "\t@brief The main SourceHook interface"]
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ISourceHook {
            pub vtable_: *const ISourceHook__bindgen_vtable,
        }
        pub const ISourceHook_AddHookMode_Hook_Normal: root::SourceHook::ISourceHook_AddHookMode =
            0;
        pub const ISourceHook_AddHookMode_Hook_VP: root::SourceHook::ISourceHook_AddHookMode = 1;
        pub const ISourceHook_AddHookMode_Hook_DVP: root::SourceHook::ISourceHook_AddHookMode = 2;
        #[doc = "\t@brief Modes for the new AddHook"]
        pub type ISourceHook_AddHookMode = ::core::ffi::c_uint;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of ISourceHook"][::core::mem::size_of::<ISourceHook>() - 8usize];
            ["Alignment of ISourceHook"][::core::mem::align_of::<ISourceHook>() - 8usize];
        };
        #[repr(C)]
        pub struct IHookManagerAutoGen__bindgen_vtable(::core::ffi::c_void);
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct IHookManagerAutoGen {
            pub vtable_: *const IHookManagerAutoGen__bindgen_vtable,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of IHookManagerAutoGen"][::core::mem::size_of::<IHookManagerAutoGen>() - 8usize];
            ["Alignment of IHookManagerAutoGen"]
                [::core::mem::align_of::<IHookManagerAutoGen>() - 8usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct MacroRefHelpers {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct GetPassInfo {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ExecutableClassN<ObjType, MFPType> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<ObjType>>,
            pub _phantom_1: ::core::marker::PhantomData<::core::cell::UnsafeCell<MFPType>>,
            pub m_ThisPtr: *mut ObjType,
            pub m_VfnPtr: *mut ::core::ffi::c_void,
            pub m_MFP: MFPType,
            pub m_pSH: *mut root::SourceHook::ISourceHook,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct OverrideFunctor {
            pub _address: u8,
        }
        pub mod _bindgen_mod_id_12108 {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN10SourceHook12_GLOBAL__N_115g_BadReadCalledE"]
                pub static mut g_BadReadCalled: bool;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN10SourceHook12_GLOBAL__N_115g_BadReadJmpBufE"]
                pub static mut g_BadReadJmpBuf: root::jmp_buf;
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct CPageAlloc {
            pub m_MinAlignment: usize,
            pub m_PageSize: usize,
            pub m_Regions: root::SourceHook::CPageAlloc_ARList,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct CPageAlloc_AllocationUnit {
            pub begin_offset: usize,
            pub size: usize,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of CPageAlloc_AllocationUnit"]
                [::core::mem::size_of::<CPageAlloc_AllocationUnit>() - 16usize];
            ["Alignment of CPageAlloc_AllocationUnit"]
                [::core::mem::align_of::<CPageAlloc_AllocationUnit>() - 8usize];
            ["Offset of field: CPageAlloc_AllocationUnit::begin_offset"]
                [::core::mem::offset_of!(CPageAlloc_AllocationUnit, begin_offset) - 0usize];
            ["Offset of field: CPageAlloc_AllocationUnit::size"]
                [::core::mem::offset_of!(CPageAlloc_AllocationUnit, size) - 8usize];
        };
        pub type CPageAlloc_AUList =
            root::SourceHook::List<root::SourceHook::CPageAlloc_AllocationUnit>;
        #[repr(C)]
        #[derive(Debug)]
        pub struct CPageAlloc_AllocatedRegion {
            pub startPtr: *mut ::core::ffi::c_void,
            pub size: usize,
            pub isolated: bool,
            pub minAlignment: usize,
            pub allocUnits: root::SourceHook::CPageAlloc_AUList,
            pub isRE: bool,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of CPageAlloc_AllocatedRegion"]
                [::core::mem::size_of::<CPageAlloc_AllocatedRegion>() - 56usize];
            ["Alignment of CPageAlloc_AllocatedRegion"]
                [::core::mem::align_of::<CPageAlloc_AllocatedRegion>() - 8usize];
            ["Offset of field: CPageAlloc_AllocatedRegion::startPtr"]
                [::core::mem::offset_of!(CPageAlloc_AllocatedRegion, startPtr) - 0usize];
            ["Offset of field: CPageAlloc_AllocatedRegion::size"]
                [::core::mem::offset_of!(CPageAlloc_AllocatedRegion, size) - 8usize];
            ["Offset of field: CPageAlloc_AllocatedRegion::isolated"]
                [::core::mem::offset_of!(CPageAlloc_AllocatedRegion, isolated) - 16usize];
            ["Offset of field: CPageAlloc_AllocatedRegion::minAlignment"]
                [::core::mem::offset_of!(CPageAlloc_AllocatedRegion, minAlignment) - 24usize];
            ["Offset of field: CPageAlloc_AllocatedRegion::allocUnits"]
                [::core::mem::offset_of!(CPageAlloc_AllocatedRegion, allocUnits) - 32usize];
            ["Offset of field: CPageAlloc_AllocatedRegion::isRE"]
                [::core::mem::offset_of!(CPageAlloc_AllocatedRegion, isRE) - 48usize];
        };
        pub type CPageAlloc_ARList =
            root::SourceHook::List<root::SourceHook::CPageAlloc_AllocatedRegion>;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of CPageAlloc"][::core::mem::size_of::<CPageAlloc>() - 32usize];
            ["Alignment of CPageAlloc"][::core::mem::align_of::<CPageAlloc>() - 8usize];
            ["Offset of field: CPageAlloc::m_MinAlignment"]
                [::core::mem::offset_of!(CPageAlloc, m_MinAlignment) - 0usize];
            ["Offset of field: CPageAlloc::m_PageSize"]
                [::core::mem::offset_of!(CPageAlloc, m_PageSize) - 8usize];
            ["Offset of field: CPageAlloc::m_Regions"]
                [::core::mem::offset_of!(CPageAlloc, m_Regions) - 16usize];
        };
    }
    unsafe extern "C" {
        pub fn memcpy(
            __dest: *mut ::core::ffi::c_void,
            __src: *const ::core::ffi::c_void,
            __n: usize,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn memmove(
            __dest: *mut ::core::ffi::c_void,
            __src: *const ::core::ffi::c_void,
            __n: usize,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn memccpy(
            __dest: *mut ::core::ffi::c_void,
            __src: *const ::core::ffi::c_void,
            __c: ::core::ffi::c_int,
            __n: usize,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn memset(
            __s: *mut ::core::ffi::c_void,
            __c: ::core::ffi::c_int,
            __n: usize,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn memcmp(
            __s1: *const ::core::ffi::c_void,
            __s2: *const ::core::ffi::c_void,
            __n: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __memcmpeq(
            __s1: *const ::core::ffi::c_void,
            __s2: *const ::core::ffi::c_void,
            __n: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn memchr(
            __s: *mut ::core::ffi::c_void,
            __c: ::core::ffi::c_int,
            __n: usize,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn rawmemchr(
            __s: *mut ::core::ffi::c_void,
            __c: ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn memrchr(
            __s: *mut ::core::ffi::c_void,
            __c: ::core::ffi::c_int,
            __n: usize,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn strcpy(
            __dest: *mut ::core::ffi::c_char,
            __src: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn strncpy(
            __dest: *mut ::core::ffi::c_char,
            __src: *const ::core::ffi::c_char,
            __n: usize,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn strcat(
            __dest: *mut ::core::ffi::c_char,
            __src: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn strncat(
            __dest: *mut ::core::ffi::c_char,
            __src: *const ::core::ffi::c_char,
            __n: usize,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn strcmp(
            __s1: *const ::core::ffi::c_char,
            __s2: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strncmp(
            __s1: *const ::core::ffi::c_char,
            __s2: *const ::core::ffi::c_char,
            __n: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strcoll(
            __s1: *const ::core::ffi::c_char,
            __s2: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strxfrm(
            __dest: *mut ::core::ffi::c_char,
            __src: *const ::core::ffi::c_char,
            __n: usize,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn strcoll_l(
            __s1: *const ::core::ffi::c_char,
            __s2: *const ::core::ffi::c_char,
            __l: root::locale_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strxfrm_l(
            __dest: *mut ::core::ffi::c_char,
            __src: *const ::core::ffi::c_char,
            __n: usize,
            __l: root::locale_t,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn strdup(__s: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn strndup(
            __string: *const ::core::ffi::c_char,
            __n: usize,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn strchr(
            __s: *mut ::core::ffi::c_char,
            __c: ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn strrchr(
            __s: *mut ::core::ffi::c_char,
            __c: ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn strchrnul(
            __s: *mut ::core::ffi::c_char,
            __c: ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn strcspn(
            __s: *const ::core::ffi::c_char,
            __reject: *const ::core::ffi::c_char,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn strspn(
            __s: *const ::core::ffi::c_char,
            __accept: *const ::core::ffi::c_char,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn strpbrk(
            __s: *mut ::core::ffi::c_char,
            __accept: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn strstr(
            __haystack: *mut ::core::ffi::c_char,
            __needle: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn strtok(
            __s: *mut ::core::ffi::c_char,
            __delim: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn __strtok_r(
            __s: *mut ::core::ffi::c_char,
            __delim: *const ::core::ffi::c_char,
            __save_ptr: *mut *mut ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn strtok_r(
            __s: *mut ::core::ffi::c_char,
            __delim: *const ::core::ffi::c_char,
            __save_ptr: *mut *mut ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn strcasestr(
            __haystack: *mut ::core::ffi::c_char,
            __needle: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn memmem(
            __haystack: *const ::core::ffi::c_void,
            __haystacklen: usize,
            __needle: *const ::core::ffi::c_void,
            __needlelen: usize,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn __mempcpy(
            __dest: *mut ::core::ffi::c_void,
            __src: *const ::core::ffi::c_void,
            __n: usize,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn mempcpy(
            __dest: *mut ::core::ffi::c_void,
            __src: *const ::core::ffi::c_void,
            __n: usize,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn strlen(__s: *const ::core::ffi::c_char) -> usize;
    }
    unsafe extern "C" {
        pub fn strnlen(__string: *const ::core::ffi::c_char, __maxlen: usize) -> usize;
    }
    unsafe extern "C" {
        pub fn strerror(__errnum: ::core::ffi::c_int) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn strerror_r(
            __errnum: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __buflen: usize,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn strerrordesc_np(__err: ::core::ffi::c_int) -> *const ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn strerrorname_np(__err: ::core::ffi::c_int) -> *const ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn strerror_l(
            __errnum: ::core::ffi::c_int,
            __l: root::locale_t,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn bcmp(
            __s1: *const ::core::ffi::c_void,
            __s2: *const ::core::ffi::c_void,
            __n: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn bcopy(
            __src: *const ::core::ffi::c_void,
            __dest: *mut ::core::ffi::c_void,
            __n: usize,
        );
    }
    unsafe extern "C" {
        pub fn bzero(__s: *mut ::core::ffi::c_void, __n: usize);
    }
    unsafe extern "C" {
        pub fn index(
            __s: *const ::core::ffi::c_char,
            __c: ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn rindex(
            __s: *const ::core::ffi::c_char,
            __c: ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn ffs(__i: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ffsl(__l: ::core::ffi::c_long) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ffsll(__ll: ::core::ffi::c_longlong) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strcasecmp(
            __s1: *const ::core::ffi::c_char,
            __s2: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strncasecmp(
            __s1: *const ::core::ffi::c_char,
            __s2: *const ::core::ffi::c_char,
            __n: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strcasecmp_l(
            __s1: *const ::core::ffi::c_char,
            __s2: *const ::core::ffi::c_char,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strncasecmp_l(
            __s1: *const ::core::ffi::c_char,
            __s2: *const ::core::ffi::c_char,
            __n: usize,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn explicit_bzero(__s: *mut ::core::ffi::c_void, __n: usize);
    }
    unsafe extern "C" {
        pub fn strsep(
            __stringp: *mut *mut ::core::ffi::c_char,
            __delim: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn strsignal(__sig: ::core::ffi::c_int) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn sigabbrev_np(__sig: ::core::ffi::c_int) -> *const ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn sigdescr_np(__sig: ::core::ffi::c_int) -> *const ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn __stpcpy(
            __dest: *mut ::core::ffi::c_char,
            __src: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn stpcpy(
            __dest: *mut ::core::ffi::c_char,
            __src: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn __stpncpy(
            __dest: *mut ::core::ffi::c_char,
            __src: *const ::core::ffi::c_char,
            __n: usize,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn stpncpy(
            __dest: *mut ::core::ffi::c_char,
            __src: *const ::core::ffi::c_char,
            __n: usize,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn strlcpy(
            __dest: *mut ::core::ffi::c_char,
            __src: *const ::core::ffi::c_char,
            __n: usize,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn strlcat(
            __dest: *mut ::core::ffi::c_char,
            __src: *const ::core::ffi::c_char,
            __n: usize,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn strverscmp(
            __s1: *const ::core::ffi::c_char,
            __s2: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strfry(__string: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn memfrob(__s: *mut ::core::ffi::c_void, __n: usize) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn basename(__filename: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    pub mod fastdelegate {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub mod detail {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            #[repr(align(1))]
            pub struct horrible_union<OutputClass, InputClass> {
                pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<OutputClass>>,
                pub _phantom_1: ::core::marker::PhantomData<::core::cell::UnsafeCell<InputClass>>,
                pub out: root::__BindgenUnionField<OutputClass>,
                pub in_: root::__BindgenUnionField<InputClass>,
                pub bindgen_union_field: [u8; 0usize],
            }
            pub type DefaultVoid = ::core::ffi::c_void;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct DefaultVoidToVoid {
                pub _address: u8,
            }
            pub type DefaultVoidToVoid_type<T> = T;
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of template specialization: DefaultVoidToVoid_open0_void_close0"]
                    [::core::mem::size_of::<root::fastdelegate::detail::DefaultVoidToVoid>()
                        - 1usize];
                ["Align of template specialization: DefaultVoidToVoid_open0_void_close0"]
                    [::core::mem::align_of::<root::fastdelegate::detail::DefaultVoidToVoid>()
                        - 1usize];
            };
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct VoidToDefaultVoid {
                pub _address: u8,
            }
            pub type VoidToDefaultVoid_type<T> = T;
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of template specialization: VoidToDefaultVoid_open0_void_close0"]
                    [::core::mem::size_of::<root::fastdelegate::detail::VoidToDefaultVoid>()
                        - 1usize];
                ["Align of template specialization: VoidToDefaultVoid_open0_void_close0"]
                    [::core::mem::align_of::<root::fastdelegate::detail::VoidToDefaultVoid>()
                        - 1usize];
            };
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct GenericClass {
                _unused: [u8; 0],
            }
            pub const SINGLE_MEMFUNCPTR_SIZE: ::core::ffi::c_int = 16;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct ClosurePtr {
                pub _base: root::fastdelegate::DelegateMemento,
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct DelegateMemento {
            pub m_pthis: *mut root::fastdelegate::detail::GenericClass,
            pub m_pFunction: root::fastdelegate::DelegateMemento_GenericMemFuncType,
        }
        pub type DelegateMemento_GenericMemFuncType = root::__BindgenOpaqueArray<u64, 2usize>;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of DelegateMemento"][::core::mem::size_of::<DelegateMemento>() - 24usize];
            ["Alignment of DelegateMemento"][::core::mem::align_of::<DelegateMemento>() - 8usize];
            ["Offset of field: DelegateMemento::m_pthis"]
                [::core::mem::offset_of!(DelegateMemento, m_pthis) - 0usize];
            ["Offset of field: DelegateMemento::m_pFunction"]
                [::core::mem::offset_of!(DelegateMemento, m_pFunction) - 8usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct FastDelegate {
            pub m_Closure: root::fastdelegate::FastDelegate_ClosureType,
        }
        pub type FastDelegate_DesiredRetType = root::fastdelegate::detail::DefaultVoidToVoid;
        pub type FastDelegate_StaticFunctionPtr<Params> = ::core::option::Option<
            unsafe extern "C" fn(params: Params) -> root::fastdelegate::FastDelegate_DesiredRetType,
        >;
        pub type FastDelegate_UnvoidStaticFunctionPtr<RetType, Params> =
            ::core::option::Option<unsafe extern "C" fn(params: Params) -> RetType>;
        pub type FastDelegate_GenericMemFn<RetType, Params> =
            ::core::option::Option<unsafe extern "C" fn(params: Params) -> RetType>;
        pub type FastDelegate_ClosureType = root::fastdelegate::detail::ClosurePtr;
        pub type FastDelegate_type = root::fastdelegate::FastDelegate;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct FastDelegate_SafeBoolStruct<Params> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<Params>>,
            pub a_data_pointer_to_this_is_0_on_buggy_compilers: ::core::ffi::c_int,
            pub m_nonzero: root::fastdelegate::FastDelegate_StaticFunctionPtr<Params>,
        }
        pub type FastDelegate_UselessTypedef<Params> =
            root::fastdelegate::FastDelegate_SafeBoolStruct<Params>;
        pub type FastDelegate_unspecified_bool_type<Params> =
            *mut root::fastdelegate::FastDelegate_StaticFunctionPtr<Params>;
    }
    pub const META_RES_MRES_IGNORED: root::META_RES = 0;
    pub const META_RES_MRES_HANDLED: root::META_RES = 1;
    pub const META_RES_MRES_OVERRIDE: root::META_RES = 2;
    pub const META_RES_MRES_SUPERCEDE: root::META_RES = 3;
    pub type META_RES = ::core::ffi::c_uint;
    unsafe extern "C" {
        pub fn memfd_create(
            __name: *const ::core::ffi::c_char,
            __flags: ::core::ffi::c_uint,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mlock2(
            __addr: *const ::core::ffi::c_void,
            __length: usize,
            __flags: ::core::ffi::c_uint,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pkey_alloc(
            __flags: ::core::ffi::c_uint,
            __access_restrictions: ::core::ffi::c_uint,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pkey_set(
            __key: ::core::ffi::c_int,
            __access_restrictions: ::core::ffi::c_uint,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pkey_get(__key: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pkey_free(__key: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pkey_mprotect(
            __addr: *mut ::core::ffi::c_void,
            __len: usize,
            __prot: ::core::ffi::c_int,
            __pkey: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mmap(
            __addr: *mut ::core::ffi::c_void,
            __len: usize,
            __prot: ::core::ffi::c_int,
            __flags: ::core::ffi::c_int,
            __fd: ::core::ffi::c_int,
            __offset: root::__off_t,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn mmap64(
            __addr: *mut ::core::ffi::c_void,
            __len: usize,
            __prot: ::core::ffi::c_int,
            __flags: ::core::ffi::c_int,
            __fd: ::core::ffi::c_int,
            __offset: root::__off64_t,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn munmap(__addr: *mut ::core::ffi::c_void, __len: usize) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mprotect(
            __addr: *mut ::core::ffi::c_void,
            __len: usize,
            __prot: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn msync(
            __addr: *mut ::core::ffi::c_void,
            __len: usize,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn madvise(
            __addr: *mut ::core::ffi::c_void,
            __len: usize,
            __advice: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn posix_madvise(
            __addr: *mut ::core::ffi::c_void,
            __len: usize,
            __advice: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mlock(__addr: *const ::core::ffi::c_void, __len: usize) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn munlock(__addr: *const ::core::ffi::c_void, __len: usize) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mlockall(__flags: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn munlockall() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mincore(
            __start: *mut ::core::ffi::c_void,
            __len: usize,
            __vec: *mut ::core::ffi::c_uchar,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mremap(
            __addr: *mut ::core::ffi::c_void,
            __old_len: usize,
            __new_len: usize,
            __flags: ::core::ffi::c_int,
            ...
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn remap_file_pages(
            __start: *mut ::core::ffi::c_void,
            __size: usize,
            __prot: ::core::ffi::c_int,
            __pgoff: usize,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn shm_open(
            __name: *const ::core::ffi::c_char,
            __oflag: ::core::ffi::c_int,
            __mode: root::mode_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn shm_unlink(__name: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct iovec {
        _unused: [u8; 0],
    }
    unsafe extern "C" {
        pub fn process_madvise(
            __pid_fd: ::core::ffi::c_int,
            __iov: *const root::iovec,
            __count: usize,
            __advice: ::core::ffi::c_int,
            __flags: ::core::ffi::c_uint,
        ) -> root::__ssize_t;
    }
    unsafe extern "C" {
        pub fn process_mrelease(
            pidfd: ::core::ffi::c_int,
            flags: ::core::ffi::c_uint,
        ) -> ::core::ffi::c_int;
    }
    pub type __gnuc_va_list = root::__builtin_va_list;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __mbstate_t {
        pub __count: ::core::ffi::c_int,
        pub __value: root::__mbstate_t__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __mbstate_t__bindgen_ty_1 {
        pub __wch: ::core::ffi::c_uint,
        pub __wchb: [::core::ffi::c_char; 4usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __mbstate_t__bindgen_ty_1"]
            [::core::mem::size_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
        ["Alignment of __mbstate_t__bindgen_ty_1"]
            [::core::mem::align_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
        ["Offset of field: __mbstate_t__bindgen_ty_1::__wch"]
            [::core::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wch) - 0usize];
        ["Offset of field: __mbstate_t__bindgen_ty_1::__wchb"]
            [::core::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wchb) - 0usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __mbstate_t"][::core::mem::size_of::<__mbstate_t>() - 8usize];
        ["Alignment of __mbstate_t"][::core::mem::align_of::<__mbstate_t>() - 4usize];
        ["Offset of field: __mbstate_t::__count"]
            [::core::mem::offset_of!(__mbstate_t, __count) - 0usize];
        ["Offset of field: __mbstate_t::__value"]
            [::core::mem::offset_of!(__mbstate_t, __value) - 4usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _G_fpos_t {
        pub __pos: root::__off_t,
        pub __state: root::__mbstate_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of _G_fpos_t"][::core::mem::size_of::<_G_fpos_t>() - 16usize];
        ["Alignment of _G_fpos_t"][::core::mem::align_of::<_G_fpos_t>() - 8usize];
        ["Offset of field: _G_fpos_t::__pos"][::core::mem::offset_of!(_G_fpos_t, __pos) - 0usize];
        ["Offset of field: _G_fpos_t::__state"]
            [::core::mem::offset_of!(_G_fpos_t, __state) - 8usize];
    };
    pub type __fpos_t = root::_G_fpos_t;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _G_fpos64_t {
        pub __pos: root::__off64_t,
        pub __state: root::__mbstate_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of _G_fpos64_t"][::core::mem::size_of::<_G_fpos64_t>() - 16usize];
        ["Alignment of _G_fpos64_t"][::core::mem::align_of::<_G_fpos64_t>() - 8usize];
        ["Offset of field: _G_fpos64_t::__pos"]
            [::core::mem::offset_of!(_G_fpos64_t, __pos) - 0usize];
        ["Offset of field: _G_fpos64_t::__state"]
            [::core::mem::offset_of!(_G_fpos64_t, __state) - 8usize];
    };
    pub type __fpos64_t = root::_G_fpos64_t;
    pub type __FILE = root::_IO_FILE;
    pub type FILE = root::_IO_FILE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_marker {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_codecvt {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_wide_data {
        _unused: [u8; 0],
    }
    pub type _IO_lock_t = ::core::ffi::c_void;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_FILE {
        pub _flags: ::core::ffi::c_int,
        pub _IO_read_ptr: *mut ::core::ffi::c_char,
        pub _IO_read_end: *mut ::core::ffi::c_char,
        pub _IO_read_base: *mut ::core::ffi::c_char,
        pub _IO_write_base: *mut ::core::ffi::c_char,
        pub _IO_write_ptr: *mut ::core::ffi::c_char,
        pub _IO_write_end: *mut ::core::ffi::c_char,
        pub _IO_buf_base: *mut ::core::ffi::c_char,
        pub _IO_buf_end: *mut ::core::ffi::c_char,
        pub _IO_save_base: *mut ::core::ffi::c_char,
        pub _IO_backup_base: *mut ::core::ffi::c_char,
        pub _IO_save_end: *mut ::core::ffi::c_char,
        pub _markers: *mut root::_IO_marker,
        pub _chain: *mut root::_IO_FILE,
        pub _fileno: ::core::ffi::c_int,
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 3usize]>,
        pub _short_backupbuf: [::core::ffi::c_char; 1usize],
        pub _old_offset: root::__off_t,
        pub _cur_column: ::core::ffi::c_ushort,
        pub _vtable_offset: ::core::ffi::c_schar,
        pub _shortbuf: [::core::ffi::c_char; 1usize],
        pub _lock: *mut root::_IO_lock_t,
        pub _offset: root::__off64_t,
        pub _codecvt: *mut root::_IO_codecvt,
        pub _wide_data: *mut root::_IO_wide_data,
        pub _freeres_list: *mut root::_IO_FILE,
        pub _freeres_buf: *mut ::core::ffi::c_void,
        pub _prevchain: *mut *mut root::_IO_FILE,
        pub _mode: ::core::ffi::c_int,
        pub _unused2: [::core::ffi::c_char; 20usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of _IO_FILE"][::core::mem::size_of::<_IO_FILE>() - 216usize];
        ["Alignment of _IO_FILE"][::core::mem::align_of::<_IO_FILE>() - 8usize];
        ["Offset of field: _IO_FILE::_flags"][::core::mem::offset_of!(_IO_FILE, _flags) - 0usize];
        ["Offset of field: _IO_FILE::_IO_read_ptr"]
            [::core::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
        ["Offset of field: _IO_FILE::_IO_read_end"]
            [::core::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
        ["Offset of field: _IO_FILE::_IO_read_base"]
            [::core::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
        ["Offset of field: _IO_FILE::_IO_write_base"]
            [::core::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
        ["Offset of field: _IO_FILE::_IO_write_ptr"]
            [::core::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
        ["Offset of field: _IO_FILE::_IO_write_end"]
            [::core::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
        ["Offset of field: _IO_FILE::_IO_buf_base"]
            [::core::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
        ["Offset of field: _IO_FILE::_IO_buf_end"]
            [::core::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
        ["Offset of field: _IO_FILE::_IO_save_base"]
            [::core::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
        ["Offset of field: _IO_FILE::_IO_backup_base"]
            [::core::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
        ["Offset of field: _IO_FILE::_IO_save_end"]
            [::core::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
        ["Offset of field: _IO_FILE::_markers"]
            [::core::mem::offset_of!(_IO_FILE, _markers) - 96usize];
        ["Offset of field: _IO_FILE::_chain"][::core::mem::offset_of!(_IO_FILE, _chain) - 104usize];
        ["Offset of field: _IO_FILE::_fileno"]
            [::core::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
        ["Offset of field: _IO_FILE::_short_backupbuf"]
            [::core::mem::offset_of!(_IO_FILE, _short_backupbuf) - 119usize];
        ["Offset of field: _IO_FILE::_old_offset"]
            [::core::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
        ["Offset of field: _IO_FILE::_cur_column"]
            [::core::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
        ["Offset of field: _IO_FILE::_vtable_offset"]
            [::core::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
        ["Offset of field: _IO_FILE::_shortbuf"]
            [::core::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
        ["Offset of field: _IO_FILE::_lock"][::core::mem::offset_of!(_IO_FILE, _lock) - 136usize];
        ["Offset of field: _IO_FILE::_offset"]
            [::core::mem::offset_of!(_IO_FILE, _offset) - 144usize];
        ["Offset of field: _IO_FILE::_codecvt"]
            [::core::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
        ["Offset of field: _IO_FILE::_wide_data"]
            [::core::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
        ["Offset of field: _IO_FILE::_freeres_list"]
            [::core::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
        ["Offset of field: _IO_FILE::_freeres_buf"]
            [::core::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
        ["Offset of field: _IO_FILE::_prevchain"]
            [::core::mem::offset_of!(_IO_FILE, _prevchain) - 184usize];
        ["Offset of field: _IO_FILE::_mode"][::core::mem::offset_of!(_IO_FILE, _mode) - 192usize];
        ["Offset of field: _IO_FILE::_unused2"]
            [::core::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
    };
    impl _IO_FILE {
        #[inline]
        pub fn _flags2(&self) -> ::core::ffi::c_int {
            unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
        }
        #[inline]
        pub fn set__flags2(&mut self, val: ::core::ffi::c_int) {
            unsafe {
                let val: u32 = ::core::mem::transmute(val);
                self._bitfield_1.set(0usize, 24u8, val as u64)
            }
        }
        #[inline]
        pub unsafe fn _flags2_raw(this: *const Self) -> ::core::ffi::c_int {
            unsafe {
                ::core::mem::transmute(<root::__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                    ::core::ptr::addr_of!((*this)._bitfield_1),
                    0usize,
                    24u8,
                ) as u32)
            }
        }
        #[inline]
        pub unsafe fn set__flags2_raw(this: *mut Self, val: ::core::ffi::c_int) {
            unsafe {
                let val: u32 = ::core::mem::transmute(val);
                <root::__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                    ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                    0usize,
                    24u8,
                    val as u64,
                )
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            _flags2: ::core::ffi::c_int,
        ) -> root::__BindgenBitfieldUnit<[u8; 3usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 3usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 24u8, {
                let _flags2: u32 = unsafe { ::core::mem::transmute(_flags2) };
                _flags2 as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type cookie_read_function_t = ::core::option::Option<
        unsafe extern "C" fn(
            __cookie: *mut ::core::ffi::c_void,
            __buf: *mut ::core::ffi::c_char,
            __nbytes: usize,
        ) -> root::__ssize_t,
    >;
    pub type cookie_write_function_t = ::core::option::Option<
        unsafe extern "C" fn(
            __cookie: *mut ::core::ffi::c_void,
            __buf: *const ::core::ffi::c_char,
            __nbytes: usize,
        ) -> root::__ssize_t,
    >;
    pub type cookie_seek_function_t = ::core::option::Option<
        unsafe extern "C" fn(
            __cookie: *mut ::core::ffi::c_void,
            __pos: *mut root::__off64_t,
            __w: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >;
    pub type cookie_close_function_t = ::core::option::Option<
        unsafe extern "C" fn(__cookie: *mut ::core::ffi::c_void) -> ::core::ffi::c_int,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_cookie_io_functions_t {
        pub read: root::cookie_read_function_t,
        pub write: root::cookie_write_function_t,
        pub seek: root::cookie_seek_function_t,
        pub close: root::cookie_close_function_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of _IO_cookie_io_functions_t"]
            [::core::mem::size_of::<_IO_cookie_io_functions_t>() - 32usize];
        ["Alignment of _IO_cookie_io_functions_t"]
            [::core::mem::align_of::<_IO_cookie_io_functions_t>() - 8usize];
        ["Offset of field: _IO_cookie_io_functions_t::read"]
            [::core::mem::offset_of!(_IO_cookie_io_functions_t, read) - 0usize];
        ["Offset of field: _IO_cookie_io_functions_t::write"]
            [::core::mem::offset_of!(_IO_cookie_io_functions_t, write) - 8usize];
        ["Offset of field: _IO_cookie_io_functions_t::seek"]
            [::core::mem::offset_of!(_IO_cookie_io_functions_t, seek) - 16usize];
        ["Offset of field: _IO_cookie_io_functions_t::close"]
            [::core::mem::offset_of!(_IO_cookie_io_functions_t, close) - 24usize];
    };
    pub type cookie_io_functions_t = root::_IO_cookie_io_functions_t;
    pub type va_list = root::__gnuc_va_list;
    pub type fpos_t = root::__fpos_t;
    pub type fpos64_t = root::__fpos64_t;
    unsafe extern "C" {
        pub static mut stdin: *mut root::FILE;
    }
    unsafe extern "C" {
        pub static mut stdout: *mut root::FILE;
    }
    unsafe extern "C" {
        pub static mut stderr: *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn remove(__filename: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn rename(
            __old: *const ::core::ffi::c_char,
            __new: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn renameat(
            __oldfd: ::core::ffi::c_int,
            __old: *const ::core::ffi::c_char,
            __newfd: ::core::ffi::c_int,
            __new: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn renameat2(
            __oldfd: ::core::ffi::c_int,
            __old: *const ::core::ffi::c_char,
            __newfd: ::core::ffi::c_int,
            __new: *const ::core::ffi::c_char,
            __flags: ::core::ffi::c_uint,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fclose(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn tmpfile() -> *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn tmpfile64() -> *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn tmpnam(arg1: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn tmpnam_r(__s: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn tempnam(
            __dir: *const ::core::ffi::c_char,
            __pfx: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn fflush(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fflush_unlocked(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fcloseall() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fopen(
            __filename: *const ::core::ffi::c_char,
            __modes: *const ::core::ffi::c_char,
        ) -> *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn freopen(
            __filename: *const ::core::ffi::c_char,
            __modes: *const ::core::ffi::c_char,
            __stream: *mut root::FILE,
        ) -> *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn fopen64(
            __filename: *const ::core::ffi::c_char,
            __modes: *const ::core::ffi::c_char,
        ) -> *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn freopen64(
            __filename: *const ::core::ffi::c_char,
            __modes: *const ::core::ffi::c_char,
            __stream: *mut root::FILE,
        ) -> *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn fdopen(
            __fd: ::core::ffi::c_int,
            __modes: *const ::core::ffi::c_char,
        ) -> *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn fopencookie(
            __magic_cookie: *mut ::core::ffi::c_void,
            __modes: *const ::core::ffi::c_char,
            __io_funcs: root::cookie_io_functions_t,
        ) -> *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn fmemopen(
            __s: *mut ::core::ffi::c_void,
            __len: usize,
            __modes: *const ::core::ffi::c_char,
        ) -> *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn open_memstream(
            __bufloc: *mut *mut ::core::ffi::c_char,
            __sizeloc: *mut usize,
        ) -> *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn setbuf(__stream: *mut root::FILE, __buf: *mut ::core::ffi::c_char);
    }
    unsafe extern "C" {
        pub fn setvbuf(
            __stream: *mut root::FILE,
            __buf: *mut ::core::ffi::c_char,
            __modes: ::core::ffi::c_int,
            __n: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setbuffer(__stream: *mut root::FILE, __buf: *mut ::core::ffi::c_char, __size: usize);
    }
    unsafe extern "C" {
        pub fn setlinebuf(__stream: *mut root::FILE);
    }
    unsafe extern "C" {
        pub fn fprintf(
            __stream: *mut root::FILE,
            __format: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn printf(__format: *const ::core::ffi::c_char, ...) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sprintf(
            __s: *mut ::core::ffi::c_char,
            __format: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vfprintf(
            __s: *mut root::FILE,
            __format: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vprintf(
            __format: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vsprintf(
            __s: *mut ::core::ffi::c_char,
            __format: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn snprintf(
            __s: *mut ::core::ffi::c_char,
            __maxlen: usize,
            __format: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vsnprintf(
            __s: *mut ::core::ffi::c_char,
            __maxlen: usize,
            __format: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vasprintf(
            __ptr: *mut *mut ::core::ffi::c_char,
            __f: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __asprintf(
            __ptr: *mut *mut ::core::ffi::c_char,
            __fmt: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn asprintf(
            __ptr: *mut *mut ::core::ffi::c_char,
            __fmt: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vdprintf(
            __fd: ::core::ffi::c_int,
            __fmt: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn dprintf(
            __fd: ::core::ffi::c_int,
            __fmt: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fscanf(
            __stream: *mut root::FILE,
            __format: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn scanf(__format: *const ::core::ffi::c_char, ...) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sscanf(
            __s: *const ::core::ffi::c_char,
            __format: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_fscanf"]
        pub fn fscanf1(
            __stream: *mut root::FILE,
            __format: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_scanf"]
        pub fn scanf1(__format: *const ::core::ffi::c_char, ...) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_sscanf"]
        pub fn sscanf1(
            __s: *const ::core::ffi::c_char,
            __format: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vfscanf(
            __s: *mut root::FILE,
            __format: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vscanf(
            __format: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vsscanf(
            __s: *const ::core::ffi::c_char,
            __format: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_vfscanf"]
        pub fn vfscanf1(
            __s: *mut root::FILE,
            __format: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_vscanf"]
        pub fn vscanf1(
            __format: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_vsscanf"]
        pub fn vsscanf1(
            __s: *const ::core::ffi::c_char,
            __format: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fgetc(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getc(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getchar() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getc_unlocked(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getchar_unlocked() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fgetc_unlocked(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fputc(__c: ::core::ffi::c_int, __stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn putc(__c: ::core::ffi::c_int, __stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn putchar(__c: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fputc_unlocked(
            __c: ::core::ffi::c_int,
            __stream: *mut root::FILE,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn putc_unlocked(
            __c: ::core::ffi::c_int,
            __stream: *mut root::FILE,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn putchar_unlocked(__c: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getw(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn putw(__w: ::core::ffi::c_int, __stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fgets(
            __s: *mut ::core::ffi::c_char,
            __n: ::core::ffi::c_int,
            __stream: *mut root::FILE,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn fgets_unlocked(
            __s: *mut ::core::ffi::c_char,
            __n: ::core::ffi::c_int,
            __stream: *mut root::FILE,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn __getdelim(
            __lineptr: *mut *mut ::core::ffi::c_char,
            __n: *mut usize,
            __delimiter: ::core::ffi::c_int,
            __stream: *mut root::FILE,
        ) -> root::__ssize_t;
    }
    unsafe extern "C" {
        pub fn getdelim(
            __lineptr: *mut *mut ::core::ffi::c_char,
            __n: *mut usize,
            __delimiter: ::core::ffi::c_int,
            __stream: *mut root::FILE,
        ) -> root::__ssize_t;
    }
    unsafe extern "C" {
        pub fn getline(
            __lineptr: *mut *mut ::core::ffi::c_char,
            __n: *mut usize,
            __stream: *mut root::FILE,
        ) -> root::__ssize_t;
    }
    unsafe extern "C" {
        pub fn fputs(
            __s: *const ::core::ffi::c_char,
            __stream: *mut root::FILE,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn puts(__s: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ungetc(__c: ::core::ffi::c_int, __stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fread(
            __ptr: *mut ::core::ffi::c_void,
            __size: usize,
            __n: usize,
            __stream: *mut root::FILE,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn fwrite(
            __ptr: *const ::core::ffi::c_void,
            __size: usize,
            __n: usize,
            __s: *mut root::FILE,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn fputs_unlocked(
            __s: *const ::core::ffi::c_char,
            __stream: *mut root::FILE,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fread_unlocked(
            __ptr: *mut ::core::ffi::c_void,
            __size: usize,
            __n: usize,
            __stream: *mut root::FILE,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn fwrite_unlocked(
            __ptr: *const ::core::ffi::c_void,
            __size: usize,
            __n: usize,
            __stream: *mut root::FILE,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn fseek(
            __stream: *mut root::FILE,
            __off: ::core::ffi::c_long,
            __whence: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ftell(__stream: *mut root::FILE) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn rewind(__stream: *mut root::FILE);
    }
    unsafe extern "C" {
        pub fn fseeko(
            __stream: *mut root::FILE,
            __off: root::__off_t,
            __whence: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ftello(__stream: *mut root::FILE) -> root::__off_t;
    }
    unsafe extern "C" {
        pub fn fgetpos(__stream: *mut root::FILE, __pos: *mut root::fpos_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fsetpos(__stream: *mut root::FILE, __pos: *const root::fpos_t)
            -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fseeko64(
            __stream: *mut root::FILE,
            __off: root::__off64_t,
            __whence: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ftello64(__stream: *mut root::FILE) -> root::__off64_t;
    }
    unsafe extern "C" {
        pub fn fgetpos64(
            __stream: *mut root::FILE,
            __pos: *mut root::fpos64_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fsetpos64(
            __stream: *mut root::FILE,
            __pos: *const root::fpos64_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn clearerr(__stream: *mut root::FILE);
    }
    unsafe extern "C" {
        pub fn feof(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ferror(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn clearerr_unlocked(__stream: *mut root::FILE);
    }
    unsafe extern "C" {
        pub fn feof_unlocked(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ferror_unlocked(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn perror(__s: *const ::core::ffi::c_char);
    }
    unsafe extern "C" {
        pub fn fileno(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fileno_unlocked(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pclose(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn popen(
            __command: *const ::core::ffi::c_char,
            __modes: *const ::core::ffi::c_char,
        ) -> *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn ctermid(__s: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn cuserid(__s: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct obstack {
        _unused: [u8; 0],
    }
    unsafe extern "C" {
        pub fn obstack_printf(
            __obstack: *mut root::obstack,
            __format: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn obstack_vprintf(
            __obstack: *mut root::obstack,
            __format: *const ::core::ffi::c_char,
            __args: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn flockfile(__stream: *mut root::FILE);
    }
    unsafe extern "C" {
        pub fn ftrylockfile(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn funlockfile(__stream: *mut root::FILE);
    }
    unsafe extern "C" {
        pub fn __uflow(arg1: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __overflow(arg1: *mut root::FILE, arg2: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    pub type sig_atomic_t = root::__sig_atomic_t;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union sigval {
        pub sival_int: ::core::ffi::c_int,
        pub sival_ptr: *mut ::core::ffi::c_void,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of sigval"][::core::mem::size_of::<sigval>() - 8usize];
        ["Alignment of sigval"][::core::mem::align_of::<sigval>() - 8usize];
        ["Offset of field: sigval::sival_int"][::core::mem::offset_of!(sigval, sival_int) - 0usize];
        ["Offset of field: sigval::sival_ptr"][::core::mem::offset_of!(sigval, sival_ptr) - 0usize];
    };
    pub type __sigval_t = root::sigval;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct siginfo_t {
        pub si_signo: ::core::ffi::c_int,
        pub si_errno: ::core::ffi::c_int,
        pub si_code: ::core::ffi::c_int,
        pub __pad0: ::core::ffi::c_int,
        pub _sifields: root::siginfo_t__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union siginfo_t__bindgen_ty_1 {
        pub _pad: [::core::ffi::c_int; 28usize],
        pub _kill: root::siginfo_t__bindgen_ty_1__bindgen_ty_1,
        pub _timer: root::siginfo_t__bindgen_ty_1__bindgen_ty_2,
        pub _rt: root::siginfo_t__bindgen_ty_1__bindgen_ty_3,
        pub _sigchld: root::siginfo_t__bindgen_ty_1__bindgen_ty_4,
        pub _sigfault: root::siginfo_t__bindgen_ty_1__bindgen_ty_5,
        pub _sigpoll: root::siginfo_t__bindgen_ty_1__bindgen_ty_6,
        pub _sigsys: root::siginfo_t__bindgen_ty_1__bindgen_ty_7,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct siginfo_t__bindgen_ty_1__bindgen_ty_1 {
        pub si_pid: root::__pid_t,
        pub si_uid: root::__uid_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of siginfo_t__bindgen_ty_1__bindgen_ty_1"]
            [::core::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>() - 8usize];
        ["Alignment of siginfo_t__bindgen_ty_1__bindgen_ty_1"]
            [::core::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>() - 4usize];
        ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_1::si_pid"]
            [::core::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_1, si_pid) - 0usize];
        ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_1::si_uid"]
            [::core::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_1, si_uid) - 4usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct siginfo_t__bindgen_ty_1__bindgen_ty_2 {
        pub si_tid: ::core::ffi::c_int,
        pub si_overrun: ::core::ffi::c_int,
        pub si_sigval: root::__sigval_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of siginfo_t__bindgen_ty_1__bindgen_ty_2"]
            [::core::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>() - 16usize];
        ["Alignment of siginfo_t__bindgen_ty_1__bindgen_ty_2"]
            [::core::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>() - 8usize];
        ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_2::si_tid"]
            [::core::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_2, si_tid) - 0usize];
        ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_2::si_overrun"]
            [::core::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_2, si_overrun) - 4usize];
        ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_2::si_sigval"]
            [::core::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_2, si_sigval) - 8usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct siginfo_t__bindgen_ty_1__bindgen_ty_3 {
        pub si_pid: root::__pid_t,
        pub si_uid: root::__uid_t,
        pub si_sigval: root::__sigval_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of siginfo_t__bindgen_ty_1__bindgen_ty_3"]
            [::core::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>() - 16usize];
        ["Alignment of siginfo_t__bindgen_ty_1__bindgen_ty_3"]
            [::core::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>() - 8usize];
        ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_3::si_pid"]
            [::core::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_3, si_pid) - 0usize];
        ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_3::si_uid"]
            [::core::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_3, si_uid) - 4usize];
        ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_3::si_sigval"]
            [::core::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_3, si_sigval) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct siginfo_t__bindgen_ty_1__bindgen_ty_4 {
        pub si_pid: root::__pid_t,
        pub si_uid: root::__uid_t,
        pub si_status: ::core::ffi::c_int,
        pub si_utime: root::__clock_t,
        pub si_stime: root::__clock_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of siginfo_t__bindgen_ty_1__bindgen_ty_4"]
            [::core::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>() - 32usize];
        ["Alignment of siginfo_t__bindgen_ty_1__bindgen_ty_4"]
            [::core::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>() - 8usize];
        ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_4::si_pid"]
            [::core::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_4, si_pid) - 0usize];
        ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_4::si_uid"]
            [::core::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_4, si_uid) - 4usize];
        ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_4::si_status"]
            [::core::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_4, si_status) - 8usize];
        ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_4::si_utime"]
            [::core::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_4, si_utime) - 16usize];
        ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_4::si_stime"]
            [::core::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_4, si_stime) - 24usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5 {
        pub si_addr: *mut ::core::ffi::c_void,
        pub si_addr_lsb: ::core::ffi::c_short,
        pub _bounds: root::siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
        pub _addr_bnd: root::siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
        pub _pkey: root::__uint32_t,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
        pub _lower: *mut ::core::ffi::c_void,
        pub _upper: *mut ::core::ffi::c_void,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1"]
            [::core::mem::size_of::<
                siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
            >() - 16usize];
        ["Alignment of siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1"]
            [::core::mem::align_of::<
                siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
            >() - 8usize];
        ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1::_lower"] [:: core :: mem :: offset_of ! (siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 , _lower) - 0usize] ;
        ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1::_upper"] [:: core :: mem :: offset_of ! (siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 , _upper) - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1"][::core::mem::size_of::<
            siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
        >() - 16usize];
        ["Alignment of siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1"][::core::mem::align_of::<
            siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
        >() - 8usize];
        ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1::_addr_bnd"][::core::mem::offset_of!(
            siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
            _addr_bnd
        )
            - 0usize];
        ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1::_pkey"][::core::mem::offset_of!(
            siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
            _pkey
        ) - 0usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of siginfo_t__bindgen_ty_1__bindgen_ty_5"]
            [::core::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>() - 32usize];
        ["Alignment of siginfo_t__bindgen_ty_1__bindgen_ty_5"]
            [::core::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>() - 8usize];
        ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_5::si_addr"]
            [::core::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_5, si_addr) - 0usize];
        ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_5::si_addr_lsb"]
            [::core::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_5, si_addr_lsb) - 8usize];
        ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_5::_bounds"]
            [::core::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_5, _bounds) - 16usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct siginfo_t__bindgen_ty_1__bindgen_ty_6 {
        pub si_band: ::core::ffi::c_long,
        pub si_fd: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of siginfo_t__bindgen_ty_1__bindgen_ty_6"]
            [::core::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>() - 16usize];
        ["Alignment of siginfo_t__bindgen_ty_1__bindgen_ty_6"]
            [::core::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>() - 8usize];
        ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_6::si_band"]
            [::core::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_6, si_band) - 0usize];
        ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_6::si_fd"]
            [::core::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_6, si_fd) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct siginfo_t__bindgen_ty_1__bindgen_ty_7 {
        pub _call_addr: *mut ::core::ffi::c_void,
        pub _syscall: ::core::ffi::c_int,
        pub _arch: ::core::ffi::c_uint,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of siginfo_t__bindgen_ty_1__bindgen_ty_7"]
            [::core::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>() - 16usize];
        ["Alignment of siginfo_t__bindgen_ty_1__bindgen_ty_7"]
            [::core::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>() - 8usize];
        ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_7::_call_addr"]
            [::core::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_7, _call_addr) - 0usize];
        ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_7::_syscall"]
            [::core::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_7, _syscall) - 8usize];
        ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_7::_arch"]
            [::core::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_7, _arch) - 12usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of siginfo_t__bindgen_ty_1"]
            [::core::mem::size_of::<siginfo_t__bindgen_ty_1>() - 112usize];
        ["Alignment of siginfo_t__bindgen_ty_1"]
            [::core::mem::align_of::<siginfo_t__bindgen_ty_1>() - 8usize];
        ["Offset of field: siginfo_t__bindgen_ty_1::_pad"]
            [::core::mem::offset_of!(siginfo_t__bindgen_ty_1, _pad) - 0usize];
        ["Offset of field: siginfo_t__bindgen_ty_1::_kill"]
            [::core::mem::offset_of!(siginfo_t__bindgen_ty_1, _kill) - 0usize];
        ["Offset of field: siginfo_t__bindgen_ty_1::_timer"]
            [::core::mem::offset_of!(siginfo_t__bindgen_ty_1, _timer) - 0usize];
        ["Offset of field: siginfo_t__bindgen_ty_1::_rt"]
            [::core::mem::offset_of!(siginfo_t__bindgen_ty_1, _rt) - 0usize];
        ["Offset of field: siginfo_t__bindgen_ty_1::_sigchld"]
            [::core::mem::offset_of!(siginfo_t__bindgen_ty_1, _sigchld) - 0usize];
        ["Offset of field: siginfo_t__bindgen_ty_1::_sigfault"]
            [::core::mem::offset_of!(siginfo_t__bindgen_ty_1, _sigfault) - 0usize];
        ["Offset of field: siginfo_t__bindgen_ty_1::_sigpoll"]
            [::core::mem::offset_of!(siginfo_t__bindgen_ty_1, _sigpoll) - 0usize];
        ["Offset of field: siginfo_t__bindgen_ty_1::_sigsys"]
            [::core::mem::offset_of!(siginfo_t__bindgen_ty_1, _sigsys) - 0usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of siginfo_t"][::core::mem::size_of::<siginfo_t>() - 128usize];
        ["Alignment of siginfo_t"][::core::mem::align_of::<siginfo_t>() - 8usize];
        ["Offset of field: siginfo_t::si_signo"]
            [::core::mem::offset_of!(siginfo_t, si_signo) - 0usize];
        ["Offset of field: siginfo_t::si_errno"]
            [::core::mem::offset_of!(siginfo_t, si_errno) - 4usize];
        ["Offset of field: siginfo_t::si_code"]
            [::core::mem::offset_of!(siginfo_t, si_code) - 8usize];
        ["Offset of field: siginfo_t::__pad0"]
            [::core::mem::offset_of!(siginfo_t, __pad0) - 12usize];
        ["Offset of field: siginfo_t::_sifields"]
            [::core::mem::offset_of!(siginfo_t, _sifields) - 16usize];
    };
    pub const SI_ASYNCNL: root::_bindgen_ty_7 = -60;
    pub const SI_DETHREAD: root::_bindgen_ty_7 = -7;
    pub const SI_TKILL: root::_bindgen_ty_7 = -6;
    pub const SI_SIGIO: root::_bindgen_ty_7 = -5;
    pub const SI_ASYNCIO: root::_bindgen_ty_7 = -4;
    pub const SI_MESGQ: root::_bindgen_ty_7 = -3;
    pub const SI_TIMER: root::_bindgen_ty_7 = -2;
    pub const SI_QUEUE: root::_bindgen_ty_7 = -1;
    pub const SI_USER: root::_bindgen_ty_7 = 0;
    pub const SI_KERNEL: root::_bindgen_ty_7 = 128;
    pub type _bindgen_ty_7 = ::core::ffi::c_int;
    pub const ILL_ILLOPC: root::_bindgen_ty_8 = 1;
    pub const ILL_ILLOPN: root::_bindgen_ty_8 = 2;
    pub const ILL_ILLADR: root::_bindgen_ty_8 = 3;
    pub const ILL_ILLTRP: root::_bindgen_ty_8 = 4;
    pub const ILL_PRVOPC: root::_bindgen_ty_8 = 5;
    pub const ILL_PRVREG: root::_bindgen_ty_8 = 6;
    pub const ILL_COPROC: root::_bindgen_ty_8 = 7;
    pub const ILL_BADSTK: root::_bindgen_ty_8 = 8;
    pub const ILL_BADIADDR: root::_bindgen_ty_8 = 9;
    pub type _bindgen_ty_8 = ::core::ffi::c_uint;
    pub const FPE_INTDIV: root::_bindgen_ty_9 = 1;
    pub const FPE_INTOVF: root::_bindgen_ty_9 = 2;
    pub const FPE_FLTDIV: root::_bindgen_ty_9 = 3;
    pub const FPE_FLTOVF: root::_bindgen_ty_9 = 4;
    pub const FPE_FLTUND: root::_bindgen_ty_9 = 5;
    pub const FPE_FLTRES: root::_bindgen_ty_9 = 6;
    pub const FPE_FLTINV: root::_bindgen_ty_9 = 7;
    pub const FPE_FLTSUB: root::_bindgen_ty_9 = 8;
    pub const FPE_FLTUNK: root::_bindgen_ty_9 = 14;
    pub const FPE_CONDTRAP: root::_bindgen_ty_9 = 15;
    pub type _bindgen_ty_9 = ::core::ffi::c_uint;
    pub const SEGV_MAPERR: root::_bindgen_ty_10 = 1;
    pub const SEGV_ACCERR: root::_bindgen_ty_10 = 2;
    pub const SEGV_BNDERR: root::_bindgen_ty_10 = 3;
    pub const SEGV_PKUERR: root::_bindgen_ty_10 = 4;
    pub const SEGV_ACCADI: root::_bindgen_ty_10 = 5;
    pub const SEGV_ADIDERR: root::_bindgen_ty_10 = 6;
    pub const SEGV_ADIPERR: root::_bindgen_ty_10 = 7;
    pub const SEGV_MTEAERR: root::_bindgen_ty_10 = 8;
    pub const SEGV_MTESERR: root::_bindgen_ty_10 = 9;
    pub const SEGV_CPERR: root::_bindgen_ty_10 = 10;
    pub type _bindgen_ty_10 = ::core::ffi::c_uint;
    pub const BUS_ADRALN: root::_bindgen_ty_11 = 1;
    pub const BUS_ADRERR: root::_bindgen_ty_11 = 2;
    pub const BUS_OBJERR: root::_bindgen_ty_11 = 3;
    pub const BUS_MCEERR_AR: root::_bindgen_ty_11 = 4;
    pub const BUS_MCEERR_AO: root::_bindgen_ty_11 = 5;
    pub type _bindgen_ty_11 = ::core::ffi::c_uint;
    pub const TRAP_BRKPT: root::_bindgen_ty_12 = 1;
    pub const TRAP_TRACE: root::_bindgen_ty_12 = 2;
    pub const TRAP_BRANCH: root::_bindgen_ty_12 = 3;
    pub const TRAP_HWBKPT: root::_bindgen_ty_12 = 4;
    pub const TRAP_UNK: root::_bindgen_ty_12 = 5;
    pub type _bindgen_ty_12 = ::core::ffi::c_uint;
    pub const CLD_EXITED: root::_bindgen_ty_13 = 1;
    pub const CLD_KILLED: root::_bindgen_ty_13 = 2;
    pub const CLD_DUMPED: root::_bindgen_ty_13 = 3;
    pub const CLD_TRAPPED: root::_bindgen_ty_13 = 4;
    pub const CLD_STOPPED: root::_bindgen_ty_13 = 5;
    pub const CLD_CONTINUED: root::_bindgen_ty_13 = 6;
    pub type _bindgen_ty_13 = ::core::ffi::c_uint;
    pub const POLL_IN: root::_bindgen_ty_14 = 1;
    pub const POLL_OUT: root::_bindgen_ty_14 = 2;
    pub const POLL_MSG: root::_bindgen_ty_14 = 3;
    pub const POLL_ERR: root::_bindgen_ty_14 = 4;
    pub const POLL_PRI: root::_bindgen_ty_14 = 5;
    pub const POLL_HUP: root::_bindgen_ty_14 = 6;
    pub type _bindgen_ty_14 = ::core::ffi::c_uint;
    pub type sigval_t = root::__sigval_t;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct sigevent {
        pub sigev_value: root::__sigval_t,
        pub sigev_signo: ::core::ffi::c_int,
        pub sigev_notify: ::core::ffi::c_int,
        pub _sigev_un: root::sigevent__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union sigevent__bindgen_ty_1 {
        pub _pad: [::core::ffi::c_int; 12usize],
        pub _tid: root::__pid_t,
        pub _sigev_thread: root::sigevent__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct sigevent__bindgen_ty_1__bindgen_ty_1 {
        pub _function: ::core::option::Option<unsafe extern "C" fn(arg1: root::__sigval_t)>,
        pub _attribute: *mut root::pthread_attr_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of sigevent__bindgen_ty_1__bindgen_ty_1"]
            [::core::mem::size_of::<sigevent__bindgen_ty_1__bindgen_ty_1>() - 16usize];
        ["Alignment of sigevent__bindgen_ty_1__bindgen_ty_1"]
            [::core::mem::align_of::<sigevent__bindgen_ty_1__bindgen_ty_1>() - 8usize];
        ["Offset of field: sigevent__bindgen_ty_1__bindgen_ty_1::_function"]
            [::core::mem::offset_of!(sigevent__bindgen_ty_1__bindgen_ty_1, _function) - 0usize];
        ["Offset of field: sigevent__bindgen_ty_1__bindgen_ty_1::_attribute"]
            [::core::mem::offset_of!(sigevent__bindgen_ty_1__bindgen_ty_1, _attribute) - 8usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of sigevent__bindgen_ty_1"]
            [::core::mem::size_of::<sigevent__bindgen_ty_1>() - 48usize];
        ["Alignment of sigevent__bindgen_ty_1"]
            [::core::mem::align_of::<sigevent__bindgen_ty_1>() - 8usize];
        ["Offset of field: sigevent__bindgen_ty_1::_pad"]
            [::core::mem::offset_of!(sigevent__bindgen_ty_1, _pad) - 0usize];
        ["Offset of field: sigevent__bindgen_ty_1::_tid"]
            [::core::mem::offset_of!(sigevent__bindgen_ty_1, _tid) - 0usize];
        ["Offset of field: sigevent__bindgen_ty_1::_sigev_thread"]
            [::core::mem::offset_of!(sigevent__bindgen_ty_1, _sigev_thread) - 0usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of sigevent"][::core::mem::size_of::<sigevent>() - 64usize];
        ["Alignment of sigevent"][::core::mem::align_of::<sigevent>() - 8usize];
        ["Offset of field: sigevent::sigev_value"]
            [::core::mem::offset_of!(sigevent, sigev_value) - 0usize];
        ["Offset of field: sigevent::sigev_signo"]
            [::core::mem::offset_of!(sigevent, sigev_signo) - 8usize];
        ["Offset of field: sigevent::sigev_notify"]
            [::core::mem::offset_of!(sigevent, sigev_notify) - 12usize];
        ["Offset of field: sigevent::_sigev_un"]
            [::core::mem::offset_of!(sigevent, _sigev_un) - 16usize];
    };
    pub type sigevent_t = root::sigevent;
    pub const SIGEV_SIGNAL: root::_bindgen_ty_15 = 0;
    pub const SIGEV_NONE: root::_bindgen_ty_15 = 1;
    pub const SIGEV_THREAD: root::_bindgen_ty_15 = 2;
    pub const SIGEV_THREAD_ID: root::_bindgen_ty_15 = 4;
    pub type _bindgen_ty_15 = ::core::ffi::c_uint;
    pub type __sighandler_t =
        ::core::option::Option<unsafe extern "C" fn(arg1: ::core::ffi::c_int)>;
    unsafe extern "C" {
        pub fn __sysv_signal(
            __sig: ::core::ffi::c_int,
            __handler: root::__sighandler_t,
        ) -> root::__sighandler_t;
    }
    unsafe extern "C" {
        pub fn sysv_signal(
            __sig: ::core::ffi::c_int,
            __handler: root::__sighandler_t,
        ) -> root::__sighandler_t;
    }
    unsafe extern "C" {
        pub fn signal(
            __sig: ::core::ffi::c_int,
            __handler: root::__sighandler_t,
        ) -> root::__sighandler_t;
    }
    unsafe extern "C" {
        pub fn kill(__pid: root::__pid_t, __sig: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn killpg(__pgrp: root::__pid_t, __sig: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn raise(__sig: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ssignal(
            __sig: ::core::ffi::c_int,
            __handler: root::__sighandler_t,
        ) -> root::__sighandler_t;
    }
    unsafe extern "C" {
        pub fn gsignal(__sig: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn psignal(__sig: ::core::ffi::c_int, __s: *const ::core::ffi::c_char);
    }
    unsafe extern "C" {
        pub fn psiginfo(__pinfo: *const root::siginfo_t, __s: *const ::core::ffi::c_char);
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__xpg_sigpause"]
        pub fn sigpause(__sig: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sigblock(__mask: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sigsetmask(__mask: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn siggetmask() -> ::core::ffi::c_int;
    }
    pub type sighandler_t = root::__sighandler_t;
    pub type sig_t = root::__sighandler_t;
    unsafe extern "C" {
        pub fn sigemptyset(__set: *mut root::sigset_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sigfillset(__set: *mut root::sigset_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sigaddset(
            __set: *mut root::sigset_t,
            __signo: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sigdelset(
            __set: *mut root::sigset_t,
            __signo: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sigismember(
            __set: *const root::sigset_t,
            __signo: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sigisemptyset(__set: *const root::sigset_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sigandset(
            __set: *mut root::sigset_t,
            __left: *const root::sigset_t,
            __right: *const root::sigset_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sigorset(
            __set: *mut root::sigset_t,
            __left: *const root::sigset_t,
            __right: *const root::sigset_t,
        ) -> ::core::ffi::c_int;
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct sigaction {
        pub __sigaction_handler: root::sigaction__bindgen_ty_1,
        pub sa_mask: root::__sigset_t,
        pub sa_flags: ::core::ffi::c_int,
        pub sa_restorer: ::core::option::Option<unsafe extern "C" fn()>,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union sigaction__bindgen_ty_1 {
        pub sa_handler: root::__sighandler_t,
        pub sa_sigaction: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: ::core::ffi::c_int,
                arg2: *mut root::siginfo_t,
                arg3: *mut ::core::ffi::c_void,
            ),
        >,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of sigaction__bindgen_ty_1"]
            [::core::mem::size_of::<sigaction__bindgen_ty_1>() - 8usize];
        ["Alignment of sigaction__bindgen_ty_1"]
            [::core::mem::align_of::<sigaction__bindgen_ty_1>() - 8usize];
        ["Offset of field: sigaction__bindgen_ty_1::sa_handler"]
            [::core::mem::offset_of!(sigaction__bindgen_ty_1, sa_handler) - 0usize];
        ["Offset of field: sigaction__bindgen_ty_1::sa_sigaction"]
            [::core::mem::offset_of!(sigaction__bindgen_ty_1, sa_sigaction) - 0usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of sigaction"][::core::mem::size_of::<sigaction>() - 152usize];
        ["Alignment of sigaction"][::core::mem::align_of::<sigaction>() - 8usize];
        ["Offset of field: sigaction::__sigaction_handler"]
            [::core::mem::offset_of!(sigaction, __sigaction_handler) - 0usize];
        ["Offset of field: sigaction::sa_mask"]
            [::core::mem::offset_of!(sigaction, sa_mask) - 8usize];
        ["Offset of field: sigaction::sa_flags"]
            [::core::mem::offset_of!(sigaction, sa_flags) - 136usize];
        ["Offset of field: sigaction::sa_restorer"]
            [::core::mem::offset_of!(sigaction, sa_restorer) - 144usize];
    };
    unsafe extern "C" {
        pub fn sigprocmask(
            __how: ::core::ffi::c_int,
            __set: *const root::sigset_t,
            __oset: *mut root::sigset_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sigsuspend(__set: *const root::sigset_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sigaction(
            __sig: ::core::ffi::c_int,
            __act: *const root::sigaction,
            __oact: *mut root::sigaction,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sigpending(__set: *mut root::sigset_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sigwait(
            __set: *const root::sigset_t,
            __sig: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sigwaitinfo(
            __set: *const root::sigset_t,
            __info: *mut root::siginfo_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sigtimedwait(
            __set: *const root::sigset_t,
            __info: *mut root::siginfo_t,
            __timeout: *const root::timespec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sigqueue(
            __pid: root::__pid_t,
            __sig: ::core::ffi::c_int,
            __val: root::sigval,
        ) -> ::core::ffi::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _fpx_sw_bytes {
        pub magic1: root::__uint32_t,
        pub extended_size: root::__uint32_t,
        pub xstate_bv: root::__uint64_t,
        pub xstate_size: root::__uint32_t,
        pub __glibc_reserved1: [root::__uint32_t; 7usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of _fpx_sw_bytes"][::core::mem::size_of::<_fpx_sw_bytes>() - 48usize];
        ["Alignment of _fpx_sw_bytes"][::core::mem::align_of::<_fpx_sw_bytes>() - 8usize];
        ["Offset of field: _fpx_sw_bytes::magic1"]
            [::core::mem::offset_of!(_fpx_sw_bytes, magic1) - 0usize];
        ["Offset of field: _fpx_sw_bytes::extended_size"]
            [::core::mem::offset_of!(_fpx_sw_bytes, extended_size) - 4usize];
        ["Offset of field: _fpx_sw_bytes::xstate_bv"]
            [::core::mem::offset_of!(_fpx_sw_bytes, xstate_bv) - 8usize];
        ["Offset of field: _fpx_sw_bytes::xstate_size"]
            [::core::mem::offset_of!(_fpx_sw_bytes, xstate_size) - 16usize];
        ["Offset of field: _fpx_sw_bytes::__glibc_reserved1"]
            [::core::mem::offset_of!(_fpx_sw_bytes, __glibc_reserved1) - 20usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _fpreg {
        pub significand: [::core::ffi::c_ushort; 4usize],
        pub exponent: ::core::ffi::c_ushort,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of _fpreg"][::core::mem::size_of::<_fpreg>() - 10usize];
        ["Alignment of _fpreg"][::core::mem::align_of::<_fpreg>() - 2usize];
        ["Offset of field: _fpreg::significand"]
            [::core::mem::offset_of!(_fpreg, significand) - 0usize];
        ["Offset of field: _fpreg::exponent"][::core::mem::offset_of!(_fpreg, exponent) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _fpxreg {
        pub significand: [::core::ffi::c_ushort; 4usize],
        pub exponent: ::core::ffi::c_ushort,
        pub __glibc_reserved1: [::core::ffi::c_ushort; 3usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of _fpxreg"][::core::mem::size_of::<_fpxreg>() - 16usize];
        ["Alignment of _fpxreg"][::core::mem::align_of::<_fpxreg>() - 2usize];
        ["Offset of field: _fpxreg::significand"]
            [::core::mem::offset_of!(_fpxreg, significand) - 0usize];
        ["Offset of field: _fpxreg::exponent"][::core::mem::offset_of!(_fpxreg, exponent) - 8usize];
        ["Offset of field: _fpxreg::__glibc_reserved1"]
            [::core::mem::offset_of!(_fpxreg, __glibc_reserved1) - 10usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _xmmreg {
        pub element: [root::__uint32_t; 4usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of _xmmreg"][::core::mem::size_of::<_xmmreg>() - 16usize];
        ["Alignment of _xmmreg"][::core::mem::align_of::<_xmmreg>() - 4usize];
        ["Offset of field: _xmmreg::element"][::core::mem::offset_of!(_xmmreg, element) - 0usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _fpstate {
        pub cwd: root::__uint16_t,
        pub swd: root::__uint16_t,
        pub ftw: root::__uint16_t,
        pub fop: root::__uint16_t,
        pub rip: root::__uint64_t,
        pub rdp: root::__uint64_t,
        pub mxcsr: root::__uint32_t,
        pub mxcr_mask: root::__uint32_t,
        pub _st: [root::_fpxreg; 8usize],
        pub _xmm: [root::_xmmreg; 16usize],
        pub __glibc_reserved1: [root::__uint32_t; 24usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of _fpstate"][::core::mem::size_of::<_fpstate>() - 512usize];
        ["Alignment of _fpstate"][::core::mem::align_of::<_fpstate>() - 8usize];
        ["Offset of field: _fpstate::cwd"][::core::mem::offset_of!(_fpstate, cwd) - 0usize];
        ["Offset of field: _fpstate::swd"][::core::mem::offset_of!(_fpstate, swd) - 2usize];
        ["Offset of field: _fpstate::ftw"][::core::mem::offset_of!(_fpstate, ftw) - 4usize];
        ["Offset of field: _fpstate::fop"][::core::mem::offset_of!(_fpstate, fop) - 6usize];
        ["Offset of field: _fpstate::rip"][::core::mem::offset_of!(_fpstate, rip) - 8usize];
        ["Offset of field: _fpstate::rdp"][::core::mem::offset_of!(_fpstate, rdp) - 16usize];
        ["Offset of field: _fpstate::mxcsr"][::core::mem::offset_of!(_fpstate, mxcsr) - 24usize];
        ["Offset of field: _fpstate::mxcr_mask"]
            [::core::mem::offset_of!(_fpstate, mxcr_mask) - 28usize];
        ["Offset of field: _fpstate::_st"][::core::mem::offset_of!(_fpstate, _st) - 32usize];
        ["Offset of field: _fpstate::_xmm"][::core::mem::offset_of!(_fpstate, _xmm) - 160usize];
        ["Offset of field: _fpstate::__glibc_reserved1"]
            [::core::mem::offset_of!(_fpstate, __glibc_reserved1) - 416usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct sigcontext {
        pub r8: root::__uint64_t,
        pub r9: root::__uint64_t,
        pub r10: root::__uint64_t,
        pub r11: root::__uint64_t,
        pub r12: root::__uint64_t,
        pub r13: root::__uint64_t,
        pub r14: root::__uint64_t,
        pub r15: root::__uint64_t,
        pub rdi: root::__uint64_t,
        pub rsi: root::__uint64_t,
        pub rbp: root::__uint64_t,
        pub rbx: root::__uint64_t,
        pub rdx: root::__uint64_t,
        pub rax: root::__uint64_t,
        pub rcx: root::__uint64_t,
        pub rsp: root::__uint64_t,
        pub rip: root::__uint64_t,
        pub eflags: root::__uint64_t,
        pub cs: ::core::ffi::c_ushort,
        pub gs: ::core::ffi::c_ushort,
        pub fs: ::core::ffi::c_ushort,
        pub __pad0: ::core::ffi::c_ushort,
        pub err: root::__uint64_t,
        pub trapno: root::__uint64_t,
        pub oldmask: root::__uint64_t,
        pub cr2: root::__uint64_t,
        pub __bindgen_anon_1: root::sigcontext__bindgen_ty_1,
        pub __reserved1: [root::__uint64_t; 8usize],
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union sigcontext__bindgen_ty_1 {
        pub fpstate: *mut root::_fpstate,
        pub __fpstate_word: root::__uint64_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of sigcontext__bindgen_ty_1"]
            [::core::mem::size_of::<sigcontext__bindgen_ty_1>() - 8usize];
        ["Alignment of sigcontext__bindgen_ty_1"]
            [::core::mem::align_of::<sigcontext__bindgen_ty_1>() - 8usize];
        ["Offset of field: sigcontext__bindgen_ty_1::fpstate"]
            [::core::mem::offset_of!(sigcontext__bindgen_ty_1, fpstate) - 0usize];
        ["Offset of field: sigcontext__bindgen_ty_1::__fpstate_word"]
            [::core::mem::offset_of!(sigcontext__bindgen_ty_1, __fpstate_word) - 0usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of sigcontext"][::core::mem::size_of::<sigcontext>() - 256usize];
        ["Alignment of sigcontext"][::core::mem::align_of::<sigcontext>() - 8usize];
        ["Offset of field: sigcontext::r8"][::core::mem::offset_of!(sigcontext, r8) - 0usize];
        ["Offset of field: sigcontext::r9"][::core::mem::offset_of!(sigcontext, r9) - 8usize];
        ["Offset of field: sigcontext::r10"][::core::mem::offset_of!(sigcontext, r10) - 16usize];
        ["Offset of field: sigcontext::r11"][::core::mem::offset_of!(sigcontext, r11) - 24usize];
        ["Offset of field: sigcontext::r12"][::core::mem::offset_of!(sigcontext, r12) - 32usize];
        ["Offset of field: sigcontext::r13"][::core::mem::offset_of!(sigcontext, r13) - 40usize];
        ["Offset of field: sigcontext::r14"][::core::mem::offset_of!(sigcontext, r14) - 48usize];
        ["Offset of field: sigcontext::r15"][::core::mem::offset_of!(sigcontext, r15) - 56usize];
        ["Offset of field: sigcontext::rdi"][::core::mem::offset_of!(sigcontext, rdi) - 64usize];
        ["Offset of field: sigcontext::rsi"][::core::mem::offset_of!(sigcontext, rsi) - 72usize];
        ["Offset of field: sigcontext::rbp"][::core::mem::offset_of!(sigcontext, rbp) - 80usize];
        ["Offset of field: sigcontext::rbx"][::core::mem::offset_of!(sigcontext, rbx) - 88usize];
        ["Offset of field: sigcontext::rdx"][::core::mem::offset_of!(sigcontext, rdx) - 96usize];
        ["Offset of field: sigcontext::rax"][::core::mem::offset_of!(sigcontext, rax) - 104usize];
        ["Offset of field: sigcontext::rcx"][::core::mem::offset_of!(sigcontext, rcx) - 112usize];
        ["Offset of field: sigcontext::rsp"][::core::mem::offset_of!(sigcontext, rsp) - 120usize];
        ["Offset of field: sigcontext::rip"][::core::mem::offset_of!(sigcontext, rip) - 128usize];
        ["Offset of field: sigcontext::eflags"]
            [::core::mem::offset_of!(sigcontext, eflags) - 136usize];
        ["Offset of field: sigcontext::cs"][::core::mem::offset_of!(sigcontext, cs) - 144usize];
        ["Offset of field: sigcontext::gs"][::core::mem::offset_of!(sigcontext, gs) - 146usize];
        ["Offset of field: sigcontext::fs"][::core::mem::offset_of!(sigcontext, fs) - 148usize];
        ["Offset of field: sigcontext::__pad0"]
            [::core::mem::offset_of!(sigcontext, __pad0) - 150usize];
        ["Offset of field: sigcontext::err"][::core::mem::offset_of!(sigcontext, err) - 152usize];
        ["Offset of field: sigcontext::trapno"]
            [::core::mem::offset_of!(sigcontext, trapno) - 160usize];
        ["Offset of field: sigcontext::oldmask"]
            [::core::mem::offset_of!(sigcontext, oldmask) - 168usize];
        ["Offset of field: sigcontext::cr2"][::core::mem::offset_of!(sigcontext, cr2) - 176usize];
        ["Offset of field: sigcontext::__reserved1"]
            [::core::mem::offset_of!(sigcontext, __reserved1) - 192usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _xsave_hdr {
        pub xstate_bv: root::__uint64_t,
        pub __glibc_reserved1: [root::__uint64_t; 2usize],
        pub __glibc_reserved2: [root::__uint64_t; 5usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of _xsave_hdr"][::core::mem::size_of::<_xsave_hdr>() - 64usize];
        ["Alignment of _xsave_hdr"][::core::mem::align_of::<_xsave_hdr>() - 8usize];
        ["Offset of field: _xsave_hdr::xstate_bv"]
            [::core::mem::offset_of!(_xsave_hdr, xstate_bv) - 0usize];
        ["Offset of field: _xsave_hdr::__glibc_reserved1"]
            [::core::mem::offset_of!(_xsave_hdr, __glibc_reserved1) - 8usize];
        ["Offset of field: _xsave_hdr::__glibc_reserved2"]
            [::core::mem::offset_of!(_xsave_hdr, __glibc_reserved2) - 24usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ymmh_state {
        pub ymmh_space: [root::__uint32_t; 64usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of _ymmh_state"][::core::mem::size_of::<_ymmh_state>() - 256usize];
        ["Alignment of _ymmh_state"][::core::mem::align_of::<_ymmh_state>() - 4usize];
        ["Offset of field: _ymmh_state::ymmh_space"]
            [::core::mem::offset_of!(_ymmh_state, ymmh_space) - 0usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _xstate {
        pub fpstate: root::_fpstate,
        pub xstate_hdr: root::_xsave_hdr,
        pub ymmh: root::_ymmh_state,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of _xstate"][::core::mem::size_of::<_xstate>() - 832usize];
        ["Alignment of _xstate"][::core::mem::align_of::<_xstate>() - 8usize];
        ["Offset of field: _xstate::fpstate"][::core::mem::offset_of!(_xstate, fpstate) - 0usize];
        ["Offset of field: _xstate::xstate_hdr"]
            [::core::mem::offset_of!(_xstate, xstate_hdr) - 512usize];
        ["Offset of field: _xstate::ymmh"][::core::mem::offset_of!(_xstate, ymmh) - 576usize];
    };
    unsafe extern "C" {
        pub fn sigreturn(__scp: *mut root::sigcontext) -> ::core::ffi::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct stack_t {
        pub ss_sp: *mut ::core::ffi::c_void,
        pub ss_flags: ::core::ffi::c_int,
        pub ss_size: usize,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of stack_t"][::core::mem::size_of::<stack_t>() - 24usize];
        ["Alignment of stack_t"][::core::mem::align_of::<stack_t>() - 8usize];
        ["Offset of field: stack_t::ss_sp"][::core::mem::offset_of!(stack_t, ss_sp) - 0usize];
        ["Offset of field: stack_t::ss_flags"][::core::mem::offset_of!(stack_t, ss_flags) - 8usize];
        ["Offset of field: stack_t::ss_size"][::core::mem::offset_of!(stack_t, ss_size) - 16usize];
    };
    pub type greg_t = ::core::ffi::c_longlong;
    pub type gregset_t = [root::greg_t; 23usize];
    pub const REG_R8: root::_bindgen_ty_16 = 0;
    pub const REG_R9: root::_bindgen_ty_16 = 1;
    pub const REG_R10: root::_bindgen_ty_16 = 2;
    pub const REG_R11: root::_bindgen_ty_16 = 3;
    pub const REG_R12: root::_bindgen_ty_16 = 4;
    pub const REG_R13: root::_bindgen_ty_16 = 5;
    pub const REG_R14: root::_bindgen_ty_16 = 6;
    pub const REG_R15: root::_bindgen_ty_16 = 7;
    pub const REG_RDI: root::_bindgen_ty_16 = 8;
    pub const REG_RSI: root::_bindgen_ty_16 = 9;
    pub const REG_RBP: root::_bindgen_ty_16 = 10;
    pub const REG_RBX: root::_bindgen_ty_16 = 11;
    pub const REG_RDX: root::_bindgen_ty_16 = 12;
    pub const REG_RAX: root::_bindgen_ty_16 = 13;
    pub const REG_RCX: root::_bindgen_ty_16 = 14;
    pub const REG_RSP: root::_bindgen_ty_16 = 15;
    pub const REG_RIP: root::_bindgen_ty_16 = 16;
    pub const REG_EFL: root::_bindgen_ty_16 = 17;
    pub const REG_CSGSFS: root::_bindgen_ty_16 = 18;
    pub const REG_ERR: root::_bindgen_ty_16 = 19;
    pub const REG_TRAPNO: root::_bindgen_ty_16 = 20;
    pub const REG_OLDMASK: root::_bindgen_ty_16 = 21;
    pub const REG_CR2: root::_bindgen_ty_16 = 22;
    pub type _bindgen_ty_16 = ::core::ffi::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _libc_fpxreg {
        pub significand: [::core::ffi::c_ushort; 4usize],
        pub exponent: ::core::ffi::c_ushort,
        pub __glibc_reserved1: [::core::ffi::c_ushort; 3usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of _libc_fpxreg"][::core::mem::size_of::<_libc_fpxreg>() - 16usize];
        ["Alignment of _libc_fpxreg"][::core::mem::align_of::<_libc_fpxreg>() - 2usize];
        ["Offset of field: _libc_fpxreg::significand"]
            [::core::mem::offset_of!(_libc_fpxreg, significand) - 0usize];
        ["Offset of field: _libc_fpxreg::exponent"]
            [::core::mem::offset_of!(_libc_fpxreg, exponent) - 8usize];
        ["Offset of field: _libc_fpxreg::__glibc_reserved1"]
            [::core::mem::offset_of!(_libc_fpxreg, __glibc_reserved1) - 10usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _libc_xmmreg {
        pub element: [root::__uint32_t; 4usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of _libc_xmmreg"][::core::mem::size_of::<_libc_xmmreg>() - 16usize];
        ["Alignment of _libc_xmmreg"][::core::mem::align_of::<_libc_xmmreg>() - 4usize];
        ["Offset of field: _libc_xmmreg::element"]
            [::core::mem::offset_of!(_libc_xmmreg, element) - 0usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _libc_fpstate {
        pub cwd: root::__uint16_t,
        pub swd: root::__uint16_t,
        pub ftw: root::__uint16_t,
        pub fop: root::__uint16_t,
        pub rip: root::__uint64_t,
        pub rdp: root::__uint64_t,
        pub mxcsr: root::__uint32_t,
        pub mxcr_mask: root::__uint32_t,
        pub _st: [root::_libc_fpxreg; 8usize],
        pub _xmm: [root::_libc_xmmreg; 16usize],
        pub __glibc_reserved1: [root::__uint32_t; 24usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of _libc_fpstate"][::core::mem::size_of::<_libc_fpstate>() - 512usize];
        ["Alignment of _libc_fpstate"][::core::mem::align_of::<_libc_fpstate>() - 8usize];
        ["Offset of field: _libc_fpstate::cwd"]
            [::core::mem::offset_of!(_libc_fpstate, cwd) - 0usize];
        ["Offset of field: _libc_fpstate::swd"]
            [::core::mem::offset_of!(_libc_fpstate, swd) - 2usize];
        ["Offset of field: _libc_fpstate::ftw"]
            [::core::mem::offset_of!(_libc_fpstate, ftw) - 4usize];
        ["Offset of field: _libc_fpstate::fop"]
            [::core::mem::offset_of!(_libc_fpstate, fop) - 6usize];
        ["Offset of field: _libc_fpstate::rip"]
            [::core::mem::offset_of!(_libc_fpstate, rip) - 8usize];
        ["Offset of field: _libc_fpstate::rdp"]
            [::core::mem::offset_of!(_libc_fpstate, rdp) - 16usize];
        ["Offset of field: _libc_fpstate::mxcsr"]
            [::core::mem::offset_of!(_libc_fpstate, mxcsr) - 24usize];
        ["Offset of field: _libc_fpstate::mxcr_mask"]
            [::core::mem::offset_of!(_libc_fpstate, mxcr_mask) - 28usize];
        ["Offset of field: _libc_fpstate::_st"]
            [::core::mem::offset_of!(_libc_fpstate, _st) - 32usize];
        ["Offset of field: _libc_fpstate::_xmm"]
            [::core::mem::offset_of!(_libc_fpstate, _xmm) - 160usize];
        ["Offset of field: _libc_fpstate::__glibc_reserved1"]
            [::core::mem::offset_of!(_libc_fpstate, __glibc_reserved1) - 416usize];
    };
    pub type fpregset_t = *mut root::_libc_fpstate;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct mcontext_t {
        pub gregs: root::gregset_t,
        pub fpregs: root::fpregset_t,
        pub __reserved1: [::core::ffi::c_ulonglong; 8usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of mcontext_t"][::core::mem::size_of::<mcontext_t>() - 256usize];
        ["Alignment of mcontext_t"][::core::mem::align_of::<mcontext_t>() - 8usize];
        ["Offset of field: mcontext_t::gregs"][::core::mem::offset_of!(mcontext_t, gregs) - 0usize];
        ["Offset of field: mcontext_t::fpregs"]
            [::core::mem::offset_of!(mcontext_t, fpregs) - 184usize];
        ["Offset of field: mcontext_t::__reserved1"]
            [::core::mem::offset_of!(mcontext_t, __reserved1) - 192usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ucontext_t {
        pub uc_flags: ::core::ffi::c_ulong,
        pub uc_link: *mut root::ucontext_t,
        pub uc_stack: root::stack_t,
        pub uc_mcontext: root::mcontext_t,
        pub uc_sigmask: root::sigset_t,
        pub __fpregs_mem: root::_libc_fpstate,
        pub __ssp: [::core::ffi::c_ulonglong; 4usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of ucontext_t"][::core::mem::size_of::<ucontext_t>() - 968usize];
        ["Alignment of ucontext_t"][::core::mem::align_of::<ucontext_t>() - 8usize];
        ["Offset of field: ucontext_t::uc_flags"]
            [::core::mem::offset_of!(ucontext_t, uc_flags) - 0usize];
        ["Offset of field: ucontext_t::uc_link"]
            [::core::mem::offset_of!(ucontext_t, uc_link) - 8usize];
        ["Offset of field: ucontext_t::uc_stack"]
            [::core::mem::offset_of!(ucontext_t, uc_stack) - 16usize];
        ["Offset of field: ucontext_t::uc_mcontext"]
            [::core::mem::offset_of!(ucontext_t, uc_mcontext) - 40usize];
        ["Offset of field: ucontext_t::uc_sigmask"]
            [::core::mem::offset_of!(ucontext_t, uc_sigmask) - 296usize];
        ["Offset of field: ucontext_t::__fpregs_mem"]
            [::core::mem::offset_of!(ucontext_t, __fpregs_mem) - 424usize];
        ["Offset of field: ucontext_t::__ssp"]
            [::core::mem::offset_of!(ucontext_t, __ssp) - 936usize];
    };
    unsafe extern "C" {
        pub fn siginterrupt(
            __sig: ::core::ffi::c_int,
            __interrupt: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    pub const SS_ONSTACK: root::_bindgen_ty_17 = 1;
    pub const SS_DISABLE: root::_bindgen_ty_17 = 2;
    pub type _bindgen_ty_17 = ::core::ffi::c_uint;
    unsafe extern "C" {
        pub fn sigaltstack(
            __ss: *const root::stack_t,
            __oss: *mut root::stack_t,
        ) -> ::core::ffi::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct sigstack {
        pub ss_sp: *mut ::core::ffi::c_void,
        pub ss_onstack: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of sigstack"][::core::mem::size_of::<sigstack>() - 16usize];
        ["Alignment of sigstack"][::core::mem::align_of::<sigstack>() - 8usize];
        ["Offset of field: sigstack::ss_sp"][::core::mem::offset_of!(sigstack, ss_sp) - 0usize];
        ["Offset of field: sigstack::ss_onstack"]
            [::core::mem::offset_of!(sigstack, ss_onstack) - 8usize];
    };
    unsafe extern "C" {
        pub fn sigstack(
            __ss: *mut root::sigstack,
            __oss: *mut root::sigstack,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sighold(__sig: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sigrelse(__sig: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sigignore(__sig: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sigset(
            __sig: ::core::ffi::c_int,
            __disp: root::__sighandler_t,
        ) -> root::__sighandler_t;
    }
    unsafe extern "C" {
        pub fn pthread_sigmask(
            __how: ::core::ffi::c_int,
            __newmask: *const root::__sigset_t,
            __oldmask: *mut root::__sigset_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_kill(
            __threadid: root::pthread_t,
            __signo: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_sigqueue(
            __threadid: root::pthread_t,
            __signo: ::core::ffi::c_int,
            __value: root::sigval,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __libc_current_sigrtmin() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __libc_current_sigrtmax() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn tgkill(
            __tgid: root::__pid_t,
            __tid: root::__pid_t,
            __signal: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    pub type __jmp_buf = [::core::ffi::c_long; 8usize];
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __jmp_buf_tag {
        pub __jmpbuf: root::__jmp_buf,
        pub __mask_was_saved: ::core::ffi::c_int,
        pub __saved_mask: root::__sigset_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __jmp_buf_tag"][::core::mem::size_of::<__jmp_buf_tag>() - 200usize];
        ["Alignment of __jmp_buf_tag"][::core::mem::align_of::<__jmp_buf_tag>() - 8usize];
        ["Offset of field: __jmp_buf_tag::__jmpbuf"]
            [::core::mem::offset_of!(__jmp_buf_tag, __jmpbuf) - 0usize];
        ["Offset of field: __jmp_buf_tag::__mask_was_saved"]
            [::core::mem::offset_of!(__jmp_buf_tag, __mask_was_saved) - 64usize];
        ["Offset of field: __jmp_buf_tag::__saved_mask"]
            [::core::mem::offset_of!(__jmp_buf_tag, __saved_mask) - 72usize];
    };
    pub type jmp_buf = [root::__jmp_buf_tag; 1usize];
    unsafe extern "C" {
        pub fn setjmp(__env: *mut root::__jmp_buf_tag) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __sigsetjmp(
            __env: *mut root::__jmp_buf_tag,
            __savemask: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn _setjmp(__env: *mut root::__jmp_buf_tag) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn longjmp(__env: *mut root::__jmp_buf_tag, __val: ::core::ffi::c_int) -> !;
    }
    unsafe extern "C" {
        pub fn _longjmp(__env: *mut root::__jmp_buf_tag, __val: ::core::ffi::c_int) -> !;
    }
    pub type sigjmp_buf = [root::__jmp_buf_tag; 1usize];
    unsafe extern "C" {
        pub fn siglongjmp(__env: *mut root::__jmp_buf_tag, __val: ::core::ffi::c_int) -> !;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct link_map {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __locale_data {
        pub _address: u8,
    }
    pub type __builtin_va_list = [root::__va_list_tag; 1usize];
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __va_list_tag {
        pub gp_offset: ::core::ffi::c_uint,
        pub fp_offset: ::core::ffi::c_uint,
        pub overflow_arg_area: *mut ::core::ffi::c_void,
        pub reg_save_area: *mut ::core::ffi::c_void,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __va_list_tag"][::core::mem::size_of::<__va_list_tag>() - 24usize];
        ["Alignment of __va_list_tag"][::core::mem::align_of::<__va_list_tag>() - 8usize];
        ["Offset of field: __va_list_tag::gp_offset"]
            [::core::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
        ["Offset of field: __va_list_tag::fp_offset"]
            [::core::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
        ["Offset of field: __va_list_tag::overflow_arg_area"]
            [::core::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
        ["Offset of field: __va_list_tag::reg_save_area"]
            [::core::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: List_open0_CPageAlloc_AllocationUnit_close0"]
            [::core::mem::size_of::<
                root::SourceHook::List<root::SourceHook::CPageAlloc_AllocationUnit>,
            >() - 16usize];
        ["Align of template specialization: List_open0_CPageAlloc_AllocationUnit_close0"]
            [::core::mem::align_of::<
                root::SourceHook::List<root::SourceHook::CPageAlloc_AllocationUnit>,
            >() - 8usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: List_open0_CPageAlloc_AllocatedRegion_close0"]
            [::core::mem::size_of::<
                root::SourceHook::List<root::SourceHook::CPageAlloc_AllocatedRegion>,
            >() - 16usize];
        ["Align of template specialization: List_open0_CPageAlloc_AllocatedRegion_close0"]
            [::core::mem::align_of::<
                root::SourceHook::List<root::SourceHook::CPageAlloc_AllocatedRegion>,
            >() - 8usize];
    };
}
