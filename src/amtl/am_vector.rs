/* automatically generated by rust-bindgen 0.71.1 */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[doc = r" If Bindgen could only determine the size and alignment of a"]
    #[doc = r" type, it is represented like this."]
    #[derive(PartialEq, Copy, Clone, Debug, Hash)]
    #[repr(C)]
    pub struct __BindgenOpaqueArray<T: Copy, const N: usize>(pub [T; N]);
    impl<T: Copy + Default, const N: usize> Default for __BindgenOpaqueArray<T, N> {
        fn default() -> Self {
            Self([<T as Default>::default(); N])
        }
    }
    #[allow(unused_imports)]
    use self::super::root;
    pub const POSIX: u32 = 1;
    pub const LINUX: u32 = 1;
    pub const _LINUX: u32 = 1;
    pub const COMPILER_GCC: u32 = 1;
    pub const _GLIBCXX_VECTOR: u32 = 1;
    pub const _REQUIRES_FREESTANDING_H: u32 = 1;
    pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
    pub const _GLIBCXX_RELEASE: u32 = 15;
    pub const __GLIBCXX__: u32 = 20250425;
    pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
    pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
    pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
    pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
    pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
    pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
    pub const _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED: u32 = 1;
    pub const _GLIBCXX_ASSERTIONS: u32 = 1;
    pub const _GLIBCXX_VERBOSE_ASSERT: u32 = 1;
    pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
    pub const _GLIBCXX_OS_DEFINES: u32 = 1;
    pub const __NO_CTYPE: u32 = 1;
    pub const _FEATURES_H: u32 = 1;
    pub const _ISOC95_SOURCE: u32 = 1;
    pub const _ISOC99_SOURCE: u32 = 1;
    pub const _ISOC11_SOURCE: u32 = 1;
    pub const _ISOC23_SOURCE: u32 = 1;
    pub const _ISOC2Y_SOURCE: u32 = 1;
    pub const _POSIX_SOURCE: u32 = 1;
    pub const _POSIX_C_SOURCE: u32 = 200809;
    pub const _XOPEN_SOURCE: u32 = 700;
    pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
    pub const _LARGEFILE64_SOURCE: u32 = 1;
    pub const _DEFAULT_SOURCE: u32 = 1;
    pub const _ATFILE_SOURCE: u32 = 1;
    pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
    pub const __GLIBC_USE_ISOC2Y: u32 = 1;
    pub const __GLIBC_USE_ISOC23: u32 = 1;
    pub const __USE_ISOC11: u32 = 1;
    pub const __USE_ISOC99: u32 = 1;
    pub const __USE_ISOC95: u32 = 1;
    pub const __USE_ISOCXX11: u32 = 1;
    pub const __USE_POSIX: u32 = 1;
    pub const __USE_POSIX2: u32 = 1;
    pub const __USE_POSIX199309: u32 = 1;
    pub const __USE_POSIX199506: u32 = 1;
    pub const __USE_XOPEN2K: u32 = 1;
    pub const __USE_XOPEN2K8: u32 = 1;
    pub const __USE_XOPEN: u32 = 1;
    pub const __USE_XOPEN_EXTENDED: u32 = 1;
    pub const __USE_UNIX98: u32 = 1;
    pub const _LARGEFILE_SOURCE: u32 = 1;
    pub const __USE_XOPEN2K8XSI: u32 = 1;
    pub const __USE_XOPEN2KXSI: u32 = 1;
    pub const __USE_LARGEFILE: u32 = 1;
    pub const __USE_LARGEFILE64: u32 = 1;
    pub const __WORDSIZE: u32 = 64;
    pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
    pub const __SYSCALL_WORDSIZE: u32 = 64;
    pub const __TIMESIZE: u32 = 64;
    pub const __USE_TIME_BITS64: u32 = 1;
    pub const __USE_MISC: u32 = 1;
    pub const __USE_ATFILE: u32 = 1;
    pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
    pub const __USE_GNU: u32 = 1;
    pub const __USE_FORTIFY_LEVEL: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
    pub const __GLIBC_USE_C23_STRTOL: u32 = 1;
    pub const _STDC_PREDEF_H: u32 = 1;
    pub const __STDC_IEC_559__: u32 = 1;
    pub const __STDC_IEC_60559_BFP__: u32 = 201404;
    pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
    pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
    pub const __STDC_ISO_10646__: u32 = 201706;
    pub const __GNU_LIBRARY__: u32 = 6;
    pub const __GLIBC__: u32 = 2;
    pub const __GLIBC_MINOR__: u32 = 41;
    pub const _SYS_CDEFS_H: u32 = 1;
    pub const __glibc_c99_flexarr_available: u32 = 1;
    pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
    pub const __HAVE_GENERIC_SELECTION: u32 = 0;
    pub const _GLIBCXX_HAVE_FLOAT128_MATH: u32 = 1;
    pub const _GLIBCXX_MAY_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
    pub const _GLIBCXX_GTHREAD_USE_WEAK: u32 = 0;
    pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
    pub const _GLIBCXX_USE_STD_SPEC_FUNCS: u32 = 1;
    pub const _GLIBCXX_FAST_MATH: u32 = 0;
    pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
    pub const _GLIBCXX_FLOAT_IS_IEEE_BINARY32: u32 = 1;
    pub const _GLIBCXX_DOUBLE_IS_IEEE_BINARY64: u32 = 1;
    pub const _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP: u32 = 1;
    pub const _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE: u32 = 1;
    pub const _GLIBCXX_HAVE_BUILTIN_LAUNDER: u32 = 1;
    pub const _PSTL_VERSION: u32 = 17000;
    pub const _PSTL_VERSION_MAJOR: u32 = 17;
    pub const _PSTL_VERSION_MINOR: u32 = 0;
    pub const _PSTL_VERSION_PATCH: u32 = 0;
    pub const _PSTL_USAGE_WARNINGS: u32 = 0;
    pub const _PSTL_PRAGMA_LOCATION: &[u8; 26] = b" [Parallel STL message]: \0";
    pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
    pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
    pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
    pub const _GLIBCXX_HAVE_ARC4RANDOM: u32 = 1;
    pub const _GLIBCXX_HAVE_ARPA_INET_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
    pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
    pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
    pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
    pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
    pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
    pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
    pub const _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY: u32 = 1;
    pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
    pub const _GLIBCXX_HAVE_C99_FLT_EVAL_TYPES: u32 = 1;
    pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
    pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
    pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
    pub const _GLIBCXX_HAVE_COSF: u32 = 1;
    pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
    pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
    pub const _GLIBCXX_HAVE_COSL: u32 = 1;
    pub const _GLIBCXX_HAVE_DECL_STRNLEN: u32 = 1;
    pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_DIRFD: u32 = 1;
    pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
    pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
    pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
    pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FDOPENDIR: u32 = 1;
    pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
    pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
    pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
    pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_GETENTROPY: u32 = 1;
    pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
    pub const _GLIBCXX_HAVE_GETS: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
    pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
    pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
    pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
    pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
    pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
    pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
    pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
    pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
    pub const _GLIBCXX_HAVE_LINK: u32 = 1;
    pub const _GLIBCXX_HAVE_LINK_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_RANDOM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_TYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
    pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
    pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
    pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
    pub const _GLIBCXX_HAVE_LSEEK: u32 = 1;
    pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
    pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
    pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
    pub const _GLIBCXX_HAVE_MODF: u32 = 1;
    pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
    pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
    pub const _GLIBCXX_HAVE_NETDB_H: u32 = 1;
    pub const _GLIBCXX_HAVE_NETINET_IN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_NETINET_TCP_H: u32 = 1;
    pub const _GLIBCXX_HAVE_OPENAT: u32 = 1;
    pub const _GLIBCXX_HAVE_O_NONBLOCK: u32 = 1;
    pub const _GLIBCXX_HAVE_POLL: u32 = 1;
    pub const _GLIBCXX_HAVE_POLL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
    pub const _GLIBCXX_HAVE_POSIX_SEMAPHORE: u32 = 1;
    pub const _GLIBCXX_HAVE_POWF: u32 = 1;
    pub const _GLIBCXX_HAVE_POWL: u32 = 1;
    pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
    pub const _GLIBCXX_HAVE_READLINK: u32 = 1;
    pub const _GLIBCXX_HAVE_SECURE_GETENV: u32 = 1;
    pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
    pub const _GLIBCXX_HAVE_SINF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
    pub const _GLIBCXX_HAVE_SINL: u32 = 1;
    pub const _GLIBCXX_HAVE_SOCKATMARK: u32 = 1;
    pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
    pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
    pub const _GLIBCXX_HAVE_STACKTRACE: u32 = 1;
    pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
    pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
    pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
    pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
    pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
    pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
    pub const _GLIBCXX_HAVE_SYMLINK: u32 = 1;
    pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_MMAN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SDT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SOCKET_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
    pub const _GLIBCXX_HAVE_TANF: u32 = 1;
    pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
    pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
    pub const _GLIBCXX_HAVE_TANL: u32 = 1;
    pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
    pub const _GLIBCXX_HAVE_TIMESPEC_GET: u32 = 1;
    pub const _GLIBCXX_HAVE_TLS: u32 = 1;
    pub const _GLIBCXX_HAVE_TRUNCATE: u32 = 1;
    pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
    pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
    pub const _GLIBCXX_HAVE_UNLINKAT: u32 = 1;
    pub const _GLIBCXX_HAVE_USELOCALE: u32 = 1;
    pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
    pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
    pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
    pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
    pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
    pub const _GLIBCXX_LT_OBJDIR: &[u8; 7] = b".libs/\0";
    pub const _GLIBCXX_PACKAGE_BUGREPORT: &[u8; 1] = b"\0";
    pub const _GLIBCXX_PACKAGE_NAME: &[u8; 15] = b"package-unused\0";
    pub const _GLIBCXX_PACKAGE_STRING: &[u8; 30] = b"package-unused version-unused\0";
    pub const _GLIBCXX_PACKAGE_TARNAME: &[u8; 10] = b"libstdc++\0";
    pub const _GLIBCXX_PACKAGE_URL: &[u8; 1] = b"\0";
    pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &[u8; 15] = b"version-unused\0";
    pub const _GLIBCXX_STDC_HEADERS: u32 = 1;
    pub const _GLIBCXX_DARWIN_USE_64_BIT_INODE: u32 = 1;
    pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
    pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
    pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
    pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
    pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
    pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
    pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
    pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
    pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
    pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
    pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
    pub const _GLIBCXX_CAN_ALIGNAS_DESTRUCTIVE_SIZE: u32 = 1;
    pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
    pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
    pub const _GLIBCXX_RES_LIMITS: u32 = 1;
    pub const _GLIBCXX_STATIC_TZDATA: u32 = 1;
    pub const _GLIBCXX_STDIO_EOF: i32 = -1;
    pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
    pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
    pub const _GLIBCXX_SYMVER: u32 = 1;
    pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
    pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
    pub const _GLIBCXX_USE_C99: u32 = 1;
    pub const _GLIBCXX_USE_C99_COMPLEX_ARC: u32 = 1;
    pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_CTYPE: u32 = 1;
    pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_FENV: u32 = 1;
    pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_MATH_FUNCS: u32 = 1;
    pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_STDINT: u32 = 1;
    pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
    pub const _GLIBCXX_USE_CHDIR: u32 = 1;
    pub const _GLIBCXX_USE_CHMOD: u32 = 1;
    pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
    pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
    pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
    pub const _GLIBCXX_USE_DEV_RANDOM: u32 = 1;
    pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
    pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
    pub const _GLIBCXX_USE_FSEEKO_FTELLO: u32 = 1;
    pub const _GLIBCXX_USE_GETCWD: u32 = 1;
    pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
    pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
    pub const _GLIBCXX_USE_INIT_PRIORITY_ATTRIBUTE: u32 = 1;
    pub const _GLIBCXX_USE_LFS: u32 = 1;
    pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
    pub const _GLIBCXX_USE_LSTAT: u32 = 1;
    pub const _GLIBCXX_USE_MKDIR: u32 = 1;
    pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
    pub const _GLIBCXX_USE_NLS: u32 = 1;
    pub const _GLIBCXX_USE_NL_LANGINFO_L: u32 = 1;
    pub const _GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT: u32 = 1;
    pub const _GLIBCXX_USE_PTHREAD_RWLOCK_CLOCKLOCK: u32 = 1;
    pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
    pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
    pub const _GLIBCXX_USE_REALPATH: u32 = 1;
    pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
    pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
    pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
    pub const _GLIBCXX_USE_STRUCT_TM_TM_ZONE: u32 = 1;
    pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
    pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
    pub const _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_CXX20: u32 = 1;
    pub const _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_FCHAR8_T: u32 = 1;
    pub const _GLIBCXX_USE_UTIME: u32 = 1;
    pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
    pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
    pub const _GLIBCXX_VERBOSE: u32 = 1;
    pub const _GLIBCXX_X86_RDRAND: u32 = 1;
    pub const _GLIBCXX_X86_RDSEED: u32 = 1;
    pub const _GLIBCXX_ZONEINFO_DIR: &[u8; 20] = b"/usr/share/zoneinfo\0";
    pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
    pub const _STL_ALGOBASE_H: u32 = 1;
    pub const _FUNCTEXCEPT_H: u32 = 1;
    pub const _EXCEPTION_DEFINES_H: u32 = 1;
    pub const _CPP_TYPE_TRAITS_H: u32 = 1;
    pub const __glibcxx_incomplete_container_elements: u32 = 201505;
    pub const __glibcxx_uncaught_exceptions: u32 = 201411;
    pub const __glibcxx_allocator_traits_is_always_equal: u32 = 201411;
    pub const __glibcxx_is_null_pointer: u32 = 201309;
    pub const __glibcxx_result_of_sfinae: u32 = 201210;
    pub const __glibcxx_shared_ptr_arrays: u32 = 201611;
    pub const __glibcxx_is_swappable: u32 = 201603;
    pub const __glibcxx_void_t: u32 = 201411;
    pub const __glibcxx_enable_shared_from_this: u32 = 201603;
    pub const __glibcxx_math_spec_funcs: u32 = 201003;
    pub const __glibcxx_exchange_function: u32 = 201304;
    pub const __glibcxx_integer_sequence: u32 = 201304;
    pub const __glibcxx_integral_constant_callable: u32 = 201304;
    pub const __glibcxx_is_final: u32 = 201402;
    pub const __glibcxx_make_reverse_iterator: u32 = 201402;
    pub const __glibcxx_null_iterators: u32 = 201304;
    pub const __glibcxx_transformation_trait_aliases: u32 = 201304;
    pub const __glibcxx_transparent_operators: u32 = 201510;
    pub const __glibcxx_tuple_element_t: u32 = 201402;
    pub const __glibcxx_tuples_by_type: u32 = 201304;
    pub const __glibcxx_robust_nonmodifying_seq_ops: u32 = 201304;
    pub const __glibcxx_to_chars: u32 = 201611;
    pub const __glibcxx_chrono_udls: u32 = 201304;
    pub const __glibcxx_complex_udls: u32 = 201309;
    pub const __glibcxx_generic_associative_lookup: u32 = 201304;
    pub const __glibcxx_make_unique: u32 = 201304;
    pub const __glibcxx_quoted_string_io: u32 = 201304;
    pub const __glibcxx_shared_timed_mutex: u32 = 201402;
    pub const __glibcxx_string_udls: u32 = 201304;
    pub const __glibcxx_addressof_constexpr: u32 = 201603;
    pub const __glibcxx_any: u32 = 201606;
    pub const __glibcxx_apply: u32 = 201603;
    pub const __glibcxx_as_const: u32 = 201510;
    pub const __glibcxx_atomic_is_always_lock_free: u32 = 201603;
    pub const __glibcxx_bool_constant: u32 = 201505;
    pub const __glibcxx_byte: u32 = 201603;
    pub const __glibcxx_has_unique_object_representations: u32 = 201606;
    pub const __glibcxx_hardware_interference_size: u32 = 201703;
    pub const __glibcxx_invoke: u32 = 201411;
    pub const __glibcxx_is_aggregate: u32 = 201703;
    pub const __glibcxx_is_invocable: u32 = 201703;
    pub const __glibcxx_launder: u32 = 201606;
    pub const __glibcxx_logical_traits: u32 = 201510;
    pub const __glibcxx_make_from_tuple: u32 = 201606;
    pub const __glibcxx_not_fn: u32 = 201603;
    pub const __glibcxx_type_trait_variable_templates: u32 = 201510;
    pub const __glibcxx_variant: u32 = 202102;
    pub const __glibcxx_lcm: u32 = 201606;
    pub const __glibcxx_gcd: u32 = 201606;
    pub const __glibcxx_gcd_lcm: u32 = 201606;
    pub const __glibcxx_raw_memory_algorithms: u32 = 201606;
    pub const __glibcxx_array_constexpr: u32 = 201803;
    pub const __glibcxx_nonmember_container_access: u32 = 201411;
    pub const __glibcxx_clamp: u32 = 201603;
    pub const __glibcxx_sample: u32 = 201603;
    pub const __glibcxx_boyer_moore_searcher: u32 = 201603;
    pub const __glibcxx_chrono: u32 = 201611;
    pub const __glibcxx_execution: u32 = 201902;
    pub const __glibcxx_filesystem: u32 = 201703;
    pub const __glibcxx_hypot: u32 = 201603;
    pub const __glibcxx_map_try_emplace: u32 = 201411;
    pub const __glibcxx_math_special_functions: u32 = 201603;
    pub const __glibcxx_memory_resource: u32 = 201603;
    pub const __glibcxx_node_extract: u32 = 201606;
    pub const __glibcxx_parallel_algorithm: u32 = 201603;
    pub const __glibcxx_scoped_lock: u32 = 201703;
    pub const __glibcxx_shared_mutex: u32 = 201505;
    pub const __glibcxx_shared_ptr_weak_type: u32 = 201606;
    pub const __glibcxx_string_view: u32 = 201803;
    pub const __glibcxx_unordered_map_try_emplace: u32 = 201411;
    pub const __glibcxx_optional: u32 = 201606;
    pub const __glibcxx_constexpr_char_traits: u32 = 201611;
    pub const __glibcxx_constexpr_string: u32 = 201611;
    pub const _GLIBCXX_TYPE_TRAITS: u32 = 1;
    pub const __cpp_lib_is_null_pointer: u32 = 201309;
    pub const __cpp_lib_result_of_sfinae: u32 = 201210;
    pub const __cpp_lib_is_swappable: u32 = 201603;
    pub const __cpp_lib_void_t: u32 = 201411;
    pub const __cpp_lib_integral_constant_callable: u32 = 201304;
    pub const __cpp_lib_is_final: u32 = 201402;
    pub const __cpp_lib_transformation_trait_aliases: u32 = 201304;
    pub const __cpp_lib_bool_constant: u32 = 201505;
    pub const __cpp_lib_has_unique_object_representations: u32 = 201606;
    pub const __cpp_lib_is_aggregate: u32 = 201703;
    pub const __cpp_lib_is_invocable: u32 = 201703;
    pub const __cpp_lib_logical_traits: u32 = 201510;
    pub const __cpp_lib_type_trait_variable_templates: u32 = 201510;
    pub const _EXT_TYPE_TRAITS: u32 = 1;
    pub const _EXT_NUMERIC_TRAITS: u32 = 1;
    pub const _STL_PAIR_H: u32 = 1;
    pub const _MOVE_H: u32 = 1;
    pub const _GLIBCXX_UTILITY_H: u32 = 1;
    pub const _STL_ITERATOR_BASE_TYPES_H: u32 = 1;
    pub const _STL_ITERATOR_BASE_FUNCS_H: u32 = 1;
    pub const _CONCEPT_CHECK_H: u32 = 1;
    pub const _GLIBCXX_DEBUG_ASSERTIONS_H: u32 = 1;
    pub const _STL_ITERATOR_H: u32 = 1;
    pub const _PTR_TRAITS_H: u32 = 1;
    pub const _GLIBCXX_DEBUG_MACRO_SWITCH_H: u32 = 1;
    pub const _GLIBCXX_PREDEFINED_OPS_H: u32 = 1;
    pub const _GLIBCXX_BIT: u32 = 1;
    pub const _GLIBCXX_CONCEPTS: u32 = 1;
    pub const _ALLOCATOR_H: u32 = 1;
    pub const _GLIBCXX_CXX_ALLOCATOR_H: u32 = 1;
    pub const _STD_NEW_ALLOCATOR_H: u32 = 1;
    pub const __EXCEPTION_H: u32 = 1;
    pub const __cpp_lib_hardware_interference_size: u32 = 201703;
    pub const __cpp_lib_launder: u32 = 201606;
    pub const _MEMORYFWD_H: u32 = 1;
    pub const _STL_CONSTRUCT_H: u32 = 1;
    pub const _STL_UNINITIALIZED_H: u32 = 1;
    pub const _EXT_ALLOC_TRAITS_H: u32 = 1;
    pub const _ALLOC_TRAITS_H: u32 = 1;
    pub const _STL_VECTOR_H: u32 = 1;
    pub const _STL_BVECTOR_H: u32 = 1;
    pub const _FUNCTIONAL_HASH_H: u32 = 1;
    pub const _HASH_BYTES_H: u32 = 1;
    pub const _GLIBCXX_REFWRAP_H: u32 = 1;
    pub const _GLIBCXX_INVOKE_H: u32 = 1;
    pub const _STL_FUNCTION_H: u32 = 1;
    pub const _BACKWARD_BINDERS_H: u32 = 1;
    pub const _GLIBCXX_RANGE_ACCESS_H: u32 = 1;
    pub const _VECTOR_TCC: u32 = 1;
    pub const __cpp_lib_incomplete_container_elements: u32 = 201505;
    pub const __cpp_lib_allocator_traits_is_always_equal: u32 = 201411;
    pub const __cpp_lib_nonmember_container_access: u32 = 201411;
    pub const _GLIBCXX_MEMORY_RESOURCE_H: u32 = 1;
    pub const _GLIBCXX_CSTDDEF: u32 = 1;
    pub const __cpp_lib_byte: u32 = 201603;
    pub const _USES_ALLOCATOR_H: u32 = 1;
    pub const _USES_ALLOCATOR_ARGS: u32 = 1;
    pub const _GLIBCXX_TUPLE: u32 = 1;
    pub const __cpp_lib_tuple_element_t: u32 = 201402;
    pub const __cpp_lib_tuples_by_type: u32 = 201304;
    pub const __cpp_lib_apply: u32 = 201603;
    pub const __cpp_lib_make_from_tuple: u32 = 201606;
    #[repr(C)]
    #[repr(align(16))]
    #[derive(Debug, Copy, Clone)]
    pub struct max_align_t {
        pub __clang_max_align_nonce1: ::core::ffi::c_longlong,
        pub __bindgen_padding_0: u64,
        pub __clang_max_align_nonce2: u128,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of max_align_t"][::core::mem::size_of::<max_align_t>() - 32usize];
        ["Alignment of max_align_t"][::core::mem::align_of::<max_align_t>() - 16usize];
        ["Offset of field: max_align_t::__clang_max_align_nonce1"]
            [::core::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
        ["Offset of field: max_align_t::__clang_max_align_nonce2"]
            [::core::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
    };
    pub mod std {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub type nullptr_t = *const ::core::ffi::c_void;
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt21__glibcxx_assert_failPKciS0_S0_"]
            pub fn __glibcxx_assert_fail(
                __file: *const ::core::ffi::c_char,
                __line: ::core::ffi::c_int,
                __function: *const ::core::ffi::c_char,
                __condition: *const ::core::ffi::c_char,
            ) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt21__throw_bad_exceptionv"]
            pub fn __throw_bad_exception() -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt17__throw_bad_allocv"]
            pub fn __throw_bad_alloc() -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt28__throw_bad_array_new_lengthv"]
            pub fn __throw_bad_array_new_length() -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt16__throw_bad_castv"]
            pub fn __throw_bad_cast() -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt18__throw_bad_typeidv"]
            pub fn __throw_bad_typeid() -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt19__throw_logic_errorPKc"]
            pub fn __throw_logic_error(arg1: *const ::core::ffi::c_char) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_domain_errorPKc"]
            pub fn __throw_domain_error(arg1: *const ::core::ffi::c_char) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt24__throw_invalid_argumentPKc"]
            pub fn __throw_invalid_argument(arg1: *const ::core::ffi::c_char) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_length_errorPKc"]
            pub fn __throw_length_error(arg1: *const ::core::ffi::c_char) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_out_of_rangePKc"]
            pub fn __throw_out_of_range(arg1: *const ::core::ffi::c_char) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt24__throw_out_of_range_fmtPKcz"]
            pub fn __throw_out_of_range_fmt(arg1: *const ::core::ffi::c_char, ...) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt21__throw_runtime_errorPKc"]
            pub fn __throw_runtime_error(arg1: *const ::core::ffi::c_char) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt19__throw_range_errorPKc"]
            pub fn __throw_range_error(arg1: *const ::core::ffi::c_char) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt22__throw_overflow_errorPKc"]
            pub fn __throw_overflow_error(arg1: *const ::core::ffi::c_char) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt23__throw_underflow_errorPKc"]
            pub fn __throw_underflow_error(arg1: *const ::core::ffi::c_char) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt19__throw_ios_failurePKc"]
            pub fn __throw_ios_failure(arg1: *const ::core::ffi::c_char) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt19__throw_ios_failurePKci"]
            pub fn __throw_ios_failure1(
                arg1: *const ::core::ffi::c_char,
                arg2: ::core::ffi::c_int,
            ) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_system_errori"]
            pub fn __throw_system_error(arg1: ::core::ffi::c_int) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_future_errori"]
            pub fn __throw_future_error(arg1: ::core::ffi::c_int) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt25__throw_bad_function_callv"]
            pub fn __throw_bad_function_call() -> !;
        }
        pub type integral_constant_value_type<_Tp> = _Tp;
        pub type integral_constant_type = u8;
        pub type __bool_constant = u8;
        pub type true_type = u8;
        pub type false_type = u8;
        pub type bool_constant = root::std::__bool_constant;
        pub type __enable_if_t = u8;
        pub type __conditional_type<_Tp> = _Tp;
        pub type __conditional_t = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __type_identity {
            pub _address: u8,
        }
        pub type __type_identity_type<_Type> = _Type;
        pub type __type_identity_t = root::std::__type_identity;
        pub mod __detail {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            pub type __first_t<_Tp> = _Tp;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __disjunction_impl {
                pub _address: u8,
            }
            pub type __disjunction_impl_type<_B1> = _B1;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __conjunction_impl {
                pub _address: u8,
            }
            pub type __conjunction_impl_type<_B1> = _B1;
            pub mod __variant {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                #[repr(C)]
                #[derive(Debug, Copy, Clone)]
                pub struct _Never_valueless_alt {
                    pub _address: u8,
                }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __or_ {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __and_ {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __not_ {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct conjunction {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: conjunction_open0_close0"]
                [::core::mem::size_of::<root::std::conjunction>() - 1usize];
            ["Align of template specialization: conjunction_open0_close0"]
                [::core::mem::align_of::<root::std::conjunction>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct disjunction {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: disjunction_open0_close0"]
                [::core::mem::size_of::<root::std::disjunction>() - 1usize];
            ["Align of template specialization: disjunction_open0_close0"]
                [::core::mem::align_of::<root::std::disjunction>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct negation {
            pub _address: u8,
        }
        pub type __remove_cv_t = root::std::remove_cv;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_void {
            pub _base: root::std::false_type,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: is_void_open0_void_close0"]
                [::core::mem::size_of::<root::std::is_void>() - 1usize];
            ["Align of template specialization: is_void_open0_void_close0"]
                [::core::mem::align_of::<root::std::is_void>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: is_void_open0_const_void_close0"]
                [::core::mem::size_of::<root::std::is_void>() - 1usize];
            ["Align of template specialization: is_void_open0_const_void_close0"]
                [::core::mem::align_of::<root::std::is_void>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: is_void_open0_volatile_void_close0"]
                [::core::mem::size_of::<root::std::is_void>() - 1usize];
            ["Align of template specialization: is_void_open0_volatile_void_close0"]
                [::core::mem::align_of::<root::std::is_void>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: is_void_open0_const_volatile_void_close0"]
                [::core::mem::size_of::<root::std::is_void>() - 1usize];
            ["Align of template specialization: is_void_open0_const_volatile_void_close0"]
                [::core::mem::align_of::<root::std::is_void>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_integral_helper {
            pub _base: root::std::false_type,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_bool__close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_bool__close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_char_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_char_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_signed_char_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_signed_char_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_unsigned_char_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_unsigned_char_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_wchar_t_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_wchar_t_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_char16_t_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_char16_t_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_char32_t_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_char32_t_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_short_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_short_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_unsigned_short_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_unsigned_short_close0"] [:: core :: mem :: align_of :: < root :: std :: __is_integral_helper > () - 1usize] ;
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_int_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_int_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_unsigned_int_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_unsigned_int_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_long_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_long_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_unsigned_long_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_unsigned_long_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_long_long_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_long_long_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_unsigned_long_long_close0"] [:: core :: mem :: size_of :: < root :: std :: __is_integral_helper > () - 1usize] ;
            ["Align of template specialization: __is_integral_helper_open0_unsigned_long_long_close0"] [:: core :: mem :: align_of :: < root :: std :: __is_integral_helper > () - 1usize] ;
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_integral {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_floating_point_helper {
            pub _base: root::std::false_type,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_floating_point_helper_open0_float_close0"]
                [::core::mem::size_of::<root::std::__is_floating_point_helper>() - 1usize];
            ["Align of template specialization: __is_floating_point_helper_open0_float_close0"]
                [::core::mem::align_of::<root::std::__is_floating_point_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_floating_point_helper_open0_double_close0"]
                [::core::mem::size_of::<root::std::__is_floating_point_helper>() - 1usize];
            ["Align of template specialization: __is_floating_point_helper_open0_double_close0"]
                [::core::mem::align_of::<root::std::__is_floating_point_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_floating_point_helper_open0_long_double_close0"] [:: core :: mem :: size_of :: < root :: std :: __is_floating_point_helper > () - 1usize] ;
            ["Align of template specialization: __is_floating_point_helper_open0_long_double_close0"] [:: core :: mem :: align_of :: < root :: std :: __is_floating_point_helper > () - 1usize] ;
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_floating_point {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_array {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_lvalue_reference {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_rvalue_reference {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_member_object_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_member_function_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_enum {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_union {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_class {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_function {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_null_pointer {
            pub _base: root::std::false_type,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: is_null_pointer_open0_nullptr_t_close0"]
                [::core::mem::size_of::<root::std::is_null_pointer>() - 1usize];
            ["Align of template specialization: is_null_pointer_open0_nullptr_t_close0"]
                [::core::mem::align_of::<root::std::is_null_pointer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: is_null_pointer_open0_const_std__nullptr_t_close0"] [:: core :: mem :: size_of :: < root :: std :: is_null_pointer > () - 1usize] ;
            ["Align of template specialization: is_null_pointer_open0_const_std__nullptr_t_close0"] [:: core :: mem :: align_of :: < root :: std :: is_null_pointer > () - 1usize] ;
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: is_null_pointer_open0_volatile_std__nullptr_t_close0"] [:: core :: mem :: size_of :: < root :: std :: is_null_pointer > () - 1usize] ;
            ["Align of template specialization: is_null_pointer_open0_volatile_std__nullptr_t_close0"] [:: core :: mem :: align_of :: < root :: std :: is_null_pointer > () - 1usize] ;
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: is_null_pointer_open0_const_volatile_std__nullptr_t_close0"] [:: core :: mem :: size_of :: < root :: std :: is_null_pointer > () - 1usize] ;
            ["Align of template specialization: is_null_pointer_open0_const_volatile_std__nullptr_t_close0"] [:: core :: mem :: align_of :: < root :: std :: is_null_pointer > () - 1usize] ;
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nullptr_t {
            pub _base: root::std::is_null_pointer,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_reference {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_arithmetic {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_fundamental {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_object {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_scalar {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_compound {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_member_pointer {
            pub _address: u8,
        }
        pub type __is_one_of = root::std::__or_;
        pub type __is_signed_integer = root::std::__is_one_of;
        pub type __is_unsigned_integer = root::std::__is_one_of;
        pub type __is_standard_integer = root::std::__or_;
        pub type __void_t = ::core::ffi::c_void;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_const {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_volatile {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivial {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_copyable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_standard_layout {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_pod {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_literal_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_empty {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_polymorphic {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_final {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_abstract {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_signed {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_unsigned {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_array_known_bounds {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_array_unknown_bounds {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __do_is_destructible_impl {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __do_is_destructible_impl"]
                [::core::mem::size_of::<__do_is_destructible_impl>() - 1usize];
            ["Alignment of __do_is_destructible_impl"]
                [::core::mem::align_of::<__do_is_destructible_impl>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_destructible_impl {
            pub _address: u8,
        }
        pub type __is_destructible_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_destructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __do_is_nt_destructible_impl {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __do_is_nt_destructible_impl"]
                [::core::mem::size_of::<__do_is_nt_destructible_impl>() - 1usize];
            ["Alignment of __do_is_nt_destructible_impl"]
                [::core::mem::align_of::<__do_is_nt_destructible_impl>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nt_destructible_impl {
            pub _address: u8,
        }
        pub type __is_nt_destructible_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_destructible {
            pub _address: u8,
        }
        pub type __is_constructible_impl = root::std::__bool_constant;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_default_constructible {
            pub _address: u8,
        }
        pub type __add_lval_ref_t<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_copy_constructible {
            pub _address: u8,
        }
        pub type __add_rval_ref_t<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_move_constructible {
            pub _address: u8,
        }
        pub type __is_nothrow_constructible_impl = root::std::__bool_constant;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_default_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_copy_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_move_constructible {
            pub _address: u8,
        }
        pub type __is_assignable_impl = root::std::__bool_constant;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_copy_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_move_assignable {
            pub _address: u8,
        }
        pub type __is_nothrow_assignable_impl = root::std::__bool_constant;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_copy_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_move_assignable {
            pub _address: u8,
        }
        pub type __is_trivially_constructible_impl = root::std::__bool_constant;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_default_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __do_is_implicitly_default_constructible_impl {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __do_is_implicitly_default_constructible_impl"]
                [::core::mem::size_of::<__do_is_implicitly_default_constructible_impl>() - 1usize];
            ["Alignment of __do_is_implicitly_default_constructible_impl"]
                [::core::mem::align_of::<__do_is_implicitly_default_constructible_impl>() - 1usize];
        };
        unsafe extern "C" {
            #[link_name = "\u{1}_ZNSt45__do_is_implicitly_default_constructible_impl6__testEz"]
            pub fn __do_is_implicitly_default_constructible_impl___test() -> root::std::false_type;
        }
        impl __do_is_implicitly_default_constructible_impl {
            #[inline]
            pub unsafe fn __test() -> root::std::false_type {
                __do_is_implicitly_default_constructible_impl___test()
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_implicitly_default_constructible_impl {
            pub _address: u8,
        }
        pub type __is_implicitly_default_constructible_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_implicitly_default_constructible_safe {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_implicitly_default_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_copy_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_move_constructible {
            pub _address: u8,
        }
        pub type __is_trivially_assignable_impl = root::std::__bool_constant;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_copy_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_move_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_destructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct has_virtual_destructor {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct alignment_of {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct rank {
            pub _base: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_same {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_base_of {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_convertible {
            pub _address: u8,
        }
        pub type __is_array_convertible = root::std::is_convertible;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nothrow_new_constructible_impl {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_const {
            pub _address: u8,
        }
        pub type remove_const_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_volatile {
            pub _address: u8,
        }
        pub type remove_volatile_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_cv {
            pub _address: u8,
        }
        pub type remove_cv_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_const {
            pub _address: u8,
        }
        pub type add_const_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_volatile {
            pub _address: u8,
        }
        pub type add_volatile_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_cv {
            pub _address: u8,
        }
        pub type add_cv_type<_Tp> = _Tp;
        pub type remove_const_t = root::std::remove_const;
        pub type remove_volatile_t = root::std::remove_volatile;
        pub type remove_cv_t = root::std::remove_cv;
        pub type add_const_t = root::std::add_const;
        pub type add_volatile_t = root::std::add_volatile;
        pub type add_cv_t = root::std::add_cv;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_reference {
            pub _address: u8,
        }
        pub type remove_reference_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_lvalue_reference {
            pub _address: u8,
        }
        pub type add_lvalue_reference_type<_Tp> = root::std::__add_lval_ref_t<_Tp>;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_rvalue_reference {
            pub _address: u8,
        }
        pub type add_rvalue_reference_type<_Tp> = root::std::__add_rval_ref_t<_Tp>;
        pub type remove_reference_t = root::std::remove_reference;
        pub type add_lvalue_reference_t = root::std::add_lvalue_reference;
        pub type add_rvalue_reference_t = root::std::add_rvalue_reference;
        pub type __match_cv_qualifiers___match = u8;
        pub type __match_cv_qualifiers___type = root::std::__match_cv_qualifiers___match;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __make_unsigned {
            pub _address: u8,
        }
        pub type __make_unsigned___type<_Tp> = _Tp;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_unsigned_open0_char_close0"]
                [::core::mem::size_of::<root::std::__make_unsigned>() - 1usize];
            ["Align of template specialization: __make_unsigned_open0_char_close0"]
                [::core::mem::align_of::<root::std::__make_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_unsigned_open0_signed_char_close0"]
                [::core::mem::size_of::<root::std::__make_unsigned>() - 1usize];
            ["Align of template specialization: __make_unsigned_open0_signed_char_close0"]
                [::core::mem::align_of::<root::std::__make_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_unsigned_open0_short_close0"]
                [::core::mem::size_of::<root::std::__make_unsigned>() - 1usize];
            ["Align of template specialization: __make_unsigned_open0_short_close0"]
                [::core::mem::align_of::<root::std::__make_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_unsigned_open0_int_close0"]
                [::core::mem::size_of::<root::std::__make_unsigned>() - 1usize];
            ["Align of template specialization: __make_unsigned_open0_int_close0"]
                [::core::mem::align_of::<root::std::__make_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_unsigned_open0_long_close0"]
                [::core::mem::size_of::<root::std::__make_unsigned>() - 1usize];
            ["Align of template specialization: __make_unsigned_open0_long_close0"]
                [::core::mem::align_of::<root::std::__make_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_unsigned_open0_long_long_close0"]
                [::core::mem::size_of::<root::std::__make_unsigned>() - 1usize];
            ["Align of template specialization: __make_unsigned_open0_long_long_close0"]
                [::core::mem::align_of::<root::std::__make_unsigned>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __make_unsigned_selector_base {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __make_unsigned_selector_base__List {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __make_unsigned_selector_base"]
                [::core::mem::size_of::<__make_unsigned_selector_base>() - 1usize];
            ["Alignment of __make_unsigned_selector_base"]
                [::core::mem::align_of::<__make_unsigned_selector_base>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_unsigned_open0_wchar_t_close0"]
                [::core::mem::size_of::<root::std::__make_unsigned>() - 1usize];
            ["Align of template specialization: __make_unsigned_open0_wchar_t_close0"]
                [::core::mem::align_of::<root::std::__make_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_unsigned_open0_char16_t_close0"]
                [::core::mem::size_of::<root::std::__make_unsigned>() - 1usize];
            ["Align of template specialization: __make_unsigned_open0_char16_t_close0"]
                [::core::mem::align_of::<root::std::__make_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_unsigned_open0_char32_t_close0"]
                [::core::mem::size_of::<root::std::__make_unsigned>() - 1usize];
            ["Align of template specialization: __make_unsigned_open0_char32_t_close0"]
                [::core::mem::align_of::<root::std::__make_unsigned>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct make_unsigned {
            pub _address: u8,
        }
        pub type make_unsigned_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __make_signed {
            pub _address: u8,
        }
        pub type __make_signed___type<_Tp> = _Tp;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_signed_open0_char_close0"]
                [::core::mem::size_of::<root::std::__make_signed>() - 1usize];
            ["Align of template specialization: __make_signed_open0_char_close0"]
                [::core::mem::align_of::<root::std::__make_signed>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_signed_open0_unsigned_char_close0"]
                [::core::mem::size_of::<root::std::__make_signed>() - 1usize];
            ["Align of template specialization: __make_signed_open0_unsigned_char_close0"]
                [::core::mem::align_of::<root::std::__make_signed>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_signed_open0_unsigned_short_close0"]
                [::core::mem::size_of::<root::std::__make_signed>() - 1usize];
            ["Align of template specialization: __make_signed_open0_unsigned_short_close0"]
                [::core::mem::align_of::<root::std::__make_signed>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_signed_open0_unsigned_int_close0"]
                [::core::mem::size_of::<root::std::__make_signed>() - 1usize];
            ["Align of template specialization: __make_signed_open0_unsigned_int_close0"]
                [::core::mem::align_of::<root::std::__make_signed>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_signed_open0_unsigned_long_close0"]
                [::core::mem::size_of::<root::std::__make_signed>() - 1usize];
            ["Align of template specialization: __make_signed_open0_unsigned_long_close0"]
                [::core::mem::align_of::<root::std::__make_signed>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_signed_open0_unsigned_long_long_close0"]
                [::core::mem::size_of::<root::std::__make_signed>() - 1usize];
            ["Align of template specialization: __make_signed_open0_unsigned_long_long_close0"]
                [::core::mem::align_of::<root::std::__make_signed>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_signed_open0_wchar_t_close0"]
                [::core::mem::size_of::<root::std::__make_signed>() - 1usize];
            ["Align of template specialization: __make_signed_open0_wchar_t_close0"]
                [::core::mem::align_of::<root::std::__make_signed>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_signed_open0_char16_t_close0"]
                [::core::mem::size_of::<root::std::__make_signed>() - 1usize];
            ["Align of template specialization: __make_signed_open0_char16_t_close0"]
                [::core::mem::align_of::<root::std::__make_signed>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_signed_open0_char32_t_close0"]
                [::core::mem::size_of::<root::std::__make_signed>() - 1usize];
            ["Align of template specialization: __make_signed_open0_char32_t_close0"]
                [::core::mem::align_of::<root::std::__make_signed>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct make_signed {
            pub _address: u8,
        }
        pub type make_signed_type = u8;
        pub type make_signed_t = root::std::make_signed;
        pub type make_unsigned_t = root::std::make_unsigned;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_extent {
            pub _address: u8,
        }
        pub type remove_extent_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_all_extents {
            pub _address: u8,
        }
        pub type remove_all_extents_type<_Tp> = _Tp;
        pub type remove_extent_t = root::std::remove_extent;
        pub type remove_all_extents_t = root::std::remove_all_extents;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_pointer {
            pub _address: u8,
        }
        pub type remove_pointer_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_pointer {
            pub _address: u8,
        }
        pub type add_pointer_type<_Tp> = _Tp;
        pub type remove_pointer_t = root::std::remove_pointer;
        pub type add_pointer_t = root::std::add_pointer;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __aligned_storage_max_align_t {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __aligned_storage_max_align_t"]
                [::core::mem::size_of::<__aligned_storage_max_align_t>() - 16usize];
            ["Alignment of __aligned_storage_max_align_t"]
                [::core::mem::align_of::<__aligned_storage_max_align_t>() - 16usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct aligned_storage_type {
            pub __data: *mut ::core::ffi::c_uchar,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __strictest_alignment {
            pub _address: u8,
        }
        pub type aligned_union___strictest = root::std::__strictest_alignment;
        pub type aligned_union_type = u8;
        unsafe extern "C" {
            pub static alignment_value: usize;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct decay {
            pub _address: u8,
        }
        pub type decay_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __strip_reference_wrapper {
            pub _address: u8,
        }
        pub type __strip_reference_wrapper___type<_Tp> = _Tp;
        pub type __decay_t = root::std::decay;
        pub type __decay_and_strip = root::std::__strip_reference_wrapper;
        pub type _Require = root::std::__enable_if_t;
        pub type __remove_cvref_t = root::std::remove_cv;
        pub type conditional_type<_Iftrue> = _Iftrue;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct common_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __success_type {
            pub _address: u8,
        }
        pub type __success_type_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __failure_type {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __failure_type"][::core::mem::size_of::<__failure_type>() - 1usize];
            ["Alignment of __failure_type"][::core::mem::align_of::<__failure_type>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __do_common_type_impl {
            pub _address: u8,
        }
        pub type __do_common_type_impl___cond_t<_Tp> = _Tp;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __do_common_type_impl"]
                [::core::mem::size_of::<__do_common_type_impl>() - 1usize];
            ["Alignment of __do_common_type_impl"]
                [::core::mem::align_of::<__do_common_type_impl>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: common_type_open0_close0"]
                [::core::mem::size_of::<root::std::common_type>() - 1usize];
            ["Align of template specialization: common_type_open0_close0"]
                [::core::mem::align_of::<root::std::common_type>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __common_type_impl {
            pub _address: u8,
        }
        pub type __common_type_impl_type = root::std::common_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __common_type_pack {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __common_type_fold {
            pub _address: u8,
        }
        pub type __underlying_type_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct underlying_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __declval_protector {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct result_of {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __invoke_memfun_ref {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __invoke_memfun_ref"][::core::mem::size_of::<__invoke_memfun_ref>() - 1usize];
            ["Alignment of __invoke_memfun_ref"]
                [::core::mem::align_of::<__invoke_memfun_ref>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __invoke_memfun_deref {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __invoke_memfun_deref"]
                [::core::mem::size_of::<__invoke_memfun_deref>() - 1usize];
            ["Alignment of __invoke_memfun_deref"]
                [::core::mem::align_of::<__invoke_memfun_deref>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __invoke_memobj_ref {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __invoke_memobj_ref"][::core::mem::size_of::<__invoke_memobj_ref>() - 1usize];
            ["Alignment of __invoke_memobj_ref"]
                [::core::mem::align_of::<__invoke_memobj_ref>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __invoke_memobj_deref {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __invoke_memobj_deref"]
                [::core::mem::size_of::<__invoke_memobj_deref>() - 1usize];
            ["Alignment of __invoke_memobj_deref"]
                [::core::mem::align_of::<__invoke_memobj_deref>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __invoke_other {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __invoke_other"][::core::mem::size_of::<__invoke_other>() - 1usize];
            ["Alignment of __invoke_other"][::core::mem::align_of::<__invoke_other>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_success {
            pub _address: u8,
        }
        pub type __result_of_success___invoke_type<_Tag> = _Tag;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memfun_ref_impl {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __result_of_memfun_ref_impl"]
                [::core::mem::size_of::<__result_of_memfun_ref_impl>() - 1usize];
            ["Alignment of __result_of_memfun_ref_impl"]
                [::core::mem::align_of::<__result_of_memfun_ref_impl>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memfun_ref {
            pub _address: u8,
        }
        pub type __result_of_memfun_ref_type<_MemPtr> = _MemPtr;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memfun_deref_impl {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __result_of_memfun_deref_impl"]
                [::core::mem::size_of::<__result_of_memfun_deref_impl>() - 1usize];
            ["Alignment of __result_of_memfun_deref_impl"]
                [::core::mem::align_of::<__result_of_memfun_deref_impl>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memfun_deref {
            pub _address: u8,
        }
        pub type __result_of_memfun_deref_type<_MemPtr> = _MemPtr;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memobj_ref_impl {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __result_of_memobj_ref_impl"]
                [::core::mem::size_of::<__result_of_memobj_ref_impl>() - 1usize];
            ["Alignment of __result_of_memobj_ref_impl"]
                [::core::mem::align_of::<__result_of_memobj_ref_impl>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memobj_ref {
            pub _address: u8,
        }
        pub type __result_of_memobj_ref_type<_MemPtr> = _MemPtr;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memobj_deref_impl {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __result_of_memobj_deref_impl"]
                [::core::mem::size_of::<__result_of_memobj_deref_impl>() - 1usize];
            ["Alignment of __result_of_memobj_deref_impl"]
                [::core::mem::align_of::<__result_of_memobj_deref_impl>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memobj_deref {
            pub _address: u8,
        }
        pub type __result_of_memobj_deref_type<_MemPtr> = _MemPtr;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memobj {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memfun {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __inv_unwrap {
            pub _address: u8,
        }
        pub type __inv_unwrap_type<_Tp> = _Tp;
        pub type __result_of_impl_type = root::std::__failure_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_other_impl {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __result_of_other_impl"]
                [::core::mem::size_of::<__result_of_other_impl>() - 1usize];
            ["Alignment of __result_of_other_impl"]
                [::core::mem::align_of::<__result_of_other_impl>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __invoke_result {
            pub _address: u8,
        }
        pub type __invoke_result_t = root::std::__invoke_result;
        pub type aligned_storage_t = u8;
        pub type aligned_union_t = u8;
        pub type decay_t = root::std::decay;
        pub type enable_if_t = u8;
        pub type conditional_t = u8;
        pub type common_type_t = root::std::common_type;
        pub type underlying_type_t = root::std::underlying_type;
        pub type result_of_t = root::std::result_of;
        pub type void_t = ::core::ffi::c_void;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __detector {
            pub _address: u8,
        }
        pub type __detector_type<_Default> = _Default;
        pub type __detector___is_detected = root::std::false_type;
        pub type __detected_or = root::std::__detector;
        pub type __detected_or_t = root::std::__detected_or;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_tuple_like_impl {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_tuple_like {
            pub _address: u8,
        }
        pub mod __swappable_details {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __do_is_swappable_impl {
                pub _address: u8,
            }
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of __do_is_swappable_impl"]
                    [::core::mem::size_of::<__do_is_swappable_impl>() - 1usize];
                ["Alignment of __do_is_swappable_impl"]
                    [::core::mem::align_of::<__do_is_swappable_impl>() - 1usize];
            };
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __do_is_nothrow_swappable_impl {
                pub _address: u8,
            }
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of __do_is_nothrow_swappable_impl"]
                    [::core::mem::size_of::<__do_is_nothrow_swappable_impl>() - 1usize];
                ["Alignment of __do_is_nothrow_swappable_impl"]
                    [::core::mem::align_of::<__do_is_nothrow_swappable_impl>() - 1usize];
            };
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_swappable_impl {
            pub _address: u8,
        }
        pub type __is_swappable_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nothrow_swappable_impl {
            pub _address: u8,
        }
        pub type __is_nothrow_swappable_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_swappable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nothrow_swappable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_swappable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_swappable {
            pub _address: u8,
        }
        pub mod __swappable_with_details {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __do_is_swappable_with_impl {
                pub _address: u8,
            }
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of __do_is_swappable_with_impl"]
                    [::core::mem::size_of::<__do_is_swappable_with_impl>() - 1usize];
                ["Alignment of __do_is_swappable_with_impl"]
                    [::core::mem::align_of::<__do_is_swappable_with_impl>() - 1usize];
            };
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __do_is_nothrow_swappable_with_impl {
                pub _address: u8,
            }
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of __do_is_nothrow_swappable_with_impl"]
                    [::core::mem::size_of::<__do_is_nothrow_swappable_with_impl>() - 1usize];
                ["Alignment of __do_is_nothrow_swappable_with_impl"]
                    [::core::mem::align_of::<__do_is_nothrow_swappable_with_impl>() - 1usize];
            };
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_swappable_with_impl {
            pub _address: u8,
        }
        pub type __is_swappable_with_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nothrow_swappable_with_impl {
            pub _address: u8,
        }
        pub type __is_nothrow_swappable_with_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_swappable_with {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_swappable_with {
            pub _address: u8,
        }
        pub type __is_invocable_impl___nothrow_conv = root::std::false_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_invocable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __call_is_nothrow {
            pub _address: u8,
        }
        pub type __call_is_nothrow_ = root::std::__call_is_nothrow;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nothrow_invocable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __nonesuchbase {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __nonesuchbase"][::core::mem::size_of::<__nonesuchbase>() - 1usize];
            ["Alignment of __nonesuchbase"][::core::mem::align_of::<__nonesuchbase>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug)]
        pub struct __nonesuch {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __nonesuch"][::core::mem::size_of::<__nonesuch>() - 1usize];
            ["Alignment of __nonesuch"][::core::mem::align_of::<__nonesuch>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct invoke_result {
            pub _address: u8,
        }
        pub type invoke_result_t = root::std::invoke_result;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_invocable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_invocable_r {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_invocable {
            pub _address: u8,
        }
        pub type __is_nt_invocable_impl = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_invocable_r {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct has_unique_object_representations {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_aggregate {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __true_type {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __true_type"][::core::mem::size_of::<__true_type>() - 1usize];
            ["Alignment of __true_type"][::core::mem::align_of::<__true_type>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __false_type {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __false_type"][::core::mem::size_of::<__false_type>() - 1usize];
            ["Alignment of __false_type"][::core::mem::align_of::<__false_type>() - 1usize];
        };
        pub type __truth_type___type = root::std::__false_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __traitor {
            pub _address: u8,
        }
        pub const __traitor___value: root::std::__traitor__bindgen_ty_1 = 0;
        pub type __traitor__bindgen_ty_1 = i32;
        pub type __traitor___type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __are_same {
            pub _address: u8,
        }
        pub const __are_same___value: root::std::__are_same__bindgen_ty_1 = 0;
        pub type __are_same__bindgen_ty_1 = i32;
        pub type __are_same___type = root::std::__false_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_integer {
            pub _address: u8,
        }
        pub const __is_integer___value: root::std::__is_integer__bindgen_ty_1 = 0;
        pub type __is_integer__bindgen_ty_1 = i32;
        pub type __is_integer___type = root::std::__false_type;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_bool__close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_bool__close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_char_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_char_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_signed_char_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_signed_char_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_unsigned_char_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_unsigned_char_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_wchar_t_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_wchar_t_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_char16_t_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_char16_t_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_char32_t_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_char32_t_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_short_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_short_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_unsigned_short_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_unsigned_short_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_int_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_int_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_unsigned_int_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_unsigned_int_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_long_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_long_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_unsigned_long_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_unsigned_long_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_long_long_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_long_long_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_unsigned_long_long_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_unsigned_long_long_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_floating {
            pub _address: u8,
        }
        pub const __is_floating___value: root::std::__is_floating__bindgen_ty_1 = 0;
        pub type __is_floating__bindgen_ty_1 = i32;
        pub type __is_floating___type = root::std::__false_type;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_floating_open0_float_close0"]
                [::core::mem::size_of::<root::std::__is_floating>() - 1usize];
            ["Align of template specialization: __is_floating_open0_float_close0"]
                [::core::mem::align_of::<root::std::__is_floating>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_floating_open0_double_close0"]
                [::core::mem::size_of::<root::std::__is_floating>() - 1usize];
            ["Align of template specialization: __is_floating_open0_double_close0"]
                [::core::mem::align_of::<root::std::__is_floating>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_floating_open0_long_double_close0"]
                [::core::mem::size_of::<root::std::__is_floating>() - 1usize];
            ["Align of template specialization: __is_floating_open0_long_double_close0"]
                [::core::mem::align_of::<root::std::__is_floating>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_arithmetic {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_char {
            pub _address: u8,
        }
        pub const __is_char___value: root::std::__is_char__bindgen_ty_1 = 0;
        pub type __is_char__bindgen_ty_1 = i32;
        pub type __is_char___type = root::std::__false_type;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_char_open0_char_close0"]
                [::core::mem::size_of::<root::std::__is_char>() - 1usize];
            ["Align of template specialization: __is_char_open0_char_close0"]
                [::core::mem::align_of::<root::std::__is_char>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_char_open0_wchar_t_close0"]
                [::core::mem::size_of::<root::std::__is_char>() - 1usize];
            ["Align of template specialization: __is_char_open0_wchar_t_close0"]
                [::core::mem::align_of::<root::std::__is_char>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_byte {
            pub _address: u8,
        }
        pub const __is_byte___value: root::std::__is_byte__bindgen_ty_1 = 0;
        pub type __is_byte__bindgen_ty_1 = i32;
        pub type __is_byte___type = root::std::__false_type;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_byte_open0_char_close0"]
                [::core::mem::size_of::<root::std::__is_byte>() - 1usize];
            ["Align of template specialization: __is_byte_open0_char_close0"]
                [::core::mem::align_of::<root::std::__is_byte>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_byte_open0_signed_char_close0"]
                [::core::mem::size_of::<root::std::__is_byte>() - 1usize];
            ["Align of template specialization: __is_byte_open0_signed_char_close0"]
                [::core::mem::align_of::<root::std::__is_byte>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_byte_open0_unsigned_char_close0"]
                [::core::mem::size_of::<root::std::__is_byte>() - 1usize];
            ["Align of template specialization: __is_byte_open0_unsigned_char_close0"]
                [::core::mem::align_of::<root::std::__is_byte>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_byte_open0_byte_close0"]
                [::core::mem::size_of::<root::std::__is_byte>() - 1usize];
            ["Align of template specialization: __is_byte_open0_byte_close0"]
                [::core::mem::align_of::<root::std::__is_byte>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nonvolatile_trivially_copyable {
            pub _address: u8,
        }
        pub const __is_nonvolatile_trivially_copyable___value:
            root::std::__is_nonvolatile_trivially_copyable__bindgen_ty_1 = 0;
        pub type __is_nonvolatile_trivially_copyable__bindgen_ty_1 = i32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __memcpyable {
            pub _address: u8,
        }
        pub const __memcpyable___value: root::std::__memcpyable__bindgen_ty_1 = 0;
        pub type __memcpyable__bindgen_ty_1 = i32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __memcpyable_integer {
            pub _address: u8,
        }
        pub const __memcpyable_integer___width: root::std::__memcpyable_integer__bindgen_ty_1 = 0;
        pub type __memcpyable_integer__bindgen_ty_1 = i32;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __memcpyable_integer_open0___int128_close0"]
                [::core::mem::size_of::<root::std::__memcpyable_integer>() - 1usize];
            ["Align of template specialization: __memcpyable_integer_open0___int128_close0"]
                [::core::mem::align_of::<root::std::__memcpyable_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __memcpyable_integer_open0_unsigned___int128_close0"] [:: core :: mem :: size_of :: < root :: std :: __memcpyable_integer > () - 1usize] ;
            ["Align of template specialization: __memcpyable_integer_open0_unsigned___int128_close0"] [:: core :: mem :: align_of :: < root :: std :: __memcpyable_integer > () - 1usize] ;
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __memcmpable {
            pub _address: u8,
        }
        pub const __memcmpable___value: root::std::__memcmpable__bindgen_ty_1 = 0;
        pub type __memcmpable__bindgen_ty_1 = i32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_move_iterator {
            pub _address: u8,
        }
        pub const __is_move_iterator___value: root::std::__is_move_iterator__bindgen_ty_1 = 0;
        pub type __is_move_iterator__bindgen_ty_1 = i32;
        pub type __is_move_iterator___type = root::std::__false_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __move_if_noexcept_cond {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct tuple_size {
            pub _address: u8,
        }
        pub type __enable_if_has_tuple_size<_Tp> = _Tp;
        pub type __tuple_element_t = u8;
        pub type tuple_element_t = u8;
        pub type _Build_index_tuple__IdxTuple = u8;
        pub type _Build_index_tuple___type = u8;
        pub type integer_sequence_value_type<_Tp> = _Tp;
        pub type make_integer_sequence = u8;
        pub type index_sequence = u8;
        pub type make_index_sequence = root::std::make_integer_sequence;
        pub type index_sequence_for = root::std::make_index_sequence;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct in_place_t {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of in_place_t"][::core::mem::size_of::<in_place_t>() - 1usize];
            ["Alignment of in_place_t"][::core::mem::align_of::<in_place_t>() - 1usize];
        };
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt8in_place"]
            pub static in_place: root::std::in_place_t;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct in_place_type_t {
            pub _address: u8,
        }
        pub type _Nth_type_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Swallow_assign {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of _Swallow_assign"][::core::mem::size_of::<_Swallow_assign>() - 1usize];
            ["Alignment of _Swallow_assign"][::core::mem::align_of::<_Swallow_assign>() - 1usize];
        };
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt6ignore"]
            pub static ignore: root::std::_Swallow_assign;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct piecewise_construct_t {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of piecewise_construct_t"]
                [::core::mem::size_of::<piecewise_construct_t>() - 1usize];
            ["Alignment of piecewise_construct_t"]
                [::core::mem::align_of::<piecewise_construct_t>() - 1usize];
        };
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt19piecewise_construct"]
            pub static piecewise_construct: root::std::piecewise_construct_t;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct complex {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct __pair_base {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct pair<_T1, _T2> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_T1>>,
            pub _phantom_1: ::core::marker::PhantomData<::core::cell::UnsafeCell<_T2>>,
            pub first: _T1,
            pub second: _T2,
        }
        pub type pair_first_type<_T1> = _T1;
        pub type pair_second_type<_T2> = _T2;
        pub type pair__PCCP = u8;
        pub type pair__PCCFP = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct pair___zero_as_null_pointer_constant {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct input_iterator_tag {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of input_iterator_tag"][::core::mem::size_of::<input_iterator_tag>() - 1usize];
            ["Alignment of input_iterator_tag"]
                [::core::mem::align_of::<input_iterator_tag>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct output_iterator_tag {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of output_iterator_tag"][::core::mem::size_of::<output_iterator_tag>() - 1usize];
            ["Alignment of output_iterator_tag"]
                [::core::mem::align_of::<output_iterator_tag>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct forward_iterator_tag {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of forward_iterator_tag"]
                [::core::mem::size_of::<forward_iterator_tag>() - 1usize];
            ["Alignment of forward_iterator_tag"]
                [::core::mem::align_of::<forward_iterator_tag>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct bidirectional_iterator_tag {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of bidirectional_iterator_tag"]
                [::core::mem::size_of::<bidirectional_iterator_tag>() - 1usize];
            ["Alignment of bidirectional_iterator_tag"]
                [::core::mem::align_of::<bidirectional_iterator_tag>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct random_access_iterator_tag {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of random_access_iterator_tag"]
                [::core::mem::size_of::<random_access_iterator_tag>() - 1usize];
            ["Alignment of random_access_iterator_tag"]
                [::core::mem::align_of::<random_access_iterator_tag>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct iterator {
            pub _address: u8,
        }
        pub type iterator_iterator_category<_Category> = _Category;
        pub type iterator_value_type<_Tp> = _Tp;
        pub type iterator_difference_type<_Distance> = _Distance;
        pub type iterator_pointer<_Pointer> = _Pointer;
        pub type iterator_reference<_Reference> = _Reference;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __iterator_traits {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct iterator_traits {
            pub _address: u8,
        }
        pub type __iter_category_t = root::std::iterator_traits;
        pub type _RequireInputIter = root::std::__enable_if_t;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_random_access_iter {
            pub _address: u8,
        }
        pub type __is_random_access_iter__Base = root::std::is_base_of;
        pub const __is_random_access_iter___value:
            root::std::__is_random_access_iter__bindgen_ty_1 = 0;
        pub type __is_random_access_iter__bindgen_ty_1 = i32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _List_iterator {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _List_const_iterator {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __undefined {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __get_first_arg {
            pub _address: u8,
        }
        pub type __get_first_arg_type = root::std::__undefined;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __replace_first_arg {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __ptr_traits_elem {
            pub _address: u8,
        }
        pub type __ptr_traits_elem_t = root::std::__ptr_traits_elem;
        pub type __ptr_traits_ptr_to_pointer<_Ptr> = _Ptr;
        pub type __ptr_traits_ptr_to_element_type<_Elt> = _Elt;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __ptr_traits_impl {
            pub _address: u8,
        }
        pub type __ptr_traits_impl___diff_t = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type __ptr_traits_impl___rebind = root::std::__type_identity;
        pub type __ptr_traits_impl_pointer<_Ptr> = _Ptr;
        pub type __ptr_traits_impl_element_type<_Elt> = _Elt;
        pub type __ptr_traits_impl_difference_type = root::std::__detected_or_t;
        pub type __ptr_traits_impl_rebind = root::std::__detected_or_t;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct pointer_traits {
            pub _address: u8,
        }
        pub type __ptr_rebind = root::std::pointer_traits;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct reverse_iterator<_Iterator> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Iterator>>,
            pub current: _Iterator,
        }
        pub type reverse_iterator___traits_type = root::std::iterator_traits;
        pub type reverse_iterator_iterator_type<_Iterator> = _Iterator;
        pub type reverse_iterator_pointer = root::std::reverse_iterator___traits_type;
        pub type reverse_iterator_difference_type = root::std::reverse_iterator___traits_type;
        pub type reverse_iterator_reference = root::std::reverse_iterator___traits_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct back_insert_iterator<_Container> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Container>>,
            pub container: *mut _Container,
        }
        pub type back_insert_iterator_container_type<_Container> = _Container;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct front_insert_iterator<_Container> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Container>>,
            pub container: *mut _Container,
        }
        pub type front_insert_iterator_container_type<_Container> = _Container;
        #[repr(C)]
        pub struct insert_iterator<_Container> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Container>>,
            pub container: *mut _Container,
            pub iter: root::std::insert_iterator__Iter,
        }
        pub type insert_iterator__Iter = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type insert_iterator_container_type<_Container> = _Container;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct move_iterator<_Iterator> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Iterator>>,
            pub _M_current: _Iterator,
        }
        pub type move_iterator___traits_type = root::std::iterator_traits;
        pub type move_iterator___base_ref = root::std::move_iterator___traits_type;
        pub type move_iterator_iterator_type<_Iterator> = _Iterator;
        pub type move_iterator_iterator_category = root::std::move_iterator___traits_type;
        pub type move_iterator_value_type = root::std::move_iterator___traits_type;
        pub type move_iterator_difference_type = root::std::move_iterator___traits_type;
        pub type move_iterator_pointer<_Iterator> = _Iterator;
        pub type move_iterator_reference = root::std::__conditional_t;
        pub type __iter_key_t = root::std::remove_const_t;
        pub type __iter_val_t = root::std::iterator_traits;
        pub type __iter_to_alloc_t =
            root::std::pair<root::std::__iter_key_t, root::std::__iter_val_t>;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Deque_iterator {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct char_traits {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct istreambuf_iterator {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ostreambuf_iterator {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __lc_rai {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __lc_rai_open0_random_access_iterator_tag_random_access_iterator_tag_close0"] [:: core :: mem :: size_of :: < root :: std :: __lc_rai > () - 1usize] ;
            ["Align of template specialization: __lc_rai_open0_random_access_iterator_tag_random_access_iterator_tag_close0"] [:: core :: mem :: align_of :: < root :: std :: __lc_rai > () - 1usize] ;
        };
        #[repr(C)]
        pub struct exception__bindgen_vtable(::core::ffi::c_void);
        #[repr(C)]
        #[derive(Debug)]
        pub struct exception {
            pub vtable_: *const exception__bindgen_vtable,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of exception"][::core::mem::size_of::<exception>() - 8usize];
            ["Alignment of exception"][::core::mem::align_of::<exception>() - 8usize];
        };
        unsafe extern "C" {
            #[link_name = "\u{1}_ZNSt9exceptionD1Ev"]
            pub fn exception_exception_destructor(this: *mut root::std::exception);
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZNKSt9exception4whatEv"]
            pub fn exception_what(this: *mut ::core::ffi::c_void) -> *const ::core::ffi::c_char;
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct bad_alloc {
            pub _base: root::std::exception,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of bad_alloc"][::core::mem::size_of::<bad_alloc>() - 8usize];
            ["Alignment of bad_alloc"][::core::mem::align_of::<bad_alloc>() - 8usize];
        };
        unsafe extern "C" {
            #[link_name = "\u{1}_ZNSt9bad_allocD1Ev"]
            pub fn bad_alloc_bad_alloc_destructor(this: *mut root::std::bad_alloc);
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZNKSt9bad_alloc4whatEv"]
            pub fn bad_alloc_what(this: *mut ::core::ffi::c_void) -> *const ::core::ffi::c_char;
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct bad_array_new_length {
            pub _base: root::std::bad_alloc,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of bad_array_new_length"]
                [::core::mem::size_of::<bad_array_new_length>() - 8usize];
            ["Alignment of bad_array_new_length"]
                [::core::mem::align_of::<bad_array_new_length>() - 8usize];
        };
        unsafe extern "C" {
            #[link_name = "\u{1}_ZNSt20bad_array_new_lengthD1Ev"]
            pub fn bad_array_new_length_bad_array_new_length_destructor(
                this: *mut root::std::bad_array_new_length,
            );
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZNKSt20bad_array_new_length4whatEv"]
            pub fn bad_array_new_length_what(
                this: *mut ::core::ffi::c_void,
            ) -> *const ::core::ffi::c_char;
        }
        pub type align_val_t = usize;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct nothrow_t {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of nothrow_t"][::core::mem::size_of::<nothrow_t>() - 1usize];
            ["Alignment of nothrow_t"][::core::mem::align_of::<nothrow_t>() - 1usize];
        };
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt7nothrow"]
            pub static nothrow: root::std::nothrow_t;
        }
        pub type new_handler = ::core::option::Option<unsafe extern "C" fn()>;
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt15set_new_handlerPFvvE"]
            pub fn set_new_handler(arg1: root::std::new_handler) -> root::std::new_handler;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt15get_new_handlerv"]
            pub fn get_new_handler() -> root::std::new_handler;
        }
        pub const hardware_destructive_interference_size: usize = 64;
        pub const hardware_constructive_interference_size: usize = 64;
        #[repr(C)]
        #[derive(Debug)]
        pub struct __new_allocator {
            pub _address: u8,
        }
        pub type __new_allocator_value_type<_Tp> = _Tp;
        pub type __new_allocator_size_type = usize;
        pub type __new_allocator_difference_type = isize;
        pub type __new_allocator_pointer<_Tp> = *mut _Tp;
        pub type __new_allocator_const_pointer<_Tp> = *const _Tp;
        pub type __new_allocator_reference<_Tp> = *mut _Tp;
        pub type __new_allocator_const_reference<_Tp> = *const _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __new_allocator_rebind {
            pub _address: u8,
        }
        pub type __new_allocator_propagate_on_container_move_assignment = root::std::true_type;
        pub type __allocator_base = root::std::__new_allocator;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: allocator_open0_void_close0"]
                [::core::mem::size_of::<root::std::allocator>() - 1usize];
            ["Align of template specialization: allocator_open0_void_close0"]
                [::core::mem::align_of::<root::std::allocator>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug)]
        pub struct allocator {
            pub _address: u8,
        }
        pub type allocator_value_type<_Tp> = _Tp;
        pub type allocator_size_type = usize;
        pub type allocator_difference_type = isize;
        pub type allocator_pointer<_Tp> = *mut _Tp;
        pub type allocator_const_pointer<_Tp> = *const _Tp;
        pub type allocator_reference<_Tp> = *mut _Tp;
        pub type allocator_const_reference<_Tp> = *const _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_rebind {
            pub _address: u8,
        }
        pub type allocator_rebind_other = root::std::allocator;
        pub type allocator_propagate_on_container_move_assignment = root::std::true_type;
        pub type allocator_is_always_equal = root::std::true_type;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: allocator_open0_char_close0"]
                [::core::mem::size_of::<root::std::allocator>() - 1usize];
            ["Align of template specialization: allocator_open0_char_close0"]
                [::core::mem::align_of::<root::std::allocator>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: allocator_open0_wchar_t_close0"]
                [::core::mem::size_of::<root::std::allocator>() - 1usize];
            ["Align of template specialization: allocator_open0_wchar_t_close0"]
                [::core::mem::align_of::<root::std::allocator>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __allocator_traits_base {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __allocator_traits_base___rebind {
            pub _address: u8,
        }
        pub type __allocator_traits_base___pointer = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type __allocator_traits_base___c_pointer = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type __allocator_traits_base___v_pointer = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type __allocator_traits_base___cv_pointer = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type __allocator_traits_base___pocca = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type __allocator_traits_base___pocma = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type __allocator_traits_base___pocs = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type __allocator_traits_base___equal = root::std::__type_identity;
        pub type __allocator_traits_base___allocate_hint_t<_Alloc> = _Alloc;
        pub type __allocator_traits_base___construct_t<_Alloc> = _Alloc;
        pub type __allocator_traits_base___new_expr_t<_Tp> = _Tp;
        pub type __allocator_traits_base___destroy_t<_Alloc> = _Alloc;
        pub type __allocator_traits_base___max_size_t<_Alloc> = _Alloc;
        pub type __allocator_traits_base___soccc_t<_Alloc> = _Alloc;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __allocator_traits_base"]
                [::core::mem::size_of::<__allocator_traits_base>() - 1usize];
            ["Alignment of __allocator_traits_base"]
                [::core::mem::align_of::<__allocator_traits_base>() - 1usize];
        };
        pub type __alloc_rebind = root::std::__allocator_traits_base;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_traits {
            pub _address: u8,
        }
        pub type allocator_traits_allocator_type<_Alloc> = _Alloc;
        pub type allocator_traits_value_type = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type allocator_traits_pointer = root::std::__detected_or_t;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_traits__Ptr {
            pub _address: u8,
        }
        pub type allocator_traits__Ptr_type = root::__BindgenOpaqueArray<u8, 0usize>;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_traits__Diff {
            pub _address: u8,
        }
        pub type allocator_traits__Diff_type = root::std::pointer_traits;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_traits__Size {
            pub _address: u8,
        }
        pub type allocator_traits_const_pointer = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type allocator_traits_void_pointer = root::std::allocator_traits__Ptr;
        pub type allocator_traits_const_void_pointer = root::std::allocator_traits__Ptr;
        pub type allocator_traits_difference_type = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type allocator_traits_size_type = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type allocator_traits_propagate_on_container_copy_assignment =
            root::std::__detected_or_t;
        pub type allocator_traits_propagate_on_container_move_assignment =
            root::std::__detected_or_t;
        pub type allocator_traits_propagate_on_container_swap = root::std::__detected_or_t;
        pub type allocator_traits_is_always_equal = root::std::__detected_or_t;
        pub type allocator_traits_rebind_alloc = root::std::__alloc_rebind;
        pub type allocator_traits_rebind_traits = root::std::allocator_traits;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: allocator_traits_open0_allocator_open1_void_close1_close0"] [:: core :: mem :: size_of :: < root :: std :: allocator_traits > () - 1usize] ;
            ["Align of template specialization: allocator_traits_open0_allocator_open1_void_close1_close0"] [:: core :: mem :: align_of :: < root :: std :: allocator_traits > () - 1usize] ;
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_alloc_insertable_impl {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        pub struct __is_copy_insertable {
            pub _address: u8,
        }
        #[repr(C)]
        pub struct __is_move_insertable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_allocator {
            pub _base: root::std::false_type,
        }
        pub type _RequireAllocator = u8;
        pub type _RequireNotAllocator = u8;
        #[repr(C)]
        #[derive(Debug)]
        pub struct _UninitDestroyGuard<_ForwardIterator, _Alloc> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_ForwardIterator>>,
            pub _phantom_1: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Alloc>>,
            pub _M_first: _ForwardIterator,
            pub _M_cur: *mut _ForwardIterator,
            pub _M_alloc: *mut _Alloc,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_bitwise_relocatable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct initializer_list<_E> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_E>>,
            pub _M_array: root::std::initializer_list_iterator<_E>,
            pub _M_len: root::std::initializer_list_size_type,
        }
        pub type initializer_list_value_type<_E> = _E;
        pub type initializer_list_reference<_E> = *const _E;
        pub type initializer_list_const_reference<_E> = *const _E;
        pub type initializer_list_size_type = usize;
        pub type initializer_list_iterator<_E> = *const _E;
        pub type initializer_list_const_iterator<_E> = *const _E;
        #[repr(C)]
        pub struct _Vector_base {
            pub _M_impl: root::std::_Vector_base__Vector_impl,
        }
        pub type _Vector_base__Tp_alloc_type = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type _Vector_base_pointer = root::__BindgenOpaqueArray<u8, 0usize>;
        #[repr(C)]
        pub struct _Vector_base__Vector_impl_data {
            pub _M_start: root::std::_Vector_base_pointer,
            pub _M_finish: root::std::_Vector_base_pointer,
            pub _M_end_of_storage: root::std::_Vector_base_pointer,
        }
        #[repr(C)]
        pub struct _Vector_base__Vector_impl {
            pub _base_1: root::std::_Vector_base__Vector_impl_data,
        }
        pub type _Vector_base_allocator_type<_Alloc> = _Alloc;
        #[repr(C)]
        pub struct vector {
            pub _base: root::std::_Vector_base,
        }
        pub type vector__Base = root::std::_Vector_base;
        pub type vector__Tp_alloc_type = root::std::vector__Base;
        pub type vector__Alloc_traits = root::__gnu_cxx::__alloc_traits;
        pub type vector_value_type<_Tp> = _Tp;
        pub type vector_pointer = root::std::vector__Base;
        pub type vector_const_pointer = root::std::vector__Alloc_traits;
        pub type vector_reference = root::std::vector__Alloc_traits;
        pub type vector_const_reference = root::std::vector__Alloc_traits;
        pub type vector_iterator = root::__gnu_cxx::__normal_iterator<root::std::vector_pointer>;
        pub type vector_const_iterator =
            root::__gnu_cxx::__normal_iterator<root::std::vector_const_pointer>;
        pub type vector_const_reverse_iterator =
            root::std::reverse_iterator<root::std::vector_const_iterator>;
        pub type vector_reverse_iterator = root::std::reverse_iterator<root::std::vector_iterator>;
        pub type vector_size_type = usize;
        pub type vector_difference_type = isize;
        pub type vector_allocator_type<_Alloc> = _Alloc;
        #[repr(C)]
        pub struct vector__Guard_alloc {
            pub _M_storage: root::std::vector_pointer,
            pub _M_len: root::std::vector_size_type,
            pub _M_vect: *mut root::std::vector__Base,
        }
        #[repr(C)]
        pub struct vector__Temporary_value<_Tp> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Tp>>,
            pub _M_this: *mut root::std::vector,
            pub _M_storage: root::std::vector__Temporary_value__Storage<_Tp>,
        }
        #[repr(C)]
        pub union vector__Temporary_value__Storage<_Tp> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Tp>>,
            pub _M_byte: ::core::ffi::c_uchar,
            pub _M_val: _Tp,
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt11_Hash_bytesPKvmm"]
            pub fn _Hash_bytes(
                __ptr: *const ::core::ffi::c_void,
                __len: usize,
                __seed: usize,
            ) -> usize;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt15_Fnv_hash_bytesPKvmm"]
            pub fn _Fnv_hash_bytes(
                __ptr: *const ::core::ffi::c_void,
                __len: usize,
                __seed: usize,
            ) -> usize;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __hash_base {
            pub _address: u8,
        }
        pub type __hash_base_result_type<_Result> = _Result;
        pub type __hash_base_argument_type<_Arg> = _Arg;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __hash_empty_base {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct __hash_not_enabled {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct hash {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_bool__close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_bool__close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_char_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_char_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_signed_char_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_signed_char_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_unsigned_char_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_unsigned_char_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_wchar_t_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_wchar_t_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_char16_t_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_char16_t_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_char32_t_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_char32_t_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_short_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_short_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_int_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_int_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_long_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_long_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_long_long_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_long_long_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_unsigned_short_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_unsigned_short_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_unsigned_int_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_unsigned_int_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_unsigned_long_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_unsigned_long_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_unsigned_long_long_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_unsigned_long_long_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Hash_impl {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of _Hash_impl"][::core::mem::size_of::<_Hash_impl>() - 1usize];
            ["Alignment of _Hash_impl"][::core::mem::align_of::<_Hash_impl>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Fnv_hash_impl {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of _Fnv_hash_impl"][::core::mem::size_of::<_Fnv_hash_impl>() - 1usize];
            ["Alignment of _Fnv_hash_impl"][::core::mem::align_of::<_Fnv_hash_impl>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_float_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_float_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_double_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_double_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_long_double_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_long_double_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_nullptr_t_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_nullptr_t_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_fast_hash {
            pub _base: root::std::true_type,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_fast_hash_open0_hash_open1_long_double_close1_close0"] [:: core :: mem :: size_of :: < root :: std :: __is_fast_hash > () - 1usize] ;
            ["Align of template specialization: __is_fast_hash_open0_hash_open1_long_double_close1_close0"] [:: core :: mem :: align_of :: < root :: std :: __is_fast_hash > () - 1usize] ;
        };
        pub type _Bit_type = ::core::ffi::c_ulong;
        pub const std__S_word_bit: root::std::_bindgen_ty_1 = 64;
        pub type _bindgen_ty_1 = ::core::ffi::c_uint;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Bit_reference {
            pub _M_p: *mut root::std::_Bit_type,
            pub _M_mask: root::std::_Bit_type,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of _Bit_reference"][::core::mem::size_of::<_Bit_reference>() - 16usize];
            ["Alignment of _Bit_reference"][::core::mem::align_of::<_Bit_reference>() - 8usize];
            ["Offset of field: _Bit_reference::_M_p"]
                [::core::mem::offset_of!(_Bit_reference, _M_p) - 0usize];
            ["Offset of field: _Bit_reference::_M_mask"]
                [::core::mem::offset_of!(_Bit_reference, _M_mask) - 8usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Bit_iterator_base {
            pub _M_p: *mut root::std::_Bit_type,
            pub _M_offset: ::core::ffi::c_uint,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of _Bit_iterator_base"][::core::mem::size_of::<_Bit_iterator_base>() - 16usize];
            ["Alignment of _Bit_iterator_base"]
                [::core::mem::align_of::<_Bit_iterator_base>() - 8usize];
            ["Offset of field: _Bit_iterator_base::_M_p"]
                [::core::mem::offset_of!(_Bit_iterator_base, _M_p) - 0usize];
            ["Offset of field: _Bit_iterator_base::_M_offset"]
                [::core::mem::offset_of!(_Bit_iterator_base, _M_offset) - 8usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Bit_iterator {
            pub _base: root::std::_Bit_iterator_base,
        }
        pub type _Bit_iterator_reference = root::std::_Bit_reference;
        pub type _Bit_iterator_pointer = *mut root::std::_Bit_reference;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of _Bit_iterator"][::core::mem::size_of::<_Bit_iterator>() - 16usize];
            ["Alignment of _Bit_iterator"][::core::mem::align_of::<_Bit_iterator>() - 8usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Bit_const_iterator {
            pub _base: root::std::_Bit_iterator_base,
        }
        pub type _Bit_const_iterator_reference = bool;
        pub type _Bit_const_iterator_const_reference = bool;
        pub type _Bit_const_iterator_pointer = *const bool;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of _Bit_const_iterator"]
                [::core::mem::size_of::<_Bit_const_iterator>() - 16usize];
            ["Alignment of _Bit_const_iterator"]
                [::core::mem::align_of::<_Bit_const_iterator>() - 8usize];
        };
        #[repr(C)]
        pub struct _Bvector_base {
            pub _M_impl: root::std::_Bvector_base__Bvector_impl,
        }
        pub type _Bvector_base__Bit_alloc_type = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type _Bvector_base__Bit_alloc_traits = root::__gnu_cxx::__alloc_traits;
        pub type _Bvector_base__Bit_pointer = root::__BindgenOpaqueArray<u8, 0usize>;
        #[repr(C)]
        pub struct _Bvector_base__Bvector_impl_data {
            pub _M_start: root::std::_Bit_iterator,
            pub _M_finish: root::std::_Bit_iterator,
            pub _M_end_of_storage: root::std::_Bvector_base__Bit_pointer,
        }
        #[repr(C)]
        pub struct _Bvector_base__Bvector_impl {
            pub _base_1: root::std::_Bvector_base__Bvector_impl_data,
        }
        pub type _Bvector_base_allocator_type<_Alloc> = _Alloc;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct unary_function {
            pub _address: u8,
        }
        pub type unary_function_argument_type<_Arg> = _Arg;
        pub type unary_function_result_type<_Result> = _Result;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct binary_function {
            pub _address: u8,
        }
        pub type binary_function_first_argument_type<_Arg1> = _Arg1;
        pub type binary_function_second_argument_type<_Arg2> = _Arg2;
        pub type binary_function_result_type<_Result> = _Result;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_transparent {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct plus {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct minus {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct multiplies {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct divides {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct modulus {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct negate {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: plus_open0_void_close0"]
                [::core::mem::size_of::<root::std::plus>() - 1usize];
            ["Align of template specialization: plus_open0_void_close0"]
                [::core::mem::align_of::<root::std::plus>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: minus_open0_void_close0"]
                [::core::mem::size_of::<root::std::minus>() - 1usize];
            ["Align of template specialization: minus_open0_void_close0"]
                [::core::mem::align_of::<root::std::minus>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: multiplies_open0_void_close0"]
                [::core::mem::size_of::<root::std::multiplies>() - 1usize];
            ["Align of template specialization: multiplies_open0_void_close0"]
                [::core::mem::align_of::<root::std::multiplies>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: divides_open0_void_close0"]
                [::core::mem::size_of::<root::std::divides>() - 1usize];
            ["Align of template specialization: divides_open0_void_close0"]
                [::core::mem::align_of::<root::std::divides>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: modulus_open0_void_close0"]
                [::core::mem::size_of::<root::std::modulus>() - 1usize];
            ["Align of template specialization: modulus_open0_void_close0"]
                [::core::mem::align_of::<root::std::modulus>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: negate_open0_void_close0"]
                [::core::mem::size_of::<root::std::negate>() - 1usize];
            ["Align of template specialization: negate_open0_void_close0"]
                [::core::mem::align_of::<root::std::negate>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct equal_to {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct not_equal_to {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct greater {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct less {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct greater_equal {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct less_equal {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: equal_to_open0_void_close0"]
                [::core::mem::size_of::<root::std::equal_to>() - 1usize];
            ["Align of template specialization: equal_to_open0_void_close0"]
                [::core::mem::align_of::<root::std::equal_to>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: not_equal_to_open0_void_close0"]
                [::core::mem::size_of::<root::std::not_equal_to>() - 1usize];
            ["Align of template specialization: not_equal_to_open0_void_close0"]
                [::core::mem::align_of::<root::std::not_equal_to>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: greater_open0_void_close0"]
                [::core::mem::size_of::<root::std::greater>() - 1usize];
            ["Align of template specialization: greater_open0_void_close0"]
                [::core::mem::align_of::<root::std::greater>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: less_open0_void_close0"]
                [::core::mem::size_of::<root::std::less>() - 1usize];
            ["Align of template specialization: less_open0_void_close0"]
                [::core::mem::align_of::<root::std::less>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: greater_equal_open0_void_close0"]
                [::core::mem::size_of::<root::std::greater_equal>() - 1usize];
            ["Align of template specialization: greater_equal_open0_void_close0"]
                [::core::mem::align_of::<root::std::greater_equal>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: less_equal_open0_void_close0"]
                [::core::mem::size_of::<root::std::less_equal>() - 1usize];
            ["Align of template specialization: less_equal_open0_void_close0"]
                [::core::mem::align_of::<root::std::less_equal>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct logical_and {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct logical_or {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct logical_not {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: logical_and_open0_void_close0"]
                [::core::mem::size_of::<root::std::logical_and>() - 1usize];
            ["Align of template specialization: logical_and_open0_void_close0"]
                [::core::mem::align_of::<root::std::logical_and>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: logical_or_open0_void_close0"]
                [::core::mem::size_of::<root::std::logical_or>() - 1usize];
            ["Align of template specialization: logical_or_open0_void_close0"]
                [::core::mem::align_of::<root::std::logical_or>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: logical_not_open0_void_close0"]
                [::core::mem::size_of::<root::std::logical_not>() - 1usize];
            ["Align of template specialization: logical_not_open0_void_close0"]
                [::core::mem::align_of::<root::std::logical_not>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct bit_and {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct bit_or {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct bit_xor {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct bit_not {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: bit_and_open0_void_close0"]
                [::core::mem::size_of::<root::std::bit_and>() - 1usize];
            ["Align of template specialization: bit_and_open0_void_close0"]
                [::core::mem::align_of::<root::std::bit_and>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: bit_or_open0_void_close0"]
                [::core::mem::size_of::<root::std::bit_or>() - 1usize];
            ["Align of template specialization: bit_or_open0_void_close0"]
                [::core::mem::align_of::<root::std::bit_or>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: bit_xor_open0_void_close0"]
                [::core::mem::size_of::<root::std::bit_xor>() - 1usize];
            ["Align of template specialization: bit_xor_open0_void_close0"]
                [::core::mem::align_of::<root::std::bit_xor>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: bit_not_open0_void_close0"]
                [::core::mem::size_of::<root::std::bit_not>() - 1usize];
            ["Align of template specialization: bit_not_open0_void_close0"]
                [::core::mem::align_of::<root::std::bit_not>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct unary_negate<_Predicate> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Predicate>>,
            pub _M_pred: _Predicate,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct binary_negate<_Predicate> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Predicate>>,
            pub _M_pred: _Predicate,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct pointer_to_unary_function<_Arg, _Result> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Arg>>,
            pub _phantom_1: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Result>>,
            pub _M_ptr: ::core::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Result>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct pointer_to_binary_function<_Arg1, _Arg2, _Result> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Arg1>>,
            pub _phantom_1: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Arg2>>,
            pub _phantom_2: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Result>>,
            pub _M_ptr:
                ::core::option::Option<unsafe extern "C" fn(arg1: _Arg1, arg2: _Arg2) -> _Result>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Identity {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Select1st {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Select2nd {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct mem_fun_t<_Ret> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Ret>>,
            pub _M_f: ::core::option::Option<unsafe extern "C" fn() -> _Ret>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct const_mem_fun_t<_Ret> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Ret>>,
            pub _M_f: ::core::option::Option<unsafe extern "C" fn() -> _Ret>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct mem_fun_ref_t<_Ret> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Ret>>,
            pub _M_f: ::core::option::Option<unsafe extern "C" fn() -> _Ret>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct const_mem_fun_ref_t<_Ret> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Ret>>,
            pub _M_f: ::core::option::Option<unsafe extern "C" fn() -> _Ret>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct mem_fun1_t<_Ret, _Arg> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Ret>>,
            pub _phantom_1: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Arg>>,
            pub _M_f: ::core::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct const_mem_fun1_t<_Ret, _Arg> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Ret>>,
            pub _phantom_1: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Arg>>,
            pub _M_f: ::core::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct mem_fun1_ref_t<_Ret, _Arg> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Ret>>,
            pub _phantom_1: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Arg>>,
            pub _M_f: ::core::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct const_mem_fun1_ref_t<_Ret, _Arg> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Ret>>,
            pub _phantom_1: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Arg>>,
            pub _M_f: ::core::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __has_is_transparent {
            pub _address: u8,
        }
        pub type __has_is_transparent_t = root::std::__has_is_transparent;
        #[repr(C)]
        pub struct binder1st<_Operation> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Operation>>,
            pub op: _Operation,
            pub value: root::__BindgenOpaqueArray<u8, 0usize>,
        }
        #[repr(C)]
        pub struct binder2nd<_Operation> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Operation>>,
            pub op: _Operation,
            pub value: root::__BindgenOpaqueArray<u8, 0usize>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Maybe_unary_or_binary_function {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Mem_fn_traits {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Mem_fn_traits_base {
            pub _address: u8,
        }
        pub type _Mem_fn_traits_base___result_type<_Res> = _Res;
        pub type _Mem_fn_traits_base___maybe_type = root::std::_Maybe_unary_or_binary_function;
        pub type _Mem_fn_traits_base___arity = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Maybe_get_result_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Weak_result_type_impl {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Weak_result_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Refwrap_base_arg1 {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Refwrap_base_arg2 {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Reference_wrapper_base {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct reference_wrapper<_Tp> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Tp>>,
            pub _M_data: *mut _Tp,
        }
        pub type reference_wrapper___not_same = u8;
        pub type reference_wrapper_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct valarray {
            pub _address: u8,
        }
        pub type byte = ::core::ffi::c_uchar;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __byte_operand {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_bool__close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_bool__close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_char_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_char_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_signed_char_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_signed_char_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_unsigned_char_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_unsigned_char_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_wchar_t_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_wchar_t_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_char16_t_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_char16_t_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_char32_t_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_char32_t_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_short_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_short_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_unsigned_short_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_unsigned_short_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_int_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_int_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_unsigned_int_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_unsigned_int_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_long_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_long_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_unsigned_long_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_unsigned_long_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_long_long_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_long_long_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_unsigned_long_long_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_unsigned_long_long_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        pub type __byte_op_t = root::std::__byte_operand;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __erased_type {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __erased_type"][::core::mem::size_of::<__erased_type>() - 1usize];
            ["Alignment of __erased_type"][::core::mem::align_of::<__erased_type>() - 1usize];
        };
        pub type __is_erased_or_convertible = root::std::__or_;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_arg_t {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of allocator_arg_t"][::core::mem::size_of::<allocator_arg_t>() - 1usize];
            ["Alignment of allocator_arg_t"][::core::mem::align_of::<allocator_arg_t>() - 1usize];
        };
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt13allocator_arg"]
            pub static allocator_arg: root::std::allocator_arg_t;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __uses_allocator_helper {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct uses_allocator {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __uses_alloc_base {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __uses_alloc_base"][::core::mem::size_of::<__uses_alloc_base>() - 1usize];
            ["Alignment of __uses_alloc_base"]
                [::core::mem::align_of::<__uses_alloc_base>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __uses_alloc0 {
            pub _M_a: root::std::__uses_alloc0__Sink,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __uses_alloc0__Sink {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __uses_alloc0__Sink"][::core::mem::size_of::<__uses_alloc0__Sink>() - 1usize];
            ["Alignment of __uses_alloc0__Sink"]
                [::core::mem::align_of::<__uses_alloc0__Sink>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __uses_alloc0"][::core::mem::size_of::<__uses_alloc0>() - 1usize];
            ["Alignment of __uses_alloc0"][::core::mem::align_of::<__uses_alloc0>() - 1usize];
            ["Offset of field: __uses_alloc0::_M_a"]
                [::core::mem::offset_of!(__uses_alloc0, _M_a) - 0usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __uses_alloc1<_Alloc> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Alloc>>,
            pub _M_a: *const _Alloc,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __uses_alloc2<_Alloc> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Alloc>>,
            pub _M_a: *const _Alloc,
        }
        pub type __uses_alloc_t = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_uses_allocator_predicate {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_uses_allocator_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nothrow_uses_allocator_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_empty_non_tuple {
            pub _address: u8,
        }
        pub type __empty_not_final = root::std::__conditional_t;
        pub type _TupleConstraints___constructible = root::std::__and_;
        pub type _TupleConstraints___convertible = root::std::__and_;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct tuple {
            pub _address: u8,
        }
        pub type tuple__Inherited = u8;
        pub type tuple__TCC = u8;
        pub type tuple__ImplicitDefaultCtor = root::std::__enable_if_t;
        pub type tuple__ExplicitDefaultCtor = root::std::__enable_if_t;
        pub type tuple__ImplicitCtor = root::std::__enable_if_t;
        pub type tuple__ExplicitCtor = root::std::__enable_if_t;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct tuple__UseOtherCtor {
            pub _base: root::std::false_type,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: tuple_open0_close0"]
                [::core::mem::size_of::<root::std::tuple>() - 1usize];
            ["Align of template specialization: tuple_open0_close0"]
                [::core::mem::align_of::<root::std::tuple>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __do_make_tuple {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __make_tuple {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __combine_tuples {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __combine_tuples_open0_close0"]
                [::core::mem::size_of::<root::std::__combine_tuples>() - 1usize];
            ["Align of template specialization: __combine_tuples_open0_close0"]
                [::core::mem::align_of::<root::std::__combine_tuples>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __tuple_cat_result {
            pub _address: u8,
        }
        pub type __tuple_cat_result___type = root::std::__combine_tuples;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __make_1st_indices {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_1st_indices_open0_close0"]
                [::core::mem::size_of::<root::std::__make_1st_indices>() - 1usize];
            ["Align of template specialization: __make_1st_indices_open0_close0"]
                [::core::mem::align_of::<root::std::__make_1st_indices>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __tuple_concater {
            pub _address: u8,
        }
        pub mod pmr {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            pub struct memory_resource__bindgen_vtable(::core::ffi::c_void);
            #[repr(C)]
            #[derive(Debug)]
            pub struct memory_resource {
                pub vtable_: *const memory_resource__bindgen_vtable,
            }
            pub const memory_resource__S_max_align: usize = 16;
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of memory_resource"][::core::mem::size_of::<memory_resource>() - 8usize];
                ["Alignment of memory_resource"]
                    [::core::mem::align_of::<memory_resource>() - 8usize];
            };
            unsafe extern "C" {
                #[link_name = "\u{1}_ZNSt3pmr15memory_resourceD1Ev"]
                pub fn memory_resource_memory_resource_destructor(
                    this: *mut root::std::pmr::memory_resource,
                );
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct polymorphic_allocator {
                pub _M_resource: *mut root::std::pmr::memory_resource,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct polymorphic_allocator___not_pair {
                pub _address: u8,
            }
            pub type polymorphic_allocator___not_pair_type = ::core::ffi::c_void;
            pub type polymorphic_allocator_value_type<_Tp> = _Tp;
            pub type polymorphic_allocator___uses_alloc1_ =
                root::std::__uses_alloc1<root::std::pmr::polymorphic_allocator>;
            pub type polymorphic_allocator___uses_alloc2_ =
                root::std::__uses_alloc2<root::std::pmr::polymorphic_allocator>;
            pub type vector = root::std::vector;
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: allocator_open0_void_close0"]
                [::core::mem::size_of::<root::std::allocator>() - 1usize];
            ["Align of template specialization: allocator_open0_void_close0"]
                [::core::mem::align_of::<root::std::allocator>() - 1usize];
        };
    }
    pub mod __gnu_cxx {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub type __conditional_type___type<_Iftrue> = _Iftrue;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __add_unsigned {
            pub _address: u8,
        }
        pub type __add_unsigned___if_type = u8;
        pub type __add_unsigned___type = root::__gnu_cxx::__add_unsigned___if_type;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __add_unsigned_open0_char_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
            ["Align of template specialization: __add_unsigned_open0_char_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __add_unsigned_open0_signed_char_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
            ["Align of template specialization: __add_unsigned_open0_signed_char_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __add_unsigned_open0_short_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
            ["Align of template specialization: __add_unsigned_open0_short_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __add_unsigned_open0_int_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
            ["Align of template specialization: __add_unsigned_open0_int_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __add_unsigned_open0_long_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
            ["Align of template specialization: __add_unsigned_open0_long_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __add_unsigned_open0_long_long_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
            ["Align of template specialization: __add_unsigned_open0_long_long_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __remove_unsigned {
            pub _address: u8,
        }
        pub type __remove_unsigned___if_type = u8;
        pub type __remove_unsigned___type = root::__gnu_cxx::__remove_unsigned___if_type;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __remove_unsigned_open0_char_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
            ["Align of template specialization: __remove_unsigned_open0_char_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __remove_unsigned_open0_unsigned_char_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
            ["Align of template specialization: __remove_unsigned_open0_unsigned_char_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __remove_unsigned_open0_unsigned_short_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
            ["Align of template specialization: __remove_unsigned_open0_unsigned_short_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __remove_unsigned_open0_unsigned_int_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
            ["Align of template specialization: __remove_unsigned_open0_unsigned_int_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __remove_unsigned_open0_unsigned_long_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
            ["Align of template specialization: __remove_unsigned_open0_unsigned_long_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __remove_unsigned_open0_unsigned_long_long_close0"] [:: core :: mem :: size_of :: < root :: __gnu_cxx :: __remove_unsigned > () - 1usize] ;
            ["Align of template specialization: __remove_unsigned_open0_unsigned_long_long_close0"] [:: core :: mem :: align_of :: < root :: __gnu_cxx :: __remove_unsigned > () - 1usize] ;
        };
        pub type __promote___type = f64;
        pub type __promoted_t = u8;
        pub type __promote_2 = u8;
        pub type __promote_3 = u8;
        pub type __promote_4 = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_integer_nonstrict {
            pub _address: u8,
        }
        pub const __is_integer_nonstrict___width:
            root::__gnu_cxx::__is_integer_nonstrict__bindgen_ty_1 = 0;
        pub type __is_integer_nonstrict__bindgen_ty_1 = i32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __numeric_traits_integer {
            pub _address: u8,
        }
        unsafe extern "C" {
            pub static __min: _Value;
        }
        unsafe extern "C" {
            pub static __max: _Value;
        }
        unsafe extern "C" {
            pub static __is_signed: bool;
        }
        unsafe extern "C" {
            pub static __digits: ::core::ffi::c_int;
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_nonstrict_open0___int128_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__is_integer_nonstrict>() - 1usize];
            ["Align of template specialization: __is_integer_nonstrict_open0___int128_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__is_integer_nonstrict>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_nonstrict_open0_unsigned___int128_close0"] [:: core :: mem :: size_of :: < root :: __gnu_cxx :: __is_integer_nonstrict > () - 1usize] ;
            ["Align of template specialization: __is_integer_nonstrict_open0_unsigned___int128_close0"] [:: core :: mem :: align_of :: < root :: __gnu_cxx :: __is_integer_nonstrict > () - 1usize] ;
        };
        pub type __int_traits = root::__gnu_cxx::__numeric_traits_integer;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __numeric_traits_floating {
            pub _address: u8,
        }
        unsafe extern "C" {
            pub static __max_digits10: ::core::ffi::c_int;
        }
        unsafe extern "C" {
            pub static __digits10: ::core::ffi::c_int;
        }
        unsafe extern "C" {
            pub static __max_exponent10: ::core::ffi::c_int;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __numeric_traits {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __numeric_traits_open0_float_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__numeric_traits>() - 1usize];
            ["Align of template specialization: __numeric_traits_open0_float_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__numeric_traits>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __numeric_traits_open0_double_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__numeric_traits>() - 1usize];
            ["Align of template specialization: __numeric_traits_open0_double_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__numeric_traits>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __numeric_traits_open0_long_double_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__numeric_traits>() - 1usize];
            ["Align of template specialization: __numeric_traits_open0_long_double_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__numeric_traits>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __normal_iterator<_Iterator> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Iterator>>,
            pub _M_current: _Iterator,
        }
        pub type __normal_iterator___traits_type = root::std::iterator_traits;
        pub type __normal_iterator___convertible_from = root::std::__enable_if_t;
        pub type __normal_iterator_iterator_type<_Iterator> = _Iterator;
        pub type __normal_iterator_iterator_category =
            root::__gnu_cxx::__normal_iterator___traits_type;
        pub type __normal_iterator_value_type = root::__gnu_cxx::__normal_iterator___traits_type;
        pub type __normal_iterator_difference_type =
            root::__gnu_cxx::__normal_iterator___traits_type;
        pub type __normal_iterator_reference = root::__gnu_cxx::__normal_iterator___traits_type;
        pub type __normal_iterator_pointer = root::__gnu_cxx::__normal_iterator___traits_type;
        pub mod __ops {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_less_iter {
                pub _address: u8,
            }
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of _Iter_less_iter"][::core::mem::size_of::<_Iter_less_iter>() - 1usize];
                ["Alignment of _Iter_less_iter"]
                    [::core::mem::align_of::<_Iter_less_iter>() - 1usize];
            };
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_less_val {
                pub _address: u8,
            }
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of _Iter_less_val"][::core::mem::size_of::<_Iter_less_val>() - 1usize];
                ["Alignment of _Iter_less_val"][::core::mem::align_of::<_Iter_less_val>() - 1usize];
            };
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Val_less_iter {
                pub _address: u8,
            }
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of _Val_less_iter"][::core::mem::size_of::<_Val_less_iter>() - 1usize];
                ["Alignment of _Val_less_iter"][::core::mem::align_of::<_Val_less_iter>() - 1usize];
            };
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_equal_to_iter {
                pub _address: u8,
            }
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of _Iter_equal_to_iter"]
                    [::core::mem::size_of::<_Iter_equal_to_iter>() - 1usize];
                ["Alignment of _Iter_equal_to_iter"]
                    [::core::mem::align_of::<_Iter_equal_to_iter>() - 1usize];
            };
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_equal_to_val {
                pub _address: u8,
            }
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of _Iter_equal_to_val"]
                    [::core::mem::size_of::<_Iter_equal_to_val>() - 1usize];
                ["Alignment of _Iter_equal_to_val"]
                    [::core::mem::align_of::<_Iter_equal_to_val>() - 1usize];
            };
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_comp_iter<_Compare> {
                pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Compare>>,
                pub _M_comp: _Compare,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_comp_val<_Compare> {
                pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Compare>>,
                pub _M_comp: _Compare,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Val_comp_iter<_Compare> {
                pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Compare>>,
                pub _M_comp: _Compare,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_equals_val<_Value> {
                pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Value>>,
                pub _M_value: *mut _Value,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_equals_iter<_Iterator1> {
                pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Iterator1>>,
                pub _M_it1: _Iterator1,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_pred<_Predicate> {
                pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Predicate>>,
                pub _M_pred: _Predicate,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_comp_to_val<_Compare, _Value> {
                pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Compare>>,
                pub _phantom_1: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Value>>,
                pub _M_comp: _Compare,
                pub _M_value: *mut _Value,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_comp_to_iter<_Compare, _Iterator1> {
                pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Compare>>,
                pub _phantom_1: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Iterator1>>,
                pub _M_comp: _Compare,
                pub _M_it1: _Iterator1,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_negate<_Predicate> {
                pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Predicate>>,
                pub _M_pred: _Predicate,
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __alloc_traits {
            pub _address: u8,
        }
        pub type __alloc_traits_allocator_type<_Alloc> = _Alloc;
        pub type __alloc_traits__Base_type = root::std::allocator_traits;
        pub type __alloc_traits_value_type = root::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_pointer = root::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_const_pointer = root::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_size_type = root::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_difference_type = root::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_reference = *mut root::__gnu_cxx::__alloc_traits_value_type;
        pub type __alloc_traits_const_reference = *const root::__gnu_cxx::__alloc_traits_value_type;
        pub type __alloc_traits___is_custom_pointer = root::std::__and_;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __alloc_traits_rebind {
            pub _address: u8,
        }
        pub type __alloc_traits_rebind_other = root::__gnu_cxx::__alloc_traits__Base_type;
    }
    pub mod __gnu_debug {
        #[allow(unused_imports)]
        use self::super::super::root;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Safe_iterator {
            pub _address: u8,
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_1 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_2 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_3 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_4 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_5 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_6 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_7 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_8 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_9 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_10 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_11 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_12 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_13 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_14 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_15 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_16 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_17 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_18 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_19 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_20 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_21 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_22 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_23 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_24 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_25 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_26 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_27 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_28 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_29 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_30 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_31 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_32 {
        pub _address: u8,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: iterator_open0_output_iterator_tag_void_void_void_void_close0"] [:: core :: mem :: size_of :: < root :: std :: iterator > () - 1usize] ;
        ["Align of template specialization: iterator_open0_output_iterator_tag_void_void_void_void_close0"] [:: core :: mem :: align_of :: < root :: std :: iterator > () - 1usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: iterator_open0_output_iterator_tag_void_void_void_void_close0"] [:: core :: mem :: size_of :: < root :: std :: iterator > () - 1usize] ;
        ["Align of template specialization: iterator_open0_output_iterator_tag_void_void_void_void_close0"] [:: core :: mem :: align_of :: < root :: std :: iterator > () - 1usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: iterator_open0_output_iterator_tag_void_void_void_void_close0"] [:: core :: mem :: size_of :: < root :: std :: iterator > () - 1usize] ;
        ["Align of template specialization: iterator_open0_output_iterator_tag_void_void_void_void_close0"] [:: core :: mem :: align_of :: < root :: std :: iterator > () - 1usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_void_close0"]
            [::core::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_void_close0"]
            [::core::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: hash_open0_long_double_close0"]
            [::core::mem::size_of::<root::std::hash>() - 1usize];
        ["Align of template specialization: hash_open0_long_double_close0"]
            [::core::mem::align_of::<root::std::hash>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: iterator_open0_random_access_iterator_tag_bool__long_ptr_bool_ref_bool_close0"] [:: core :: mem :: size_of :: < root :: std :: iterator > () - 1usize] ;
        ["Align of template specialization: iterator_open0_random_access_iterator_tag_bool__long_ptr_bool_ref_bool_close0"] [:: core :: mem :: align_of :: < root :: std :: iterator > () - 1usize] ;
    };
    pub type iterator = root::std::_Bit_iterator;
    pub type size_type = usize;
    pub type iterator = root::std::_Bit_iterator;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_33 {
        pub _address: u8,
    }
}
