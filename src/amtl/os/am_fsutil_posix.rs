/* automatically generated by rust-bindgen 0.71.1 */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    pub const POSIX: u32 = 1;
    pub const LINUX: u32 = 1;
    pub const _LINUX: u32 = 1;
    pub const COMPILER_GCC: u32 = 1;
    pub const _SYS_STAT_H: u32 = 1;
    pub const _FEATURES_H: u32 = 1;
    pub const _ISOC95_SOURCE: u32 = 1;
    pub const _ISOC99_SOURCE: u32 = 1;
    pub const _ISOC11_SOURCE: u32 = 1;
    pub const _ISOC23_SOURCE: u32 = 1;
    pub const _ISOC2Y_SOURCE: u32 = 1;
    pub const _POSIX_SOURCE: u32 = 1;
    pub const _POSIX_C_SOURCE: u32 = 200809;
    pub const _XOPEN_SOURCE: u32 = 700;
    pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
    pub const _LARGEFILE64_SOURCE: u32 = 1;
    pub const _DEFAULT_SOURCE: u32 = 1;
    pub const _ATFILE_SOURCE: u32 = 1;
    pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
    pub const __GLIBC_USE_ISOC2Y: u32 = 1;
    pub const __GLIBC_USE_ISOC23: u32 = 1;
    pub const __USE_ISOC11: u32 = 1;
    pub const __USE_ISOC99: u32 = 1;
    pub const __USE_ISOC95: u32 = 1;
    pub const __USE_ISOCXX11: u32 = 1;
    pub const __USE_POSIX: u32 = 1;
    pub const __USE_POSIX2: u32 = 1;
    pub const __USE_POSIX199309: u32 = 1;
    pub const __USE_POSIX199506: u32 = 1;
    pub const __USE_XOPEN2K: u32 = 1;
    pub const __USE_XOPEN2K8: u32 = 1;
    pub const __USE_XOPEN: u32 = 1;
    pub const __USE_XOPEN_EXTENDED: u32 = 1;
    pub const __USE_UNIX98: u32 = 1;
    pub const _LARGEFILE_SOURCE: u32 = 1;
    pub const __USE_XOPEN2K8XSI: u32 = 1;
    pub const __USE_XOPEN2KXSI: u32 = 1;
    pub const __USE_LARGEFILE: u32 = 1;
    pub const __USE_LARGEFILE64: u32 = 1;
    pub const __WORDSIZE: u32 = 64;
    pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
    pub const __SYSCALL_WORDSIZE: u32 = 64;
    pub const __TIMESIZE: u32 = 64;
    pub const __USE_TIME_BITS64: u32 = 1;
    pub const __USE_MISC: u32 = 1;
    pub const __USE_ATFILE: u32 = 1;
    pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
    pub const __USE_GNU: u32 = 1;
    pub const __USE_FORTIFY_LEVEL: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
    pub const __GLIBC_USE_C23_STRTOL: u32 = 1;
    pub const _STDC_PREDEF_H: u32 = 1;
    pub const __STDC_IEC_559__: u32 = 1;
    pub const __STDC_IEC_60559_BFP__: u32 = 201404;
    pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
    pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
    pub const __STDC_ISO_10646__: u32 = 201706;
    pub const __GNU_LIBRARY__: u32 = 6;
    pub const __GLIBC__: u32 = 2;
    pub const __GLIBC_MINOR__: u32 = 41;
    pub const _SYS_CDEFS_H: u32 = 1;
    pub const __glibc_c99_flexarr_available: u32 = 1;
    pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
    pub const __HAVE_GENERIC_SELECTION: u32 = 0;
    pub const _BITS_TYPES_H: u32 = 1;
    pub const _BITS_TYPESIZES_H: u32 = 1;
    pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
    pub const __INO_T_MATCHES_INO64_T: u32 = 1;
    pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
    pub const __STATFS_MATCHES_STATFS64: u32 = 1;
    pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
    pub const __FD_SETSIZE: u32 = 1024;
    pub const _BITS_TIME64_H: u32 = 1;
    pub const _STRUCT_TIMESPEC: u32 = 1;
    pub const _BITS_ENDIAN_H: u32 = 1;
    pub const __LITTLE_ENDIAN: u32 = 1234;
    pub const __BIG_ENDIAN: u32 = 4321;
    pub const __PDP_ENDIAN: u32 = 3412;
    pub const _BITS_ENDIANNESS_H: u32 = 1;
    pub const __BYTE_ORDER: u32 = 1234;
    pub const __FLOAT_WORD_ORDER: u32 = 1234;
    pub const __time_t_defined: u32 = 1;
    pub const _BITS_STAT_H: u32 = 1;
    pub const _BITS_STRUCT_STAT_H: u32 = 1;
    pub const __S_IFMT: u32 = 61440;
    pub const __S_IFDIR: u32 = 16384;
    pub const __S_IFCHR: u32 = 8192;
    pub const __S_IFBLK: u32 = 24576;
    pub const __S_IFREG: u32 = 32768;
    pub const __S_IFIFO: u32 = 4096;
    pub const __S_IFLNK: u32 = 40960;
    pub const __S_IFSOCK: u32 = 49152;
    pub const __S_ISUID: u32 = 2048;
    pub const __S_ISGID: u32 = 1024;
    pub const __S_ISVTX: u32 = 512;
    pub const __S_IREAD: u32 = 256;
    pub const __S_IWRITE: u32 = 128;
    pub const __S_IEXEC: u32 = 64;
    pub const UTIME_NOW: u32 = 1073741823;
    pub const UTIME_OMIT: u32 = 1073741822;
    pub const S_IFMT: u32 = 61440;
    pub const S_IFDIR: u32 = 16384;
    pub const S_IFCHR: u32 = 8192;
    pub const S_IFBLK: u32 = 24576;
    pub const S_IFREG: u32 = 32768;
    pub const S_IFIFO: u32 = 4096;
    pub const S_IFLNK: u32 = 40960;
    pub const S_IFSOCK: u32 = 49152;
    pub const S_ISUID: u32 = 2048;
    pub const S_ISGID: u32 = 1024;
    pub const S_ISVTX: u32 = 512;
    pub const S_IRUSR: u32 = 256;
    pub const S_IWUSR: u32 = 128;
    pub const S_IXUSR: u32 = 64;
    pub const S_IRWXU: u32 = 448;
    pub const S_IREAD: u32 = 256;
    pub const S_IWRITE: u32 = 128;
    pub const S_IEXEC: u32 = 64;
    pub const S_IRGRP: u32 = 32;
    pub const S_IWGRP: u32 = 16;
    pub const S_IXGRP: u32 = 8;
    pub const S_IRWXG: u32 = 56;
    pub const S_IROTH: u32 = 4;
    pub const S_IWOTH: u32 = 2;
    pub const S_IXOTH: u32 = 1;
    pub const S_IRWXO: u32 = 7;
    pub const ACCESSPERMS: u32 = 511;
    pub const ALLPERMS: u32 = 4095;
    pub const DEFFILEMODE: u32 = 438;
    pub const S_BLKSIZE: u32 = 512;
    pub const __BITS_PER_LONG: u32 = 64;
    pub const __BITS_PER_LONG_LONG: u32 = 64;
    pub const STATX_TYPE: u32 = 1;
    pub const STATX_MODE: u32 = 2;
    pub const STATX_NLINK: u32 = 4;
    pub const STATX_UID: u32 = 8;
    pub const STATX_GID: u32 = 16;
    pub const STATX_ATIME: u32 = 32;
    pub const STATX_MTIME: u32 = 64;
    pub const STATX_CTIME: u32 = 128;
    pub const STATX_INO: u32 = 256;
    pub const STATX_SIZE: u32 = 512;
    pub const STATX_BLOCKS: u32 = 1024;
    pub const STATX_BASIC_STATS: u32 = 2047;
    pub const STATX_BTIME: u32 = 2048;
    pub const STATX_MNT_ID: u32 = 4096;
    pub const STATX_DIOALIGN: u32 = 8192;
    pub const STATX_MNT_ID_UNIQUE: u32 = 16384;
    pub const STATX_SUBVOL: u32 = 32768;
    pub const STATX_WRITE_ATOMIC: u32 = 65536;
    pub const STATX_DIO_READ_ALIGN: u32 = 131072;
    pub const STATX__RESERVED: u32 = 2147483648;
    pub const STATX_ALL: u32 = 4095;
    pub const STATX_ATTR_COMPRESSED: u32 = 4;
    pub const STATX_ATTR_IMMUTABLE: u32 = 16;
    pub const STATX_ATTR_APPEND: u32 = 32;
    pub const STATX_ATTR_NODUMP: u32 = 64;
    pub const STATX_ATTR_ENCRYPTED: u32 = 2048;
    pub const STATX_ATTR_AUTOMOUNT: u32 = 4096;
    pub const STATX_ATTR_MOUNT_ROOT: u32 = 8192;
    pub const STATX_ATTR_VERITY: u32 = 1048576;
    pub const STATX_ATTR_DAX: u32 = 2097152;
    pub const STATX_ATTR_WRITE_ATOMIC: u32 = 4194304;
    pub const __statx_timestamp_defined: u32 = 1;
    pub const __statx_defined: u32 = 1;
    pub const _SYS_TYPES_H: u32 = 1;
    pub const __clock_t_defined: u32 = 1;
    pub const __clockid_t_defined: u32 = 1;
    pub const __timer_t_defined: u32 = 1;
    pub const _BITS_STDINT_INTN_H: u32 = 1;
    pub const __BIT_TYPES_DEFINED__: u32 = 1;
    pub const _ENDIAN_H: u32 = 1;
    pub const LITTLE_ENDIAN: u32 = 1234;
    pub const BIG_ENDIAN: u32 = 4321;
    pub const PDP_ENDIAN: u32 = 3412;
    pub const BYTE_ORDER: u32 = 1234;
    pub const _BITS_BYTESWAP_H: u32 = 1;
    pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
    pub const _SYS_SELECT_H: u32 = 1;
    pub const __sigset_t_defined: u32 = 1;
    pub const __timeval_defined: u32 = 1;
    pub const FD_SETSIZE: u32 = 1024;
    pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
    pub const _THREAD_SHARED_TYPES_H: u32 = 1;
    pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
    pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
    pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
    pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
    pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
    pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
    pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
    pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
    pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
    pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
    pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
    pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
    pub const __have_pthread_attr_t: u32 = 1;
    pub type __u_char = ::core::ffi::c_uchar;
    pub type __u_short = ::core::ffi::c_ushort;
    pub type __u_int = ::core::ffi::c_uint;
    pub type __u_long = ::core::ffi::c_ulong;
    pub type __int8_t = ::core::ffi::c_schar;
    pub type __uint8_t = ::core::ffi::c_uchar;
    pub type __int16_t = ::core::ffi::c_short;
    pub type __uint16_t = ::core::ffi::c_ushort;
    pub type __int32_t = ::core::ffi::c_int;
    pub type __uint32_t = ::core::ffi::c_uint;
    pub type __int64_t = ::core::ffi::c_long;
    pub type __uint64_t = ::core::ffi::c_ulong;
    pub type __int_least8_t = root::__int8_t;
    pub type __uint_least8_t = root::__uint8_t;
    pub type __int_least16_t = root::__int16_t;
    pub type __uint_least16_t = root::__uint16_t;
    pub type __int_least32_t = root::__int32_t;
    pub type __uint_least32_t = root::__uint32_t;
    pub type __int_least64_t = root::__int64_t;
    pub type __uint_least64_t = root::__uint64_t;
    pub type __quad_t = ::core::ffi::c_long;
    pub type __u_quad_t = ::core::ffi::c_ulong;
    pub type __intmax_t = ::core::ffi::c_long;
    pub type __uintmax_t = ::core::ffi::c_ulong;
    pub type __dev_t = ::core::ffi::c_ulong;
    pub type __uid_t = ::core::ffi::c_uint;
    pub type __gid_t = ::core::ffi::c_uint;
    pub type __ino_t = ::core::ffi::c_ulong;
    pub type __ino64_t = ::core::ffi::c_ulong;
    pub type __mode_t = ::core::ffi::c_uint;
    pub type __nlink_t = ::core::ffi::c_ulong;
    pub type __off_t = ::core::ffi::c_long;
    pub type __off64_t = ::core::ffi::c_long;
    pub type __pid_t = ::core::ffi::c_int;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __fsid_t {
        pub __val: [::core::ffi::c_int; 2usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __fsid_t"][::core::mem::size_of::<__fsid_t>() - 8usize];
        ["Alignment of __fsid_t"][::core::mem::align_of::<__fsid_t>() - 4usize];
        ["Offset of field: __fsid_t::__val"][::core::mem::offset_of!(__fsid_t, __val) - 0usize];
    };
    pub type __clock_t = ::core::ffi::c_long;
    pub type __rlim_t = ::core::ffi::c_ulong;
    pub type __rlim64_t = ::core::ffi::c_ulong;
    pub type __id_t = ::core::ffi::c_uint;
    pub type __time_t = ::core::ffi::c_long;
    pub type __useconds_t = ::core::ffi::c_uint;
    pub type __suseconds_t = ::core::ffi::c_long;
    pub type __suseconds64_t = ::core::ffi::c_long;
    pub type __daddr_t = ::core::ffi::c_int;
    pub type __key_t = ::core::ffi::c_int;
    pub type __clockid_t = ::core::ffi::c_int;
    pub type __timer_t = *mut ::core::ffi::c_void;
    pub type __blksize_t = ::core::ffi::c_long;
    pub type __blkcnt_t = ::core::ffi::c_long;
    pub type __blkcnt64_t = ::core::ffi::c_long;
    pub type __fsblkcnt_t = ::core::ffi::c_ulong;
    pub type __fsblkcnt64_t = ::core::ffi::c_ulong;
    pub type __fsfilcnt_t = ::core::ffi::c_ulong;
    pub type __fsfilcnt64_t = ::core::ffi::c_ulong;
    pub type __fsword_t = ::core::ffi::c_long;
    pub type __ssize_t = ::core::ffi::c_long;
    pub type __syscall_slong_t = ::core::ffi::c_long;
    pub type __syscall_ulong_t = ::core::ffi::c_ulong;
    pub type __loff_t = root::__off64_t;
    pub type __caddr_t = *mut ::core::ffi::c_char;
    pub type __intptr_t = ::core::ffi::c_long;
    pub type __socklen_t = ::core::ffi::c_uint;
    pub type __sig_atomic_t = ::core::ffi::c_int;
    pub type time_t = root::__time_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct timespec {
        pub tv_sec: root::__time_t,
        pub tv_nsec: root::__syscall_slong_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of timespec"][::core::mem::size_of::<timespec>() - 16usize];
        ["Alignment of timespec"][::core::mem::align_of::<timespec>() - 8usize];
        ["Offset of field: timespec::tv_sec"][::core::mem::offset_of!(timespec, tv_sec) - 0usize];
        ["Offset of field: timespec::tv_nsec"][::core::mem::offset_of!(timespec, tv_nsec) - 8usize];
    };
    pub type dev_t = root::__dev_t;
    pub type gid_t = root::__gid_t;
    pub type ino_t = root::__ino_t;
    pub type mode_t = root::__mode_t;
    pub type nlink_t = root::__nlink_t;
    pub type off_t = root::__off_t;
    pub type uid_t = root::__uid_t;
    pub type blkcnt_t = root::__blkcnt_t;
    pub type blksize_t = root::__blksize_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct stat {
        pub st_dev: root::__dev_t,
        pub st_ino: root::__ino_t,
        pub st_nlink: root::__nlink_t,
        pub st_mode: root::__mode_t,
        pub st_uid: root::__uid_t,
        pub st_gid: root::__gid_t,
        pub __pad0: ::core::ffi::c_int,
        pub st_rdev: root::__dev_t,
        pub st_size: root::__off_t,
        pub st_blksize: root::__blksize_t,
        pub st_blocks: root::__blkcnt_t,
        pub st_atim: root::timespec,
        pub st_mtim: root::timespec,
        pub st_ctim: root::timespec,
        pub __glibc_reserved: [root::__syscall_slong_t; 3usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of stat"][::core::mem::size_of::<stat>() - 144usize];
        ["Alignment of stat"][::core::mem::align_of::<stat>() - 8usize];
        ["Offset of field: stat::st_dev"][::core::mem::offset_of!(stat, st_dev) - 0usize];
        ["Offset of field: stat::st_ino"][::core::mem::offset_of!(stat, st_ino) - 8usize];
        ["Offset of field: stat::st_nlink"][::core::mem::offset_of!(stat, st_nlink) - 16usize];
        ["Offset of field: stat::st_mode"][::core::mem::offset_of!(stat, st_mode) - 24usize];
        ["Offset of field: stat::st_uid"][::core::mem::offset_of!(stat, st_uid) - 28usize];
        ["Offset of field: stat::st_gid"][::core::mem::offset_of!(stat, st_gid) - 32usize];
        ["Offset of field: stat::__pad0"][::core::mem::offset_of!(stat, __pad0) - 36usize];
        ["Offset of field: stat::st_rdev"][::core::mem::offset_of!(stat, st_rdev) - 40usize];
        ["Offset of field: stat::st_size"][::core::mem::offset_of!(stat, st_size) - 48usize];
        ["Offset of field: stat::st_blksize"][::core::mem::offset_of!(stat, st_blksize) - 56usize];
        ["Offset of field: stat::st_blocks"][::core::mem::offset_of!(stat, st_blocks) - 64usize];
        ["Offset of field: stat::st_atim"][::core::mem::offset_of!(stat, st_atim) - 72usize];
        ["Offset of field: stat::st_mtim"][::core::mem::offset_of!(stat, st_mtim) - 88usize];
        ["Offset of field: stat::st_ctim"][::core::mem::offset_of!(stat, st_ctim) - 104usize];
        ["Offset of field: stat::__glibc_reserved"]
            [::core::mem::offset_of!(stat, __glibc_reserved) - 120usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct stat64 {
        pub st_dev: root::__dev_t,
        pub st_ino: root::__ino64_t,
        pub st_nlink: root::__nlink_t,
        pub st_mode: root::__mode_t,
        pub st_uid: root::__uid_t,
        pub st_gid: root::__gid_t,
        pub __pad0: ::core::ffi::c_int,
        pub st_rdev: root::__dev_t,
        pub st_size: root::__off_t,
        pub st_blksize: root::__blksize_t,
        pub st_blocks: root::__blkcnt64_t,
        pub st_atim: root::timespec,
        pub st_mtim: root::timespec,
        pub st_ctim: root::timespec,
        pub __glibc_reserved: [root::__syscall_slong_t; 3usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of stat64"][::core::mem::size_of::<stat64>() - 144usize];
        ["Alignment of stat64"][::core::mem::align_of::<stat64>() - 8usize];
        ["Offset of field: stat64::st_dev"][::core::mem::offset_of!(stat64, st_dev) - 0usize];
        ["Offset of field: stat64::st_ino"][::core::mem::offset_of!(stat64, st_ino) - 8usize];
        ["Offset of field: stat64::st_nlink"][::core::mem::offset_of!(stat64, st_nlink) - 16usize];
        ["Offset of field: stat64::st_mode"][::core::mem::offset_of!(stat64, st_mode) - 24usize];
        ["Offset of field: stat64::st_uid"][::core::mem::offset_of!(stat64, st_uid) - 28usize];
        ["Offset of field: stat64::st_gid"][::core::mem::offset_of!(stat64, st_gid) - 32usize];
        ["Offset of field: stat64::__pad0"][::core::mem::offset_of!(stat64, __pad0) - 36usize];
        ["Offset of field: stat64::st_rdev"][::core::mem::offset_of!(stat64, st_rdev) - 40usize];
        ["Offset of field: stat64::st_size"][::core::mem::offset_of!(stat64, st_size) - 48usize];
        ["Offset of field: stat64::st_blksize"]
            [::core::mem::offset_of!(stat64, st_blksize) - 56usize];
        ["Offset of field: stat64::st_blocks"]
            [::core::mem::offset_of!(stat64, st_blocks) - 64usize];
        ["Offset of field: stat64::st_atim"][::core::mem::offset_of!(stat64, st_atim) - 72usize];
        ["Offset of field: stat64::st_mtim"][::core::mem::offset_of!(stat64, st_mtim) - 88usize];
        ["Offset of field: stat64::st_ctim"][::core::mem::offset_of!(stat64, st_ctim) - 104usize];
        ["Offset of field: stat64::__glibc_reserved"]
            [::core::mem::offset_of!(stat64, __glibc_reserved) - 120usize];
    };
    unsafe extern "C" {
        pub fn stat(
            __file: *const ::core::ffi::c_char,
            __buf: *mut root::stat,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fstat(__fd: ::core::ffi::c_int, __buf: *mut root::stat) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn stat64(
            __file: *const ::core::ffi::c_char,
            __buf: *mut root::stat64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fstat64(__fd: ::core::ffi::c_int, __buf: *mut root::stat64) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fstatat(
            __fd: ::core::ffi::c_int,
            __file: *const ::core::ffi::c_char,
            __buf: *mut root::stat,
            __flag: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fstatat64(
            __fd: ::core::ffi::c_int,
            __file: *const ::core::ffi::c_char,
            __buf: *mut root::stat64,
            __flag: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn lstat(
            __file: *const ::core::ffi::c_char,
            __buf: *mut root::stat,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn lstat64(
            __file: *const ::core::ffi::c_char,
            __buf: *mut root::stat64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn chmod(
            __file: *const ::core::ffi::c_char,
            __mode: root::__mode_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn lchmod(
            __file: *const ::core::ffi::c_char,
            __mode: root::__mode_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fchmod(__fd: ::core::ffi::c_int, __mode: root::__mode_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fchmodat(
            __fd: ::core::ffi::c_int,
            __file: *const ::core::ffi::c_char,
            __mode: root::__mode_t,
            __flag: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn umask(__mask: root::__mode_t) -> root::__mode_t;
    }
    unsafe extern "C" {
        pub fn getumask() -> root::__mode_t;
    }
    unsafe extern "C" {
        pub fn mkdir(
            __path: *const ::core::ffi::c_char,
            __mode: root::__mode_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mkdirat(
            __fd: ::core::ffi::c_int,
            __path: *const ::core::ffi::c_char,
            __mode: root::__mode_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mknod(
            __path: *const ::core::ffi::c_char,
            __mode: root::__mode_t,
            __dev: root::__dev_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mknodat(
            __fd: ::core::ffi::c_int,
            __path: *const ::core::ffi::c_char,
            __mode: root::__mode_t,
            __dev: root::__dev_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mkfifo(
            __path: *const ::core::ffi::c_char,
            __mode: root::__mode_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mkfifoat(
            __fd: ::core::ffi::c_int,
            __path: *const ::core::ffi::c_char,
            __mode: root::__mode_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn utimensat(
            __fd: ::core::ffi::c_int,
            __path: *const ::core::ffi::c_char,
            __times: *const root::timespec,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn futimens(
            __fd: ::core::ffi::c_int,
            __times: *const root::timespec,
        ) -> ::core::ffi::c_int;
    }
    pub type __s8 = ::core::ffi::c_schar;
    pub type __u8 = ::core::ffi::c_uchar;
    pub type __s16 = ::core::ffi::c_short;
    pub type __u16 = ::core::ffi::c_ushort;
    pub type __s32 = ::core::ffi::c_int;
    pub type __u32 = ::core::ffi::c_uint;
    pub type __s64 = ::core::ffi::c_longlong;
    pub type __u64 = ::core::ffi::c_ulonglong;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __kernel_fd_set {
        pub fds_bits: [::core::ffi::c_ulong; 16usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __kernel_fd_set"][::core::mem::size_of::<__kernel_fd_set>() - 128usize];
        ["Alignment of __kernel_fd_set"][::core::mem::align_of::<__kernel_fd_set>() - 8usize];
        ["Offset of field: __kernel_fd_set::fds_bits"]
            [::core::mem::offset_of!(__kernel_fd_set, fds_bits) - 0usize];
    };
    pub type __kernel_sighandler_t =
        ::core::option::Option<unsafe extern "C" fn(arg1: ::core::ffi::c_int)>;
    pub type __kernel_key_t = ::core::ffi::c_int;
    pub type __kernel_mqd_t = ::core::ffi::c_int;
    pub type __kernel_old_uid_t = ::core::ffi::c_ushort;
    pub type __kernel_old_gid_t = ::core::ffi::c_ushort;
    pub type __kernel_old_dev_t = ::core::ffi::c_ulong;
    pub type __kernel_long_t = ::core::ffi::c_long;
    pub type __kernel_ulong_t = ::core::ffi::c_ulong;
    pub type __kernel_ino_t = root::__kernel_ulong_t;
    pub type __kernel_mode_t = ::core::ffi::c_uint;
    pub type __kernel_pid_t = ::core::ffi::c_int;
    pub type __kernel_ipc_pid_t = ::core::ffi::c_int;
    pub type __kernel_uid_t = ::core::ffi::c_uint;
    pub type __kernel_gid_t = ::core::ffi::c_uint;
    pub type __kernel_suseconds_t = root::__kernel_long_t;
    pub type __kernel_daddr_t = ::core::ffi::c_int;
    pub type __kernel_uid32_t = ::core::ffi::c_uint;
    pub type __kernel_gid32_t = ::core::ffi::c_uint;
    pub type __kernel_size_t = root::__kernel_ulong_t;
    pub type __kernel_ssize_t = root::__kernel_long_t;
    pub type __kernel_ptrdiff_t = root::__kernel_long_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __kernel_fsid_t {
        pub val: [::core::ffi::c_int; 2usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __kernel_fsid_t"][::core::mem::size_of::<__kernel_fsid_t>() - 8usize];
        ["Alignment of __kernel_fsid_t"][::core::mem::align_of::<__kernel_fsid_t>() - 4usize];
        ["Offset of field: __kernel_fsid_t::val"]
            [::core::mem::offset_of!(__kernel_fsid_t, val) - 0usize];
    };
    pub type __kernel_off_t = root::__kernel_long_t;
    pub type __kernel_loff_t = ::core::ffi::c_longlong;
    pub type __kernel_old_time_t = root::__kernel_long_t;
    pub type __kernel_time_t = root::__kernel_long_t;
    pub type __kernel_time64_t = ::core::ffi::c_longlong;
    pub type __kernel_clock_t = root::__kernel_long_t;
    pub type __kernel_timer_t = ::core::ffi::c_int;
    pub type __kernel_clockid_t = ::core::ffi::c_int;
    pub type __kernel_caddr_t = *mut ::core::ffi::c_char;
    pub type __kernel_uid16_t = ::core::ffi::c_ushort;
    pub type __kernel_gid16_t = ::core::ffi::c_ushort;
    pub type __s128 = i128;
    pub type __u128 = u128;
    pub type __le16 = root::__u16;
    pub type __be16 = root::__u16;
    pub type __le32 = root::__u32;
    pub type __be32 = root::__u32;
    pub type __le64 = root::__u64;
    pub type __be64 = root::__u64;
    pub type __sum16 = root::__u16;
    pub type __wsum = root::__u32;
    pub type __poll_t = ::core::ffi::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct statx_timestamp {
        pub tv_sec: root::__s64,
        pub tv_nsec: root::__u32,
        pub __reserved: root::__s32,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of statx_timestamp"][::core::mem::size_of::<statx_timestamp>() - 16usize];
        ["Alignment of statx_timestamp"][::core::mem::align_of::<statx_timestamp>() - 8usize];
        ["Offset of field: statx_timestamp::tv_sec"]
            [::core::mem::offset_of!(statx_timestamp, tv_sec) - 0usize];
        ["Offset of field: statx_timestamp::tv_nsec"]
            [::core::mem::offset_of!(statx_timestamp, tv_nsec) - 8usize];
        ["Offset of field: statx_timestamp::__reserved"]
            [::core::mem::offset_of!(statx_timestamp, __reserved) - 12usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct statx {
        pub stx_mask: root::__u32,
        pub stx_blksize: root::__u32,
        pub stx_attributes: root::__u64,
        pub stx_nlink: root::__u32,
        pub stx_uid: root::__u32,
        pub stx_gid: root::__u32,
        pub stx_mode: root::__u16,
        pub __spare0: [root::__u16; 1usize],
        pub stx_ino: root::__u64,
        pub stx_size: root::__u64,
        pub stx_blocks: root::__u64,
        pub stx_attributes_mask: root::__u64,
        pub stx_atime: root::statx_timestamp,
        pub stx_btime: root::statx_timestamp,
        pub stx_ctime: root::statx_timestamp,
        pub stx_mtime: root::statx_timestamp,
        pub stx_rdev_major: root::__u32,
        pub stx_rdev_minor: root::__u32,
        pub stx_dev_major: root::__u32,
        pub stx_dev_minor: root::__u32,
        pub stx_mnt_id: root::__u64,
        pub stx_dio_mem_align: root::__u32,
        pub stx_dio_offset_align: root::__u32,
        pub stx_subvol: root::__u64,
        pub stx_atomic_write_unit_min: root::__u32,
        pub stx_atomic_write_unit_max: root::__u32,
        pub stx_atomic_write_segments_max: root::__u32,
        pub stx_dio_read_offset_align: root::__u32,
        pub __spare3: [root::__u64; 9usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of statx"][::core::mem::size_of::<statx>() - 256usize];
        ["Alignment of statx"][::core::mem::align_of::<statx>() - 8usize];
        ["Offset of field: statx::stx_mask"][::core::mem::offset_of!(statx, stx_mask) - 0usize];
        ["Offset of field: statx::stx_blksize"]
            [::core::mem::offset_of!(statx, stx_blksize) - 4usize];
        ["Offset of field: statx::stx_attributes"]
            [::core::mem::offset_of!(statx, stx_attributes) - 8usize];
        ["Offset of field: statx::stx_nlink"][::core::mem::offset_of!(statx, stx_nlink) - 16usize];
        ["Offset of field: statx::stx_uid"][::core::mem::offset_of!(statx, stx_uid) - 20usize];
        ["Offset of field: statx::stx_gid"][::core::mem::offset_of!(statx, stx_gid) - 24usize];
        ["Offset of field: statx::stx_mode"][::core::mem::offset_of!(statx, stx_mode) - 28usize];
        ["Offset of field: statx::__spare0"][::core::mem::offset_of!(statx, __spare0) - 30usize];
        ["Offset of field: statx::stx_ino"][::core::mem::offset_of!(statx, stx_ino) - 32usize];
        ["Offset of field: statx::stx_size"][::core::mem::offset_of!(statx, stx_size) - 40usize];
        ["Offset of field: statx::stx_blocks"]
            [::core::mem::offset_of!(statx, stx_blocks) - 48usize];
        ["Offset of field: statx::stx_attributes_mask"]
            [::core::mem::offset_of!(statx, stx_attributes_mask) - 56usize];
        ["Offset of field: statx::stx_atime"][::core::mem::offset_of!(statx, stx_atime) - 64usize];
        ["Offset of field: statx::stx_btime"][::core::mem::offset_of!(statx, stx_btime) - 80usize];
        ["Offset of field: statx::stx_ctime"][::core::mem::offset_of!(statx, stx_ctime) - 96usize];
        ["Offset of field: statx::stx_mtime"][::core::mem::offset_of!(statx, stx_mtime) - 112usize];
        ["Offset of field: statx::stx_rdev_major"]
            [::core::mem::offset_of!(statx, stx_rdev_major) - 128usize];
        ["Offset of field: statx::stx_rdev_minor"]
            [::core::mem::offset_of!(statx, stx_rdev_minor) - 132usize];
        ["Offset of field: statx::stx_dev_major"]
            [::core::mem::offset_of!(statx, stx_dev_major) - 136usize];
        ["Offset of field: statx::stx_dev_minor"]
            [::core::mem::offset_of!(statx, stx_dev_minor) - 140usize];
        ["Offset of field: statx::stx_mnt_id"]
            [::core::mem::offset_of!(statx, stx_mnt_id) - 144usize];
        ["Offset of field: statx::stx_dio_mem_align"]
            [::core::mem::offset_of!(statx, stx_dio_mem_align) - 152usize];
        ["Offset of field: statx::stx_dio_offset_align"]
            [::core::mem::offset_of!(statx, stx_dio_offset_align) - 156usize];
        ["Offset of field: statx::stx_subvol"]
            [::core::mem::offset_of!(statx, stx_subvol) - 160usize];
        ["Offset of field: statx::stx_atomic_write_unit_min"]
            [::core::mem::offset_of!(statx, stx_atomic_write_unit_min) - 168usize];
        ["Offset of field: statx::stx_atomic_write_unit_max"]
            [::core::mem::offset_of!(statx, stx_atomic_write_unit_max) - 172usize];
        ["Offset of field: statx::stx_atomic_write_segments_max"]
            [::core::mem::offset_of!(statx, stx_atomic_write_segments_max) - 176usize];
        ["Offset of field: statx::stx_dio_read_offset_align"]
            [::core::mem::offset_of!(statx, stx_dio_read_offset_align) - 180usize];
        ["Offset of field: statx::__spare3"][::core::mem::offset_of!(statx, __spare3) - 184usize];
    };
    unsafe extern "C" {
        pub fn statx(
            __dirfd: ::core::ffi::c_int,
            __path: *const ::core::ffi::c_char,
            __flags: ::core::ffi::c_int,
            __mask: ::core::ffi::c_uint,
            __buf: *mut root::statx,
        ) -> ::core::ffi::c_int;
    }
    pub type u_char = root::__u_char;
    pub type u_short = root::__u_short;
    pub type u_int = root::__u_int;
    pub type u_long = root::__u_long;
    pub type quad_t = root::__quad_t;
    pub type u_quad_t = root::__u_quad_t;
    pub type fsid_t = root::__fsid_t;
    pub type loff_t = root::__loff_t;
    pub type ino64_t = root::__ino64_t;
    pub type off64_t = root::__off64_t;
    pub type pid_t = root::__pid_t;
    pub type id_t = root::__id_t;
    pub type daddr_t = root::__daddr_t;
    pub type caddr_t = root::__caddr_t;
    pub type key_t = root::__key_t;
    pub type clock_t = root::__clock_t;
    pub type clockid_t = root::__clockid_t;
    pub type timer_t = root::__timer_t;
    pub type useconds_t = root::__useconds_t;
    pub type suseconds_t = root::__suseconds_t;
    pub type ulong = ::core::ffi::c_ulong;
    pub type ushort = ::core::ffi::c_ushort;
    pub type uint = ::core::ffi::c_uint;
    pub type u_int8_t = root::__uint8_t;
    pub type u_int16_t = root::__uint16_t;
    pub type u_int32_t = root::__uint32_t;
    pub type u_int64_t = root::__uint64_t;
    pub type register_t = ::core::ffi::c_long;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __sigset_t {
        pub __val: [::core::ffi::c_ulong; 16usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __sigset_t"][::core::mem::size_of::<__sigset_t>() - 128usize];
        ["Alignment of __sigset_t"][::core::mem::align_of::<__sigset_t>() - 8usize];
        ["Offset of field: __sigset_t::__val"][::core::mem::offset_of!(__sigset_t, __val) - 0usize];
    };
    pub type sigset_t = root::__sigset_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct timeval {
        pub tv_sec: root::__time_t,
        pub tv_usec: root::__suseconds_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of timeval"][::core::mem::size_of::<timeval>() - 16usize];
        ["Alignment of timeval"][::core::mem::align_of::<timeval>() - 8usize];
        ["Offset of field: timeval::tv_sec"][::core::mem::offset_of!(timeval, tv_sec) - 0usize];
        ["Offset of field: timeval::tv_usec"][::core::mem::offset_of!(timeval, tv_usec) - 8usize];
    };
    pub type __fd_mask = ::core::ffi::c_long;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct fd_set {
        pub fds_bits: [root::__fd_mask; 16usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of fd_set"][::core::mem::size_of::<fd_set>() - 128usize];
        ["Alignment of fd_set"][::core::mem::align_of::<fd_set>() - 8usize];
        ["Offset of field: fd_set::fds_bits"][::core::mem::offset_of!(fd_set, fds_bits) - 0usize];
    };
    pub type fd_mask = root::__fd_mask;
    unsafe extern "C" {
        pub fn select(
            __nfds: ::core::ffi::c_int,
            __readfds: *mut root::fd_set,
            __writefds: *mut root::fd_set,
            __exceptfds: *mut root::fd_set,
            __timeout: *mut root::timeval,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pselect(
            __nfds: ::core::ffi::c_int,
            __readfds: *mut root::fd_set,
            __writefds: *mut root::fd_set,
            __exceptfds: *mut root::fd_set,
            __timeout: *const root::timespec,
            __sigmask: *const root::__sigset_t,
        ) -> ::core::ffi::c_int;
    }
    pub type fsblkcnt_t = root::__fsblkcnt_t;
    pub type fsfilcnt_t = root::__fsfilcnt_t;
    pub type blkcnt64_t = root::__blkcnt64_t;
    pub type fsblkcnt64_t = root::__fsblkcnt64_t;
    pub type fsfilcnt64_t = root::__fsfilcnt64_t;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __atomic_wide_counter {
        pub __value64: ::core::ffi::c_ulonglong,
        pub __value32: root::__atomic_wide_counter__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __atomic_wide_counter__bindgen_ty_1 {
        pub __low: ::core::ffi::c_uint,
        pub __high: ::core::ffi::c_uint,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __atomic_wide_counter__bindgen_ty_1"]
            [::core::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>() - 8usize];
        ["Alignment of __atomic_wide_counter__bindgen_ty_1"]
            [::core::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>() - 4usize];
        ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__low"]
            [::core::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __low) - 0usize];
        ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__high"]
            [::core::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __high) - 4usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __atomic_wide_counter"][::core::mem::size_of::<__atomic_wide_counter>() - 8usize];
        ["Alignment of __atomic_wide_counter"]
            [::core::mem::align_of::<__atomic_wide_counter>() - 8usize];
        ["Offset of field: __atomic_wide_counter::__value64"]
            [::core::mem::offset_of!(__atomic_wide_counter, __value64) - 0usize];
        ["Offset of field: __atomic_wide_counter::__value32"]
            [::core::mem::offset_of!(__atomic_wide_counter, __value32) - 0usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_internal_list {
        pub __prev: *mut root::__pthread_internal_list,
        pub __next: *mut root::__pthread_internal_list,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_internal_list"]
            [::core::mem::size_of::<__pthread_internal_list>() - 16usize];
        ["Alignment of __pthread_internal_list"]
            [::core::mem::align_of::<__pthread_internal_list>() - 8usize];
        ["Offset of field: __pthread_internal_list::__prev"]
            [::core::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
        ["Offset of field: __pthread_internal_list::__next"]
            [::core::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
    };
    pub type __pthread_list_t = root::__pthread_internal_list;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_internal_slist {
        pub __next: *mut root::__pthread_internal_slist,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_internal_slist"]
            [::core::mem::size_of::<__pthread_internal_slist>() - 8usize];
        ["Alignment of __pthread_internal_slist"]
            [::core::mem::align_of::<__pthread_internal_slist>() - 8usize];
        ["Offset of field: __pthread_internal_slist::__next"]
            [::core::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
    };
    pub type __pthread_slist_t = root::__pthread_internal_slist;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_mutex_s {
        pub __lock: ::core::ffi::c_int,
        pub __count: ::core::ffi::c_uint,
        pub __owner: ::core::ffi::c_int,
        pub __nusers: ::core::ffi::c_uint,
        pub __kind: ::core::ffi::c_int,
        pub __spins: ::core::ffi::c_short,
        pub __elision: ::core::ffi::c_short,
        pub __list: root::__pthread_list_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_mutex_s"][::core::mem::size_of::<__pthread_mutex_s>() - 40usize];
        ["Alignment of __pthread_mutex_s"][::core::mem::align_of::<__pthread_mutex_s>() - 8usize];
        ["Offset of field: __pthread_mutex_s::__lock"]
            [::core::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
        ["Offset of field: __pthread_mutex_s::__count"]
            [::core::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
        ["Offset of field: __pthread_mutex_s::__owner"]
            [::core::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
        ["Offset of field: __pthread_mutex_s::__nusers"]
            [::core::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
        ["Offset of field: __pthread_mutex_s::__kind"]
            [::core::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
        ["Offset of field: __pthread_mutex_s::__spins"]
            [::core::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
        ["Offset of field: __pthread_mutex_s::__elision"]
            [::core::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
        ["Offset of field: __pthread_mutex_s::__list"]
            [::core::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_rwlock_arch_t {
        pub __readers: ::core::ffi::c_uint,
        pub __writers: ::core::ffi::c_uint,
        pub __wrphase_futex: ::core::ffi::c_uint,
        pub __writers_futex: ::core::ffi::c_uint,
        pub __pad3: ::core::ffi::c_uint,
        pub __pad4: ::core::ffi::c_uint,
        pub __cur_writer: ::core::ffi::c_int,
        pub __shared: ::core::ffi::c_int,
        pub __rwelision: ::core::ffi::c_schar,
        pub __pad1: [::core::ffi::c_uchar; 7usize],
        pub __pad2: ::core::ffi::c_ulong,
        pub __flags: ::core::ffi::c_uint,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_rwlock_arch_t"]
            [::core::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
        ["Alignment of __pthread_rwlock_arch_t"]
            [::core::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
        ["Offset of field: __pthread_rwlock_arch_t::__readers"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
        ["Offset of field: __pthread_rwlock_arch_t::__writers"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
        ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
        ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
        ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
        ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
        ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
        ["Offset of field: __pthread_rwlock_arch_t::__shared"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
        ["Offset of field: __pthread_rwlock_arch_t::__rwelision"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __rwelision) - 32usize];
        ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
        ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
        ["Offset of field: __pthread_rwlock_arch_t::__flags"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __pthread_cond_s {
        pub __wseq: root::__atomic_wide_counter,
        pub __g1_start: root::__atomic_wide_counter,
        pub __g_size: [::core::ffi::c_uint; 2usize],
        pub __g1_orig_size: ::core::ffi::c_uint,
        pub __wrefs: ::core::ffi::c_uint,
        pub __g_signals: [::core::ffi::c_uint; 2usize],
        pub __unused_initialized_1: ::core::ffi::c_uint,
        pub __unused_initialized_2: ::core::ffi::c_uint,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_cond_s"][::core::mem::size_of::<__pthread_cond_s>() - 48usize];
        ["Alignment of __pthread_cond_s"][::core::mem::align_of::<__pthread_cond_s>() - 8usize];
        ["Offset of field: __pthread_cond_s::__wseq"]
            [::core::mem::offset_of!(__pthread_cond_s, __wseq) - 0usize];
        ["Offset of field: __pthread_cond_s::__g1_start"]
            [::core::mem::offset_of!(__pthread_cond_s, __g1_start) - 8usize];
        ["Offset of field: __pthread_cond_s::__g_size"]
            [::core::mem::offset_of!(__pthread_cond_s, __g_size) - 16usize];
        ["Offset of field: __pthread_cond_s::__g1_orig_size"]
            [::core::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 24usize];
        ["Offset of field: __pthread_cond_s::__wrefs"]
            [::core::mem::offset_of!(__pthread_cond_s, __wrefs) - 28usize];
        ["Offset of field: __pthread_cond_s::__g_signals"]
            [::core::mem::offset_of!(__pthread_cond_s, __g_signals) - 32usize];
        ["Offset of field: __pthread_cond_s::__unused_initialized_1"]
            [::core::mem::offset_of!(__pthread_cond_s, __unused_initialized_1) - 40usize];
        ["Offset of field: __pthread_cond_s::__unused_initialized_2"]
            [::core::mem::offset_of!(__pthread_cond_s, __unused_initialized_2) - 44usize];
    };
    pub type __tss_t = ::core::ffi::c_uint;
    pub type __thrd_t = ::core::ffi::c_ulong;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __once_flag {
        pub __data: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __once_flag"][::core::mem::size_of::<__once_flag>() - 4usize];
        ["Alignment of __once_flag"][::core::mem::align_of::<__once_flag>() - 4usize];
        ["Offset of field: __once_flag::__data"]
            [::core::mem::offset_of!(__once_flag, __data) - 0usize];
    };
    pub type pthread_t = ::core::ffi::c_ulong;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_mutexattr_t {
        pub __size: [::core::ffi::c_char; 4usize],
        pub __align: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_mutexattr_t"][::core::mem::size_of::<pthread_mutexattr_t>() - 4usize];
        ["Alignment of pthread_mutexattr_t"]
            [::core::mem::align_of::<pthread_mutexattr_t>() - 4usize];
        ["Offset of field: pthread_mutexattr_t::__size"]
            [::core::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
        ["Offset of field: pthread_mutexattr_t::__align"]
            [::core::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_condattr_t {
        pub __size: [::core::ffi::c_char; 4usize],
        pub __align: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_condattr_t"][::core::mem::size_of::<pthread_condattr_t>() - 4usize];
        ["Alignment of pthread_condattr_t"][::core::mem::align_of::<pthread_condattr_t>() - 4usize];
        ["Offset of field: pthread_condattr_t::__size"]
            [::core::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
        ["Offset of field: pthread_condattr_t::__align"]
            [::core::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
    };
    pub type pthread_key_t = ::core::ffi::c_uint;
    pub type pthread_once_t = ::core::ffi::c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_attr_t {
        pub __size: [::core::ffi::c_char; 56usize],
        pub __align: ::core::ffi::c_long,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_attr_t"][::core::mem::size_of::<pthread_attr_t>() - 56usize];
        ["Alignment of pthread_attr_t"][::core::mem::align_of::<pthread_attr_t>() - 8usize];
        ["Offset of field: pthread_attr_t::__size"]
            [::core::mem::offset_of!(pthread_attr_t, __size) - 0usize];
        ["Offset of field: pthread_attr_t::__align"]
            [::core::mem::offset_of!(pthread_attr_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_mutex_t {
        pub __data: root::__pthread_mutex_s,
        pub __size: [::core::ffi::c_char; 40usize],
        pub __align: ::core::ffi::c_long,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_mutex_t"][::core::mem::size_of::<pthread_mutex_t>() - 40usize];
        ["Alignment of pthread_mutex_t"][::core::mem::align_of::<pthread_mutex_t>() - 8usize];
        ["Offset of field: pthread_mutex_t::__data"]
            [::core::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
        ["Offset of field: pthread_mutex_t::__size"]
            [::core::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
        ["Offset of field: pthread_mutex_t::__align"]
            [::core::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_cond_t {
        pub __data: root::__pthread_cond_s,
        pub __size: [::core::ffi::c_char; 48usize],
        pub __align: ::core::ffi::c_longlong,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_cond_t"][::core::mem::size_of::<pthread_cond_t>() - 48usize];
        ["Alignment of pthread_cond_t"][::core::mem::align_of::<pthread_cond_t>() - 8usize];
        ["Offset of field: pthread_cond_t::__data"]
            [::core::mem::offset_of!(pthread_cond_t, __data) - 0usize];
        ["Offset of field: pthread_cond_t::__size"]
            [::core::mem::offset_of!(pthread_cond_t, __size) - 0usize];
        ["Offset of field: pthread_cond_t::__align"]
            [::core::mem::offset_of!(pthread_cond_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_rwlock_t {
        pub __data: root::__pthread_rwlock_arch_t,
        pub __size: [::core::ffi::c_char; 56usize],
        pub __align: ::core::ffi::c_long,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_rwlock_t"][::core::mem::size_of::<pthread_rwlock_t>() - 56usize];
        ["Alignment of pthread_rwlock_t"][::core::mem::align_of::<pthread_rwlock_t>() - 8usize];
        ["Offset of field: pthread_rwlock_t::__data"]
            [::core::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
        ["Offset of field: pthread_rwlock_t::__size"]
            [::core::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
        ["Offset of field: pthread_rwlock_t::__align"]
            [::core::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_rwlockattr_t {
        pub __size: [::core::ffi::c_char; 8usize],
        pub __align: ::core::ffi::c_long,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_rwlockattr_t"][::core::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
        ["Alignment of pthread_rwlockattr_t"]
            [::core::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
        ["Offset of field: pthread_rwlockattr_t::__size"]
            [::core::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
        ["Offset of field: pthread_rwlockattr_t::__align"]
            [::core::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
    };
    pub type pthread_spinlock_t = ::core::ffi::c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_barrier_t {
        pub __size: [::core::ffi::c_char; 32usize],
        pub __align: ::core::ffi::c_long,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_barrier_t"][::core::mem::size_of::<pthread_barrier_t>() - 32usize];
        ["Alignment of pthread_barrier_t"][::core::mem::align_of::<pthread_barrier_t>() - 8usize];
        ["Offset of field: pthread_barrier_t::__size"]
            [::core::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
        ["Offset of field: pthread_barrier_t::__align"]
            [::core::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_barrierattr_t {
        pub __size: [::core::ffi::c_char; 4usize],
        pub __align: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_barrierattr_t"][::core::mem::size_of::<pthread_barrierattr_t>() - 4usize];
        ["Alignment of pthread_barrierattr_t"]
            [::core::mem::align_of::<pthread_barrierattr_t>() - 4usize];
        ["Offset of field: pthread_barrierattr_t::__size"]
            [::core::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
        ["Offset of field: pthread_barrierattr_t::__align"]
            [::core::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
    };
    pub mod ke {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub mod file {
            #[allow(unused_imports)]
            use self::super::super::super::root;
        }
    }
}
