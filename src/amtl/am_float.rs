/* automatically generated by rust-bindgen 0.71.1 */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
    #[repr(C)]
    pub struct __BindgenComplex<T> {
        pub re: T,
        pub im: T,
    }
    #[repr(C)]
    pub struct __BindgenUnionField<T>(::core::marker::PhantomData<T>);
    impl<T> __BindgenUnionField<T> {
        #[inline]
        pub const fn new() -> Self {
            __BindgenUnionField(::core::marker::PhantomData)
        }
        #[inline]
        pub unsafe fn as_ref(&self) -> &T {
            ::core::mem::transmute(self)
        }
        #[inline]
        pub unsafe fn as_mut(&mut self) -> &mut T {
            ::core::mem::transmute(self)
        }
    }
    impl<T> ::core::default::Default for __BindgenUnionField<T> {
        #[inline]
        fn default() -> Self {
            Self::new()
        }
    }
    impl<T> ::core::clone::Clone for __BindgenUnionField<T> {
        #[inline]
        fn clone(&self) -> Self {
            *self
        }
    }
    impl<T> ::core::marker::Copy for __BindgenUnionField<T> {}
    impl<T> ::core::fmt::Debug for __BindgenUnionField<T> {
        fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            fmt.write_str("__BindgenUnionField")
        }
    }
    impl<T> ::core::hash::Hash for __BindgenUnionField<T> {
        fn hash<H: ::core::hash::Hasher>(&self, _state: &mut H) {}
    }
    impl<T> ::core::cmp::PartialEq for __BindgenUnionField<T> {
        fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
            true
        }
    }
    impl<T> ::core::cmp::Eq for __BindgenUnionField<T> {}
    #[allow(unused_imports)]
    use self::super::root;
    pub const POSIX: u32 = 1;
    pub const LINUX: u32 = 1;
    pub const _LINUX: u32 = 1;
    pub const COMPILER_GCC: u32 = 1;
    pub const _DLFCN_H: u32 = 1;
    pub const _FEATURES_H: u32 = 1;
    pub const _ISOC95_SOURCE: u32 = 1;
    pub const _ISOC99_SOURCE: u32 = 1;
    pub const _ISOC11_SOURCE: u32 = 1;
    pub const _ISOC23_SOURCE: u32 = 1;
    pub const _ISOC2Y_SOURCE: u32 = 1;
    pub const _POSIX_SOURCE: u32 = 1;
    pub const _POSIX_C_SOURCE: u32 = 200809;
    pub const _XOPEN_SOURCE: u32 = 700;
    pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
    pub const _LARGEFILE64_SOURCE: u32 = 1;
    pub const _DEFAULT_SOURCE: u32 = 1;
    pub const _ATFILE_SOURCE: u32 = 1;
    pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
    pub const __GLIBC_USE_ISOC2Y: u32 = 1;
    pub const __GLIBC_USE_ISOC23: u32 = 1;
    pub const __USE_ISOC11: u32 = 1;
    pub const __USE_ISOC99: u32 = 1;
    pub const __USE_ISOC95: u32 = 1;
    pub const __USE_ISOCXX11: u32 = 1;
    pub const __USE_POSIX: u32 = 1;
    pub const __USE_POSIX2: u32 = 1;
    pub const __USE_POSIX199309: u32 = 1;
    pub const __USE_POSIX199506: u32 = 1;
    pub const __USE_XOPEN2K: u32 = 1;
    pub const __USE_XOPEN2K8: u32 = 1;
    pub const __USE_XOPEN: u32 = 1;
    pub const __USE_XOPEN_EXTENDED: u32 = 1;
    pub const __USE_UNIX98: u32 = 1;
    pub const _LARGEFILE_SOURCE: u32 = 1;
    pub const __USE_XOPEN2K8XSI: u32 = 1;
    pub const __USE_XOPEN2KXSI: u32 = 1;
    pub const __USE_LARGEFILE: u32 = 1;
    pub const __USE_LARGEFILE64: u32 = 1;
    pub const __WORDSIZE: u32 = 64;
    pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
    pub const __SYSCALL_WORDSIZE: u32 = 64;
    pub const __TIMESIZE: u32 = 64;
    pub const __USE_TIME_BITS64: u32 = 1;
    pub const __USE_MISC: u32 = 1;
    pub const __USE_ATFILE: u32 = 1;
    pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
    pub const __USE_GNU: u32 = 1;
    pub const __USE_FORTIFY_LEVEL: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
    pub const __GLIBC_USE_C23_STRTOL: u32 = 1;
    pub const _STDC_PREDEF_H: u32 = 1;
    pub const __STDC_IEC_559__: u32 = 1;
    pub const __STDC_IEC_60559_BFP__: u32 = 201404;
    pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
    pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
    pub const __STDC_ISO_10646__: u32 = 201706;
    pub const __GNU_LIBRARY__: u32 = 6;
    pub const __GLIBC__: u32 = 2;
    pub const __GLIBC_MINOR__: u32 = 41;
    pub const _SYS_CDEFS_H: u32 = 1;
    pub const __glibc_c99_flexarr_available: u32 = 1;
    pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
    pub const __HAVE_GENERIC_SELECTION: u32 = 0;
    pub const RTLD_LAZY: u32 = 1;
    pub const RTLD_NOW: u32 = 2;
    pub const RTLD_BINDING_MASK: u32 = 3;
    pub const RTLD_NOLOAD: u32 = 4;
    pub const RTLD_DEEPBIND: u32 = 8;
    pub const RTLD_GLOBAL: u32 = 256;
    pub const RTLD_LOCAL: u32 = 0;
    pub const RTLD_NODELETE: u32 = 4096;
    pub const DLFO_STRUCT_HAS_EH_DBASE: u32 = 0;
    pub const DLFO_STRUCT_HAS_EH_COUNT: u32 = 0;
    pub const LM_ID_BASE: u32 = 0;
    pub const LM_ID_NEWLM: i32 = -1;
    pub const _UNISTD_H: u32 = 1;
    pub const _POSIX_VERSION: u32 = 200809;
    pub const __POSIX2_THIS_VERSION: u32 = 200809;
    pub const _POSIX2_VERSION: u32 = 200809;
    pub const _POSIX2_C_VERSION: u32 = 200809;
    pub const _POSIX2_C_BIND: u32 = 200809;
    pub const _POSIX2_C_DEV: u32 = 200809;
    pub const _POSIX2_SW_DEV: u32 = 200809;
    pub const _POSIX2_LOCALEDEF: u32 = 200809;
    pub const _XOPEN_VERSION: u32 = 700;
    pub const _XOPEN_XCU_VERSION: u32 = 4;
    pub const _XOPEN_XPG2: u32 = 1;
    pub const _XOPEN_XPG3: u32 = 1;
    pub const _XOPEN_XPG4: u32 = 1;
    pub const _XOPEN_UNIX: u32 = 1;
    pub const _XOPEN_ENH_I18N: u32 = 1;
    pub const _XOPEN_LEGACY: u32 = 1;
    pub const _BITS_POSIX_OPT_H: u32 = 1;
    pub const _POSIX_JOB_CONTROL: u32 = 1;
    pub const _POSIX_SAVED_IDS: u32 = 1;
    pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
    pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
    pub const _POSIX_FSYNC: u32 = 200809;
    pub const _POSIX_MAPPED_FILES: u32 = 200809;
    pub const _POSIX_MEMLOCK: u32 = 200809;
    pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
    pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
    pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
    pub const _POSIX_VDISABLE: u8 = 0u8;
    pub const _POSIX_NO_TRUNC: u32 = 1;
    pub const _XOPEN_REALTIME: u32 = 1;
    pub const _XOPEN_REALTIME_THREADS: u32 = 1;
    pub const _XOPEN_SHM: u32 = 1;
    pub const _POSIX_THREADS: u32 = 200809;
    pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
    pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
    pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
    pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
    pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
    pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
    pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
    pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
    pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
    pub const _POSIX_SEMAPHORES: u32 = 200809;
    pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
    pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
    pub const _POSIX_ASYNC_IO: u32 = 1;
    pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
    pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
    pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
    pub const _LFS_LARGEFILE: u32 = 1;
    pub const _LFS64_LARGEFILE: u32 = 1;
    pub const _LFS64_STDIO: u32 = 1;
    pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
    pub const _POSIX_CPUTIME: u32 = 0;
    pub const _POSIX_THREAD_CPUTIME: u32 = 0;
    pub const _POSIX_REGEXP: u32 = 1;
    pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
    pub const _POSIX_SHELL: u32 = 1;
    pub const _POSIX_TIMEOUTS: u32 = 200809;
    pub const _POSIX_SPIN_LOCKS: u32 = 200809;
    pub const _POSIX_SPAWN: u32 = 200809;
    pub const _POSIX_TIMERS: u32 = 200809;
    pub const _POSIX_BARRIERS: u32 = 200809;
    pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
    pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
    pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
    pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
    pub const _POSIX_ADVISORY_INFO: u32 = 200809;
    pub const _POSIX_IPV6: u32 = 200809;
    pub const _POSIX_RAW_SOCKETS: u32 = 200809;
    pub const _POSIX2_CHAR_TERM: u32 = 200809;
    pub const _POSIX_SPORADIC_SERVER: i32 = -1;
    pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
    pub const _POSIX_TRACE: i32 = -1;
    pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
    pub const _POSIX_TRACE_INHERIT: i32 = -1;
    pub const _POSIX_TRACE_LOG: i32 = -1;
    pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
    pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
    pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
    pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
    pub const _POSIX_V7_LP64_OFF64: u32 = 1;
    pub const _POSIX_V6_LP64_OFF64: u32 = 1;
    pub const _XBS5_LP64_OFF64: u32 = 1;
    pub const __ILP32_OFF32_CFLAGS: &[u8; 5] = b"-m32\0";
    pub const __ILP32_OFF32_LDFLAGS: &[u8; 5] = b"-m32\0";
    pub const __ILP32_OFFBIG_CFLAGS: &[u8; 48] =
        b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
    pub const __ILP32_OFFBIG_LDFLAGS: &[u8; 5] = b"-m32\0";
    pub const __LP64_OFF64_CFLAGS: &[u8; 5] = b"-m64\0";
    pub const __LP64_OFF64_LDFLAGS: &[u8; 5] = b"-m64\0";
    pub const STDIN_FILENO: u32 = 0;
    pub const STDOUT_FILENO: u32 = 1;
    pub const STDERR_FILENO: u32 = 2;
    pub const _BITS_TYPES_H: u32 = 1;
    pub const _BITS_TYPESIZES_H: u32 = 1;
    pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
    pub const __INO_T_MATCHES_INO64_T: u32 = 1;
    pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
    pub const __STATFS_MATCHES_STATFS64: u32 = 1;
    pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
    pub const __FD_SETSIZE: u32 = 1024;
    pub const _BITS_TIME64_H: u32 = 1;
    pub const R_OK: u32 = 4;
    pub const W_OK: u32 = 2;
    pub const X_OK: u32 = 1;
    pub const F_OK: u32 = 0;
    pub const SEEK_SET: u32 = 0;
    pub const SEEK_CUR: u32 = 1;
    pub const SEEK_END: u32 = 2;
    pub const SEEK_DATA: u32 = 3;
    pub const SEEK_HOLE: u32 = 4;
    pub const L_SET: u32 = 0;
    pub const L_INCR: u32 = 1;
    pub const L_XTND: u32 = 2;
    pub const _GETOPT_POSIX_H: u32 = 1;
    pub const _GETOPT_CORE_H: u32 = 1;
    pub const F_ULOCK: u32 = 0;
    pub const F_LOCK: u32 = 1;
    pub const F_TLOCK: u32 = 2;
    pub const F_TEST: u32 = 3;
    pub const CLOSE_RANGE_UNSHARE: u32 = 2;
    pub const CLOSE_RANGE_CLOEXEC: u32 = 4;
    pub const _SYS_TYPES_H: u32 = 1;
    pub const __clock_t_defined: u32 = 1;
    pub const __clockid_t_defined: u32 = 1;
    pub const __time_t_defined: u32 = 1;
    pub const __timer_t_defined: u32 = 1;
    pub const _BITS_STDINT_INTN_H: u32 = 1;
    pub const __BIT_TYPES_DEFINED__: u32 = 1;
    pub const _ENDIAN_H: u32 = 1;
    pub const _BITS_ENDIAN_H: u32 = 1;
    pub const __LITTLE_ENDIAN: u32 = 1234;
    pub const __BIG_ENDIAN: u32 = 4321;
    pub const __PDP_ENDIAN: u32 = 3412;
    pub const _BITS_ENDIANNESS_H: u32 = 1;
    pub const __BYTE_ORDER: u32 = 1234;
    pub const __FLOAT_WORD_ORDER: u32 = 1234;
    pub const LITTLE_ENDIAN: u32 = 1234;
    pub const BIG_ENDIAN: u32 = 4321;
    pub const PDP_ENDIAN: u32 = 3412;
    pub const BYTE_ORDER: u32 = 1234;
    pub const _BITS_BYTESWAP_H: u32 = 1;
    pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
    pub const _SYS_SELECT_H: u32 = 1;
    pub const __sigset_t_defined: u32 = 1;
    pub const __timeval_defined: u32 = 1;
    pub const _STRUCT_TIMESPEC: u32 = 1;
    pub const FD_SETSIZE: u32 = 1024;
    pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
    pub const _THREAD_SHARED_TYPES_H: u32 = 1;
    pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
    pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
    pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
    pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
    pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
    pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
    pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
    pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
    pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
    pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
    pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
    pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
    pub const __have_pthread_attr_t: u32 = 1;
    pub const _DIRENT_H: u32 = 1;
    pub const _DIRENT_MATCHES_DIRENT64: u32 = 1;
    pub const _BITS_POSIX1_LIM_H: u32 = 1;
    pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
    pub const _POSIX_AIO_MAX: u32 = 1;
    pub const _POSIX_ARG_MAX: u32 = 4096;
    pub const _POSIX_CHILD_MAX: u32 = 25;
    pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
    pub const _POSIX_HOST_NAME_MAX: u32 = 255;
    pub const _POSIX_LINK_MAX: u32 = 8;
    pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
    pub const _POSIX_MAX_CANON: u32 = 255;
    pub const _POSIX_MAX_INPUT: u32 = 255;
    pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
    pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
    pub const _POSIX_NAME_MAX: u32 = 14;
    pub const _POSIX_NGROUPS_MAX: u32 = 8;
    pub const _POSIX_OPEN_MAX: u32 = 20;
    pub const _POSIX_FD_SETSIZE: u32 = 20;
    pub const _POSIX_PATH_MAX: u32 = 256;
    pub const _POSIX_PIPE_BUF: u32 = 512;
    pub const _POSIX_RE_DUP_MAX: u32 = 255;
    pub const _POSIX_RTSIG_MAX: u32 = 8;
    pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
    pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
    pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
    pub const _POSIX_SSIZE_MAX: u32 = 32767;
    pub const _POSIX_STREAM_MAX: u32 = 8;
    pub const _POSIX_SYMLINK_MAX: u32 = 255;
    pub const _POSIX_SYMLOOP_MAX: u32 = 8;
    pub const _POSIX_TIMER_MAX: u32 = 32;
    pub const _POSIX_TTY_NAME_MAX: u32 = 9;
    pub const _POSIX_TZNAME_MAX: u32 = 6;
    pub const _POSIX_QLIMIT: u32 = 1;
    pub const _POSIX_HIWAT: u32 = 512;
    pub const _POSIX_UIO_MAXIOV: u32 = 16;
    pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
    pub const NR_OPEN: u32 = 1024;
    pub const NGROUPS_MAX: u32 = 65536;
    pub const ARG_MAX: u32 = 131072;
    pub const LINK_MAX: u32 = 127;
    pub const MAX_CANON: u32 = 255;
    pub const MAX_INPUT: u32 = 255;
    pub const NAME_MAX: u32 = 255;
    pub const PATH_MAX: u32 = 4096;
    pub const PIPE_BUF: u32 = 4096;
    pub const XATTR_NAME_MAX: u32 = 255;
    pub const XATTR_SIZE_MAX: u32 = 65536;
    pub const XATTR_LIST_MAX: u32 = 65536;
    pub const RTSIG_MAX: u32 = 32;
    pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
    pub const PTHREAD_KEYS_MAX: u32 = 1024;
    pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
    pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
    pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
    pub const AIO_PRIO_DELTA_MAX: u32 = 20;
    pub const __SC_THREAD_STACK_MIN_VALUE: u32 = 75;
    pub const DELAYTIMER_MAX: u32 = 2147483647;
    pub const TTY_NAME_MAX: u32 = 32;
    pub const LOGIN_NAME_MAX: u32 = 256;
    pub const HOST_NAME_MAX: u32 = 64;
    pub const MQ_PRIO_MAX: u32 = 32768;
    pub const SEM_VALUE_MAX: u32 = 2147483647;
    pub const MAXNAMLEN: u32 = 255;
    pub const PATH_SEP_STR: &[u8; 2] = b"/\0";
    pub const PATH_SEP_CHAR: u8 = 47u8;
    pub const ALT_SEP_CHAR: u8 = 92u8;
    pub const PATH_SIZE: u32 = 4096;
    pub const _GLIBCXX_CERRNO: u32 = 1;
    pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
    pub const _GLIBCXX_RELEASE: u32 = 15;
    pub const __GLIBCXX__: u32 = 20250425;
    pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
    pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
    pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
    pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
    pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
    pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
    pub const _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED: u32 = 1;
    pub const _GLIBCXX_ASSERTIONS: u32 = 1;
    pub const _GLIBCXX_VERBOSE_ASSERT: u32 = 1;
    pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
    pub const _GLIBCXX_OS_DEFINES: u32 = 1;
    pub const __NO_CTYPE: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOAT128_MATH: u32 = 1;
    pub const _GLIBCXX_MAY_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
    pub const _GLIBCXX_GTHREAD_USE_WEAK: u32 = 0;
    pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
    pub const _GLIBCXX_FAST_MATH: u32 = 0;
    pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
    pub const _GLIBCXX_FLOAT_IS_IEEE_BINARY32: u32 = 1;
    pub const _GLIBCXX_DOUBLE_IS_IEEE_BINARY64: u32 = 1;
    pub const _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP: u32 = 1;
    pub const _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE: u32 = 1;
    pub const _GLIBCXX_HAVE_BUILTIN_LAUNDER: u32 = 1;
    pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
    pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
    pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
    pub const _GLIBCXX_HAVE_ARC4RANDOM: u32 = 1;
    pub const _GLIBCXX_HAVE_ARPA_INET_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
    pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
    pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
    pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
    pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
    pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
    pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
    pub const _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY: u32 = 1;
    pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
    pub const _GLIBCXX_HAVE_C99_FLT_EVAL_TYPES: u32 = 1;
    pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
    pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
    pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
    pub const _GLIBCXX_HAVE_COSF: u32 = 1;
    pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
    pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
    pub const _GLIBCXX_HAVE_COSL: u32 = 1;
    pub const _GLIBCXX_HAVE_DECL_STRNLEN: u32 = 1;
    pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_DIRFD: u32 = 1;
    pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
    pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
    pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
    pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FDOPENDIR: u32 = 1;
    pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
    pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
    pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
    pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_GETENTROPY: u32 = 1;
    pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
    pub const _GLIBCXX_HAVE_GETS: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
    pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
    pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
    pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
    pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
    pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
    pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
    pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
    pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
    pub const _GLIBCXX_HAVE_LINK: u32 = 1;
    pub const _GLIBCXX_HAVE_LINK_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_RANDOM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_TYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
    pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
    pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
    pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
    pub const _GLIBCXX_HAVE_LSEEK: u32 = 1;
    pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
    pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
    pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
    pub const _GLIBCXX_HAVE_MODF: u32 = 1;
    pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
    pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
    pub const _GLIBCXX_HAVE_NETDB_H: u32 = 1;
    pub const _GLIBCXX_HAVE_NETINET_IN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_NETINET_TCP_H: u32 = 1;
    pub const _GLIBCXX_HAVE_OPENAT: u32 = 1;
    pub const _GLIBCXX_HAVE_O_NONBLOCK: u32 = 1;
    pub const _GLIBCXX_HAVE_POLL: u32 = 1;
    pub const _GLIBCXX_HAVE_POLL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
    pub const _GLIBCXX_HAVE_POSIX_SEMAPHORE: u32 = 1;
    pub const _GLIBCXX_HAVE_POWF: u32 = 1;
    pub const _GLIBCXX_HAVE_POWL: u32 = 1;
    pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
    pub const _GLIBCXX_HAVE_READLINK: u32 = 1;
    pub const _GLIBCXX_HAVE_SECURE_GETENV: u32 = 1;
    pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
    pub const _GLIBCXX_HAVE_SINF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
    pub const _GLIBCXX_HAVE_SINL: u32 = 1;
    pub const _GLIBCXX_HAVE_SOCKATMARK: u32 = 1;
    pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
    pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
    pub const _GLIBCXX_HAVE_STACKTRACE: u32 = 1;
    pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
    pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
    pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
    pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
    pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
    pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
    pub const _GLIBCXX_HAVE_SYMLINK: u32 = 1;
    pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_MMAN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SDT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SOCKET_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
    pub const _GLIBCXX_HAVE_TANF: u32 = 1;
    pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
    pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
    pub const _GLIBCXX_HAVE_TANL: u32 = 1;
    pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
    pub const _GLIBCXX_HAVE_TIMESPEC_GET: u32 = 1;
    pub const _GLIBCXX_HAVE_TLS: u32 = 1;
    pub const _GLIBCXX_HAVE_TRUNCATE: u32 = 1;
    pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
    pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
    pub const _GLIBCXX_HAVE_UNLINKAT: u32 = 1;
    pub const _GLIBCXX_HAVE_USELOCALE: u32 = 1;
    pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
    pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
    pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
    pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
    pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
    pub const _GLIBCXX_LT_OBJDIR: &[u8; 7] = b".libs/\0";
    pub const _GLIBCXX_PACKAGE_BUGREPORT: &[u8; 1] = b"\0";
    pub const _GLIBCXX_PACKAGE_NAME: &[u8; 15] = b"package-unused\0";
    pub const _GLIBCXX_PACKAGE_STRING: &[u8; 30] = b"package-unused version-unused\0";
    pub const _GLIBCXX_PACKAGE_TARNAME: &[u8; 10] = b"libstdc++\0";
    pub const _GLIBCXX_PACKAGE_URL: &[u8; 1] = b"\0";
    pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &[u8; 15] = b"version-unused\0";
    pub const _GLIBCXX_STDC_HEADERS: u32 = 1;
    pub const _GLIBCXX_DARWIN_USE_64_BIT_INODE: u32 = 1;
    pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
    pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
    pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
    pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
    pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
    pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
    pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
    pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
    pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
    pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
    pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
    pub const _GLIBCXX_CAN_ALIGNAS_DESTRUCTIVE_SIZE: u32 = 1;
    pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
    pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
    pub const _GLIBCXX_RES_LIMITS: u32 = 1;
    pub const _GLIBCXX_STATIC_TZDATA: u32 = 1;
    pub const _GLIBCXX_STDIO_EOF: i32 = -1;
    pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
    pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
    pub const _GLIBCXX_SYMVER: u32 = 1;
    pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
    pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
    pub const _GLIBCXX_USE_C99: u32 = 1;
    pub const _GLIBCXX_USE_C99_COMPLEX_ARC: u32 = 1;
    pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_CTYPE: u32 = 1;
    pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_FENV: u32 = 1;
    pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_MATH_FUNCS: u32 = 1;
    pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_STDINT: u32 = 1;
    pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
    pub const _GLIBCXX_USE_CHDIR: u32 = 1;
    pub const _GLIBCXX_USE_CHMOD: u32 = 1;
    pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
    pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
    pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
    pub const _GLIBCXX_USE_DEV_RANDOM: u32 = 1;
    pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
    pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
    pub const _GLIBCXX_USE_FSEEKO_FTELLO: u32 = 1;
    pub const _GLIBCXX_USE_GETCWD: u32 = 1;
    pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
    pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
    pub const _GLIBCXX_USE_INIT_PRIORITY_ATTRIBUTE: u32 = 1;
    pub const _GLIBCXX_USE_LFS: u32 = 1;
    pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
    pub const _GLIBCXX_USE_LSTAT: u32 = 1;
    pub const _GLIBCXX_USE_MKDIR: u32 = 1;
    pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
    pub const _GLIBCXX_USE_NLS: u32 = 1;
    pub const _GLIBCXX_USE_NL_LANGINFO_L: u32 = 1;
    pub const _GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT: u32 = 1;
    pub const _GLIBCXX_USE_PTHREAD_RWLOCK_CLOCKLOCK: u32 = 1;
    pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
    pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
    pub const _GLIBCXX_USE_REALPATH: u32 = 1;
    pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
    pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
    pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
    pub const _GLIBCXX_USE_STRUCT_TM_TM_ZONE: u32 = 1;
    pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
    pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
    pub const _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_CXX20: u32 = 1;
    pub const _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_FCHAR8_T: u32 = 1;
    pub const _GLIBCXX_USE_UTIME: u32 = 1;
    pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
    pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
    pub const _GLIBCXX_VERBOSE: u32 = 1;
    pub const _GLIBCXX_X86_RDRAND: u32 = 1;
    pub const _GLIBCXX_X86_RDSEED: u32 = 1;
    pub const _GLIBCXX_ZONEINFO_DIR: &[u8; 20] = b"/usr/share/zoneinfo\0";
    pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
    pub const _ERRNO_H: u32 = 1;
    pub const _BITS_ERRNO_H: u32 = 1;
    pub const EPERM: u32 = 1;
    pub const ENOENT: u32 = 2;
    pub const ESRCH: u32 = 3;
    pub const EINTR: u32 = 4;
    pub const EIO: u32 = 5;
    pub const ENXIO: u32 = 6;
    pub const E2BIG: u32 = 7;
    pub const ENOEXEC: u32 = 8;
    pub const EBADF: u32 = 9;
    pub const ECHILD: u32 = 10;
    pub const EAGAIN: u32 = 11;
    pub const ENOMEM: u32 = 12;
    pub const EACCES: u32 = 13;
    pub const EFAULT: u32 = 14;
    pub const ENOTBLK: u32 = 15;
    pub const EBUSY: u32 = 16;
    pub const EEXIST: u32 = 17;
    pub const EXDEV: u32 = 18;
    pub const ENODEV: u32 = 19;
    pub const ENOTDIR: u32 = 20;
    pub const EISDIR: u32 = 21;
    pub const EINVAL: u32 = 22;
    pub const ENFILE: u32 = 23;
    pub const EMFILE: u32 = 24;
    pub const ENOTTY: u32 = 25;
    pub const ETXTBSY: u32 = 26;
    pub const EFBIG: u32 = 27;
    pub const ENOSPC: u32 = 28;
    pub const ESPIPE: u32 = 29;
    pub const EROFS: u32 = 30;
    pub const EMLINK: u32 = 31;
    pub const EPIPE: u32 = 32;
    pub const EDOM: u32 = 33;
    pub const ERANGE: u32 = 34;
    pub const EDEADLK: u32 = 35;
    pub const ENAMETOOLONG: u32 = 36;
    pub const ENOLCK: u32 = 37;
    pub const ENOSYS: u32 = 38;
    pub const ENOTEMPTY: u32 = 39;
    pub const ELOOP: u32 = 40;
    pub const EWOULDBLOCK: u32 = 11;
    pub const ENOMSG: u32 = 42;
    pub const EIDRM: u32 = 43;
    pub const ECHRNG: u32 = 44;
    pub const EL2NSYNC: u32 = 45;
    pub const EL3HLT: u32 = 46;
    pub const EL3RST: u32 = 47;
    pub const ELNRNG: u32 = 48;
    pub const EUNATCH: u32 = 49;
    pub const ENOCSI: u32 = 50;
    pub const EL2HLT: u32 = 51;
    pub const EBADE: u32 = 52;
    pub const EBADR: u32 = 53;
    pub const EXFULL: u32 = 54;
    pub const ENOANO: u32 = 55;
    pub const EBADRQC: u32 = 56;
    pub const EBADSLT: u32 = 57;
    pub const EDEADLOCK: u32 = 35;
    pub const EBFONT: u32 = 59;
    pub const ENOSTR: u32 = 60;
    pub const ENODATA: u32 = 61;
    pub const ETIME: u32 = 62;
    pub const ENOSR: u32 = 63;
    pub const ENONET: u32 = 64;
    pub const ENOPKG: u32 = 65;
    pub const EREMOTE: u32 = 66;
    pub const ENOLINK: u32 = 67;
    pub const EADV: u32 = 68;
    pub const ESRMNT: u32 = 69;
    pub const ECOMM: u32 = 70;
    pub const EPROTO: u32 = 71;
    pub const EMULTIHOP: u32 = 72;
    pub const EDOTDOT: u32 = 73;
    pub const EBADMSG: u32 = 74;
    pub const EOVERFLOW: u32 = 75;
    pub const ENOTUNIQ: u32 = 76;
    pub const EBADFD: u32 = 77;
    pub const EREMCHG: u32 = 78;
    pub const ELIBACC: u32 = 79;
    pub const ELIBBAD: u32 = 80;
    pub const ELIBSCN: u32 = 81;
    pub const ELIBMAX: u32 = 82;
    pub const ELIBEXEC: u32 = 83;
    pub const EILSEQ: u32 = 84;
    pub const ERESTART: u32 = 85;
    pub const ESTRPIPE: u32 = 86;
    pub const EUSERS: u32 = 87;
    pub const ENOTSOCK: u32 = 88;
    pub const EDESTADDRREQ: u32 = 89;
    pub const EMSGSIZE: u32 = 90;
    pub const EPROTOTYPE: u32 = 91;
    pub const ENOPROTOOPT: u32 = 92;
    pub const EPROTONOSUPPORT: u32 = 93;
    pub const ESOCKTNOSUPPORT: u32 = 94;
    pub const EOPNOTSUPP: u32 = 95;
    pub const EPFNOSUPPORT: u32 = 96;
    pub const EAFNOSUPPORT: u32 = 97;
    pub const EADDRINUSE: u32 = 98;
    pub const EADDRNOTAVAIL: u32 = 99;
    pub const ENETDOWN: u32 = 100;
    pub const ENETUNREACH: u32 = 101;
    pub const ENETRESET: u32 = 102;
    pub const ECONNABORTED: u32 = 103;
    pub const ECONNRESET: u32 = 104;
    pub const ENOBUFS: u32 = 105;
    pub const EISCONN: u32 = 106;
    pub const ENOTCONN: u32 = 107;
    pub const ESHUTDOWN: u32 = 108;
    pub const ETOOMANYREFS: u32 = 109;
    pub const ETIMEDOUT: u32 = 110;
    pub const ECONNREFUSED: u32 = 111;
    pub const EHOSTDOWN: u32 = 112;
    pub const EHOSTUNREACH: u32 = 113;
    pub const EALREADY: u32 = 114;
    pub const EINPROGRESS: u32 = 115;
    pub const ESTALE: u32 = 116;
    pub const EUCLEAN: u32 = 117;
    pub const ENOTNAM: u32 = 118;
    pub const ENAVAIL: u32 = 119;
    pub const EISNAM: u32 = 120;
    pub const EREMOTEIO: u32 = 121;
    pub const EDQUOT: u32 = 122;
    pub const ENOMEDIUM: u32 = 123;
    pub const EMEDIUMTYPE: u32 = 124;
    pub const ECANCELED: u32 = 125;
    pub const ENOKEY: u32 = 126;
    pub const EKEYEXPIRED: u32 = 127;
    pub const EKEYREVOKED: u32 = 128;
    pub const EKEYREJECTED: u32 = 129;
    pub const EOWNERDEAD: u32 = 130;
    pub const ENOTRECOVERABLE: u32 = 131;
    pub const ERFKILL: u32 = 132;
    pub const EHWPOISON: u32 = 133;
    pub const ENOTSUP: u32 = 95;
    pub const __error_t_defined: u32 = 1;
    pub const _GLIBCXX_CSTDINT: u32 = 1;
    pub const _STDINT_H: u32 = 1;
    pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_EXT: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
    pub const _BITS_WCHAR_H: u32 = 1;
    pub const _BITS_STDINT_UINTN_H: u32 = 1;
    pub const _BITS_STDINT_LEAST_H: u32 = 1;
    pub const INT8_MIN: i32 = -128;
    pub const INT16_MIN: i32 = -32768;
    pub const INT32_MIN: i32 = -2147483648;
    pub const INT8_MAX: u32 = 127;
    pub const INT16_MAX: u32 = 32767;
    pub const INT32_MAX: u32 = 2147483647;
    pub const UINT8_MAX: u32 = 255;
    pub const UINT16_MAX: u32 = 65535;
    pub const UINT32_MAX: u32 = 4294967295;
    pub const INT_LEAST8_MIN: i32 = -128;
    pub const INT_LEAST16_MIN: i32 = -32768;
    pub const INT_LEAST32_MIN: i32 = -2147483648;
    pub const INT_LEAST8_MAX: u32 = 127;
    pub const INT_LEAST16_MAX: u32 = 32767;
    pub const INT_LEAST32_MAX: u32 = 2147483647;
    pub const UINT_LEAST8_MAX: u32 = 255;
    pub const UINT_LEAST16_MAX: u32 = 65535;
    pub const UINT_LEAST32_MAX: u32 = 4294967295;
    pub const INT_FAST8_MIN: i32 = -128;
    pub const INT_FAST16_MIN: i64 = -9223372036854775808;
    pub const INT_FAST32_MIN: i64 = -9223372036854775808;
    pub const INT_FAST8_MAX: u32 = 127;
    pub const INT_FAST16_MAX: u64 = 9223372036854775807;
    pub const INT_FAST32_MAX: u64 = 9223372036854775807;
    pub const UINT_FAST8_MAX: u32 = 255;
    pub const UINT_FAST16_MAX: i32 = -1;
    pub const UINT_FAST32_MAX: i32 = -1;
    pub const INTPTR_MIN: i64 = -9223372036854775808;
    pub const INTPTR_MAX: u64 = 9223372036854775807;
    pub const UINTPTR_MAX: i32 = -1;
    pub const PTRDIFF_MIN: i64 = -9223372036854775808;
    pub const PTRDIFF_MAX: u64 = 9223372036854775807;
    pub const SIG_ATOMIC_MIN: i32 = -2147483648;
    pub const SIG_ATOMIC_MAX: u32 = 2147483647;
    pub const SIZE_MAX: i32 = -1;
    pub const WINT_MIN: u32 = 0;
    pub const WINT_MAX: u32 = 4294967295;
    pub const INT8_WIDTH: u32 = 8;
    pub const UINT8_WIDTH: u32 = 8;
    pub const INT16_WIDTH: u32 = 16;
    pub const UINT16_WIDTH: u32 = 16;
    pub const INT32_WIDTH: u32 = 32;
    pub const UINT32_WIDTH: u32 = 32;
    pub const INT64_WIDTH: u32 = 64;
    pub const UINT64_WIDTH: u32 = 64;
    pub const INT_LEAST8_WIDTH: u32 = 8;
    pub const UINT_LEAST8_WIDTH: u32 = 8;
    pub const INT_LEAST16_WIDTH: u32 = 16;
    pub const UINT_LEAST16_WIDTH: u32 = 16;
    pub const INT_LEAST32_WIDTH: u32 = 32;
    pub const UINT_LEAST32_WIDTH: u32 = 32;
    pub const INT_LEAST64_WIDTH: u32 = 64;
    pub const UINT_LEAST64_WIDTH: u32 = 64;
    pub const INT_FAST8_WIDTH: u32 = 8;
    pub const UINT_FAST8_WIDTH: u32 = 8;
    pub const INT_FAST16_WIDTH: u32 = 64;
    pub const UINT_FAST16_WIDTH: u32 = 64;
    pub const INT_FAST32_WIDTH: u32 = 64;
    pub const UINT_FAST32_WIDTH: u32 = 64;
    pub const INT_FAST64_WIDTH: u32 = 64;
    pub const UINT_FAST64_WIDTH: u32 = 64;
    pub const INTPTR_WIDTH: u32 = 64;
    pub const UINTPTR_WIDTH: u32 = 64;
    pub const INTMAX_WIDTH: u32 = 64;
    pub const UINTMAX_WIDTH: u32 = 64;
    pub const PTRDIFF_WIDTH: u32 = 64;
    pub const SIG_ATOMIC_WIDTH: u32 = 32;
    pub const SIZE_WIDTH: u32 = 64;
    pub const WCHAR_WIDTH: u32 = 32;
    pub const WINT_WIDTH: u32 = 32;
    pub const _GLIBCXX_CFLOAT: u32 = 1;
    pub const _GLIBCXX_CMATH: u32 = 1;
    pub const _REQUIRES_FREESTANDING_H: u32 = 1;
    pub const _CPP_TYPE_TRAITS_H: u32 = 1;
    pub const __glibcxx_incomplete_container_elements: u32 = 201505;
    pub const __glibcxx_allocator_traits_is_always_equal: u32 = 201411;
    pub const __glibcxx_is_null_pointer: u32 = 201309;
    pub const __glibcxx_result_of_sfinae: u32 = 201210;
    pub const __glibcxx_shared_ptr_arrays: u32 = 201611;
    pub const __glibcxx_math_spec_funcs: u32 = 201003;
    pub const __glibcxx_exchange_function: u32 = 201304;
    pub const __glibcxx_integer_sequence: u32 = 201304;
    pub const __glibcxx_integral_constant_callable: u32 = 201304;
    pub const __glibcxx_is_final: u32 = 201402;
    pub const __glibcxx_make_reverse_iterator: u32 = 201402;
    pub const __glibcxx_null_iterators: u32 = 201304;
    pub const __glibcxx_transformation_trait_aliases: u32 = 201304;
    pub const __glibcxx_transparent_operators: u32 = 201510;
    pub const __glibcxx_tuple_element_t: u32 = 201402;
    pub const __glibcxx_tuples_by_type: u32 = 201304;
    pub const __glibcxx_robust_nonmodifying_seq_ops: u32 = 201304;
    pub const __glibcxx_to_chars: u32 = 201611;
    pub const __glibcxx_chrono_udls: u32 = 201304;
    pub const __glibcxx_complex_udls: u32 = 201309;
    pub const __glibcxx_generic_associative_lookup: u32 = 201304;
    pub const __glibcxx_make_unique: u32 = 201304;
    pub const __glibcxx_quoted_string_io: u32 = 201304;
    pub const __glibcxx_shared_timed_mutex: u32 = 201402;
    pub const __glibcxx_string_udls: u32 = 201304;
    pub const _EXT_TYPE_TRAITS: u32 = 1;
    pub const _MATH_H: u32 = 1;
    pub const _BITS_LIBM_SIMD_DECL_STUBS_H: u32 = 1;
    pub const __HAVE_FLOAT128: u32 = 1;
    pub const __HAVE_DISTINCT_FLOAT128: u32 = 1;
    pub const __HAVE_FLOAT64X: u32 = 1;
    pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
    pub const __HAVE_FLOAT16: u32 = 0;
    pub const __HAVE_FLOAT32: u32 = 1;
    pub const __HAVE_FLOAT64: u32 = 1;
    pub const __HAVE_FLOAT32X: u32 = 1;
    pub const __HAVE_FLOAT128X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
    pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
    pub const __FP_LOGB0_IS_MIN: u32 = 1;
    pub const __FP_LOGBNAN_IS_MIN: u32 = 1;
    pub const FP_ILOGB0: i32 = -2147483648;
    pub const FP_ILOGBNAN: i32 = -2147483648;
    pub const __FP_LONG_MAX: u64 = 9223372036854775807;
    pub const FP_LLOGB0: i64 = -9223372036854775808;
    pub const FP_LLOGBNAN: i64 = -9223372036854775808;
    pub const FP_INT_UPWARD: u32 = 0;
    pub const FP_INT_DOWNWARD: u32 = 1;
    pub const FP_INT_TOWARDZERO: u32 = 2;
    pub const FP_INT_TONEARESTFROMZERO: u32 = 3;
    pub const FP_INT_TONEAREST: u32 = 4;
    pub const __MATH_DECLARING_DOUBLE: u32 = 1;
    pub const __MATH_DECLARING_FLOATN: u32 = 0;
    pub const __MATH_DECLARE_LDOUBLE: u32 = 1;
    pub const FP_NAN: u32 = 0;
    pub const FP_INFINITE: u32 = 1;
    pub const FP_ZERO: u32 = 2;
    pub const FP_SUBNORMAL: u32 = 3;
    pub const FP_NORMAL: u32 = 4;
    pub const MATH_ERRNO: u32 = 1;
    pub const MATH_ERREXCEPT: u32 = 2;
    pub const math_errhandling: u32 = 3;
    pub const M_E: f64 = 2.718281828459045;
    pub const M_LOG2E: f64 = 1.4426950408889634;
    pub const M_LOG10E: f64 = 0.4342944819032518;
    pub const M_LN2: f64 = 0.6931471805599453;
    pub const M_LN10: f64 = 2.302585092994046;
    pub const M_PI: f64 = 3.141592653589793;
    pub const M_PI_2: f64 = 1.5707963267948966;
    pub const M_PI_4: f64 = 0.7853981633974483;
    pub const M_1_PI: f64 = 0.3183098861837907;
    pub const M_2_PI: f64 = 0.6366197723675814;
    pub const M_2_SQRTPI: f64 = 1.1283791670955126;
    pub const M_SQRT2: f64 = 1.4142135623730951;
    pub const M_SQRT1_2: f64 = 0.7071067811865476;
    pub const M_Ef: f64 = 2.718281828459045;
    pub const M_LOG2Ef: f64 = 1.4426950408889634;
    pub const M_LOG10Ef: f64 = 0.4342944819032518;
    pub const M_LN2f: f64 = 0.6931471805599453;
    pub const M_LN10f: f64 = 2.302585092994046;
    pub const M_PIf: f64 = 3.141592653589793;
    pub const M_PI_2f: f64 = 1.5707963267948966;
    pub const M_PI_4f: f64 = 0.7853981633974483;
    pub const M_1_PIf: f64 = 0.3183098861837907;
    pub const M_2_PIf: f64 = 0.6366197723675814;
    pub const M_2_SQRTPIf: f64 = 1.1283791670955126;
    pub const M_SQRT2f: f64 = 1.4142135623730951;
    pub const M_SQRT1_2f: f64 = 0.7071067811865476;
    pub const M_El: f64 = 2.718281828459045;
    pub const M_LOG2El: f64 = 1.4426950408889634;
    pub const M_LOG10El: f64 = 0.4342944819032518;
    pub const M_LN2l: f64 = 0.6931471805599453;
    pub const M_LN10l: f64 = 2.302585092994046;
    pub const M_PIl: f64 = 3.141592653589793;
    pub const M_PI_2l: f64 = 1.5707963267948966;
    pub const M_PI_4l: f64 = 0.7853981633974483;
    pub const M_1_PIl: f64 = 0.3183098861837907;
    pub const M_2_PIl: f64 = 0.6366197723675814;
    pub const M_2_SQRTPIl: f64 = 1.1283791670955126;
    pub const M_SQRT2l: f64 = 1.4142135623730951;
    pub const M_SQRT1_2l: f64 = 0.7071067811865476;
    pub const _STDLIB_H: u32 = 1;
    pub const WNOHANG: u32 = 1;
    pub const WUNTRACED: u32 = 2;
    pub const WSTOPPED: u32 = 2;
    pub const WEXITED: u32 = 4;
    pub const WCONTINUED: u32 = 8;
    pub const WNOWAIT: u32 = 16777216;
    pub const __WNOTHREAD: u32 = 536870912;
    pub const __WALL: u32 = 1073741824;
    pub const __WCLONE: u32 = 2147483648;
    pub const __W_CONTINUED: u32 = 65535;
    pub const __WCOREFLAG: u32 = 128;
    pub const __ldiv_t_defined: u32 = 1;
    pub const __lldiv_t_defined: u32 = 1;
    pub const RAND_MAX: u32 = 2147483647;
    pub const EXIT_FAILURE: u32 = 1;
    pub const EXIT_SUCCESS: u32 = 0;
    pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
    pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
    pub const _ALLOCA_H: u32 = 1;
    unsafe extern "C" {
        pub fn _dl_mcount_wrapper_check(__selfpc: *mut ::core::ffi::c_void);
    }
    pub type Lmid_t = ::core::ffi::c_long;
    unsafe extern "C" {
        pub fn dlopen(
            __file: *const ::core::ffi::c_char,
            __mode: ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn dlclose(__handle: *mut ::core::ffi::c_void) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn dlsym(
            __handle: *mut ::core::ffi::c_void,
            __name: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn dlmopen(
            __nsid: root::Lmid_t,
            __file: *const ::core::ffi::c_char,
            __mode: ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn dlvsym(
            __handle: *mut ::core::ffi::c_void,
            __name: *const ::core::ffi::c_char,
            __version: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn dlerror() -> *mut ::core::ffi::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Dl_info {
        pub dli_fname: *const ::core::ffi::c_char,
        pub dli_fbase: *mut ::core::ffi::c_void,
        pub dli_sname: *const ::core::ffi::c_char,
        pub dli_saddr: *mut ::core::ffi::c_void,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of Dl_info"][::core::mem::size_of::<Dl_info>() - 32usize];
        ["Alignment of Dl_info"][::core::mem::align_of::<Dl_info>() - 8usize];
        ["Offset of field: Dl_info::dli_fname"]
            [::core::mem::offset_of!(Dl_info, dli_fname) - 0usize];
        ["Offset of field: Dl_info::dli_fbase"]
            [::core::mem::offset_of!(Dl_info, dli_fbase) - 8usize];
        ["Offset of field: Dl_info::dli_sname"]
            [::core::mem::offset_of!(Dl_info, dli_sname) - 16usize];
        ["Offset of field: Dl_info::dli_saddr"]
            [::core::mem::offset_of!(Dl_info, dli_saddr) - 24usize];
    };
    unsafe extern "C" {
        pub fn dladdr(
            __address: *const ::core::ffi::c_void,
            __info: *mut root::Dl_info,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn dladdr1(
            __address: *const ::core::ffi::c_void,
            __info: *mut root::Dl_info,
            __extra_info: *mut *mut ::core::ffi::c_void,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    pub const RTLD_DL_SYMENT: root::_bindgen_ty_1 = 1;
    pub const RTLD_DL_LINKMAP: root::_bindgen_ty_1 = 2;
    pub type _bindgen_ty_1 = ::core::ffi::c_uint;
    unsafe extern "C" {
        pub fn dlinfo(
            __handle: *mut ::core::ffi::c_void,
            __request: ::core::ffi::c_int,
            __arg: *mut ::core::ffi::c_void,
        ) -> ::core::ffi::c_int;
    }
    pub const RTLD_DI_LMID: root::_bindgen_ty_2 = 1;
    pub const RTLD_DI_LINKMAP: root::_bindgen_ty_2 = 2;
    pub const RTLD_DI_CONFIGADDR: root::_bindgen_ty_2 = 3;
    pub const RTLD_DI_SERINFO: root::_bindgen_ty_2 = 4;
    pub const RTLD_DI_SERINFOSIZE: root::_bindgen_ty_2 = 5;
    pub const RTLD_DI_ORIGIN: root::_bindgen_ty_2 = 6;
    pub const RTLD_DI_PROFILENAME: root::_bindgen_ty_2 = 7;
    pub const RTLD_DI_PROFILEOUT: root::_bindgen_ty_2 = 8;
    pub const RTLD_DI_TLS_MODID: root::_bindgen_ty_2 = 9;
    pub const RTLD_DI_TLS_DATA: root::_bindgen_ty_2 = 10;
    pub const RTLD_DI_PHDR: root::_bindgen_ty_2 = 11;
    pub const RTLD_DI_MAX: root::_bindgen_ty_2 = 11;
    pub type _bindgen_ty_2 = ::core::ffi::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Dl_serpath {
        pub dls_name: *mut ::core::ffi::c_char,
        pub dls_flags: ::core::ffi::c_uint,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of Dl_serpath"][::core::mem::size_of::<Dl_serpath>() - 16usize];
        ["Alignment of Dl_serpath"][::core::mem::align_of::<Dl_serpath>() - 8usize];
        ["Offset of field: Dl_serpath::dls_name"]
            [::core::mem::offset_of!(Dl_serpath, dls_name) - 0usize];
        ["Offset of field: Dl_serpath::dls_flags"]
            [::core::mem::offset_of!(Dl_serpath, dls_flags) - 8usize];
    };
    #[repr(C)]
    pub struct Dl_serinfo {
        pub dls_size: usize,
        pub dls_cnt: ::core::ffi::c_uint,
        pub __bindgen_anon_1: root::Dl_serinfo__bindgen_ty_1,
    }
    #[repr(C)]
    pub struct Dl_serinfo__bindgen_ty_1 {
        pub dls_serpath: root::__BindgenUnionField<[root::Dl_serpath; 0usize]>,
        pub __dls_serpath_pad: root::__BindgenUnionField<[root::Dl_serpath; 1usize]>,
        pub bindgen_union_field: [u64; 2usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of Dl_serinfo__bindgen_ty_1"]
            [::core::mem::size_of::<Dl_serinfo__bindgen_ty_1>() - 16usize];
        ["Alignment of Dl_serinfo__bindgen_ty_1"]
            [::core::mem::align_of::<Dl_serinfo__bindgen_ty_1>() - 8usize];
        ["Offset of field: Dl_serinfo__bindgen_ty_1::dls_serpath"]
            [::core::mem::offset_of!(Dl_serinfo__bindgen_ty_1, dls_serpath) - 0usize];
        ["Offset of field: Dl_serinfo__bindgen_ty_1::__dls_serpath_pad"]
            [::core::mem::offset_of!(Dl_serinfo__bindgen_ty_1, __dls_serpath_pad) - 0usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of Dl_serinfo"][::core::mem::size_of::<Dl_serinfo>() - 32usize];
        ["Alignment of Dl_serinfo"][::core::mem::align_of::<Dl_serinfo>() - 8usize];
        ["Offset of field: Dl_serinfo::dls_size"]
            [::core::mem::offset_of!(Dl_serinfo, dls_size) - 0usize];
        ["Offset of field: Dl_serinfo::dls_cnt"]
            [::core::mem::offset_of!(Dl_serinfo, dls_cnt) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct dl_find_object {
        pub dlfo_flags: ::core::ffi::c_ulonglong,
        pub dlfo_map_start: *mut ::core::ffi::c_void,
        pub dlfo_map_end: *mut ::core::ffi::c_void,
        pub dlfo_link_map: *mut root::link_map,
        pub dlfo_eh_frame: *mut ::core::ffi::c_void,
        pub __dflo_reserved: [::core::ffi::c_ulonglong; 7usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of dl_find_object"][::core::mem::size_of::<dl_find_object>() - 96usize];
        ["Alignment of dl_find_object"][::core::mem::align_of::<dl_find_object>() - 8usize];
        ["Offset of field: dl_find_object::dlfo_flags"]
            [::core::mem::offset_of!(dl_find_object, dlfo_flags) - 0usize];
        ["Offset of field: dl_find_object::dlfo_map_start"]
            [::core::mem::offset_of!(dl_find_object, dlfo_map_start) - 8usize];
        ["Offset of field: dl_find_object::dlfo_map_end"]
            [::core::mem::offset_of!(dl_find_object, dlfo_map_end) - 16usize];
        ["Offset of field: dl_find_object::dlfo_link_map"]
            [::core::mem::offset_of!(dl_find_object, dlfo_link_map) - 24usize];
        ["Offset of field: dl_find_object::dlfo_eh_frame"]
            [::core::mem::offset_of!(dl_find_object, dlfo_eh_frame) - 32usize];
        ["Offset of field: dl_find_object::__dflo_reserved"]
            [::core::mem::offset_of!(dl_find_object, __dflo_reserved) - 40usize];
    };
    unsafe extern "C" {
        pub fn _dl_find_object(
            __address: *mut ::core::ffi::c_void,
            __result: *mut root::dl_find_object,
        ) -> ::core::ffi::c_int;
    }
    pub type __u_char = ::core::ffi::c_uchar;
    pub type __u_short = ::core::ffi::c_ushort;
    pub type __u_int = ::core::ffi::c_uint;
    pub type __u_long = ::core::ffi::c_ulong;
    pub type __int8_t = ::core::ffi::c_schar;
    pub type __uint8_t = ::core::ffi::c_uchar;
    pub type __int16_t = ::core::ffi::c_short;
    pub type __uint16_t = ::core::ffi::c_ushort;
    pub type __int32_t = ::core::ffi::c_int;
    pub type __uint32_t = ::core::ffi::c_uint;
    pub type __int64_t = ::core::ffi::c_long;
    pub type __uint64_t = ::core::ffi::c_ulong;
    pub type __int_least8_t = root::__int8_t;
    pub type __uint_least8_t = root::__uint8_t;
    pub type __int_least16_t = root::__int16_t;
    pub type __uint_least16_t = root::__uint16_t;
    pub type __int_least32_t = root::__int32_t;
    pub type __uint_least32_t = root::__uint32_t;
    pub type __int_least64_t = root::__int64_t;
    pub type __uint_least64_t = root::__uint64_t;
    pub type __quad_t = ::core::ffi::c_long;
    pub type __u_quad_t = ::core::ffi::c_ulong;
    pub type __intmax_t = ::core::ffi::c_long;
    pub type __uintmax_t = ::core::ffi::c_ulong;
    pub type __dev_t = ::core::ffi::c_ulong;
    pub type __uid_t = ::core::ffi::c_uint;
    pub type __gid_t = ::core::ffi::c_uint;
    pub type __ino_t = ::core::ffi::c_ulong;
    pub type __ino64_t = ::core::ffi::c_ulong;
    pub type __mode_t = ::core::ffi::c_uint;
    pub type __nlink_t = ::core::ffi::c_ulong;
    pub type __off_t = ::core::ffi::c_long;
    pub type __off64_t = ::core::ffi::c_long;
    pub type __pid_t = ::core::ffi::c_int;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __fsid_t {
        pub __val: [::core::ffi::c_int; 2usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __fsid_t"][::core::mem::size_of::<__fsid_t>() - 8usize];
        ["Alignment of __fsid_t"][::core::mem::align_of::<__fsid_t>() - 4usize];
        ["Offset of field: __fsid_t::__val"][::core::mem::offset_of!(__fsid_t, __val) - 0usize];
    };
    pub type __clock_t = ::core::ffi::c_long;
    pub type __rlim_t = ::core::ffi::c_ulong;
    pub type __rlim64_t = ::core::ffi::c_ulong;
    pub type __id_t = ::core::ffi::c_uint;
    pub type __time_t = ::core::ffi::c_long;
    pub type __useconds_t = ::core::ffi::c_uint;
    pub type __suseconds_t = ::core::ffi::c_long;
    pub type __suseconds64_t = ::core::ffi::c_long;
    pub type __daddr_t = ::core::ffi::c_int;
    pub type __key_t = ::core::ffi::c_int;
    pub type __clockid_t = ::core::ffi::c_int;
    pub type __timer_t = *mut ::core::ffi::c_void;
    pub type __blksize_t = ::core::ffi::c_long;
    pub type __blkcnt_t = ::core::ffi::c_long;
    pub type __blkcnt64_t = ::core::ffi::c_long;
    pub type __fsblkcnt_t = ::core::ffi::c_ulong;
    pub type __fsblkcnt64_t = ::core::ffi::c_ulong;
    pub type __fsfilcnt_t = ::core::ffi::c_ulong;
    pub type __fsfilcnt64_t = ::core::ffi::c_ulong;
    pub type __fsword_t = ::core::ffi::c_long;
    pub type __ssize_t = ::core::ffi::c_long;
    pub type __syscall_slong_t = ::core::ffi::c_long;
    pub type __syscall_ulong_t = ::core::ffi::c_ulong;
    pub type __loff_t = root::__off64_t;
    pub type __caddr_t = *mut ::core::ffi::c_char;
    pub type __intptr_t = ::core::ffi::c_long;
    pub type __socklen_t = ::core::ffi::c_uint;
    pub type __sig_atomic_t = ::core::ffi::c_int;
    pub type gid_t = root::__gid_t;
    pub type uid_t = root::__uid_t;
    pub type off_t = root::__off_t;
    pub type off64_t = root::__off64_t;
    pub type useconds_t = root::__useconds_t;
    pub type pid_t = root::__pid_t;
    pub type socklen_t = root::__socklen_t;
    unsafe extern "C" {
        pub fn access(
            __name: *const ::core::ffi::c_char,
            __type: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn euidaccess(
            __name: *const ::core::ffi::c_char,
            __type: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn eaccess(
            __name: *const ::core::ffi::c_char,
            __type: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn execveat(
            __fd: ::core::ffi::c_int,
            __path: *const ::core::ffi::c_char,
            __argv: *const *mut ::core::ffi::c_char,
            __envp: *const *mut ::core::ffi::c_char,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn faccessat(
            __fd: ::core::ffi::c_int,
            __file: *const ::core::ffi::c_char,
            __type: ::core::ffi::c_int,
            __flag: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn lseek(
            __fd: ::core::ffi::c_int,
            __offset: root::__off_t,
            __whence: ::core::ffi::c_int,
        ) -> root::__off_t;
    }
    unsafe extern "C" {
        pub fn lseek64(
            __fd: ::core::ffi::c_int,
            __offset: root::__off64_t,
            __whence: ::core::ffi::c_int,
        ) -> root::__off64_t;
    }
    unsafe extern "C" {
        pub fn close(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn closefrom(__lowfd: ::core::ffi::c_int);
    }
    unsafe extern "C" {
        pub fn read(
            __fd: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_void,
            __nbytes: usize,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn write(
            __fd: ::core::ffi::c_int,
            __buf: *const ::core::ffi::c_void,
            __n: usize,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn pread(
            __fd: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_void,
            __nbytes: usize,
            __offset: root::__off_t,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn pwrite(
            __fd: ::core::ffi::c_int,
            __buf: *const ::core::ffi::c_void,
            __n: usize,
            __offset: root::__off_t,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn pread64(
            __fd: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_void,
            __nbytes: usize,
            __offset: root::__off64_t,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn pwrite64(
            __fd: ::core::ffi::c_int,
            __buf: *const ::core::ffi::c_void,
            __n: usize,
            __offset: root::__off64_t,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn pipe(__pipedes: *mut ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pipe2(
            __pipedes: *mut ::core::ffi::c_int,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn alarm(__seconds: ::core::ffi::c_uint) -> ::core::ffi::c_uint;
    }
    unsafe extern "C" {
        pub fn sleep(__seconds: ::core::ffi::c_uint) -> ::core::ffi::c_uint;
    }
    unsafe extern "C" {
        pub fn ualarm(
            __value: root::__useconds_t,
            __interval: root::__useconds_t,
        ) -> root::__useconds_t;
    }
    unsafe extern "C" {
        pub fn usleep(__useconds: root::__useconds_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pause() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn chown(
            __file: *const ::core::ffi::c_char,
            __owner: root::__uid_t,
            __group: root::__gid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fchown(
            __fd: ::core::ffi::c_int,
            __owner: root::__uid_t,
            __group: root::__gid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn lchown(
            __file: *const ::core::ffi::c_char,
            __owner: root::__uid_t,
            __group: root::__gid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fchownat(
            __fd: ::core::ffi::c_int,
            __file: *const ::core::ffi::c_char,
            __owner: root::__uid_t,
            __group: root::__gid_t,
            __flag: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn chdir(__path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fchdir(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getcwd(__buf: *mut ::core::ffi::c_char, __size: usize) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn get_current_dir_name() -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn getwd(__buf: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn dup(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn dup2(__fd: ::core::ffi::c_int, __fd2: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn dup3(
            __fd: ::core::ffi::c_int,
            __fd2: ::core::ffi::c_int,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub static mut __environ: *mut *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub static mut environ: *mut *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn execve(
            __path: *const ::core::ffi::c_char,
            __argv: *const *mut ::core::ffi::c_char,
            __envp: *const *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fexecve(
            __fd: ::core::ffi::c_int,
            __argv: *const *mut ::core::ffi::c_char,
            __envp: *const *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn execv(
            __path: *const ::core::ffi::c_char,
            __argv: *const *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn execle(
            __path: *const ::core::ffi::c_char,
            __arg: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn execl(
            __path: *const ::core::ffi::c_char,
            __arg: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn execvp(
            __file: *const ::core::ffi::c_char,
            __argv: *const *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn execlp(
            __file: *const ::core::ffi::c_char,
            __arg: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn execvpe(
            __file: *const ::core::ffi::c_char,
            __argv: *const *mut ::core::ffi::c_char,
            __envp: *const *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn nice(__inc: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn _exit(__status: ::core::ffi::c_int) -> !;
    }
    pub const _PC_LINK_MAX: root::_bindgen_ty_3 = 0;
    pub const _PC_MAX_CANON: root::_bindgen_ty_3 = 1;
    pub const _PC_MAX_INPUT: root::_bindgen_ty_3 = 2;
    pub const _PC_NAME_MAX: root::_bindgen_ty_3 = 3;
    pub const _PC_PATH_MAX: root::_bindgen_ty_3 = 4;
    pub const _PC_PIPE_BUF: root::_bindgen_ty_3 = 5;
    pub const _PC_CHOWN_RESTRICTED: root::_bindgen_ty_3 = 6;
    pub const _PC_NO_TRUNC: root::_bindgen_ty_3 = 7;
    pub const _PC_VDISABLE: root::_bindgen_ty_3 = 8;
    pub const _PC_SYNC_IO: root::_bindgen_ty_3 = 9;
    pub const _PC_ASYNC_IO: root::_bindgen_ty_3 = 10;
    pub const _PC_PRIO_IO: root::_bindgen_ty_3 = 11;
    pub const _PC_SOCK_MAXBUF: root::_bindgen_ty_3 = 12;
    pub const _PC_FILESIZEBITS: root::_bindgen_ty_3 = 13;
    pub const _PC_REC_INCR_XFER_SIZE: root::_bindgen_ty_3 = 14;
    pub const _PC_REC_MAX_XFER_SIZE: root::_bindgen_ty_3 = 15;
    pub const _PC_REC_MIN_XFER_SIZE: root::_bindgen_ty_3 = 16;
    pub const _PC_REC_XFER_ALIGN: root::_bindgen_ty_3 = 17;
    pub const _PC_ALLOC_SIZE_MIN: root::_bindgen_ty_3 = 18;
    pub const _PC_SYMLINK_MAX: root::_bindgen_ty_3 = 19;
    pub const _PC_2_SYMLINKS: root::_bindgen_ty_3 = 20;
    pub type _bindgen_ty_3 = ::core::ffi::c_uint;
    pub const _SC_ARG_MAX: root::_bindgen_ty_4 = 0;
    pub const _SC_CHILD_MAX: root::_bindgen_ty_4 = 1;
    pub const _SC_CLK_TCK: root::_bindgen_ty_4 = 2;
    pub const _SC_NGROUPS_MAX: root::_bindgen_ty_4 = 3;
    pub const _SC_OPEN_MAX: root::_bindgen_ty_4 = 4;
    pub const _SC_STREAM_MAX: root::_bindgen_ty_4 = 5;
    pub const _SC_TZNAME_MAX: root::_bindgen_ty_4 = 6;
    pub const _SC_JOB_CONTROL: root::_bindgen_ty_4 = 7;
    pub const _SC_SAVED_IDS: root::_bindgen_ty_4 = 8;
    pub const _SC_REALTIME_SIGNALS: root::_bindgen_ty_4 = 9;
    pub const _SC_PRIORITY_SCHEDULING: root::_bindgen_ty_4 = 10;
    pub const _SC_TIMERS: root::_bindgen_ty_4 = 11;
    pub const _SC_ASYNCHRONOUS_IO: root::_bindgen_ty_4 = 12;
    pub const _SC_PRIORITIZED_IO: root::_bindgen_ty_4 = 13;
    pub const _SC_SYNCHRONIZED_IO: root::_bindgen_ty_4 = 14;
    pub const _SC_FSYNC: root::_bindgen_ty_4 = 15;
    pub const _SC_MAPPED_FILES: root::_bindgen_ty_4 = 16;
    pub const _SC_MEMLOCK: root::_bindgen_ty_4 = 17;
    pub const _SC_MEMLOCK_RANGE: root::_bindgen_ty_4 = 18;
    pub const _SC_MEMORY_PROTECTION: root::_bindgen_ty_4 = 19;
    pub const _SC_MESSAGE_PASSING: root::_bindgen_ty_4 = 20;
    pub const _SC_SEMAPHORES: root::_bindgen_ty_4 = 21;
    pub const _SC_SHARED_MEMORY_OBJECTS: root::_bindgen_ty_4 = 22;
    pub const _SC_AIO_LISTIO_MAX: root::_bindgen_ty_4 = 23;
    pub const _SC_AIO_MAX: root::_bindgen_ty_4 = 24;
    pub const _SC_AIO_PRIO_DELTA_MAX: root::_bindgen_ty_4 = 25;
    pub const _SC_DELAYTIMER_MAX: root::_bindgen_ty_4 = 26;
    pub const _SC_MQ_OPEN_MAX: root::_bindgen_ty_4 = 27;
    pub const _SC_MQ_PRIO_MAX: root::_bindgen_ty_4 = 28;
    pub const _SC_VERSION: root::_bindgen_ty_4 = 29;
    pub const _SC_PAGESIZE: root::_bindgen_ty_4 = 30;
    pub const _SC_RTSIG_MAX: root::_bindgen_ty_4 = 31;
    pub const _SC_SEM_NSEMS_MAX: root::_bindgen_ty_4 = 32;
    pub const _SC_SEM_VALUE_MAX: root::_bindgen_ty_4 = 33;
    pub const _SC_SIGQUEUE_MAX: root::_bindgen_ty_4 = 34;
    pub const _SC_TIMER_MAX: root::_bindgen_ty_4 = 35;
    pub const _SC_BC_BASE_MAX: root::_bindgen_ty_4 = 36;
    pub const _SC_BC_DIM_MAX: root::_bindgen_ty_4 = 37;
    pub const _SC_BC_SCALE_MAX: root::_bindgen_ty_4 = 38;
    pub const _SC_BC_STRING_MAX: root::_bindgen_ty_4 = 39;
    pub const _SC_COLL_WEIGHTS_MAX: root::_bindgen_ty_4 = 40;
    pub const _SC_EQUIV_CLASS_MAX: root::_bindgen_ty_4 = 41;
    pub const _SC_EXPR_NEST_MAX: root::_bindgen_ty_4 = 42;
    pub const _SC_LINE_MAX: root::_bindgen_ty_4 = 43;
    pub const _SC_RE_DUP_MAX: root::_bindgen_ty_4 = 44;
    pub const _SC_CHARCLASS_NAME_MAX: root::_bindgen_ty_4 = 45;
    pub const _SC_2_VERSION: root::_bindgen_ty_4 = 46;
    pub const _SC_2_C_BIND: root::_bindgen_ty_4 = 47;
    pub const _SC_2_C_DEV: root::_bindgen_ty_4 = 48;
    pub const _SC_2_FORT_DEV: root::_bindgen_ty_4 = 49;
    pub const _SC_2_FORT_RUN: root::_bindgen_ty_4 = 50;
    pub const _SC_2_SW_DEV: root::_bindgen_ty_4 = 51;
    pub const _SC_2_LOCALEDEF: root::_bindgen_ty_4 = 52;
    pub const _SC_PII: root::_bindgen_ty_4 = 53;
    pub const _SC_PII_XTI: root::_bindgen_ty_4 = 54;
    pub const _SC_PII_SOCKET: root::_bindgen_ty_4 = 55;
    pub const _SC_PII_INTERNET: root::_bindgen_ty_4 = 56;
    pub const _SC_PII_OSI: root::_bindgen_ty_4 = 57;
    pub const _SC_POLL: root::_bindgen_ty_4 = 58;
    pub const _SC_SELECT: root::_bindgen_ty_4 = 59;
    pub const _SC_UIO_MAXIOV: root::_bindgen_ty_4 = 60;
    pub const _SC_IOV_MAX: root::_bindgen_ty_4 = 60;
    pub const _SC_PII_INTERNET_STREAM: root::_bindgen_ty_4 = 61;
    pub const _SC_PII_INTERNET_DGRAM: root::_bindgen_ty_4 = 62;
    pub const _SC_PII_OSI_COTS: root::_bindgen_ty_4 = 63;
    pub const _SC_PII_OSI_CLTS: root::_bindgen_ty_4 = 64;
    pub const _SC_PII_OSI_M: root::_bindgen_ty_4 = 65;
    pub const _SC_T_IOV_MAX: root::_bindgen_ty_4 = 66;
    pub const _SC_THREADS: root::_bindgen_ty_4 = 67;
    pub const _SC_THREAD_SAFE_FUNCTIONS: root::_bindgen_ty_4 = 68;
    pub const _SC_GETGR_R_SIZE_MAX: root::_bindgen_ty_4 = 69;
    pub const _SC_GETPW_R_SIZE_MAX: root::_bindgen_ty_4 = 70;
    pub const _SC_LOGIN_NAME_MAX: root::_bindgen_ty_4 = 71;
    pub const _SC_TTY_NAME_MAX: root::_bindgen_ty_4 = 72;
    pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: root::_bindgen_ty_4 = 73;
    pub const _SC_THREAD_KEYS_MAX: root::_bindgen_ty_4 = 74;
    pub const _SC_THREAD_STACK_MIN: root::_bindgen_ty_4 = 75;
    pub const _SC_THREAD_THREADS_MAX: root::_bindgen_ty_4 = 76;
    pub const _SC_THREAD_ATTR_STACKADDR: root::_bindgen_ty_4 = 77;
    pub const _SC_THREAD_ATTR_STACKSIZE: root::_bindgen_ty_4 = 78;
    pub const _SC_THREAD_PRIORITY_SCHEDULING: root::_bindgen_ty_4 = 79;
    pub const _SC_THREAD_PRIO_INHERIT: root::_bindgen_ty_4 = 80;
    pub const _SC_THREAD_PRIO_PROTECT: root::_bindgen_ty_4 = 81;
    pub const _SC_THREAD_PROCESS_SHARED: root::_bindgen_ty_4 = 82;
    pub const _SC_NPROCESSORS_CONF: root::_bindgen_ty_4 = 83;
    pub const _SC_NPROCESSORS_ONLN: root::_bindgen_ty_4 = 84;
    pub const _SC_PHYS_PAGES: root::_bindgen_ty_4 = 85;
    pub const _SC_AVPHYS_PAGES: root::_bindgen_ty_4 = 86;
    pub const _SC_ATEXIT_MAX: root::_bindgen_ty_4 = 87;
    pub const _SC_PASS_MAX: root::_bindgen_ty_4 = 88;
    pub const _SC_XOPEN_VERSION: root::_bindgen_ty_4 = 89;
    pub const _SC_XOPEN_XCU_VERSION: root::_bindgen_ty_4 = 90;
    pub const _SC_XOPEN_UNIX: root::_bindgen_ty_4 = 91;
    pub const _SC_XOPEN_CRYPT: root::_bindgen_ty_4 = 92;
    pub const _SC_XOPEN_ENH_I18N: root::_bindgen_ty_4 = 93;
    pub const _SC_XOPEN_SHM: root::_bindgen_ty_4 = 94;
    pub const _SC_2_CHAR_TERM: root::_bindgen_ty_4 = 95;
    pub const _SC_2_C_VERSION: root::_bindgen_ty_4 = 96;
    pub const _SC_2_UPE: root::_bindgen_ty_4 = 97;
    pub const _SC_XOPEN_XPG2: root::_bindgen_ty_4 = 98;
    pub const _SC_XOPEN_XPG3: root::_bindgen_ty_4 = 99;
    pub const _SC_XOPEN_XPG4: root::_bindgen_ty_4 = 100;
    pub const _SC_CHAR_BIT: root::_bindgen_ty_4 = 101;
    pub const _SC_CHAR_MAX: root::_bindgen_ty_4 = 102;
    pub const _SC_CHAR_MIN: root::_bindgen_ty_4 = 103;
    pub const _SC_INT_MAX: root::_bindgen_ty_4 = 104;
    pub const _SC_INT_MIN: root::_bindgen_ty_4 = 105;
    pub const _SC_LONG_BIT: root::_bindgen_ty_4 = 106;
    pub const _SC_WORD_BIT: root::_bindgen_ty_4 = 107;
    pub const _SC_MB_LEN_MAX: root::_bindgen_ty_4 = 108;
    pub const _SC_NZERO: root::_bindgen_ty_4 = 109;
    pub const _SC_SSIZE_MAX: root::_bindgen_ty_4 = 110;
    pub const _SC_SCHAR_MAX: root::_bindgen_ty_4 = 111;
    pub const _SC_SCHAR_MIN: root::_bindgen_ty_4 = 112;
    pub const _SC_SHRT_MAX: root::_bindgen_ty_4 = 113;
    pub const _SC_SHRT_MIN: root::_bindgen_ty_4 = 114;
    pub const _SC_UCHAR_MAX: root::_bindgen_ty_4 = 115;
    pub const _SC_UINT_MAX: root::_bindgen_ty_4 = 116;
    pub const _SC_ULONG_MAX: root::_bindgen_ty_4 = 117;
    pub const _SC_USHRT_MAX: root::_bindgen_ty_4 = 118;
    pub const _SC_NL_ARGMAX: root::_bindgen_ty_4 = 119;
    pub const _SC_NL_LANGMAX: root::_bindgen_ty_4 = 120;
    pub const _SC_NL_MSGMAX: root::_bindgen_ty_4 = 121;
    pub const _SC_NL_NMAX: root::_bindgen_ty_4 = 122;
    pub const _SC_NL_SETMAX: root::_bindgen_ty_4 = 123;
    pub const _SC_NL_TEXTMAX: root::_bindgen_ty_4 = 124;
    pub const _SC_XBS5_ILP32_OFF32: root::_bindgen_ty_4 = 125;
    pub const _SC_XBS5_ILP32_OFFBIG: root::_bindgen_ty_4 = 126;
    pub const _SC_XBS5_LP64_OFF64: root::_bindgen_ty_4 = 127;
    pub const _SC_XBS5_LPBIG_OFFBIG: root::_bindgen_ty_4 = 128;
    pub const _SC_XOPEN_LEGACY: root::_bindgen_ty_4 = 129;
    pub const _SC_XOPEN_REALTIME: root::_bindgen_ty_4 = 130;
    pub const _SC_XOPEN_REALTIME_THREADS: root::_bindgen_ty_4 = 131;
    pub const _SC_ADVISORY_INFO: root::_bindgen_ty_4 = 132;
    pub const _SC_BARRIERS: root::_bindgen_ty_4 = 133;
    pub const _SC_BASE: root::_bindgen_ty_4 = 134;
    pub const _SC_C_LANG_SUPPORT: root::_bindgen_ty_4 = 135;
    pub const _SC_C_LANG_SUPPORT_R: root::_bindgen_ty_4 = 136;
    pub const _SC_CLOCK_SELECTION: root::_bindgen_ty_4 = 137;
    pub const _SC_CPUTIME: root::_bindgen_ty_4 = 138;
    pub const _SC_THREAD_CPUTIME: root::_bindgen_ty_4 = 139;
    pub const _SC_DEVICE_IO: root::_bindgen_ty_4 = 140;
    pub const _SC_DEVICE_SPECIFIC: root::_bindgen_ty_4 = 141;
    pub const _SC_DEVICE_SPECIFIC_R: root::_bindgen_ty_4 = 142;
    pub const _SC_FD_MGMT: root::_bindgen_ty_4 = 143;
    pub const _SC_FIFO: root::_bindgen_ty_4 = 144;
    pub const _SC_PIPE: root::_bindgen_ty_4 = 145;
    pub const _SC_FILE_ATTRIBUTES: root::_bindgen_ty_4 = 146;
    pub const _SC_FILE_LOCKING: root::_bindgen_ty_4 = 147;
    pub const _SC_FILE_SYSTEM: root::_bindgen_ty_4 = 148;
    pub const _SC_MONOTONIC_CLOCK: root::_bindgen_ty_4 = 149;
    pub const _SC_MULTI_PROCESS: root::_bindgen_ty_4 = 150;
    pub const _SC_SINGLE_PROCESS: root::_bindgen_ty_4 = 151;
    pub const _SC_NETWORKING: root::_bindgen_ty_4 = 152;
    pub const _SC_READER_WRITER_LOCKS: root::_bindgen_ty_4 = 153;
    pub const _SC_SPIN_LOCKS: root::_bindgen_ty_4 = 154;
    pub const _SC_REGEXP: root::_bindgen_ty_4 = 155;
    pub const _SC_REGEX_VERSION: root::_bindgen_ty_4 = 156;
    pub const _SC_SHELL: root::_bindgen_ty_4 = 157;
    pub const _SC_SIGNALS: root::_bindgen_ty_4 = 158;
    pub const _SC_SPAWN: root::_bindgen_ty_4 = 159;
    pub const _SC_SPORADIC_SERVER: root::_bindgen_ty_4 = 160;
    pub const _SC_THREAD_SPORADIC_SERVER: root::_bindgen_ty_4 = 161;
    pub const _SC_SYSTEM_DATABASE: root::_bindgen_ty_4 = 162;
    pub const _SC_SYSTEM_DATABASE_R: root::_bindgen_ty_4 = 163;
    pub const _SC_TIMEOUTS: root::_bindgen_ty_4 = 164;
    pub const _SC_TYPED_MEMORY_OBJECTS: root::_bindgen_ty_4 = 165;
    pub const _SC_USER_GROUPS: root::_bindgen_ty_4 = 166;
    pub const _SC_USER_GROUPS_R: root::_bindgen_ty_4 = 167;
    pub const _SC_2_PBS: root::_bindgen_ty_4 = 168;
    pub const _SC_2_PBS_ACCOUNTING: root::_bindgen_ty_4 = 169;
    pub const _SC_2_PBS_LOCATE: root::_bindgen_ty_4 = 170;
    pub const _SC_2_PBS_MESSAGE: root::_bindgen_ty_4 = 171;
    pub const _SC_2_PBS_TRACK: root::_bindgen_ty_4 = 172;
    pub const _SC_SYMLOOP_MAX: root::_bindgen_ty_4 = 173;
    pub const _SC_STREAMS: root::_bindgen_ty_4 = 174;
    pub const _SC_2_PBS_CHECKPOINT: root::_bindgen_ty_4 = 175;
    pub const _SC_V6_ILP32_OFF32: root::_bindgen_ty_4 = 176;
    pub const _SC_V6_ILP32_OFFBIG: root::_bindgen_ty_4 = 177;
    pub const _SC_V6_LP64_OFF64: root::_bindgen_ty_4 = 178;
    pub const _SC_V6_LPBIG_OFFBIG: root::_bindgen_ty_4 = 179;
    pub const _SC_HOST_NAME_MAX: root::_bindgen_ty_4 = 180;
    pub const _SC_TRACE: root::_bindgen_ty_4 = 181;
    pub const _SC_TRACE_EVENT_FILTER: root::_bindgen_ty_4 = 182;
    pub const _SC_TRACE_INHERIT: root::_bindgen_ty_4 = 183;
    pub const _SC_TRACE_LOG: root::_bindgen_ty_4 = 184;
    pub const _SC_LEVEL1_ICACHE_SIZE: root::_bindgen_ty_4 = 185;
    pub const _SC_LEVEL1_ICACHE_ASSOC: root::_bindgen_ty_4 = 186;
    pub const _SC_LEVEL1_ICACHE_LINESIZE: root::_bindgen_ty_4 = 187;
    pub const _SC_LEVEL1_DCACHE_SIZE: root::_bindgen_ty_4 = 188;
    pub const _SC_LEVEL1_DCACHE_ASSOC: root::_bindgen_ty_4 = 189;
    pub const _SC_LEVEL1_DCACHE_LINESIZE: root::_bindgen_ty_4 = 190;
    pub const _SC_LEVEL2_CACHE_SIZE: root::_bindgen_ty_4 = 191;
    pub const _SC_LEVEL2_CACHE_ASSOC: root::_bindgen_ty_4 = 192;
    pub const _SC_LEVEL2_CACHE_LINESIZE: root::_bindgen_ty_4 = 193;
    pub const _SC_LEVEL3_CACHE_SIZE: root::_bindgen_ty_4 = 194;
    pub const _SC_LEVEL3_CACHE_ASSOC: root::_bindgen_ty_4 = 195;
    pub const _SC_LEVEL3_CACHE_LINESIZE: root::_bindgen_ty_4 = 196;
    pub const _SC_LEVEL4_CACHE_SIZE: root::_bindgen_ty_4 = 197;
    pub const _SC_LEVEL4_CACHE_ASSOC: root::_bindgen_ty_4 = 198;
    pub const _SC_LEVEL4_CACHE_LINESIZE: root::_bindgen_ty_4 = 199;
    pub const _SC_IPV6: root::_bindgen_ty_4 = 235;
    pub const _SC_RAW_SOCKETS: root::_bindgen_ty_4 = 236;
    pub const _SC_V7_ILP32_OFF32: root::_bindgen_ty_4 = 237;
    pub const _SC_V7_ILP32_OFFBIG: root::_bindgen_ty_4 = 238;
    pub const _SC_V7_LP64_OFF64: root::_bindgen_ty_4 = 239;
    pub const _SC_V7_LPBIG_OFFBIG: root::_bindgen_ty_4 = 240;
    pub const _SC_SS_REPL_MAX: root::_bindgen_ty_4 = 241;
    pub const _SC_TRACE_EVENT_NAME_MAX: root::_bindgen_ty_4 = 242;
    pub const _SC_TRACE_NAME_MAX: root::_bindgen_ty_4 = 243;
    pub const _SC_TRACE_SYS_MAX: root::_bindgen_ty_4 = 244;
    pub const _SC_TRACE_USER_EVENT_MAX: root::_bindgen_ty_4 = 245;
    pub const _SC_XOPEN_STREAMS: root::_bindgen_ty_4 = 246;
    pub const _SC_THREAD_ROBUST_PRIO_INHERIT: root::_bindgen_ty_4 = 247;
    pub const _SC_THREAD_ROBUST_PRIO_PROTECT: root::_bindgen_ty_4 = 248;
    pub const _SC_MINSIGSTKSZ: root::_bindgen_ty_4 = 249;
    pub const _SC_SIGSTKSZ: root::_bindgen_ty_4 = 250;
    pub type _bindgen_ty_4 = ::core::ffi::c_uint;
    pub const _CS_PATH: root::_bindgen_ty_5 = 0;
    pub const _CS_V6_WIDTH_RESTRICTED_ENVS: root::_bindgen_ty_5 = 1;
    pub const _CS_GNU_LIBC_VERSION: root::_bindgen_ty_5 = 2;
    pub const _CS_GNU_LIBPTHREAD_VERSION: root::_bindgen_ty_5 = 3;
    pub const _CS_V5_WIDTH_RESTRICTED_ENVS: root::_bindgen_ty_5 = 4;
    pub const _CS_V7_WIDTH_RESTRICTED_ENVS: root::_bindgen_ty_5 = 5;
    pub const _CS_LFS_CFLAGS: root::_bindgen_ty_5 = 1000;
    pub const _CS_LFS_LDFLAGS: root::_bindgen_ty_5 = 1001;
    pub const _CS_LFS_LIBS: root::_bindgen_ty_5 = 1002;
    pub const _CS_LFS_LINTFLAGS: root::_bindgen_ty_5 = 1003;
    pub const _CS_LFS64_CFLAGS: root::_bindgen_ty_5 = 1004;
    pub const _CS_LFS64_LDFLAGS: root::_bindgen_ty_5 = 1005;
    pub const _CS_LFS64_LIBS: root::_bindgen_ty_5 = 1006;
    pub const _CS_LFS64_LINTFLAGS: root::_bindgen_ty_5 = 1007;
    pub const _CS_XBS5_ILP32_OFF32_CFLAGS: root::_bindgen_ty_5 = 1100;
    pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: root::_bindgen_ty_5 = 1101;
    pub const _CS_XBS5_ILP32_OFF32_LIBS: root::_bindgen_ty_5 = 1102;
    pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: root::_bindgen_ty_5 = 1103;
    pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: root::_bindgen_ty_5 = 1104;
    pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: root::_bindgen_ty_5 = 1105;
    pub const _CS_XBS5_ILP32_OFFBIG_LIBS: root::_bindgen_ty_5 = 1106;
    pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: root::_bindgen_ty_5 = 1107;
    pub const _CS_XBS5_LP64_OFF64_CFLAGS: root::_bindgen_ty_5 = 1108;
    pub const _CS_XBS5_LP64_OFF64_LDFLAGS: root::_bindgen_ty_5 = 1109;
    pub const _CS_XBS5_LP64_OFF64_LIBS: root::_bindgen_ty_5 = 1110;
    pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: root::_bindgen_ty_5 = 1111;
    pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: root::_bindgen_ty_5 = 1112;
    pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: root::_bindgen_ty_5 = 1113;
    pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: root::_bindgen_ty_5 = 1114;
    pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: root::_bindgen_ty_5 = 1115;
    pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: root::_bindgen_ty_5 = 1116;
    pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: root::_bindgen_ty_5 = 1117;
    pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: root::_bindgen_ty_5 = 1118;
    pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: root::_bindgen_ty_5 = 1119;
    pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: root::_bindgen_ty_5 = 1120;
    pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: root::_bindgen_ty_5 = 1121;
    pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: root::_bindgen_ty_5 = 1122;
    pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: root::_bindgen_ty_5 = 1123;
    pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: root::_bindgen_ty_5 = 1124;
    pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: root::_bindgen_ty_5 = 1125;
    pub const _CS_POSIX_V6_LP64_OFF64_LIBS: root::_bindgen_ty_5 = 1126;
    pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: root::_bindgen_ty_5 = 1127;
    pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: root::_bindgen_ty_5 = 1128;
    pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: root::_bindgen_ty_5 = 1129;
    pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: root::_bindgen_ty_5 = 1130;
    pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: root::_bindgen_ty_5 = 1131;
    pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: root::_bindgen_ty_5 = 1132;
    pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: root::_bindgen_ty_5 = 1133;
    pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: root::_bindgen_ty_5 = 1134;
    pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: root::_bindgen_ty_5 = 1135;
    pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: root::_bindgen_ty_5 = 1136;
    pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: root::_bindgen_ty_5 = 1137;
    pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: root::_bindgen_ty_5 = 1138;
    pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: root::_bindgen_ty_5 = 1139;
    pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: root::_bindgen_ty_5 = 1140;
    pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: root::_bindgen_ty_5 = 1141;
    pub const _CS_POSIX_V7_LP64_OFF64_LIBS: root::_bindgen_ty_5 = 1142;
    pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: root::_bindgen_ty_5 = 1143;
    pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: root::_bindgen_ty_5 = 1144;
    pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: root::_bindgen_ty_5 = 1145;
    pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: root::_bindgen_ty_5 = 1146;
    pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: root::_bindgen_ty_5 = 1147;
    pub const _CS_V6_ENV: root::_bindgen_ty_5 = 1148;
    pub const _CS_V7_ENV: root::_bindgen_ty_5 = 1149;
    pub type _bindgen_ty_5 = ::core::ffi::c_uint;
    unsafe extern "C" {
        pub fn pathconf(
            __path: *const ::core::ffi::c_char,
            __name: ::core::ffi::c_int,
        ) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn fpathconf(
            __fd: ::core::ffi::c_int,
            __name: ::core::ffi::c_int,
        ) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn sysconf(__name: ::core::ffi::c_int) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn confstr(
            __name: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __len: usize,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn getpid() -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn getppid() -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn getpgrp() -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn __getpgid(__pid: root::__pid_t) -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn getpgid(__pid: root::__pid_t) -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn setpgid(__pid: root::__pid_t, __pgid: root::__pid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setpgrp() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setsid() -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn getsid(__pid: root::__pid_t) -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn getuid() -> root::__uid_t;
    }
    unsafe extern "C" {
        pub fn geteuid() -> root::__uid_t;
    }
    unsafe extern "C" {
        pub fn getgid() -> root::__gid_t;
    }
    unsafe extern "C" {
        pub fn getegid() -> root::__gid_t;
    }
    unsafe extern "C" {
        pub fn getgroups(
            __size: ::core::ffi::c_int,
            __list: *mut root::__gid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn group_member(__gid: root::__gid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setuid(__uid: root::__uid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setreuid(__ruid: root::__uid_t, __euid: root::__uid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn seteuid(__uid: root::__uid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setgid(__gid: root::__gid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setregid(__rgid: root::__gid_t, __egid: root::__gid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setegid(__gid: root::__gid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getresuid(
            __ruid: *mut root::__uid_t,
            __euid: *mut root::__uid_t,
            __suid: *mut root::__uid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getresgid(
            __rgid: *mut root::__gid_t,
            __egid: *mut root::__gid_t,
            __sgid: *mut root::__gid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setresuid(
            __ruid: root::__uid_t,
            __euid: root::__uid_t,
            __suid: root::__uid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setresgid(
            __rgid: root::__gid_t,
            __egid: root::__gid_t,
            __sgid: root::__gid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fork() -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn vfork() -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn _Fork() -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn ttyname(__fd: ::core::ffi::c_int) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn ttyname_r(
            __fd: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __buflen: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn isatty(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ttyslot() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn link(
            __from: *const ::core::ffi::c_char,
            __to: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn linkat(
            __fromfd: ::core::ffi::c_int,
            __from: *const ::core::ffi::c_char,
            __tofd: ::core::ffi::c_int,
            __to: *const ::core::ffi::c_char,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn symlink(
            __from: *const ::core::ffi::c_char,
            __to: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn readlink(
            __path: *const ::core::ffi::c_char,
            __buf: *mut ::core::ffi::c_char,
            __len: usize,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn symlinkat(
            __from: *const ::core::ffi::c_char,
            __tofd: ::core::ffi::c_int,
            __to: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn readlinkat(
            __fd: ::core::ffi::c_int,
            __path: *const ::core::ffi::c_char,
            __buf: *mut ::core::ffi::c_char,
            __len: usize,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn unlink(__name: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn unlinkat(
            __fd: ::core::ffi::c_int,
            __name: *const ::core::ffi::c_char,
            __flag: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn rmdir(__path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn tcgetpgrp(__fd: ::core::ffi::c_int) -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn tcsetpgrp(__fd: ::core::ffi::c_int, __pgrp_id: root::__pid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getlogin() -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn getlogin_r(
            __name: *mut ::core::ffi::c_char,
            __name_len: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setlogin(__name: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub static mut optarg: *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub static mut optind: ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub static mut opterr: ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub static mut optopt: ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getopt(
            ___argc: ::core::ffi::c_int,
            ___argv: *const *mut ::core::ffi::c_char,
            __shortopts: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn gethostname(__name: *mut ::core::ffi::c_char, __len: usize) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sethostname(__name: *const ::core::ffi::c_char, __len: usize) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sethostid(__id: ::core::ffi::c_long) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getdomainname(__name: *mut ::core::ffi::c_char, __len: usize) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setdomainname(
            __name: *const ::core::ffi::c_char,
            __len: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vhangup() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn revoke(__file: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn profil(
            __sample_buffer: *mut ::core::ffi::c_ushort,
            __size: usize,
            __offset: usize,
            __scale: ::core::ffi::c_uint,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn acct(__name: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getusershell() -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn endusershell();
    }
    unsafe extern "C" {
        pub fn setusershell();
    }
    unsafe extern "C" {
        pub fn daemon(
            __nochdir: ::core::ffi::c_int,
            __noclose: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn chroot(__path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getpass(__prompt: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn fsync(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn syncfs(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn gethostid() -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn sync();
    }
    unsafe extern "C" {
        pub fn getpagesize() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getdtablesize() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn truncate(
            __file: *const ::core::ffi::c_char,
            __length: root::__off_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn truncate64(
            __file: *const ::core::ffi::c_char,
            __length: root::__off64_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ftruncate(__fd: ::core::ffi::c_int, __length: root::__off_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ftruncate64(
            __fd: ::core::ffi::c_int,
            __length: root::__off64_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn brk(__addr: *mut ::core::ffi::c_void) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sbrk(__delta: isize) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn syscall(__sysno: ::core::ffi::c_long, ...) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn lockf(
            __fd: ::core::ffi::c_int,
            __cmd: ::core::ffi::c_int,
            __len: root::__off_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn lockf64(
            __fd: ::core::ffi::c_int,
            __cmd: ::core::ffi::c_int,
            __len: root::__off64_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn copy_file_range(
            __infd: ::core::ffi::c_int,
            __pinoff: *mut root::__off64_t,
            __outfd: ::core::ffi::c_int,
            __poutoff: *mut root::__off64_t,
            __length: usize,
            __flags: ::core::ffi::c_uint,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn fdatasync(__fildes: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn crypt(
            __key: *const ::core::ffi::c_char,
            __salt: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn swab(__from: *const ::core::ffi::c_void, __to: *mut ::core::ffi::c_void, __n: isize);
    }
    unsafe extern "C" {
        pub fn getentropy(
            __buffer: *mut ::core::ffi::c_void,
            __length: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn close_range(
            __fd: ::core::ffi::c_uint,
            __max_fd: ::core::ffi::c_uint,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn gettid() -> root::__pid_t;
    }
    pub type u_char = root::__u_char;
    pub type u_short = root::__u_short;
    pub type u_int = root::__u_int;
    pub type u_long = root::__u_long;
    pub type quad_t = root::__quad_t;
    pub type u_quad_t = root::__u_quad_t;
    pub type fsid_t = root::__fsid_t;
    pub type loff_t = root::__loff_t;
    pub type ino_t = root::__ino_t;
    pub type ino64_t = root::__ino64_t;
    pub type dev_t = root::__dev_t;
    pub type mode_t = root::__mode_t;
    pub type nlink_t = root::__nlink_t;
    pub type id_t = root::__id_t;
    pub type daddr_t = root::__daddr_t;
    pub type caddr_t = root::__caddr_t;
    pub type key_t = root::__key_t;
    pub type clock_t = root::__clock_t;
    pub type clockid_t = root::__clockid_t;
    pub type time_t = root::__time_t;
    pub type timer_t = root::__timer_t;
    pub type suseconds_t = root::__suseconds_t;
    pub type ulong = ::core::ffi::c_ulong;
    pub type ushort = ::core::ffi::c_ushort;
    pub type uint = ::core::ffi::c_uint;
    pub type u_int8_t = root::__uint8_t;
    pub type u_int16_t = root::__uint16_t;
    pub type u_int32_t = root::__uint32_t;
    pub type u_int64_t = root::__uint64_t;
    pub type register_t = ::core::ffi::c_long;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __sigset_t {
        pub __val: [::core::ffi::c_ulong; 16usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __sigset_t"][::core::mem::size_of::<__sigset_t>() - 128usize];
        ["Alignment of __sigset_t"][::core::mem::align_of::<__sigset_t>() - 8usize];
        ["Offset of field: __sigset_t::__val"][::core::mem::offset_of!(__sigset_t, __val) - 0usize];
    };
    pub type sigset_t = root::__sigset_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct timeval {
        pub tv_sec: root::__time_t,
        pub tv_usec: root::__suseconds_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of timeval"][::core::mem::size_of::<timeval>() - 16usize];
        ["Alignment of timeval"][::core::mem::align_of::<timeval>() - 8usize];
        ["Offset of field: timeval::tv_sec"][::core::mem::offset_of!(timeval, tv_sec) - 0usize];
        ["Offset of field: timeval::tv_usec"][::core::mem::offset_of!(timeval, tv_usec) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct timespec {
        pub tv_sec: root::__time_t,
        pub tv_nsec: root::__syscall_slong_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of timespec"][::core::mem::size_of::<timespec>() - 16usize];
        ["Alignment of timespec"][::core::mem::align_of::<timespec>() - 8usize];
        ["Offset of field: timespec::tv_sec"][::core::mem::offset_of!(timespec, tv_sec) - 0usize];
        ["Offset of field: timespec::tv_nsec"][::core::mem::offset_of!(timespec, tv_nsec) - 8usize];
    };
    pub type __fd_mask = ::core::ffi::c_long;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct fd_set {
        pub fds_bits: [root::__fd_mask; 16usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of fd_set"][::core::mem::size_of::<fd_set>() - 128usize];
        ["Alignment of fd_set"][::core::mem::align_of::<fd_set>() - 8usize];
        ["Offset of field: fd_set::fds_bits"][::core::mem::offset_of!(fd_set, fds_bits) - 0usize];
    };
    pub type fd_mask = root::__fd_mask;
    unsafe extern "C" {
        pub fn select(
            __nfds: ::core::ffi::c_int,
            __readfds: *mut root::fd_set,
            __writefds: *mut root::fd_set,
            __exceptfds: *mut root::fd_set,
            __timeout: *mut root::timeval,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pselect(
            __nfds: ::core::ffi::c_int,
            __readfds: *mut root::fd_set,
            __writefds: *mut root::fd_set,
            __exceptfds: *mut root::fd_set,
            __timeout: *const root::timespec,
            __sigmask: *const root::__sigset_t,
        ) -> ::core::ffi::c_int;
    }
    pub type blksize_t = root::__blksize_t;
    pub type blkcnt_t = root::__blkcnt_t;
    pub type fsblkcnt_t = root::__fsblkcnt_t;
    pub type fsfilcnt_t = root::__fsfilcnt_t;
    pub type blkcnt64_t = root::__blkcnt64_t;
    pub type fsblkcnt64_t = root::__fsblkcnt64_t;
    pub type fsfilcnt64_t = root::__fsfilcnt64_t;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __atomic_wide_counter {
        pub __value64: ::core::ffi::c_ulonglong,
        pub __value32: root::__atomic_wide_counter__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __atomic_wide_counter__bindgen_ty_1 {
        pub __low: ::core::ffi::c_uint,
        pub __high: ::core::ffi::c_uint,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __atomic_wide_counter__bindgen_ty_1"]
            [::core::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>() - 8usize];
        ["Alignment of __atomic_wide_counter__bindgen_ty_1"]
            [::core::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>() - 4usize];
        ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__low"]
            [::core::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __low) - 0usize];
        ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__high"]
            [::core::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __high) - 4usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __atomic_wide_counter"][::core::mem::size_of::<__atomic_wide_counter>() - 8usize];
        ["Alignment of __atomic_wide_counter"]
            [::core::mem::align_of::<__atomic_wide_counter>() - 8usize];
        ["Offset of field: __atomic_wide_counter::__value64"]
            [::core::mem::offset_of!(__atomic_wide_counter, __value64) - 0usize];
        ["Offset of field: __atomic_wide_counter::__value32"]
            [::core::mem::offset_of!(__atomic_wide_counter, __value32) - 0usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_internal_list {
        pub __prev: *mut root::__pthread_internal_list,
        pub __next: *mut root::__pthread_internal_list,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_internal_list"]
            [::core::mem::size_of::<__pthread_internal_list>() - 16usize];
        ["Alignment of __pthread_internal_list"]
            [::core::mem::align_of::<__pthread_internal_list>() - 8usize];
        ["Offset of field: __pthread_internal_list::__prev"]
            [::core::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
        ["Offset of field: __pthread_internal_list::__next"]
            [::core::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
    };
    pub type __pthread_list_t = root::__pthread_internal_list;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_internal_slist {
        pub __next: *mut root::__pthread_internal_slist,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_internal_slist"]
            [::core::mem::size_of::<__pthread_internal_slist>() - 8usize];
        ["Alignment of __pthread_internal_slist"]
            [::core::mem::align_of::<__pthread_internal_slist>() - 8usize];
        ["Offset of field: __pthread_internal_slist::__next"]
            [::core::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
    };
    pub type __pthread_slist_t = root::__pthread_internal_slist;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_mutex_s {
        pub __lock: ::core::ffi::c_int,
        pub __count: ::core::ffi::c_uint,
        pub __owner: ::core::ffi::c_int,
        pub __nusers: ::core::ffi::c_uint,
        pub __kind: ::core::ffi::c_int,
        pub __spins: ::core::ffi::c_short,
        pub __elision: ::core::ffi::c_short,
        pub __list: root::__pthread_list_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_mutex_s"][::core::mem::size_of::<__pthread_mutex_s>() - 40usize];
        ["Alignment of __pthread_mutex_s"][::core::mem::align_of::<__pthread_mutex_s>() - 8usize];
        ["Offset of field: __pthread_mutex_s::__lock"]
            [::core::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
        ["Offset of field: __pthread_mutex_s::__count"]
            [::core::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
        ["Offset of field: __pthread_mutex_s::__owner"]
            [::core::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
        ["Offset of field: __pthread_mutex_s::__nusers"]
            [::core::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
        ["Offset of field: __pthread_mutex_s::__kind"]
            [::core::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
        ["Offset of field: __pthread_mutex_s::__spins"]
            [::core::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
        ["Offset of field: __pthread_mutex_s::__elision"]
            [::core::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
        ["Offset of field: __pthread_mutex_s::__list"]
            [::core::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_rwlock_arch_t {
        pub __readers: ::core::ffi::c_uint,
        pub __writers: ::core::ffi::c_uint,
        pub __wrphase_futex: ::core::ffi::c_uint,
        pub __writers_futex: ::core::ffi::c_uint,
        pub __pad3: ::core::ffi::c_uint,
        pub __pad4: ::core::ffi::c_uint,
        pub __cur_writer: ::core::ffi::c_int,
        pub __shared: ::core::ffi::c_int,
        pub __rwelision: ::core::ffi::c_schar,
        pub __pad1: [::core::ffi::c_uchar; 7usize],
        pub __pad2: ::core::ffi::c_ulong,
        pub __flags: ::core::ffi::c_uint,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_rwlock_arch_t"]
            [::core::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
        ["Alignment of __pthread_rwlock_arch_t"]
            [::core::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
        ["Offset of field: __pthread_rwlock_arch_t::__readers"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
        ["Offset of field: __pthread_rwlock_arch_t::__writers"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
        ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
        ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
        ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
        ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
        ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
        ["Offset of field: __pthread_rwlock_arch_t::__shared"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
        ["Offset of field: __pthread_rwlock_arch_t::__rwelision"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __rwelision) - 32usize];
        ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
        ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
        ["Offset of field: __pthread_rwlock_arch_t::__flags"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __pthread_cond_s {
        pub __wseq: root::__atomic_wide_counter,
        pub __g1_start: root::__atomic_wide_counter,
        pub __g_size: [::core::ffi::c_uint; 2usize],
        pub __g1_orig_size: ::core::ffi::c_uint,
        pub __wrefs: ::core::ffi::c_uint,
        pub __g_signals: [::core::ffi::c_uint; 2usize],
        pub __unused_initialized_1: ::core::ffi::c_uint,
        pub __unused_initialized_2: ::core::ffi::c_uint,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_cond_s"][::core::mem::size_of::<__pthread_cond_s>() - 48usize];
        ["Alignment of __pthread_cond_s"][::core::mem::align_of::<__pthread_cond_s>() - 8usize];
        ["Offset of field: __pthread_cond_s::__wseq"]
            [::core::mem::offset_of!(__pthread_cond_s, __wseq) - 0usize];
        ["Offset of field: __pthread_cond_s::__g1_start"]
            [::core::mem::offset_of!(__pthread_cond_s, __g1_start) - 8usize];
        ["Offset of field: __pthread_cond_s::__g_size"]
            [::core::mem::offset_of!(__pthread_cond_s, __g_size) - 16usize];
        ["Offset of field: __pthread_cond_s::__g1_orig_size"]
            [::core::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 24usize];
        ["Offset of field: __pthread_cond_s::__wrefs"]
            [::core::mem::offset_of!(__pthread_cond_s, __wrefs) - 28usize];
        ["Offset of field: __pthread_cond_s::__g_signals"]
            [::core::mem::offset_of!(__pthread_cond_s, __g_signals) - 32usize];
        ["Offset of field: __pthread_cond_s::__unused_initialized_1"]
            [::core::mem::offset_of!(__pthread_cond_s, __unused_initialized_1) - 40usize];
        ["Offset of field: __pthread_cond_s::__unused_initialized_2"]
            [::core::mem::offset_of!(__pthread_cond_s, __unused_initialized_2) - 44usize];
    };
    pub type __tss_t = ::core::ffi::c_uint;
    pub type __thrd_t = ::core::ffi::c_ulong;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __once_flag {
        pub __data: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __once_flag"][::core::mem::size_of::<__once_flag>() - 4usize];
        ["Alignment of __once_flag"][::core::mem::align_of::<__once_flag>() - 4usize];
        ["Offset of field: __once_flag::__data"]
            [::core::mem::offset_of!(__once_flag, __data) - 0usize];
    };
    pub type pthread_t = ::core::ffi::c_ulong;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_mutexattr_t {
        pub __size: [::core::ffi::c_char; 4usize],
        pub __align: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_mutexattr_t"][::core::mem::size_of::<pthread_mutexattr_t>() - 4usize];
        ["Alignment of pthread_mutexattr_t"]
            [::core::mem::align_of::<pthread_mutexattr_t>() - 4usize];
        ["Offset of field: pthread_mutexattr_t::__size"]
            [::core::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
        ["Offset of field: pthread_mutexattr_t::__align"]
            [::core::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_condattr_t {
        pub __size: [::core::ffi::c_char; 4usize],
        pub __align: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_condattr_t"][::core::mem::size_of::<pthread_condattr_t>() - 4usize];
        ["Alignment of pthread_condattr_t"][::core::mem::align_of::<pthread_condattr_t>() - 4usize];
        ["Offset of field: pthread_condattr_t::__size"]
            [::core::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
        ["Offset of field: pthread_condattr_t::__align"]
            [::core::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
    };
    pub type pthread_key_t = ::core::ffi::c_uint;
    pub type pthread_once_t = ::core::ffi::c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_attr_t {
        pub __size: [::core::ffi::c_char; 56usize],
        pub __align: ::core::ffi::c_long,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_attr_t"][::core::mem::size_of::<pthread_attr_t>() - 56usize];
        ["Alignment of pthread_attr_t"][::core::mem::align_of::<pthread_attr_t>() - 8usize];
        ["Offset of field: pthread_attr_t::__size"]
            [::core::mem::offset_of!(pthread_attr_t, __size) - 0usize];
        ["Offset of field: pthread_attr_t::__align"]
            [::core::mem::offset_of!(pthread_attr_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_mutex_t {
        pub __data: root::__pthread_mutex_s,
        pub __size: [::core::ffi::c_char; 40usize],
        pub __align: ::core::ffi::c_long,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_mutex_t"][::core::mem::size_of::<pthread_mutex_t>() - 40usize];
        ["Alignment of pthread_mutex_t"][::core::mem::align_of::<pthread_mutex_t>() - 8usize];
        ["Offset of field: pthread_mutex_t::__data"]
            [::core::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
        ["Offset of field: pthread_mutex_t::__size"]
            [::core::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
        ["Offset of field: pthread_mutex_t::__align"]
            [::core::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_cond_t {
        pub __data: root::__pthread_cond_s,
        pub __size: [::core::ffi::c_char; 48usize],
        pub __align: ::core::ffi::c_longlong,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_cond_t"][::core::mem::size_of::<pthread_cond_t>() - 48usize];
        ["Alignment of pthread_cond_t"][::core::mem::align_of::<pthread_cond_t>() - 8usize];
        ["Offset of field: pthread_cond_t::__data"]
            [::core::mem::offset_of!(pthread_cond_t, __data) - 0usize];
        ["Offset of field: pthread_cond_t::__size"]
            [::core::mem::offset_of!(pthread_cond_t, __size) - 0usize];
        ["Offset of field: pthread_cond_t::__align"]
            [::core::mem::offset_of!(pthread_cond_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_rwlock_t {
        pub __data: root::__pthread_rwlock_arch_t,
        pub __size: [::core::ffi::c_char; 56usize],
        pub __align: ::core::ffi::c_long,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_rwlock_t"][::core::mem::size_of::<pthread_rwlock_t>() - 56usize];
        ["Alignment of pthread_rwlock_t"][::core::mem::align_of::<pthread_rwlock_t>() - 8usize];
        ["Offset of field: pthread_rwlock_t::__data"]
            [::core::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
        ["Offset of field: pthread_rwlock_t::__size"]
            [::core::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
        ["Offset of field: pthread_rwlock_t::__align"]
            [::core::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_rwlockattr_t {
        pub __size: [::core::ffi::c_char; 8usize],
        pub __align: ::core::ffi::c_long,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_rwlockattr_t"][::core::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
        ["Alignment of pthread_rwlockattr_t"]
            [::core::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
        ["Offset of field: pthread_rwlockattr_t::__size"]
            [::core::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
        ["Offset of field: pthread_rwlockattr_t::__align"]
            [::core::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
    };
    pub type pthread_spinlock_t = ::core::ffi::c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_barrier_t {
        pub __size: [::core::ffi::c_char; 32usize],
        pub __align: ::core::ffi::c_long,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_barrier_t"][::core::mem::size_of::<pthread_barrier_t>() - 32usize];
        ["Alignment of pthread_barrier_t"][::core::mem::align_of::<pthread_barrier_t>() - 8usize];
        ["Offset of field: pthread_barrier_t::__size"]
            [::core::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
        ["Offset of field: pthread_barrier_t::__align"]
            [::core::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_barrierattr_t {
        pub __size: [::core::ffi::c_char; 4usize],
        pub __align: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_barrierattr_t"][::core::mem::size_of::<pthread_barrierattr_t>() - 4usize];
        ["Alignment of pthread_barrierattr_t"]
            [::core::mem::align_of::<pthread_barrierattr_t>() - 4usize];
        ["Offset of field: pthread_barrierattr_t::__size"]
            [::core::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
        ["Offset of field: pthread_barrierattr_t::__align"]
            [::core::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct dirent {
        pub d_ino: root::__ino_t,
        pub d_off: root::__off_t,
        pub d_reclen: ::core::ffi::c_ushort,
        pub d_type: ::core::ffi::c_uchar,
        pub d_name: [::core::ffi::c_char; 256usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of dirent"][::core::mem::size_of::<dirent>() - 280usize];
        ["Alignment of dirent"][::core::mem::align_of::<dirent>() - 8usize];
        ["Offset of field: dirent::d_ino"][::core::mem::offset_of!(dirent, d_ino) - 0usize];
        ["Offset of field: dirent::d_off"][::core::mem::offset_of!(dirent, d_off) - 8usize];
        ["Offset of field: dirent::d_reclen"][::core::mem::offset_of!(dirent, d_reclen) - 16usize];
        ["Offset of field: dirent::d_type"][::core::mem::offset_of!(dirent, d_type) - 18usize];
        ["Offset of field: dirent::d_name"][::core::mem::offset_of!(dirent, d_name) - 19usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct dirent64 {
        pub d_ino: root::__ino64_t,
        pub d_off: root::__off64_t,
        pub d_reclen: ::core::ffi::c_ushort,
        pub d_type: ::core::ffi::c_uchar,
        pub d_name: [::core::ffi::c_char; 256usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of dirent64"][::core::mem::size_of::<dirent64>() - 280usize];
        ["Alignment of dirent64"][::core::mem::align_of::<dirent64>() - 8usize];
        ["Offset of field: dirent64::d_ino"][::core::mem::offset_of!(dirent64, d_ino) - 0usize];
        ["Offset of field: dirent64::d_off"][::core::mem::offset_of!(dirent64, d_off) - 8usize];
        ["Offset of field: dirent64::d_reclen"]
            [::core::mem::offset_of!(dirent64, d_reclen) - 16usize];
        ["Offset of field: dirent64::d_type"][::core::mem::offset_of!(dirent64, d_type) - 18usize];
        ["Offset of field: dirent64::d_name"][::core::mem::offset_of!(dirent64, d_name) - 19usize];
    };
    pub const DT_UNKNOWN: root::_bindgen_ty_6 = 0;
    pub const DT_FIFO: root::_bindgen_ty_6 = 1;
    pub const DT_CHR: root::_bindgen_ty_6 = 2;
    pub const DT_DIR: root::_bindgen_ty_6 = 4;
    pub const DT_BLK: root::_bindgen_ty_6 = 6;
    pub const DT_REG: root::_bindgen_ty_6 = 8;
    pub const DT_LNK: root::_bindgen_ty_6 = 10;
    pub const DT_SOCK: root::_bindgen_ty_6 = 12;
    pub const DT_WHT: root::_bindgen_ty_6 = 14;
    pub type _bindgen_ty_6 = ::core::ffi::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __dirstream {
        _unused: [u8; 0],
    }
    pub type DIR = root::__dirstream;
    unsafe extern "C" {
        pub fn closedir(__dirp: *mut root::DIR) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn opendir(__name: *const ::core::ffi::c_char) -> *mut root::DIR;
    }
    unsafe extern "C" {
        pub fn fdopendir(__fd: ::core::ffi::c_int) -> *mut root::DIR;
    }
    unsafe extern "C" {
        pub fn readdir(__dirp: *mut root::DIR) -> *mut root::dirent;
    }
    unsafe extern "C" {
        pub fn readdir64(__dirp: *mut root::DIR) -> *mut root::dirent64;
    }
    unsafe extern "C" {
        pub fn readdir_r(
            __dirp: *mut root::DIR,
            __entry: *mut root::dirent,
            __result: *mut *mut root::dirent,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn readdir64_r(
            __dirp: *mut root::DIR,
            __entry: *mut root::dirent64,
            __result: *mut *mut root::dirent64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn rewinddir(__dirp: *mut root::DIR);
    }
    unsafe extern "C" {
        pub fn seekdir(__dirp: *mut root::DIR, __pos: ::core::ffi::c_long);
    }
    unsafe extern "C" {
        pub fn telldir(__dirp: *mut root::DIR) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn dirfd(__dirp: *mut root::DIR) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __sysconf(__name: ::core::ffi::c_int) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn scandir(
            __dir: *const ::core::ffi::c_char,
            __namelist: *mut *mut *mut root::dirent,
            __selector: ::core::option::Option<
                unsafe extern "C" fn(arg1: *const root::dirent) -> ::core::ffi::c_int,
            >,
            __cmp: ::core::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut *const root::dirent,
                    arg2: *mut *const root::dirent,
                ) -> ::core::ffi::c_int,
            >,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn scandir64(
            __dir: *const ::core::ffi::c_char,
            __namelist: *mut *mut *mut root::dirent64,
            __selector: ::core::option::Option<
                unsafe extern "C" fn(arg1: *const root::dirent64) -> ::core::ffi::c_int,
            >,
            __cmp: ::core::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut *const root::dirent64,
                    arg2: *mut *const root::dirent64,
                ) -> ::core::ffi::c_int,
            >,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn scandirat(
            __dfd: ::core::ffi::c_int,
            __dir: *const ::core::ffi::c_char,
            __namelist: *mut *mut *mut root::dirent,
            __selector: ::core::option::Option<
                unsafe extern "C" fn(arg1: *const root::dirent) -> ::core::ffi::c_int,
            >,
            __cmp: ::core::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut *const root::dirent,
                    arg2: *mut *const root::dirent,
                ) -> ::core::ffi::c_int,
            >,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn scandirat64(
            __dfd: ::core::ffi::c_int,
            __dir: *const ::core::ffi::c_char,
            __namelist: *mut *mut *mut root::dirent64,
            __selector: ::core::option::Option<
                unsafe extern "C" fn(arg1: *const root::dirent64) -> ::core::ffi::c_int,
            >,
            __cmp: ::core::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut *const root::dirent64,
                    arg2: *mut *const root::dirent64,
                ) -> ::core::ffi::c_int,
            >,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn alphasort(
            __e1: *mut *const root::dirent,
            __e2: *mut *const root::dirent,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn alphasort64(
            __e1: *mut *const root::dirent64,
            __e2: *mut *const root::dirent64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getdirentries(
            __fd: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __nbytes: usize,
            __basep: *mut root::__off_t,
        ) -> root::__ssize_t;
    }
    unsafe extern "C" {
        pub fn getdirentries64(
            __fd: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __nbytes: usize,
            __basep: *mut root::__off64_t,
        ) -> root::__ssize_t;
    }
    unsafe extern "C" {
        pub fn versionsort(
            __e1: *mut *const root::dirent,
            __e2: *mut *const root::dirent,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn versionsort64(
            __e1: *mut *const root::dirent64,
            __e2: *mut *const root::dirent64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getdents64(
            __fd: ::core::ffi::c_int,
            __buffer: *mut ::core::ffi::c_void,
            __length: usize,
        ) -> root::__ssize_t;
    }
    pub type HINSTANCE = *mut ::core::ffi::c_void;
    pub mod std {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub type nullptr_t = *const ::core::ffi::c_void;
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt21__glibcxx_assert_failPKciS0_S0_"]
            pub fn __glibcxx_assert_fail(
                __file: *const ::core::ffi::c_char,
                __line: ::core::ffi::c_int,
                __function: *const ::core::ffi::c_char,
                __condition: *const ::core::ffi::c_char,
            ) -> !;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __true_type {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __true_type"][::core::mem::size_of::<__true_type>() - 1usize];
            ["Alignment of __true_type"][::core::mem::align_of::<__true_type>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __false_type {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __false_type"][::core::mem::size_of::<__false_type>() - 1usize];
            ["Alignment of __false_type"][::core::mem::align_of::<__false_type>() - 1usize];
        };
        pub type __truth_type___type = root::std::__false_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __traitor {
            pub _address: u8,
        }
        pub const __traitor___value: root::std::__traitor__bindgen_ty_1 = 0;
        pub type __traitor__bindgen_ty_1 = i32;
        pub type __traitor___type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __are_same {
            pub _address: u8,
        }
        pub const __are_same___value: root::std::__are_same__bindgen_ty_1 = 0;
        pub type __are_same__bindgen_ty_1 = i32;
        pub type __are_same___type = root::std::__false_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_integer {
            pub _address: u8,
        }
        pub const __is_integer___value: root::std::__is_integer__bindgen_ty_1 = 0;
        pub type __is_integer__bindgen_ty_1 = i32;
        pub type __is_integer___type = root::std::__false_type;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_bool__close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_bool__close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_char_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_char_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_signed_char_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_signed_char_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_unsigned_char_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_unsigned_char_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_wchar_t_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_wchar_t_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_char16_t_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_char16_t_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_char32_t_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_char32_t_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_short_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_short_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_unsigned_short_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_unsigned_short_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_int_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_int_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_unsigned_int_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_unsigned_int_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_long_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_long_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_unsigned_long_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_unsigned_long_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_long_long_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_long_long_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_unsigned_long_long_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_unsigned_long_long_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_floating {
            pub _address: u8,
        }
        pub const __is_floating___value: root::std::__is_floating__bindgen_ty_1 = 0;
        pub type __is_floating__bindgen_ty_1 = i32;
        pub type __is_floating___type = root::std::__false_type;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_floating_open0_float_close0"]
                [::core::mem::size_of::<root::std::__is_floating>() - 1usize];
            ["Align of template specialization: __is_floating_open0_float_close0"]
                [::core::mem::align_of::<root::std::__is_floating>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_floating_open0_double_close0"]
                [::core::mem::size_of::<root::std::__is_floating>() - 1usize];
            ["Align of template specialization: __is_floating_open0_double_close0"]
                [::core::mem::align_of::<root::std::__is_floating>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_floating_open0_long_double_close0"]
                [::core::mem::size_of::<root::std::__is_floating>() - 1usize];
            ["Align of template specialization: __is_floating_open0_long_double_close0"]
                [::core::mem::align_of::<root::std::__is_floating>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_arithmetic {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_char {
            pub _address: u8,
        }
        pub const __is_char___value: root::std::__is_char__bindgen_ty_1 = 0;
        pub type __is_char__bindgen_ty_1 = i32;
        pub type __is_char___type = root::std::__false_type;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_char_open0_char_close0"]
                [::core::mem::size_of::<root::std::__is_char>() - 1usize];
            ["Align of template specialization: __is_char_open0_char_close0"]
                [::core::mem::align_of::<root::std::__is_char>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_char_open0_wchar_t_close0"]
                [::core::mem::size_of::<root::std::__is_char>() - 1usize];
            ["Align of template specialization: __is_char_open0_wchar_t_close0"]
                [::core::mem::align_of::<root::std::__is_char>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_byte {
            pub _address: u8,
        }
        pub const __is_byte___value: root::std::__is_byte__bindgen_ty_1 = 0;
        pub type __is_byte__bindgen_ty_1 = i32;
        pub type __is_byte___type = root::std::__false_type;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_byte_open0_char_close0"]
                [::core::mem::size_of::<root::std::__is_byte>() - 1usize];
            ["Align of template specialization: __is_byte_open0_char_close0"]
                [::core::mem::align_of::<root::std::__is_byte>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_byte_open0_signed_char_close0"]
                [::core::mem::size_of::<root::std::__is_byte>() - 1usize];
            ["Align of template specialization: __is_byte_open0_signed_char_close0"]
                [::core::mem::align_of::<root::std::__is_byte>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_byte_open0_unsigned_char_close0"]
                [::core::mem::size_of::<root::std::__is_byte>() - 1usize];
            ["Align of template specialization: __is_byte_open0_unsigned_char_close0"]
                [::core::mem::align_of::<root::std::__is_byte>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nonvolatile_trivially_copyable {
            pub _address: u8,
        }
        pub const __is_nonvolatile_trivially_copyable___value:
            root::std::__is_nonvolatile_trivially_copyable__bindgen_ty_1 = 0;
        pub type __is_nonvolatile_trivially_copyable__bindgen_ty_1 = i32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __memcpyable {
            pub _address: u8,
        }
        pub const __memcpyable___value: root::std::__memcpyable__bindgen_ty_1 = 0;
        pub type __memcpyable__bindgen_ty_1 = i32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __memcpyable_integer {
            pub _address: u8,
        }
        pub const __memcpyable_integer___width: root::std::__memcpyable_integer__bindgen_ty_1 = 0;
        pub type __memcpyable_integer__bindgen_ty_1 = i32;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __memcpyable_integer_open0___int128_close0"]
                [::core::mem::size_of::<root::std::__memcpyable_integer>() - 1usize];
            ["Align of template specialization: __memcpyable_integer_open0___int128_close0"]
                [::core::mem::align_of::<root::std::__memcpyable_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __memcpyable_integer_open0_unsigned___int128_close0"] [:: core :: mem :: size_of :: < root :: std :: __memcpyable_integer > () - 1usize] ;
            ["Align of template specialization: __memcpyable_integer_open0_unsigned___int128_close0"] [:: core :: mem :: align_of :: < root :: std :: __memcpyable_integer > () - 1usize] ;
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __memcmpable {
            pub _address: u8,
        }
        pub const __memcmpable___value: root::std::__memcmpable__bindgen_ty_1 = 0;
        pub type __memcmpable__bindgen_ty_1 = i32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_move_iterator {
            pub _address: u8,
        }
        pub const __is_move_iterator___value: root::std::__is_move_iterator__bindgen_ty_1 = 0;
        pub type __is_move_iterator__bindgen_ty_1 = i32;
        pub type __is_move_iterator___type = root::std::__false_type;
    }
    pub mod __gnu_cxx {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub type __conditional_type___type<_Iftrue> = _Iftrue;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __add_unsigned {
            pub _address: u8,
        }
        pub type __add_unsigned___if_type = u8;
        pub type __add_unsigned___type = root::__gnu_cxx::__add_unsigned___if_type;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __add_unsigned_open0_char_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
            ["Align of template specialization: __add_unsigned_open0_char_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __add_unsigned_open0_signed_char_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
            ["Align of template specialization: __add_unsigned_open0_signed_char_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __add_unsigned_open0_short_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
            ["Align of template specialization: __add_unsigned_open0_short_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __add_unsigned_open0_int_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
            ["Align of template specialization: __add_unsigned_open0_int_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __add_unsigned_open0_long_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
            ["Align of template specialization: __add_unsigned_open0_long_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __add_unsigned_open0_long_long_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
            ["Align of template specialization: __add_unsigned_open0_long_long_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __remove_unsigned {
            pub _address: u8,
        }
        pub type __remove_unsigned___if_type = u8;
        pub type __remove_unsigned___type = root::__gnu_cxx::__remove_unsigned___if_type;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __remove_unsigned_open0_char_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
            ["Align of template specialization: __remove_unsigned_open0_char_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __remove_unsigned_open0_unsigned_char_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
            ["Align of template specialization: __remove_unsigned_open0_unsigned_char_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __remove_unsigned_open0_unsigned_short_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
            ["Align of template specialization: __remove_unsigned_open0_unsigned_short_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __remove_unsigned_open0_unsigned_int_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
            ["Align of template specialization: __remove_unsigned_open0_unsigned_int_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __remove_unsigned_open0_unsigned_long_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
            ["Align of template specialization: __remove_unsigned_open0_unsigned_long_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __remove_unsigned_open0_unsigned_long_long_close0"] [:: core :: mem :: size_of :: < root :: __gnu_cxx :: __remove_unsigned > () - 1usize] ;
            ["Align of template specialization: __remove_unsigned_open0_unsigned_long_long_close0"] [:: core :: mem :: align_of :: < root :: __gnu_cxx :: __remove_unsigned > () - 1usize] ;
        };
        pub type __promote___type = f64;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __promote_2 {
            pub _address: u8,
        }
        pub type __promote_2___type<_Tp2> = _Tp2;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __promote_3 {
            pub _address: u8,
        }
        pub type __promote_3___type<_Tp2> = _Tp2;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __promote_4 {
            pub _address: u8,
        }
        pub type __promote_4___type<_Tp2> = _Tp2;
    }
    unsafe extern "C" {
        pub fn __errno_location() -> *mut ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub static mut program_invocation_name: *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub static mut program_invocation_short_name: *mut ::core::ffi::c_char;
    }
    pub type error_t = ::core::ffi::c_int;
    unsafe extern "C" {
        #[link_name = "\u{1}_Z12GetLastErrorv"]
        pub fn GetLastError() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_Z16GetFileOfAddressPvPcm"]
        pub fn GetFileOfAddress(
            pAddr: *mut ::core::ffi::c_void,
            buffer: *mut ::core::ffi::c_char,
            maxlength: usize,
        ) -> bool;
    }
    pub type int_least8_t = root::__int_least8_t;
    pub type int_least16_t = root::__int_least16_t;
    pub type int_least32_t = root::__int_least32_t;
    pub type int_least64_t = root::__int_least64_t;
    pub type uint_least8_t = root::__uint_least8_t;
    pub type uint_least16_t = root::__uint_least16_t;
    pub type uint_least32_t = root::__uint_least32_t;
    pub type uint_least64_t = root::__uint_least64_t;
    pub type int_fast8_t = ::core::ffi::c_schar;
    pub type int_fast16_t = ::core::ffi::c_long;
    pub type int_fast32_t = ::core::ffi::c_long;
    pub type int_fast64_t = ::core::ffi::c_long;
    pub type uint_fast8_t = ::core::ffi::c_uchar;
    pub type uint_fast16_t = ::core::ffi::c_ulong;
    pub type uint_fast32_t = ::core::ffi::c_ulong;
    pub type uint_fast64_t = ::core::ffi::c_ulong;
    pub type intmax_t = root::__intmax_t;
    pub type uintmax_t = root::__uintmax_t;
    pub type __cfloat128 = root::__BindgenComplex<u128>;
    pub type _Float128 = u128;
    pub type _Float32 = f32;
    pub type _Float64 = f64;
    pub type _Float32x = f64;
    pub type _Float64x = u128;
    pub type float_t = f32;
    pub type double_t = f64;
    pub const FP_INT_UPWARD: root::_bindgen_ty_7 = 0;
    pub const FP_INT_DOWNWARD: root::_bindgen_ty_7 = 1;
    pub const FP_INT_TOWARDZERO: root::_bindgen_ty_7 = 2;
    pub const FP_INT_TONEARESTFROMZERO: root::_bindgen_ty_7 = 3;
    pub const FP_INT_TONEAREST: root::_bindgen_ty_7 = 4;
    pub type _bindgen_ty_7 = ::core::ffi::c_uint;
    unsafe extern "C" {
        pub fn __fpclassify(__value: f64) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __signbit(__value: f64) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __isinf(__value: f64) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __finite(__value: f64) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __isnan(__value: f64) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __iseqsig(__x: f64, __y: f64) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __issignaling(__value: f64) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn acos(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __acos(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn asin(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __asin(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn atan(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __atan(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn atan2(__y: f64, __x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __atan2(__y: f64, __x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn cos(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __cos(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn sin(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __sin(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn tan(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __tan(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn acospi(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __acospi(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn asinpi(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __asinpi(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn atanpi(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __atanpi(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn atan2pi(__y: f64, __x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __atan2pi(__y: f64, __x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn cospi(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __cospi(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn sinpi(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __sinpi(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn tanpi(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __tanpi(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn cosh(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __cosh(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn sinh(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __sinh(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn tanh(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __tanh(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn sincos(__x: f64, __sinx: *mut f64, __cosx: *mut f64);
    }
    unsafe extern "C" {
        pub fn __sincos(__x: f64, __sinx: *mut f64, __cosx: *mut f64);
    }
    unsafe extern "C" {
        pub fn acosh(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __acosh(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn asinh(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __asinh(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn atanh(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __atanh(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn exp(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __exp(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn frexp(__x: f64, __exponent: *mut ::core::ffi::c_int) -> f64;
    }
    unsafe extern "C" {
        pub fn __frexp(__x: f64, __exponent: *mut ::core::ffi::c_int) -> f64;
    }
    unsafe extern "C" {
        pub fn ldexp(__x: f64, __exponent: ::core::ffi::c_int) -> f64;
    }
    unsafe extern "C" {
        pub fn __ldexp(__x: f64, __exponent: ::core::ffi::c_int) -> f64;
    }
    unsafe extern "C" {
        pub fn log(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __log(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn log10(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __log10(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
    }
    unsafe extern "C" {
        pub fn exp10(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __exp10(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn exp2m1(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __exp2m1(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn exp10m1(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __exp10m1(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn log2p1(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __log2p1(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn log10p1(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __log10p1(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn logp1(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __logp1(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn expm1(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __expm1(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn log1p(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __log1p(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn logb(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __logb(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn exp2(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __exp2(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn log2(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __log2(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn pow(__x: f64, __y: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __pow(__x: f64, __y: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn sqrt(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __sqrt(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn hypot(__x: f64, __y: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __hypot(__x: f64, __y: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn cbrt(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __cbrt(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn ceil(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn fabs(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn floor(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn fmod(__x: f64, __y: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __fmod(__x: f64, __y: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn finite(__value: f64) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn drem(__x: f64, __y: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __drem(__x: f64, __y: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn significand(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __significand(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn copysign(__x: f64, __y: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn nan(__tagb: *const ::core::ffi::c_char) -> f64;
    }
    unsafe extern "C" {
        pub fn __nan(__tagb: *const ::core::ffi::c_char) -> f64;
    }
    unsafe extern "C" {
        pub fn j0(arg1: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __j0(arg1: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn j1(arg1: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __j1(arg1: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn jn(arg1: ::core::ffi::c_int, arg2: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __jn(arg1: ::core::ffi::c_int, arg2: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn y0(arg1: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __y0(arg1: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn y1(arg1: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __y1(arg1: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn yn(arg1: ::core::ffi::c_int, arg2: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __yn(arg1: ::core::ffi::c_int, arg2: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn erf(arg1: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __erf(arg1: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn erfc(arg1: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __erfc(arg1: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn lgamma(arg1: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __lgamma(arg1: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn tgamma(arg1: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __tgamma(arg1: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn gamma(arg1: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __gamma(arg1: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn lgamma_r(arg1: f64, __signgamp: *mut ::core::ffi::c_int) -> f64;
    }
    unsafe extern "C" {
        pub fn __lgamma_r(arg1: f64, __signgamp: *mut ::core::ffi::c_int) -> f64;
    }
    unsafe extern "C" {
        pub fn rint(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __rint(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn nextafter(__x: f64, __y: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __nextafter(__x: f64, __y: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn nexttoward(__x: f64, __y: u128) -> f64;
    }
    unsafe extern "C" {
        pub fn __nexttoward(__x: f64, __y: u128) -> f64;
    }
    unsafe extern "C" {
        pub fn nextdown(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __nextdown(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn nextup(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __nextup(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn remainder(__x: f64, __y: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __remainder(__x: f64, __y: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn scalbn(__x: f64, __n: ::core::ffi::c_int) -> f64;
    }
    unsafe extern "C" {
        pub fn __scalbn(__x: f64, __n: ::core::ffi::c_int) -> f64;
    }
    unsafe extern "C" {
        pub fn ilogb(__x: f64) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __ilogb(__x: f64) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn llogb(__x: f64) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn __llogb(__x: f64) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn scalbln(__x: f64, __n: ::core::ffi::c_long) -> f64;
    }
    unsafe extern "C" {
        pub fn __scalbln(__x: f64, __n: ::core::ffi::c_long) -> f64;
    }
    unsafe extern "C" {
        pub fn nearbyint(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __nearbyint(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn round(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn trunc(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn remquo(__x: f64, __y: f64, __quo: *mut ::core::ffi::c_int) -> f64;
    }
    unsafe extern "C" {
        pub fn __remquo(__x: f64, __y: f64, __quo: *mut ::core::ffi::c_int) -> f64;
    }
    unsafe extern "C" {
        pub fn lrint(__x: f64) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn __lrint(__x: f64) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn llrint(__x: f64) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn __llrint(__x: f64) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn lround(__x: f64) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn __lround(__x: f64) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn llround(__x: f64) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn __llround(__x: f64) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn fdim(__x: f64, __y: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __fdim(__x: f64, __y: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn fmax(__x: f64, __y: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn fmin(__x: f64, __y: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn roundeven(__x: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn fromfp(
            __x: f64,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__intmax_t;
    }
    unsafe extern "C" {
        pub fn __fromfp(
            __x: f64,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__intmax_t;
    }
    unsafe extern "C" {
        pub fn ufromfp(
            __x: f64,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__uintmax_t;
    }
    unsafe extern "C" {
        pub fn __ufromfp(
            __x: f64,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__uintmax_t;
    }
    unsafe extern "C" {
        pub fn fromfpx(
            __x: f64,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__intmax_t;
    }
    unsafe extern "C" {
        pub fn __fromfpx(
            __x: f64,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__intmax_t;
    }
    unsafe extern "C" {
        pub fn ufromfpx(
            __x: f64,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__uintmax_t;
    }
    unsafe extern "C" {
        pub fn __ufromfpx(
            __x: f64,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__uintmax_t;
    }
    unsafe extern "C" {
        pub fn canonicalize(__cx: *mut f64, __x: *const f64) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fmaxmag(__x: f64, __y: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn fminmag(__x: f64, __y: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn fmaximum(__x: f64, __y: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn fminimum(__x: f64, __y: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn fmaximum_num(__x: f64, __y: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn fminimum_num(__x: f64, __y: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn fmaximum_mag(__x: f64, __y: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn fminimum_mag(__x: f64, __y: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn fmaximum_mag_num(__x: f64, __y: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn fminimum_mag_num(__x: f64, __y: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn totalorder(__x: *const f64, __y: *const f64) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn totalordermag(__x: *const f64, __y: *const f64) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getpayload(__x: *const f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __getpayload(__x: *const f64) -> f64;
    }
    unsafe extern "C" {
        pub fn setpayload(__x: *mut f64, __payload: f64) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setpayloadsig(__x: *mut f64, __payload: f64) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn scalb(__x: f64, __n: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __scalb(__x: f64, __n: f64) -> f64;
    }
    unsafe extern "C" {
        pub fn __fpclassifyf(__value: f32) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __signbitf(__value: f32) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __isinff(__value: f32) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __finitef(__value: f32) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __isnanf(__value: f32) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __iseqsigf(__x: f32, __y: f32) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __issignalingf(__value: f32) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn acosf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __acosf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn asinf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __asinf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn atanf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __atanf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn atan2f(__y: f32, __x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __atan2f(__y: f32, __x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn cosf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __cosf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn sinf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __sinf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn tanf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __tanf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn acospif(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __acospif(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn asinpif(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __asinpif(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn atanpif(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __atanpif(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn atan2pif(__y: f32, __x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __atan2pif(__y: f32, __x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn cospif(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __cospif(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn sinpif(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __sinpif(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn tanpif(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __tanpif(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn coshf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __coshf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn sinhf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __sinhf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn tanhf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __tanhf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn sincosf(__x: f32, __sinx: *mut f32, __cosx: *mut f32);
    }
    unsafe extern "C" {
        pub fn __sincosf(__x: f32, __sinx: *mut f32, __cosx: *mut f32);
    }
    unsafe extern "C" {
        pub fn acoshf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __acoshf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn asinhf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __asinhf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn atanhf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __atanhf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn expf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __expf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn frexpf(__x: f32, __exponent: *mut ::core::ffi::c_int) -> f32;
    }
    unsafe extern "C" {
        pub fn __frexpf(__x: f32, __exponent: *mut ::core::ffi::c_int) -> f32;
    }
    unsafe extern "C" {
        pub fn ldexpf(__x: f32, __exponent: ::core::ffi::c_int) -> f32;
    }
    unsafe extern "C" {
        pub fn __ldexpf(__x: f32, __exponent: ::core::ffi::c_int) -> f32;
    }
    unsafe extern "C" {
        pub fn logf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __logf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn log10f(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __log10f(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
    }
    unsafe extern "C" {
        pub fn exp10f(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __exp10f(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn exp2m1f(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __exp2m1f(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn exp10m1f(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __exp10m1f(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn log2p1f(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __log2p1f(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn log10p1f(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __log10p1f(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn logp1f(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __logp1f(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn expm1f(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __expm1f(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn log1pf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __log1pf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn logbf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __logbf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn exp2f(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __exp2f(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn log2f(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __log2f(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn powf(__x: f32, __y: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __powf(__x: f32, __y: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn sqrtf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __sqrtf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn hypotf(__x: f32, __y: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __hypotf(__x: f32, __y: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn cbrtf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __cbrtf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn ceilf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn fabsf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn floorf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn fmodf(__x: f32, __y: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __fmodf(__x: f32, __y: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn isinff(__value: f32) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn finitef(__value: f32) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn dremf(__x: f32, __y: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __dremf(__x: f32, __y: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn significandf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __significandf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn copysignf(__x: f32, __y: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn nanf(__tagb: *const ::core::ffi::c_char) -> f32;
    }
    unsafe extern "C" {
        pub fn __nanf(__tagb: *const ::core::ffi::c_char) -> f32;
    }
    unsafe extern "C" {
        pub fn isnanf(__value: f32) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn j0f(arg1: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __j0f(arg1: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn j1f(arg1: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __j1f(arg1: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn jnf(arg1: ::core::ffi::c_int, arg2: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __jnf(arg1: ::core::ffi::c_int, arg2: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn y0f(arg1: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __y0f(arg1: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn y1f(arg1: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __y1f(arg1: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn ynf(arg1: ::core::ffi::c_int, arg2: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __ynf(arg1: ::core::ffi::c_int, arg2: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn erff(arg1: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __erff(arg1: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn erfcf(arg1: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __erfcf(arg1: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn lgammaf(arg1: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __lgammaf(arg1: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn tgammaf(arg1: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __tgammaf(arg1: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn gammaf(arg1: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __gammaf(arg1: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn lgammaf_r(arg1: f32, __signgamp: *mut ::core::ffi::c_int) -> f32;
    }
    unsafe extern "C" {
        pub fn __lgammaf_r(arg1: f32, __signgamp: *mut ::core::ffi::c_int) -> f32;
    }
    unsafe extern "C" {
        pub fn rintf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __rintf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn nextafterf(__x: f32, __y: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __nextafterf(__x: f32, __y: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn nexttowardf(__x: f32, __y: u128) -> f32;
    }
    unsafe extern "C" {
        pub fn __nexttowardf(__x: f32, __y: u128) -> f32;
    }
    unsafe extern "C" {
        pub fn nextdownf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __nextdownf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn nextupf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __nextupf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn remainderf(__x: f32, __y: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __remainderf(__x: f32, __y: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn scalbnf(__x: f32, __n: ::core::ffi::c_int) -> f32;
    }
    unsafe extern "C" {
        pub fn __scalbnf(__x: f32, __n: ::core::ffi::c_int) -> f32;
    }
    unsafe extern "C" {
        pub fn ilogbf(__x: f32) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __ilogbf(__x: f32) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn llogbf(__x: f32) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn __llogbf(__x: f32) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn scalblnf(__x: f32, __n: ::core::ffi::c_long) -> f32;
    }
    unsafe extern "C" {
        pub fn __scalblnf(__x: f32, __n: ::core::ffi::c_long) -> f32;
    }
    unsafe extern "C" {
        pub fn nearbyintf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __nearbyintf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn roundf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn truncf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn remquof(__x: f32, __y: f32, __quo: *mut ::core::ffi::c_int) -> f32;
    }
    unsafe extern "C" {
        pub fn __remquof(__x: f32, __y: f32, __quo: *mut ::core::ffi::c_int) -> f32;
    }
    unsafe extern "C" {
        pub fn lrintf(__x: f32) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn __lrintf(__x: f32) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn llrintf(__x: f32) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn __llrintf(__x: f32) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn lroundf(__x: f32) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn __lroundf(__x: f32) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn llroundf(__x: f32) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn __llroundf(__x: f32) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn fdimf(__x: f32, __y: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __fdimf(__x: f32, __y: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn fmaxf(__x: f32, __y: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn fminf(__x: f32, __y: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn roundevenf(__x: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn fromfpf(
            __x: f32,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__intmax_t;
    }
    unsafe extern "C" {
        pub fn __fromfpf(
            __x: f32,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__intmax_t;
    }
    unsafe extern "C" {
        pub fn ufromfpf(
            __x: f32,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__uintmax_t;
    }
    unsafe extern "C" {
        pub fn __ufromfpf(
            __x: f32,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__uintmax_t;
    }
    unsafe extern "C" {
        pub fn fromfpxf(
            __x: f32,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__intmax_t;
    }
    unsafe extern "C" {
        pub fn __fromfpxf(
            __x: f32,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__intmax_t;
    }
    unsafe extern "C" {
        pub fn ufromfpxf(
            __x: f32,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__uintmax_t;
    }
    unsafe extern "C" {
        pub fn __ufromfpxf(
            __x: f32,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__uintmax_t;
    }
    unsafe extern "C" {
        pub fn canonicalizef(__cx: *mut f32, __x: *const f32) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fmaxmagf(__x: f32, __y: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn fminmagf(__x: f32, __y: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn fmaximumf(__x: f32, __y: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn fminimumf(__x: f32, __y: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn fmaximum_numf(__x: f32, __y: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn fminimum_numf(__x: f32, __y: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn fmaximum_magf(__x: f32, __y: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn fminimum_magf(__x: f32, __y: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn fmaximum_mag_numf(__x: f32, __y: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn fminimum_mag_numf(__x: f32, __y: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn totalorderf(__x: *const f32, __y: *const f32) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn totalordermagf(__x: *const f32, __y: *const f32) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getpayloadf(__x: *const f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __getpayloadf(__x: *const f32) -> f32;
    }
    unsafe extern "C" {
        pub fn setpayloadf(__x: *mut f32, __payload: f32) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setpayloadsigf(__x: *mut f32, __payload: f32) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn scalbf(__x: f32, __n: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __scalbf(__x: f32, __n: f32) -> f32;
    }
    unsafe extern "C" {
        pub fn __fpclassifyl(__value: u128) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __signbitl(__value: u128) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __isinfl(__value: u128) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __finitel(__value: u128) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __isnanl(__value: u128) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __iseqsigl(__x: u128, __y: u128) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __issignalingl(__value: u128) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn acosl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __acosl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn asinl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __asinl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn atanl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __atanl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn atan2l(__y: u128, __x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __atan2l(__y: u128, __x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn cosl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __cosl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn sinl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __sinl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn tanl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __tanl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn acospil(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __acospil(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn asinpil(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __asinpil(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn atanpil(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __atanpil(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn atan2pil(__y: u128, __x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __atan2pil(__y: u128, __x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn cospil(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __cospil(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn sinpil(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __sinpil(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn tanpil(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __tanpil(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn coshl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __coshl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn sinhl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __sinhl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn tanhl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __tanhl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn sincosl(__x: u128, __sinx: *mut u128, __cosx: *mut u128);
    }
    unsafe extern "C" {
        pub fn __sincosl(__x: u128, __sinx: *mut u128, __cosx: *mut u128);
    }
    unsafe extern "C" {
        pub fn acoshl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __acoshl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn asinhl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __asinhl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn atanhl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __atanhl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn expl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __expl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn frexpl(__x: u128, __exponent: *mut ::core::ffi::c_int) -> u128;
    }
    unsafe extern "C" {
        pub fn __frexpl(__x: u128, __exponent: *mut ::core::ffi::c_int) -> u128;
    }
    unsafe extern "C" {
        pub fn ldexpl(__x: u128, __exponent: ::core::ffi::c_int) -> u128;
    }
    unsafe extern "C" {
        pub fn __ldexpl(__x: u128, __exponent: ::core::ffi::c_int) -> u128;
    }
    unsafe extern "C" {
        pub fn logl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __logl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn log10l(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __log10l(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn modfl(__x: u128, __iptr: *mut u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __modfl(__x: u128, __iptr: *mut u128) -> u128;
    }
    unsafe extern "C" {
        pub fn exp10l(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __exp10l(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn exp2m1l(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __exp2m1l(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn exp10m1l(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __exp10m1l(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn log2p1l(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __log2p1l(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn log10p1l(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __log10p1l(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn logp1l(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __logp1l(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn expm1l(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __expm1l(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn log1pl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __log1pl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn logbl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __logbl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn exp2l(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __exp2l(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn log2l(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __log2l(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn powl(__x: u128, __y: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __powl(__x: u128, __y: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn sqrtl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __sqrtl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn hypotl(__x: u128, __y: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __hypotl(__x: u128, __y: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn cbrtl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __cbrtl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn ceill(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn fabsl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn floorl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn fmodl(__x: u128, __y: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __fmodl(__x: u128, __y: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn isinfl(__value: u128) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn finitel(__value: u128) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn dreml(__x: u128, __y: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __dreml(__x: u128, __y: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn significandl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __significandl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn copysignl(__x: u128, __y: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn nanl(__tagb: *const ::core::ffi::c_char) -> u128;
    }
    unsafe extern "C" {
        pub fn __nanl(__tagb: *const ::core::ffi::c_char) -> u128;
    }
    unsafe extern "C" {
        pub fn isnanl(__value: u128) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn j0l(arg1: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __j0l(arg1: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn j1l(arg1: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __j1l(arg1: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn jnl(arg1: ::core::ffi::c_int, arg2: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __jnl(arg1: ::core::ffi::c_int, arg2: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn y0l(arg1: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __y0l(arg1: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn y1l(arg1: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __y1l(arg1: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn ynl(arg1: ::core::ffi::c_int, arg2: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __ynl(arg1: ::core::ffi::c_int, arg2: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn erfl(arg1: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __erfl(arg1: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn erfcl(arg1: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __erfcl(arg1: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn lgammal(arg1: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __lgammal(arg1: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn tgammal(arg1: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __tgammal(arg1: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn gammal(arg1: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __gammal(arg1: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn lgammal_r(arg1: u128, __signgamp: *mut ::core::ffi::c_int) -> u128;
    }
    unsafe extern "C" {
        pub fn __lgammal_r(arg1: u128, __signgamp: *mut ::core::ffi::c_int) -> u128;
    }
    unsafe extern "C" {
        pub fn rintl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __rintl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn nextafterl(__x: u128, __y: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __nextafterl(__x: u128, __y: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn nexttowardl(__x: u128, __y: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __nexttowardl(__x: u128, __y: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn nextdownl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __nextdownl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn nextupl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __nextupl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn remainderl(__x: u128, __y: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __remainderl(__x: u128, __y: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn scalbnl(__x: u128, __n: ::core::ffi::c_int) -> u128;
    }
    unsafe extern "C" {
        pub fn __scalbnl(__x: u128, __n: ::core::ffi::c_int) -> u128;
    }
    unsafe extern "C" {
        pub fn ilogbl(__x: u128) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __ilogbl(__x: u128) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn llogbl(__x: u128) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn __llogbl(__x: u128) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn scalblnl(__x: u128, __n: ::core::ffi::c_long) -> u128;
    }
    unsafe extern "C" {
        pub fn __scalblnl(__x: u128, __n: ::core::ffi::c_long) -> u128;
    }
    unsafe extern "C" {
        pub fn nearbyintl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __nearbyintl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn roundl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn truncl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn remquol(__x: u128, __y: u128, __quo: *mut ::core::ffi::c_int) -> u128;
    }
    unsafe extern "C" {
        pub fn __remquol(__x: u128, __y: u128, __quo: *mut ::core::ffi::c_int) -> u128;
    }
    unsafe extern "C" {
        pub fn lrintl(__x: u128) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn __lrintl(__x: u128) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn llrintl(__x: u128) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn __llrintl(__x: u128) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn lroundl(__x: u128) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn __lroundl(__x: u128) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn llroundl(__x: u128) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn __llroundl(__x: u128) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn fdiml(__x: u128, __y: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __fdiml(__x: u128, __y: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn fmaxl(__x: u128, __y: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn fminl(__x: u128, __y: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn fmal(__x: u128, __y: u128, __z: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __fmal(__x: u128, __y: u128, __z: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn roundevenl(__x: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn fromfpl(
            __x: u128,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__intmax_t;
    }
    unsafe extern "C" {
        pub fn __fromfpl(
            __x: u128,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__intmax_t;
    }
    unsafe extern "C" {
        pub fn ufromfpl(
            __x: u128,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__uintmax_t;
    }
    unsafe extern "C" {
        pub fn __ufromfpl(
            __x: u128,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__uintmax_t;
    }
    unsafe extern "C" {
        pub fn fromfpxl(
            __x: u128,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__intmax_t;
    }
    unsafe extern "C" {
        pub fn __fromfpxl(
            __x: u128,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__intmax_t;
    }
    unsafe extern "C" {
        pub fn ufromfpxl(
            __x: u128,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__uintmax_t;
    }
    unsafe extern "C" {
        pub fn __ufromfpxl(
            __x: u128,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__uintmax_t;
    }
    unsafe extern "C" {
        pub fn canonicalizel(__cx: *mut u128, __x: *const u128) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fmaxmagl(__x: u128, __y: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn fminmagl(__x: u128, __y: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn fmaximuml(__x: u128, __y: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn fminimuml(__x: u128, __y: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn fmaximum_numl(__x: u128, __y: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn fminimum_numl(__x: u128, __y: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn fmaximum_magl(__x: u128, __y: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn fminimum_magl(__x: u128, __y: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn fmaximum_mag_numl(__x: u128, __y: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn fminimum_mag_numl(__x: u128, __y: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn totalorderl(__x: *const u128, __y: *const u128) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn totalordermagl(__x: *const u128, __y: *const u128) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getpayloadl(__x: *const u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __getpayloadl(__x: *const u128) -> u128;
    }
    unsafe extern "C" {
        pub fn setpayloadl(__x: *mut u128, __payload: u128) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setpayloadsigl(__x: *mut u128, __payload: u128) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn scalbl(__x: u128, __n: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn __scalbl(__x: u128, __n: u128) -> u128;
    }
    unsafe extern "C" {
        pub fn acosf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __acosf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn asinf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __asinf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn atanf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __atanf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn atan2f32(__y: root::_Float32, __x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __atan2f32(__y: root::_Float32, __x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn cosf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __cosf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn sinf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __sinf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn tanf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __tanf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn acospif32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __acospif32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn asinpif32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __asinpif32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn atanpif32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __atanpif32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn atan2pif32(__y: root::_Float32, __x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __atan2pif32(__y: root::_Float32, __x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn cospif32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __cospif32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn sinpif32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __sinpif32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn tanpif32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __tanpif32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn coshf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __coshf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn sinhf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __sinhf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn tanhf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __tanhf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn sincosf32(
            __x: root::_Float32,
            __sinx: *mut root::_Float32,
            __cosx: *mut root::_Float32,
        );
    }
    unsafe extern "C" {
        pub fn __sincosf32(
            __x: root::_Float32,
            __sinx: *mut root::_Float32,
            __cosx: *mut root::_Float32,
        );
    }
    unsafe extern "C" {
        pub fn acoshf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __acoshf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn asinhf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __asinhf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn atanhf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __atanhf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn expf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __expf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn frexpf32(__x: root::_Float32, __exponent: *mut ::core::ffi::c_int)
            -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __frexpf32(
            __x: root::_Float32,
            __exponent: *mut ::core::ffi::c_int,
        ) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn ldexpf32(__x: root::_Float32, __exponent: ::core::ffi::c_int) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __ldexpf32(__x: root::_Float32, __exponent: ::core::ffi::c_int) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn logf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __logf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn log10f32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __log10f32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn modff32(__x: root::_Float32, __iptr: *mut root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __modff32(__x: root::_Float32, __iptr: *mut root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn exp10f32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __exp10f32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn exp2m1f32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __exp2m1f32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn exp10m1f32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __exp10m1f32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn log2p1f32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __log2p1f32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn log10p1f32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __log10p1f32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn logp1f32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __logp1f32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn expm1f32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __expm1f32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn log1pf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __log1pf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn logbf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __logbf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn exp2f32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __exp2f32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn log2f32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __log2f32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn powf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __powf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn sqrtf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __sqrtf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn hypotf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __hypotf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn cbrtf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __cbrtf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn ceilf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn fabsf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn floorf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn fmodf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __fmodf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn copysignf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn nanf32(__tagb: *const ::core::ffi::c_char) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __nanf32(__tagb: *const ::core::ffi::c_char) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn j0f32(arg1: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __j0f32(arg1: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn j1f32(arg1: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __j1f32(arg1: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn jnf32(arg1: ::core::ffi::c_int, arg2: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __jnf32(arg1: ::core::ffi::c_int, arg2: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn y0f32(arg1: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __y0f32(arg1: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn y1f32(arg1: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __y1f32(arg1: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn ynf32(arg1: ::core::ffi::c_int, arg2: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __ynf32(arg1: ::core::ffi::c_int, arg2: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn erff32(arg1: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __erff32(arg1: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn erfcf32(arg1: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __erfcf32(arg1: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn lgammaf32(arg1: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __lgammaf32(arg1: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn tgammaf32(arg1: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __tgammaf32(arg1: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn lgammaf32_r(
            arg1: root::_Float32,
            __signgamp: *mut ::core::ffi::c_int,
        ) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __lgammaf32_r(
            arg1: root::_Float32,
            __signgamp: *mut ::core::ffi::c_int,
        ) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn rintf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __rintf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn nextafterf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __nextafterf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn nextdownf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __nextdownf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn nextupf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __nextupf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn remainderf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __remainderf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn scalbnf32(__x: root::_Float32, __n: ::core::ffi::c_int) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __scalbnf32(__x: root::_Float32, __n: ::core::ffi::c_int) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn ilogbf32(__x: root::_Float32) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __ilogbf32(__x: root::_Float32) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn llogbf32(__x: root::_Float32) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn __llogbf32(__x: root::_Float32) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn scalblnf32(__x: root::_Float32, __n: ::core::ffi::c_long) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __scalblnf32(__x: root::_Float32, __n: ::core::ffi::c_long) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn nearbyintf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __nearbyintf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn roundf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn truncf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn remquof32(
            __x: root::_Float32,
            __y: root::_Float32,
            __quo: *mut ::core::ffi::c_int,
        ) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __remquof32(
            __x: root::_Float32,
            __y: root::_Float32,
            __quo: *mut ::core::ffi::c_int,
        ) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn lrintf32(__x: root::_Float32) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn __lrintf32(__x: root::_Float32) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn llrintf32(__x: root::_Float32) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn __llrintf32(__x: root::_Float32) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn lroundf32(__x: root::_Float32) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn __lroundf32(__x: root::_Float32) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn llroundf32(__x: root::_Float32) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn __llroundf32(__x: root::_Float32) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn fdimf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __fdimf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn fmaxf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn fminf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn fmaf32(
            __x: root::_Float32,
            __y: root::_Float32,
            __z: root::_Float32,
        ) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __fmaf32(
            __x: root::_Float32,
            __y: root::_Float32,
            __z: root::_Float32,
        ) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn roundevenf32(__x: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn fromfpf32(
            __x: root::_Float32,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__intmax_t;
    }
    unsafe extern "C" {
        pub fn __fromfpf32(
            __x: root::_Float32,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__intmax_t;
    }
    unsafe extern "C" {
        pub fn ufromfpf32(
            __x: root::_Float32,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__uintmax_t;
    }
    unsafe extern "C" {
        pub fn __ufromfpf32(
            __x: root::_Float32,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__uintmax_t;
    }
    unsafe extern "C" {
        pub fn fromfpxf32(
            __x: root::_Float32,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__intmax_t;
    }
    unsafe extern "C" {
        pub fn __fromfpxf32(
            __x: root::_Float32,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__intmax_t;
    }
    unsafe extern "C" {
        pub fn ufromfpxf32(
            __x: root::_Float32,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__uintmax_t;
    }
    unsafe extern "C" {
        pub fn __ufromfpxf32(
            __x: root::_Float32,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__uintmax_t;
    }
    unsafe extern "C" {
        pub fn canonicalizef32(
            __cx: *mut root::_Float32,
            __x: *const root::_Float32,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fmaxmagf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn fminmagf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn fmaximumf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn fminimumf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn fmaximum_numf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn fminimum_numf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn fmaximum_magf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn fminimum_magf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn fmaximum_mag_numf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn fminimum_mag_numf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn totalorderf32(
            __x: *const root::_Float32,
            __y: *const root::_Float32,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn totalordermagf32(
            __x: *const root::_Float32,
            __y: *const root::_Float32,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getpayloadf32(__x: *const root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn __getpayloadf32(__x: *const root::_Float32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn setpayloadf32(
            __x: *mut root::_Float32,
            __payload: root::_Float32,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setpayloadsigf32(
            __x: *mut root::_Float32,
            __payload: root::_Float32,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn acosf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __acosf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn asinf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __asinf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn atanf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __atanf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn atan2f64(__y: root::_Float64, __x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __atan2f64(__y: root::_Float64, __x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn cosf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __cosf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn sinf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __sinf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn tanf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __tanf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn acospif64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __acospif64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn asinpif64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __asinpif64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn atanpif64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __atanpif64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn atan2pif64(__y: root::_Float64, __x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __atan2pif64(__y: root::_Float64, __x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn cospif64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __cospif64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn sinpif64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __sinpif64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn tanpif64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __tanpif64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn coshf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __coshf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn sinhf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __sinhf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn tanhf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __tanhf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn sincosf64(
            __x: root::_Float64,
            __sinx: *mut root::_Float64,
            __cosx: *mut root::_Float64,
        );
    }
    unsafe extern "C" {
        pub fn __sincosf64(
            __x: root::_Float64,
            __sinx: *mut root::_Float64,
            __cosx: *mut root::_Float64,
        );
    }
    unsafe extern "C" {
        pub fn acoshf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __acoshf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn asinhf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __asinhf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn atanhf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __atanhf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn expf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __expf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn frexpf64(__x: root::_Float64, __exponent: *mut ::core::ffi::c_int)
            -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __frexpf64(
            __x: root::_Float64,
            __exponent: *mut ::core::ffi::c_int,
        ) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn ldexpf64(__x: root::_Float64, __exponent: ::core::ffi::c_int) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __ldexpf64(__x: root::_Float64, __exponent: ::core::ffi::c_int) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn logf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __logf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn log10f64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __log10f64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn modff64(__x: root::_Float64, __iptr: *mut root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __modff64(__x: root::_Float64, __iptr: *mut root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn exp10f64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __exp10f64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn exp2m1f64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __exp2m1f64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn exp10m1f64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __exp10m1f64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn log2p1f64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __log2p1f64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn log10p1f64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __log10p1f64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn logp1f64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __logp1f64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn expm1f64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __expm1f64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn log1pf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __log1pf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn logbf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __logbf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn exp2f64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __exp2f64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn log2f64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __log2f64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn powf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __powf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn sqrtf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __sqrtf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn hypotf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __hypotf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn cbrtf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __cbrtf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn ceilf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn fabsf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn floorf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn fmodf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __fmodf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn copysignf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn nanf64(__tagb: *const ::core::ffi::c_char) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __nanf64(__tagb: *const ::core::ffi::c_char) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn j0f64(arg1: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __j0f64(arg1: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn j1f64(arg1: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __j1f64(arg1: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn jnf64(arg1: ::core::ffi::c_int, arg2: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __jnf64(arg1: ::core::ffi::c_int, arg2: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn y0f64(arg1: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __y0f64(arg1: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn y1f64(arg1: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __y1f64(arg1: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn ynf64(arg1: ::core::ffi::c_int, arg2: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __ynf64(arg1: ::core::ffi::c_int, arg2: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn erff64(arg1: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __erff64(arg1: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn erfcf64(arg1: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __erfcf64(arg1: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn lgammaf64(arg1: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __lgammaf64(arg1: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn tgammaf64(arg1: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __tgammaf64(arg1: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn lgammaf64_r(
            arg1: root::_Float64,
            __signgamp: *mut ::core::ffi::c_int,
        ) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __lgammaf64_r(
            arg1: root::_Float64,
            __signgamp: *mut ::core::ffi::c_int,
        ) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn rintf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __rintf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn nextafterf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __nextafterf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn nextdownf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __nextdownf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn nextupf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __nextupf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn remainderf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __remainderf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn scalbnf64(__x: root::_Float64, __n: ::core::ffi::c_int) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __scalbnf64(__x: root::_Float64, __n: ::core::ffi::c_int) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn ilogbf64(__x: root::_Float64) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __ilogbf64(__x: root::_Float64) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn llogbf64(__x: root::_Float64) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn __llogbf64(__x: root::_Float64) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn scalblnf64(__x: root::_Float64, __n: ::core::ffi::c_long) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __scalblnf64(__x: root::_Float64, __n: ::core::ffi::c_long) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn nearbyintf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __nearbyintf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn roundf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn truncf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn remquof64(
            __x: root::_Float64,
            __y: root::_Float64,
            __quo: *mut ::core::ffi::c_int,
        ) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __remquof64(
            __x: root::_Float64,
            __y: root::_Float64,
            __quo: *mut ::core::ffi::c_int,
        ) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn lrintf64(__x: root::_Float64) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn __lrintf64(__x: root::_Float64) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn llrintf64(__x: root::_Float64) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn __llrintf64(__x: root::_Float64) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn lroundf64(__x: root::_Float64) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn __lroundf64(__x: root::_Float64) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn llroundf64(__x: root::_Float64) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn __llroundf64(__x: root::_Float64) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn fdimf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __fdimf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn fmaxf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn fminf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn fmaf64(
            __x: root::_Float64,
            __y: root::_Float64,
            __z: root::_Float64,
        ) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __fmaf64(
            __x: root::_Float64,
            __y: root::_Float64,
            __z: root::_Float64,
        ) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn roundevenf64(__x: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn fromfpf64(
            __x: root::_Float64,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__intmax_t;
    }
    unsafe extern "C" {
        pub fn __fromfpf64(
            __x: root::_Float64,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__intmax_t;
    }
    unsafe extern "C" {
        pub fn ufromfpf64(
            __x: root::_Float64,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__uintmax_t;
    }
    unsafe extern "C" {
        pub fn __ufromfpf64(
            __x: root::_Float64,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__uintmax_t;
    }
    unsafe extern "C" {
        pub fn fromfpxf64(
            __x: root::_Float64,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__intmax_t;
    }
    unsafe extern "C" {
        pub fn __fromfpxf64(
            __x: root::_Float64,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__intmax_t;
    }
    unsafe extern "C" {
        pub fn ufromfpxf64(
            __x: root::_Float64,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__uintmax_t;
    }
    unsafe extern "C" {
        pub fn __ufromfpxf64(
            __x: root::_Float64,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__uintmax_t;
    }
    unsafe extern "C" {
        pub fn canonicalizef64(
            __cx: *mut root::_Float64,
            __x: *const root::_Float64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fmaxmagf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn fminmagf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn fmaximumf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn fminimumf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn fmaximum_numf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn fminimum_numf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn fmaximum_magf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn fminimum_magf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn fmaximum_mag_numf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn fminimum_mag_numf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn totalorderf64(
            __x: *const root::_Float64,
            __y: *const root::_Float64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn totalordermagf64(
            __x: *const root::_Float64,
            __y: *const root::_Float64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getpayloadf64(__x: *const root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn __getpayloadf64(__x: *const root::_Float64) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn setpayloadf64(
            __x: *mut root::_Float64,
            __payload: root::_Float64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setpayloadsigf64(
            __x: *mut root::_Float64,
            __payload: root::_Float64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __fpclassifyf128(__value: root::_Float128) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __signbitf128(__value: root::_Float128) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __isinff128(__value: root::_Float128) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __finitef128(__value: root::_Float128) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __isnanf128(__value: root::_Float128) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __iseqsigf128(__x: root::_Float128, __y: root::_Float128) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __issignalingf128(__value: root::_Float128) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn acosf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __acosf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn asinf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __asinf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn atanf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __atanf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn atan2f128(__y: root::_Float128, __x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __atan2f128(__y: root::_Float128, __x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn cosf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __cosf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn sinf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __sinf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn tanf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __tanf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn acospif128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __acospif128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn asinpif128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __asinpif128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn atanpif128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __atanpif128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn atan2pif128(__y: root::_Float128, __x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __atan2pif128(__y: root::_Float128, __x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn cospif128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __cospif128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn sinpif128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __sinpif128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn tanpif128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __tanpif128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn coshf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __coshf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn sinhf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __sinhf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn tanhf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __tanhf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn sincosf128(
            __x: root::_Float128,
            __sinx: *mut root::_Float128,
            __cosx: *mut root::_Float128,
        );
    }
    unsafe extern "C" {
        pub fn __sincosf128(
            __x: root::_Float128,
            __sinx: *mut root::_Float128,
            __cosx: *mut root::_Float128,
        );
    }
    unsafe extern "C" {
        pub fn acoshf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __acoshf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn asinhf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __asinhf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn atanhf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __atanhf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn expf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __expf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn frexpf128(
            __x: root::_Float128,
            __exponent: *mut ::core::ffi::c_int,
        ) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __frexpf128(
            __x: root::_Float128,
            __exponent: *mut ::core::ffi::c_int,
        ) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn ldexpf128(__x: root::_Float128, __exponent: ::core::ffi::c_int) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __ldexpf128(__x: root::_Float128, __exponent: ::core::ffi::c_int)
            -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn logf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __logf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn log10f128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __log10f128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn modff128(__x: root::_Float128, __iptr: *mut root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __modff128(__x: root::_Float128, __iptr: *mut root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn exp10f128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __exp10f128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn exp2m1f128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __exp2m1f128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn exp10m1f128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __exp10m1f128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn log2p1f128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __log2p1f128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn log10p1f128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __log10p1f128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn logp1f128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __logp1f128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn expm1f128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __expm1f128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn log1pf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __log1pf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn logbf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __logbf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn exp2f128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __exp2f128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn log2f128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __log2f128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn powf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __powf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn sqrtf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __sqrtf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn hypotf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __hypotf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn cbrtf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __cbrtf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn ceilf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn fabsf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn floorf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn fmodf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __fmodf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn copysignf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn nanf128(__tagb: *const ::core::ffi::c_char) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __nanf128(__tagb: *const ::core::ffi::c_char) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn j0f128(arg1: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __j0f128(arg1: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn j1f128(arg1: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __j1f128(arg1: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn jnf128(arg1: ::core::ffi::c_int, arg2: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __jnf128(arg1: ::core::ffi::c_int, arg2: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn y0f128(arg1: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __y0f128(arg1: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn y1f128(arg1: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __y1f128(arg1: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn ynf128(arg1: ::core::ffi::c_int, arg2: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __ynf128(arg1: ::core::ffi::c_int, arg2: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn erff128(arg1: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __erff128(arg1: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn erfcf128(arg1: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __erfcf128(arg1: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn lgammaf128(arg1: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __lgammaf128(arg1: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn tgammaf128(arg1: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __tgammaf128(arg1: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn lgammaf128_r(
            arg1: root::_Float128,
            __signgamp: *mut ::core::ffi::c_int,
        ) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __lgammaf128_r(
            arg1: root::_Float128,
            __signgamp: *mut ::core::ffi::c_int,
        ) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn rintf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __rintf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn nextafterf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __nextafterf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn nextdownf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __nextdownf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn nextupf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __nextupf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn remainderf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __remainderf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn scalbnf128(__x: root::_Float128, __n: ::core::ffi::c_int) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __scalbnf128(__x: root::_Float128, __n: ::core::ffi::c_int) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn ilogbf128(__x: root::_Float128) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __ilogbf128(__x: root::_Float128) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn llogbf128(__x: root::_Float128) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn __llogbf128(__x: root::_Float128) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn scalblnf128(__x: root::_Float128, __n: ::core::ffi::c_long) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __scalblnf128(__x: root::_Float128, __n: ::core::ffi::c_long) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn nearbyintf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __nearbyintf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn roundf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn truncf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn remquof128(
            __x: root::_Float128,
            __y: root::_Float128,
            __quo: *mut ::core::ffi::c_int,
        ) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __remquof128(
            __x: root::_Float128,
            __y: root::_Float128,
            __quo: *mut ::core::ffi::c_int,
        ) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn lrintf128(__x: root::_Float128) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn __lrintf128(__x: root::_Float128) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn llrintf128(__x: root::_Float128) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn __llrintf128(__x: root::_Float128) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn lroundf128(__x: root::_Float128) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn __lroundf128(__x: root::_Float128) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn llroundf128(__x: root::_Float128) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn __llroundf128(__x: root::_Float128) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn fdimf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __fdimf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn fmaxf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn fminf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn fmaf128(
            __x: root::_Float128,
            __y: root::_Float128,
            __z: root::_Float128,
        ) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __fmaf128(
            __x: root::_Float128,
            __y: root::_Float128,
            __z: root::_Float128,
        ) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn roundevenf128(__x: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn fromfpf128(
            __x: root::_Float128,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__intmax_t;
    }
    unsafe extern "C" {
        pub fn __fromfpf128(
            __x: root::_Float128,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__intmax_t;
    }
    unsafe extern "C" {
        pub fn ufromfpf128(
            __x: root::_Float128,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__uintmax_t;
    }
    unsafe extern "C" {
        pub fn __ufromfpf128(
            __x: root::_Float128,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__uintmax_t;
    }
    unsafe extern "C" {
        pub fn fromfpxf128(
            __x: root::_Float128,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__intmax_t;
    }
    unsafe extern "C" {
        pub fn __fromfpxf128(
            __x: root::_Float128,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__intmax_t;
    }
    unsafe extern "C" {
        pub fn ufromfpxf128(
            __x: root::_Float128,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__uintmax_t;
    }
    unsafe extern "C" {
        pub fn __ufromfpxf128(
            __x: root::_Float128,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__uintmax_t;
    }
    unsafe extern "C" {
        pub fn canonicalizef128(
            __cx: *mut root::_Float128,
            __x: *const root::_Float128,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fmaxmagf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn fminmagf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn fmaximumf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn fminimumf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn fmaximum_numf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn fminimum_numf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn fmaximum_magf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn fminimum_magf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn fmaximum_mag_numf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn fminimum_mag_numf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn totalorderf128(
            __x: *const root::_Float128,
            __y: *const root::_Float128,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn totalordermagf128(
            __x: *const root::_Float128,
            __y: *const root::_Float128,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getpayloadf128(__x: *const root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn __getpayloadf128(__x: *const root::_Float128) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn setpayloadf128(
            __x: *mut root::_Float128,
            __payload: root::_Float128,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setpayloadsigf128(
            __x: *mut root::_Float128,
            __payload: root::_Float128,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn acosf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __acosf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn asinf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __asinf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn atanf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __atanf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn atan2f32x(__y: root::_Float32x, __x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __atan2f32x(__y: root::_Float32x, __x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn cosf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __cosf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn sinf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __sinf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn tanf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __tanf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn acospif32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __acospif32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn asinpif32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __asinpif32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn atanpif32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __atanpif32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn atan2pif32x(__y: root::_Float32x, __x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __atan2pif32x(__y: root::_Float32x, __x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn cospif32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __cospif32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn sinpif32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __sinpif32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn tanpif32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __tanpif32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn coshf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __coshf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn sinhf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __sinhf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn tanhf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __tanhf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn sincosf32x(
            __x: root::_Float32x,
            __sinx: *mut root::_Float32x,
            __cosx: *mut root::_Float32x,
        );
    }
    unsafe extern "C" {
        pub fn __sincosf32x(
            __x: root::_Float32x,
            __sinx: *mut root::_Float32x,
            __cosx: *mut root::_Float32x,
        );
    }
    unsafe extern "C" {
        pub fn acoshf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __acoshf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn asinhf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __asinhf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn atanhf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __atanhf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn expf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __expf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn frexpf32x(
            __x: root::_Float32x,
            __exponent: *mut ::core::ffi::c_int,
        ) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __frexpf32x(
            __x: root::_Float32x,
            __exponent: *mut ::core::ffi::c_int,
        ) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn ldexpf32x(__x: root::_Float32x, __exponent: ::core::ffi::c_int) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __ldexpf32x(__x: root::_Float32x, __exponent: ::core::ffi::c_int)
            -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn logf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __logf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn log10f32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __log10f32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn modff32x(__x: root::_Float32x, __iptr: *mut root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __modff32x(__x: root::_Float32x, __iptr: *mut root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn exp10f32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __exp10f32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn exp2m1f32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __exp2m1f32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn exp10m1f32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __exp10m1f32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn log2p1f32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __log2p1f32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn log10p1f32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __log10p1f32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn logp1f32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __logp1f32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn expm1f32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __expm1f32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn log1pf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __log1pf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn logbf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __logbf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn exp2f32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __exp2f32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn log2f32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __log2f32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn powf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __powf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn sqrtf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __sqrtf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn hypotf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __hypotf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn cbrtf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __cbrtf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn ceilf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn fabsf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn floorf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn fmodf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __fmodf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn copysignf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn nanf32x(__tagb: *const ::core::ffi::c_char) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __nanf32x(__tagb: *const ::core::ffi::c_char) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn j0f32x(arg1: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __j0f32x(arg1: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn j1f32x(arg1: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __j1f32x(arg1: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn jnf32x(arg1: ::core::ffi::c_int, arg2: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __jnf32x(arg1: ::core::ffi::c_int, arg2: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn y0f32x(arg1: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __y0f32x(arg1: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn y1f32x(arg1: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __y1f32x(arg1: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn ynf32x(arg1: ::core::ffi::c_int, arg2: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __ynf32x(arg1: ::core::ffi::c_int, arg2: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn erff32x(arg1: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __erff32x(arg1: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn erfcf32x(arg1: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __erfcf32x(arg1: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn lgammaf32x(arg1: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __lgammaf32x(arg1: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn tgammaf32x(arg1: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __tgammaf32x(arg1: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn lgammaf32x_r(
            arg1: root::_Float32x,
            __signgamp: *mut ::core::ffi::c_int,
        ) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __lgammaf32x_r(
            arg1: root::_Float32x,
            __signgamp: *mut ::core::ffi::c_int,
        ) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn rintf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __rintf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn nextafterf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __nextafterf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn nextdownf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __nextdownf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn nextupf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __nextupf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn remainderf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __remainderf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn scalbnf32x(__x: root::_Float32x, __n: ::core::ffi::c_int) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __scalbnf32x(__x: root::_Float32x, __n: ::core::ffi::c_int) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn ilogbf32x(__x: root::_Float32x) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __ilogbf32x(__x: root::_Float32x) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn llogbf32x(__x: root::_Float32x) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn __llogbf32x(__x: root::_Float32x) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn scalblnf32x(__x: root::_Float32x, __n: ::core::ffi::c_long) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __scalblnf32x(__x: root::_Float32x, __n: ::core::ffi::c_long) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn nearbyintf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __nearbyintf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn roundf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn truncf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn remquof32x(
            __x: root::_Float32x,
            __y: root::_Float32x,
            __quo: *mut ::core::ffi::c_int,
        ) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __remquof32x(
            __x: root::_Float32x,
            __y: root::_Float32x,
            __quo: *mut ::core::ffi::c_int,
        ) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn lrintf32x(__x: root::_Float32x) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn __lrintf32x(__x: root::_Float32x) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn llrintf32x(__x: root::_Float32x) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn __llrintf32x(__x: root::_Float32x) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn lroundf32x(__x: root::_Float32x) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn __lroundf32x(__x: root::_Float32x) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn llroundf32x(__x: root::_Float32x) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn __llroundf32x(__x: root::_Float32x) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn fdimf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __fdimf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn fmaxf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn fminf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn fmaf32x(
            __x: root::_Float32x,
            __y: root::_Float32x,
            __z: root::_Float32x,
        ) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __fmaf32x(
            __x: root::_Float32x,
            __y: root::_Float32x,
            __z: root::_Float32x,
        ) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn roundevenf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn fromfpf32x(
            __x: root::_Float32x,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__intmax_t;
    }
    unsafe extern "C" {
        pub fn __fromfpf32x(
            __x: root::_Float32x,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__intmax_t;
    }
    unsafe extern "C" {
        pub fn ufromfpf32x(
            __x: root::_Float32x,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__uintmax_t;
    }
    unsafe extern "C" {
        pub fn __ufromfpf32x(
            __x: root::_Float32x,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__uintmax_t;
    }
    unsafe extern "C" {
        pub fn fromfpxf32x(
            __x: root::_Float32x,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__intmax_t;
    }
    unsafe extern "C" {
        pub fn __fromfpxf32x(
            __x: root::_Float32x,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__intmax_t;
    }
    unsafe extern "C" {
        pub fn ufromfpxf32x(
            __x: root::_Float32x,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__uintmax_t;
    }
    unsafe extern "C" {
        pub fn __ufromfpxf32x(
            __x: root::_Float32x,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__uintmax_t;
    }
    unsafe extern "C" {
        pub fn canonicalizef32x(
            __cx: *mut root::_Float32x,
            __x: *const root::_Float32x,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fmaxmagf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn fminmagf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn fmaximumf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn fminimumf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn fmaximum_numf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn fminimum_numf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn fmaximum_magf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn fminimum_magf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn fmaximum_mag_numf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn fminimum_mag_numf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn totalorderf32x(
            __x: *const root::_Float32x,
            __y: *const root::_Float32x,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn totalordermagf32x(
            __x: *const root::_Float32x,
            __y: *const root::_Float32x,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getpayloadf32x(__x: *const root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn __getpayloadf32x(__x: *const root::_Float32x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn setpayloadf32x(
            __x: *mut root::_Float32x,
            __payload: root::_Float32x,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setpayloadsigf32x(
            __x: *mut root::_Float32x,
            __payload: root::_Float32x,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn acosf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __acosf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn asinf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __asinf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn atanf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __atanf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn atan2f64x(__y: root::_Float64x, __x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __atan2f64x(__y: root::_Float64x, __x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn cosf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __cosf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn sinf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __sinf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn tanf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __tanf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn acospif64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __acospif64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn asinpif64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __asinpif64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn atanpif64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __atanpif64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn atan2pif64x(__y: root::_Float64x, __x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __atan2pif64x(__y: root::_Float64x, __x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn cospif64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __cospif64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn sinpif64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __sinpif64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn tanpif64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __tanpif64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn coshf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __coshf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn sinhf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __sinhf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn tanhf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __tanhf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn sincosf64x(
            __x: root::_Float64x,
            __sinx: *mut root::_Float64x,
            __cosx: *mut root::_Float64x,
        );
    }
    unsafe extern "C" {
        pub fn __sincosf64x(
            __x: root::_Float64x,
            __sinx: *mut root::_Float64x,
            __cosx: *mut root::_Float64x,
        );
    }
    unsafe extern "C" {
        pub fn acoshf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __acoshf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn asinhf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __asinhf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn atanhf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __atanhf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn expf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __expf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn frexpf64x(
            __x: root::_Float64x,
            __exponent: *mut ::core::ffi::c_int,
        ) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __frexpf64x(
            __x: root::_Float64x,
            __exponent: *mut ::core::ffi::c_int,
        ) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn ldexpf64x(__x: root::_Float64x, __exponent: ::core::ffi::c_int) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __ldexpf64x(__x: root::_Float64x, __exponent: ::core::ffi::c_int)
            -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn logf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __logf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn log10f64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __log10f64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn modff64x(__x: root::_Float64x, __iptr: *mut root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __modff64x(__x: root::_Float64x, __iptr: *mut root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn exp10f64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __exp10f64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn exp2m1f64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __exp2m1f64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn exp10m1f64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __exp10m1f64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn log2p1f64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __log2p1f64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn log10p1f64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __log10p1f64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn logp1f64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __logp1f64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn expm1f64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __expm1f64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn log1pf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __log1pf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn logbf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __logbf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn exp2f64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __exp2f64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn log2f64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __log2f64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn powf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __powf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn sqrtf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __sqrtf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn hypotf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __hypotf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn cbrtf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __cbrtf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn ceilf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn fabsf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn floorf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn fmodf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __fmodf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn copysignf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn nanf64x(__tagb: *const ::core::ffi::c_char) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __nanf64x(__tagb: *const ::core::ffi::c_char) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn j0f64x(arg1: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __j0f64x(arg1: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn j1f64x(arg1: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __j1f64x(arg1: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn jnf64x(arg1: ::core::ffi::c_int, arg2: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __jnf64x(arg1: ::core::ffi::c_int, arg2: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn y0f64x(arg1: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __y0f64x(arg1: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn y1f64x(arg1: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __y1f64x(arg1: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn ynf64x(arg1: ::core::ffi::c_int, arg2: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __ynf64x(arg1: ::core::ffi::c_int, arg2: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn erff64x(arg1: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __erff64x(arg1: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn erfcf64x(arg1: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __erfcf64x(arg1: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn lgammaf64x(arg1: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __lgammaf64x(arg1: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn tgammaf64x(arg1: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __tgammaf64x(arg1: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn lgammaf64x_r(
            arg1: root::_Float64x,
            __signgamp: *mut ::core::ffi::c_int,
        ) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __lgammaf64x_r(
            arg1: root::_Float64x,
            __signgamp: *mut ::core::ffi::c_int,
        ) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn rintf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __rintf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn nextafterf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __nextafterf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn nextdownf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __nextdownf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn nextupf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __nextupf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn remainderf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __remainderf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn scalbnf64x(__x: root::_Float64x, __n: ::core::ffi::c_int) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __scalbnf64x(__x: root::_Float64x, __n: ::core::ffi::c_int) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn ilogbf64x(__x: root::_Float64x) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __ilogbf64x(__x: root::_Float64x) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn llogbf64x(__x: root::_Float64x) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn __llogbf64x(__x: root::_Float64x) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn scalblnf64x(__x: root::_Float64x, __n: ::core::ffi::c_long) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __scalblnf64x(__x: root::_Float64x, __n: ::core::ffi::c_long) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn nearbyintf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __nearbyintf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn roundf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn truncf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn remquof64x(
            __x: root::_Float64x,
            __y: root::_Float64x,
            __quo: *mut ::core::ffi::c_int,
        ) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __remquof64x(
            __x: root::_Float64x,
            __y: root::_Float64x,
            __quo: *mut ::core::ffi::c_int,
        ) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn lrintf64x(__x: root::_Float64x) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn __lrintf64x(__x: root::_Float64x) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn llrintf64x(__x: root::_Float64x) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn __llrintf64x(__x: root::_Float64x) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn lroundf64x(__x: root::_Float64x) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn __lroundf64x(__x: root::_Float64x) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn llroundf64x(__x: root::_Float64x) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn __llroundf64x(__x: root::_Float64x) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn fdimf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __fdimf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn fmaxf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn fminf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn fmaf64x(
            __x: root::_Float64x,
            __y: root::_Float64x,
            __z: root::_Float64x,
        ) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __fmaf64x(
            __x: root::_Float64x,
            __y: root::_Float64x,
            __z: root::_Float64x,
        ) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn roundevenf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn fromfpf64x(
            __x: root::_Float64x,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__intmax_t;
    }
    unsafe extern "C" {
        pub fn __fromfpf64x(
            __x: root::_Float64x,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__intmax_t;
    }
    unsafe extern "C" {
        pub fn ufromfpf64x(
            __x: root::_Float64x,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__uintmax_t;
    }
    unsafe extern "C" {
        pub fn __ufromfpf64x(
            __x: root::_Float64x,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__uintmax_t;
    }
    unsafe extern "C" {
        pub fn fromfpxf64x(
            __x: root::_Float64x,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__intmax_t;
    }
    unsafe extern "C" {
        pub fn __fromfpxf64x(
            __x: root::_Float64x,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__intmax_t;
    }
    unsafe extern "C" {
        pub fn ufromfpxf64x(
            __x: root::_Float64x,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__uintmax_t;
    }
    unsafe extern "C" {
        pub fn __ufromfpxf64x(
            __x: root::_Float64x,
            __round: ::core::ffi::c_int,
            __width: ::core::ffi::c_uint,
        ) -> root::__uintmax_t;
    }
    unsafe extern "C" {
        pub fn canonicalizef64x(
            __cx: *mut root::_Float64x,
            __x: *const root::_Float64x,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fmaxmagf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn fminmagf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn fmaximumf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn fminimumf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn fmaximum_numf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn fminimum_numf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn fmaximum_magf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn fminimum_magf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn fmaximum_mag_numf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn fminimum_mag_numf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn totalorderf64x(
            __x: *const root::_Float64x,
            __y: *const root::_Float64x,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn totalordermagf64x(
            __x: *const root::_Float64x,
            __y: *const root::_Float64x,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getpayloadf64x(__x: *const root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn __getpayloadf64x(__x: *const root::_Float64x) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn setpayloadf64x(
            __x: *mut root::_Float64x,
            __payload: root::_Float64x,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setpayloadsigf64x(
            __x: *mut root::_Float64x,
            __payload: root::_Float64x,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fadd(__x: f64, __y: f64) -> f32;
    }
    unsafe extern "C" {
        pub fn fdiv(__x: f64, __y: f64) -> f32;
    }
    unsafe extern "C" {
        pub fn ffma(__x: f64, __y: f64, __z: f64) -> f32;
    }
    unsafe extern "C" {
        pub fn fmul(__x: f64, __y: f64) -> f32;
    }
    unsafe extern "C" {
        pub fn fsqrt(__x: f64) -> f32;
    }
    unsafe extern "C" {
        pub fn fsub(__x: f64, __y: f64) -> f32;
    }
    unsafe extern "C" {
        pub fn faddl(__x: u128, __y: u128) -> f32;
    }
    unsafe extern "C" {
        pub fn fdivl(__x: u128, __y: u128) -> f32;
    }
    unsafe extern "C" {
        pub fn ffmal(__x: u128, __y: u128, __z: u128) -> f32;
    }
    unsafe extern "C" {
        pub fn fmull(__x: u128, __y: u128) -> f32;
    }
    unsafe extern "C" {
        pub fn fsqrtl(__x: u128) -> f32;
    }
    unsafe extern "C" {
        pub fn fsubl(__x: u128, __y: u128) -> f32;
    }
    unsafe extern "C" {
        pub fn daddl(__x: u128, __y: u128) -> f64;
    }
    unsafe extern "C" {
        pub fn ddivl(__x: u128, __y: u128) -> f64;
    }
    unsafe extern "C" {
        pub fn dfmal(__x: u128, __y: u128, __z: u128) -> f64;
    }
    unsafe extern "C" {
        pub fn dmull(__x: u128, __y: u128) -> f64;
    }
    unsafe extern "C" {
        pub fn dsqrtl(__x: u128) -> f64;
    }
    unsafe extern "C" {
        pub fn dsubl(__x: u128, __y: u128) -> f64;
    }
    unsafe extern "C" {
        pub fn f32addf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn f32divf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn f32fmaf32x(
            __x: root::_Float32x,
            __y: root::_Float32x,
            __z: root::_Float32x,
        ) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn f32mulf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn f32sqrtf32x(__x: root::_Float32x) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn f32subf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn f32addf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn f32divf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn f32fmaf64(
            __x: root::_Float64,
            __y: root::_Float64,
            __z: root::_Float64,
        ) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn f32mulf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn f32sqrtf64(__x: root::_Float64) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn f32subf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn f32addf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn f32divf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn f32fmaf64x(
            __x: root::_Float64x,
            __y: root::_Float64x,
            __z: root::_Float64x,
        ) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn f32mulf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn f32sqrtf64x(__x: root::_Float64x) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn f32subf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn f32addf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn f32divf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn f32fmaf128(
            __x: root::_Float128,
            __y: root::_Float128,
            __z: root::_Float128,
        ) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn f32mulf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn f32sqrtf128(__x: root::_Float128) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn f32subf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn f32xaddf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn f32xdivf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn f32xfmaf64(
            __x: root::_Float64,
            __y: root::_Float64,
            __z: root::_Float64,
        ) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn f32xmulf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn f32xsqrtf64(__x: root::_Float64) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn f32xsubf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn f32xaddf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn f32xdivf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn f32xfmaf64x(
            __x: root::_Float64x,
            __y: root::_Float64x,
            __z: root::_Float64x,
        ) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn f32xmulf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn f32xsqrtf64x(__x: root::_Float64x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn f32xsubf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn f32xaddf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn f32xdivf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn f32xfmaf128(
            __x: root::_Float128,
            __y: root::_Float128,
            __z: root::_Float128,
        ) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn f32xmulf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn f32xsqrtf128(__x: root::_Float128) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn f32xsubf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn f64addf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn f64divf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn f64fmaf64x(
            __x: root::_Float64x,
            __y: root::_Float64x,
            __z: root::_Float64x,
        ) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn f64mulf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn f64sqrtf64x(__x: root::_Float64x) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn f64subf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn f64addf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn f64divf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn f64fmaf128(
            __x: root::_Float128,
            __y: root::_Float128,
            __z: root::_Float128,
        ) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn f64mulf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn f64sqrtf128(__x: root::_Float128) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn f64subf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn f64xaddf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn f64xdivf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn f64xfmaf128(
            __x: root::_Float128,
            __y: root::_Float128,
            __z: root::_Float128,
        ) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn f64xmulf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn f64xsqrtf128(__x: root::_Float128) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn f64xsubf128(__x: root::_Float128, __y: root::_Float128) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub static mut signgam: ::core::ffi::c_int;
    }
    pub const FP_NAN: root::_bindgen_ty_8 = 0;
    pub const FP_INFINITE: root::_bindgen_ty_8 = 1;
    pub const FP_ZERO: root::_bindgen_ty_8 = 2;
    pub const FP_SUBNORMAL: root::_bindgen_ty_8 = 3;
    pub const FP_NORMAL: root::_bindgen_ty_8 = 4;
    pub type _bindgen_ty_8 = ::core::ffi::c_uint;
    unsafe extern "C" {
        pub fn __iscanonicall(__x: u128) -> ::core::ffi::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __iseqsig_type {
        pub _address: u8,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: __iseqsig_type_open0_float_close0"]
            [::core::mem::size_of::<root::__iseqsig_type>() - 1usize];
        ["Align of template specialization: __iseqsig_type_open0_float_close0"]
            [::core::mem::align_of::<root::__iseqsig_type>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: __iseqsig_type_open0_double_close0"]
            [::core::mem::size_of::<root::__iseqsig_type>() - 1usize];
        ["Align of template specialization: __iseqsig_type_open0_double_close0"]
            [::core::mem::align_of::<root::__iseqsig_type>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: __iseqsig_type_open0_long_double_close0"]
            [::core::mem::size_of::<root::__iseqsig_type>() - 1usize];
        ["Align of template specialization: __iseqsig_type_open0_long_double_close0"]
            [::core::mem::align_of::<root::__iseqsig_type>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: __iseqsig_type_open0___float128_close0"]
            [::core::mem::size_of::<root::__iseqsig_type>() - 1usize];
        ["Align of template specialization: __iseqsig_type_open0___float128_close0"]
            [::core::mem::align_of::<root::__iseqsig_type>() - 1usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct div_t {
        pub quot: ::core::ffi::c_int,
        pub rem: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of div_t"][::core::mem::size_of::<div_t>() - 8usize];
        ["Alignment of div_t"][::core::mem::align_of::<div_t>() - 4usize];
        ["Offset of field: div_t::quot"][::core::mem::offset_of!(div_t, quot) - 0usize];
        ["Offset of field: div_t::rem"][::core::mem::offset_of!(div_t, rem) - 4usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ldiv_t {
        pub quot: ::core::ffi::c_long,
        pub rem: ::core::ffi::c_long,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of ldiv_t"][::core::mem::size_of::<ldiv_t>() - 16usize];
        ["Alignment of ldiv_t"][::core::mem::align_of::<ldiv_t>() - 8usize];
        ["Offset of field: ldiv_t::quot"][::core::mem::offset_of!(ldiv_t, quot) - 0usize];
        ["Offset of field: ldiv_t::rem"][::core::mem::offset_of!(ldiv_t, rem) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lldiv_t {
        pub quot: ::core::ffi::c_longlong,
        pub rem: ::core::ffi::c_longlong,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of lldiv_t"][::core::mem::size_of::<lldiv_t>() - 16usize];
        ["Alignment of lldiv_t"][::core::mem::align_of::<lldiv_t>() - 8usize];
        ["Offset of field: lldiv_t::quot"][::core::mem::offset_of!(lldiv_t, quot) - 0usize];
        ["Offset of field: lldiv_t::rem"][::core::mem::offset_of!(lldiv_t, rem) - 8usize];
    };
    unsafe extern "C" {
        pub fn __ctype_get_mb_cur_max() -> usize;
    }
    unsafe extern "C" {
        pub fn atof(__nptr: *const ::core::ffi::c_char) -> f64;
    }
    unsafe extern "C" {
        pub fn atoi(__nptr: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn atol(__nptr: *const ::core::ffi::c_char) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn atoll(__nptr: *const ::core::ffi::c_char) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn strtod(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
        ) -> f64;
    }
    unsafe extern "C" {
        pub fn strtof(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
        ) -> f32;
    }
    unsafe extern "C" {
        pub fn strtold(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
        ) -> u128;
    }
    unsafe extern "C" {
        pub fn strtof32(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
        ) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn strtof64(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
        ) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn strtof128(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
        ) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn strtof32x(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
        ) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn strtof64x(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
        ) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn strtol(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn strtoul(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_ulong;
    }
    unsafe extern "C" {
        pub fn strtoq(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn strtouq(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_ulonglong;
    }
    unsafe extern "C" {
        pub fn strtoll(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn strtoull(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_ulonglong;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_strtol"]
        pub fn strtol1(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_strtoul"]
        pub fn strtoul1(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_ulong;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_strtoll"]
        pub fn strtoq1(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_strtoull"]
        pub fn strtouq1(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_ulonglong;
    }
    unsafe extern "C" {
        pub fn strfromd(
            __dest: *mut ::core::ffi::c_char,
            __size: usize,
            __format: *const ::core::ffi::c_char,
            __f: f64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strfromf(
            __dest: *mut ::core::ffi::c_char,
            __size: usize,
            __format: *const ::core::ffi::c_char,
            __f: f32,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strfroml(
            __dest: *mut ::core::ffi::c_char,
            __size: usize,
            __format: *const ::core::ffi::c_char,
            __f: u128,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strfromf32(
            __dest: *mut ::core::ffi::c_char,
            __size: usize,
            __format: *const ::core::ffi::c_char,
            __f: root::_Float32,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strfromf64(
            __dest: *mut ::core::ffi::c_char,
            __size: usize,
            __format: *const ::core::ffi::c_char,
            __f: root::_Float64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strfromf128(
            __dest: *mut ::core::ffi::c_char,
            __size: usize,
            __format: *const ::core::ffi::c_char,
            __f: root::_Float128,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strfromf32x(
            __dest: *mut ::core::ffi::c_char,
            __size: usize,
            __format: *const ::core::ffi::c_char,
            __f: root::_Float32x,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strfromf64x(
            __dest: *mut ::core::ffi::c_char,
            __size: usize,
            __format: *const ::core::ffi::c_char,
            __f: root::_Float64x,
        ) -> ::core::ffi::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __locale_struct {
        pub __locales: [*mut root::__locale_data; 13usize],
        pub __ctype_b: *const ::core::ffi::c_ushort,
        pub __ctype_tolower: *const ::core::ffi::c_int,
        pub __ctype_toupper: *const ::core::ffi::c_int,
        pub __names: [*const ::core::ffi::c_char; 13usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __locale_struct"][::core::mem::size_of::<__locale_struct>() - 232usize];
        ["Alignment of __locale_struct"][::core::mem::align_of::<__locale_struct>() - 8usize];
        ["Offset of field: __locale_struct::__locales"]
            [::core::mem::offset_of!(__locale_struct, __locales) - 0usize];
        ["Offset of field: __locale_struct::__ctype_b"]
            [::core::mem::offset_of!(__locale_struct, __ctype_b) - 104usize];
        ["Offset of field: __locale_struct::__ctype_tolower"]
            [::core::mem::offset_of!(__locale_struct, __ctype_tolower) - 112usize];
        ["Offset of field: __locale_struct::__ctype_toupper"]
            [::core::mem::offset_of!(__locale_struct, __ctype_toupper) - 120usize];
        ["Offset of field: __locale_struct::__names"]
            [::core::mem::offset_of!(__locale_struct, __names) - 128usize];
    };
    pub type __locale_t = *mut root::__locale_struct;
    pub type locale_t = root::__locale_t;
    unsafe extern "C" {
        pub fn strtol_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn strtoul_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_ulong;
    }
    unsafe extern "C" {
        pub fn strtoll_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn strtoull_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_ulonglong;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_strtol_l"]
        pub fn strtol_l1(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_strtoul_l"]
        pub fn strtoul_l1(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_ulong;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_strtoll_l"]
        pub fn strtoll_l1(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_strtoull_l"]
        pub fn strtoull_l1(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_ulonglong;
    }
    unsafe extern "C" {
        pub fn strtod_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __loc: root::locale_t,
        ) -> f64;
    }
    unsafe extern "C" {
        pub fn strtof_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __loc: root::locale_t,
        ) -> f32;
    }
    unsafe extern "C" {
        pub fn strtold_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __loc: root::locale_t,
        ) -> u128;
    }
    unsafe extern "C" {
        pub fn strtof32_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __loc: root::locale_t,
        ) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn strtof64_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __loc: root::locale_t,
        ) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn strtof128_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __loc: root::locale_t,
        ) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn strtof32x_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __loc: root::locale_t,
        ) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn strtof64x_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __loc: root::locale_t,
        ) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn l64a(__n: ::core::ffi::c_long) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn a64l(__s: *const ::core::ffi::c_char) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn random() -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn srandom(__seed: ::core::ffi::c_uint);
    }
    unsafe extern "C" {
        pub fn initstate(
            __seed: ::core::ffi::c_uint,
            __statebuf: *mut ::core::ffi::c_char,
            __statelen: usize,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn setstate(__statebuf: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct random_data {
        pub fptr: *mut i32,
        pub rptr: *mut i32,
        pub state: *mut i32,
        pub rand_type: ::core::ffi::c_int,
        pub rand_deg: ::core::ffi::c_int,
        pub rand_sep: ::core::ffi::c_int,
        pub end_ptr: *mut i32,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of random_data"][::core::mem::size_of::<random_data>() - 48usize];
        ["Alignment of random_data"][::core::mem::align_of::<random_data>() - 8usize];
        ["Offset of field: random_data::fptr"][::core::mem::offset_of!(random_data, fptr) - 0usize];
        ["Offset of field: random_data::rptr"][::core::mem::offset_of!(random_data, rptr) - 8usize];
        ["Offset of field: random_data::state"]
            [::core::mem::offset_of!(random_data, state) - 16usize];
        ["Offset of field: random_data::rand_type"]
            [::core::mem::offset_of!(random_data, rand_type) - 24usize];
        ["Offset of field: random_data::rand_deg"]
            [::core::mem::offset_of!(random_data, rand_deg) - 28usize];
        ["Offset of field: random_data::rand_sep"]
            [::core::mem::offset_of!(random_data, rand_sep) - 32usize];
        ["Offset of field: random_data::end_ptr"]
            [::core::mem::offset_of!(random_data, end_ptr) - 40usize];
    };
    unsafe extern "C" {
        pub fn random_r(__buf: *mut root::random_data, __result: *mut i32) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn srandom_r(
            __seed: ::core::ffi::c_uint,
            __buf: *mut root::random_data,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn initstate_r(
            __seed: ::core::ffi::c_uint,
            __statebuf: *mut ::core::ffi::c_char,
            __statelen: usize,
            __buf: *mut root::random_data,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setstate_r(
            __statebuf: *mut ::core::ffi::c_char,
            __buf: *mut root::random_data,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn rand() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn srand(__seed: ::core::ffi::c_uint);
    }
    unsafe extern "C" {
        pub fn rand_r(__seed: *mut ::core::ffi::c_uint) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn drand48() -> f64;
    }
    unsafe extern "C" {
        pub fn erand48(__xsubi: *mut ::core::ffi::c_ushort) -> f64;
    }
    unsafe extern "C" {
        pub fn lrand48() -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn nrand48(__xsubi: *mut ::core::ffi::c_ushort) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn mrand48() -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn jrand48(__xsubi: *mut ::core::ffi::c_ushort) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn srand48(__seedval: ::core::ffi::c_long);
    }
    unsafe extern "C" {
        pub fn seed48(__seed16v: *mut ::core::ffi::c_ushort) -> *mut ::core::ffi::c_ushort;
    }
    unsafe extern "C" {
        pub fn lcong48(__param: *mut ::core::ffi::c_ushort);
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct drand48_data {
        pub __x: [::core::ffi::c_ushort; 3usize],
        pub __old_x: [::core::ffi::c_ushort; 3usize],
        pub __c: ::core::ffi::c_ushort,
        pub __init: ::core::ffi::c_ushort,
        pub __a: ::core::ffi::c_ulonglong,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of drand48_data"][::core::mem::size_of::<drand48_data>() - 24usize];
        ["Alignment of drand48_data"][::core::mem::align_of::<drand48_data>() - 8usize];
        ["Offset of field: drand48_data::__x"][::core::mem::offset_of!(drand48_data, __x) - 0usize];
        ["Offset of field: drand48_data::__old_x"]
            [::core::mem::offset_of!(drand48_data, __old_x) - 6usize];
        ["Offset of field: drand48_data::__c"]
            [::core::mem::offset_of!(drand48_data, __c) - 12usize];
        ["Offset of field: drand48_data::__init"]
            [::core::mem::offset_of!(drand48_data, __init) - 14usize];
        ["Offset of field: drand48_data::__a"]
            [::core::mem::offset_of!(drand48_data, __a) - 16usize];
    };
    unsafe extern "C" {
        pub fn drand48_r(
            __buffer: *mut root::drand48_data,
            __result: *mut f64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn erand48_r(
            __xsubi: *mut ::core::ffi::c_ushort,
            __buffer: *mut root::drand48_data,
            __result: *mut f64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn lrand48_r(
            __buffer: *mut root::drand48_data,
            __result: *mut ::core::ffi::c_long,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn nrand48_r(
            __xsubi: *mut ::core::ffi::c_ushort,
            __buffer: *mut root::drand48_data,
            __result: *mut ::core::ffi::c_long,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mrand48_r(
            __buffer: *mut root::drand48_data,
            __result: *mut ::core::ffi::c_long,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn jrand48_r(
            __xsubi: *mut ::core::ffi::c_ushort,
            __buffer: *mut root::drand48_data,
            __result: *mut ::core::ffi::c_long,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn srand48_r(
            __seedval: ::core::ffi::c_long,
            __buffer: *mut root::drand48_data,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn seed48_r(
            __seed16v: *mut ::core::ffi::c_ushort,
            __buffer: *mut root::drand48_data,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn lcong48_r(
            __param: *mut ::core::ffi::c_ushort,
            __buffer: *mut root::drand48_data,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn arc4random() -> root::__uint32_t;
    }
    unsafe extern "C" {
        pub fn arc4random_buf(__buf: *mut ::core::ffi::c_void, __size: usize);
    }
    unsafe extern "C" {
        pub fn arc4random_uniform(__upper_bound: root::__uint32_t) -> root::__uint32_t;
    }
    unsafe extern "C" {
        pub fn malloc(__size: usize) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn calloc(__nmemb: usize, __size: usize) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn realloc(__ptr: *mut ::core::ffi::c_void, __size: usize) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn free(__ptr: *mut ::core::ffi::c_void);
    }
    unsafe extern "C" {
        pub fn reallocarray(
            __ptr: *mut ::core::ffi::c_void,
            __nmemb: usize,
            __size: usize,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn alloca(__size: usize) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn valloc(__size: usize) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn posix_memalign(
            __memptr: *mut *mut ::core::ffi::c_void,
            __alignment: usize,
            __size: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn abort() -> !;
    }
    unsafe extern "C" {
        pub fn atexit(__func: ::core::option::Option<unsafe extern "C" fn()>)
            -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn at_quick_exit(
            __func: ::core::option::Option<unsafe extern "C" fn()>,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn on_exit(
            __func: ::core::option::Option<
                unsafe extern "C" fn(__status: ::core::ffi::c_int, __arg: *mut ::core::ffi::c_void),
            >,
            __arg: *mut ::core::ffi::c_void,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn exit(__status: ::core::ffi::c_int) -> !;
    }
    unsafe extern "C" {
        pub fn quick_exit(__status: ::core::ffi::c_int) -> !;
    }
    unsafe extern "C" {
        pub fn _Exit(__status: ::core::ffi::c_int) -> !;
    }
    unsafe extern "C" {
        pub fn getenv(__name: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn secure_getenv(__name: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn putenv(__string: *mut ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setenv(
            __name: *const ::core::ffi::c_char,
            __value: *const ::core::ffi::c_char,
            __replace: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn unsetenv(__name: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn clearenv() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mktemp(__template: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn mkstemp(__template: *mut ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mkstemp64(__template: *mut ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mkstemps(
            __template: *mut ::core::ffi::c_char,
            __suffixlen: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mkstemps64(
            __template: *mut ::core::ffi::c_char,
            __suffixlen: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mkdtemp(__template: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn mkostemp(
            __template: *mut ::core::ffi::c_char,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mkostemp64(
            __template: *mut ::core::ffi::c_char,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mkostemps(
            __template: *mut ::core::ffi::c_char,
            __suffixlen: ::core::ffi::c_int,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mkostemps64(
            __template: *mut ::core::ffi::c_char,
            __suffixlen: ::core::ffi::c_int,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn system(__command: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn canonicalize_file_name(
            __name: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn realpath(
            __name: *const ::core::ffi::c_char,
            __resolved: *mut ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    pub type __compar_fn_t = ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::core::ffi::c_void,
            arg2: *const ::core::ffi::c_void,
        ) -> ::core::ffi::c_int,
    >;
    pub type comparison_fn_t = root::__compar_fn_t;
    pub type __compar_d_fn_t = ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::core::ffi::c_void,
            arg2: *const ::core::ffi::c_void,
            arg3: *mut ::core::ffi::c_void,
        ) -> ::core::ffi::c_int,
    >;
    unsafe extern "C" {
        pub fn bsearch(
            __key: *const ::core::ffi::c_void,
            __base: *const ::core::ffi::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: root::__compar_fn_t,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn qsort(
            __base: *mut ::core::ffi::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: root::__compar_fn_t,
        );
    }
    unsafe extern "C" {
        pub fn qsort_r(
            __base: *mut ::core::ffi::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: root::__compar_d_fn_t,
            __arg: *mut ::core::ffi::c_void,
        );
    }
    unsafe extern "C" {
        pub fn abs(__x: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn labs(__x: ::core::ffi::c_long) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn llabs(__x: ::core::ffi::c_longlong) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn div(__numer: ::core::ffi::c_int, __denom: ::core::ffi::c_int) -> root::div_t;
    }
    unsafe extern "C" {
        pub fn ldiv(__numer: ::core::ffi::c_long, __denom: ::core::ffi::c_long) -> root::ldiv_t;
    }
    unsafe extern "C" {
        pub fn lldiv(
            __numer: ::core::ffi::c_longlong,
            __denom: ::core::ffi::c_longlong,
        ) -> root::lldiv_t;
    }
    unsafe extern "C" {
        pub fn ecvt(
            __value: f64,
            __ndigit: ::core::ffi::c_int,
            __decpt: *mut ::core::ffi::c_int,
            __sign: *mut ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn fcvt(
            __value: f64,
            __ndigit: ::core::ffi::c_int,
            __decpt: *mut ::core::ffi::c_int,
            __sign: *mut ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn gcvt(
            __value: f64,
            __ndigit: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn qecvt(
            __value: u128,
            __ndigit: ::core::ffi::c_int,
            __decpt: *mut ::core::ffi::c_int,
            __sign: *mut ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn qfcvt(
            __value: u128,
            __ndigit: ::core::ffi::c_int,
            __decpt: *mut ::core::ffi::c_int,
            __sign: *mut ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn qgcvt(
            __value: u128,
            __ndigit: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn ecvt_r(
            __value: f64,
            __ndigit: ::core::ffi::c_int,
            __decpt: *mut ::core::ffi::c_int,
            __sign: *mut ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __len: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fcvt_r(
            __value: f64,
            __ndigit: ::core::ffi::c_int,
            __decpt: *mut ::core::ffi::c_int,
            __sign: *mut ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __len: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn qecvt_r(
            __value: u128,
            __ndigit: ::core::ffi::c_int,
            __decpt: *mut ::core::ffi::c_int,
            __sign: *mut ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __len: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn qfcvt_r(
            __value: u128,
            __ndigit: ::core::ffi::c_int,
            __decpt: *mut ::core::ffi::c_int,
            __sign: *mut ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __len: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mblen(__s: *const ::core::ffi::c_char, __n: usize) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mbtowc(
            __pwc: *mut u32,
            __s: *const ::core::ffi::c_char,
            __n: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn wctomb(__s: *mut ::core::ffi::c_char, __wchar: u32) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mbstowcs(__pwcs: *mut u32, __s: *const ::core::ffi::c_char, __n: usize) -> usize;
    }
    unsafe extern "C" {
        pub fn wcstombs(__s: *mut ::core::ffi::c_char, __pwcs: *const u32, __n: usize) -> usize;
    }
    unsafe extern "C" {
        pub fn rpmatch(__response: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getsubopt(
            __optionp: *mut *mut ::core::ffi::c_char,
            __tokens: *const *mut ::core::ffi::c_char,
            __valuep: *mut *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn posix_openpt(__oflag: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn grantpt(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn unlockpt(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ptsname(__fd: ::core::ffi::c_int) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn ptsname_r(
            __fd: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __buflen: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getpt() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getloadavg(__loadavg: *mut f64, __nelem: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    pub mod ke {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub const kFloat32ExponentMask: u32 = 2139095040;
        pub const kFloat64ExponentMask: u64 = 9223090561878065152;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct float32_bits {
            pub _address: u8,
        }
        pub type float32_bits_Bits = u32;
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub union float32_bits_layout {
            pub bits: u32,
            pub value: f32,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of float32_bits_layout"][::core::mem::size_of::<float32_bits_layout>() - 4usize];
            ["Alignment of float32_bits_layout"]
                [::core::mem::align_of::<float32_bits_layout>() - 4usize];
            ["Offset of field: float32_bits_layout::bits"]
                [::core::mem::offset_of!(float32_bits_layout, bits) - 0usize];
            ["Offset of field: float32_bits_layout::value"]
                [::core::mem::offset_of!(float32_bits_layout, value) - 0usize];
        };
        pub const float32_bits_kExponentMask: u32 = 2139095040;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of float32_bits"][::core::mem::size_of::<float32_bits>() - 1usize];
            ["Alignment of float32_bits"][::core::mem::align_of::<float32_bits>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct float64_bits {
            pub _address: u8,
        }
        pub type float64_bits_Bits = u64;
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub union float64_bits_layout {
            pub bits: u64,
            pub value: f32,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of float64_bits_layout"][::core::mem::size_of::<float64_bits_layout>() - 8usize];
            ["Alignment of float64_bits_layout"]
                [::core::mem::align_of::<float64_bits_layout>() - 8usize];
            ["Offset of field: float64_bits_layout::bits"]
                [::core::mem::offset_of!(float64_bits_layout, bits) - 0usize];
            ["Offset of field: float64_bits_layout::value"]
                [::core::mem::offset_of!(float64_bits_layout, value) - 0usize];
        };
        pub const float64_bits_kExponentMask: u64 = 9223090561878065152;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of float64_bits"][::core::mem::size_of::<float64_bits>() - 1usize];
            ["Alignment of float64_bits"][::core::mem::align_of::<float64_bits>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct float_bits {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: float_bits_open0_float_close0"]
                [::core::mem::size_of::<root::ke::float_bits>() - 1usize];
            ["Align of template specialization: float_bits_open0_float_close0"]
                [::core::mem::align_of::<root::ke::float_bits>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: float_bits_open0_double_close0"]
                [::core::mem::size_of::<root::ke::float_bits>() - 1usize];
            ["Align of template specialization: float_bits_open0_double_close0"]
                [::core::mem::align_of::<root::ke::float_bits>() - 1usize];
        };
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct link_map {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __locale_data {
        pub _address: u8,
    }
}
