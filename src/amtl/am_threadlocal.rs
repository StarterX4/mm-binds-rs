/* automatically generated by rust-bindgen 0.71.1 */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[repr(C)]
    #[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
    pub struct __BindgenBitfieldUnit<Storage> {
        storage: Storage,
    }
    impl<Storage> __BindgenBitfieldUnit<Storage> {
        #[inline]
        pub const fn new(storage: Storage) -> Self {
            Self { storage }
        }
    }
    impl<Storage> __BindgenBitfieldUnit<Storage>
    where
        Storage: AsRef<[u8]> + AsMut<[u8]>,
    {
        #[inline]
        fn extract_bit(byte: u8, index: usize) -> bool {
            let bit_index = if cfg!(target_endian = "big") {
                7 - (index % 8)
            } else {
                index % 8
            };
            let mask = 1 << bit_index;
            byte & mask == mask
        }
        #[inline]
        pub fn get_bit(&self, index: usize) -> bool {
            debug_assert!(index / 8 < self.storage.as_ref().len());
            let byte_index = index / 8;
            let byte = self.storage.as_ref()[byte_index];
            Self::extract_bit(byte, index)
        }
        #[inline]
        pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
            debug_assert!(index / 8 < core::mem::size_of::<Storage>());
            let byte_index = index / 8;
            let byte =
                *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize);
            Self::extract_bit(byte, index)
        }
        #[inline]
        fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
            let bit_index = if cfg!(target_endian = "big") {
                7 - (index % 8)
            } else {
                index % 8
            };
            let mask = 1 << bit_index;
            if val {
                byte | mask
            } else {
                byte & !mask
            }
        }
        #[inline]
        pub fn set_bit(&mut self, index: usize, val: bool) {
            debug_assert!(index / 8 < self.storage.as_ref().len());
            let byte_index = index / 8;
            let byte = &mut self.storage.as_mut()[byte_index];
            *byte = Self::change_bit(*byte, index, val);
        }
        #[inline]
        pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
            debug_assert!(index / 8 < core::mem::size_of::<Storage>());
            let byte_index = index / 8;
            let byte =
                (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize);
            *byte = Self::change_bit(*byte, index, val);
        }
        #[inline]
        pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
            debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
            let mut val = 0;
            for i in 0..(bit_width as usize) {
                if self.get_bit(i + bit_offset) {
                    let index = if cfg!(target_endian = "big") {
                        bit_width as usize - 1 - i
                    } else {
                        i
                    };
                    val |= 1 << index;
                }
            }
            val
        }
        #[inline]
        pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
            debug_assert!(
                (bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>()
            );
            let mut val = 0;
            for i in 0..(bit_width as usize) {
                if Self::raw_get_bit(this, i + bit_offset) {
                    let index = if cfg!(target_endian = "big") {
                        bit_width as usize - 1 - i
                    } else {
                        i
                    };
                    val |= 1 << index;
                }
            }
            val
        }
        #[inline]
        pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
            debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
            for i in 0..(bit_width as usize) {
                let mask = 1 << i;
                let val_bit_is_set = val & mask == mask;
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                self.set_bit(index + bit_offset, val_bit_is_set);
            }
        }
        #[inline]
        pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
            debug_assert!(
                (bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>()
            );
            for i in 0..(bit_width as usize) {
                let mask = 1 << i;
                let val_bit_is_set = val & mask == mask;
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                Self::raw_set_bit(this, index + bit_offset, val_bit_is_set);
            }
        }
    }
    #[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
    #[repr(C)]
    pub struct __BindgenComplex<T> {
        pub re: T,
        pub im: T,
    }
    #[repr(C)]
    pub struct __BindgenUnionField<T>(::core::marker::PhantomData<T>);
    impl<T> __BindgenUnionField<T> {
        #[inline]
        pub const fn new() -> Self {
            __BindgenUnionField(::core::marker::PhantomData)
        }
        #[inline]
        pub unsafe fn as_ref(&self) -> &T {
            ::core::mem::transmute(self)
        }
        #[inline]
        pub unsafe fn as_mut(&mut self) -> &mut T {
            ::core::mem::transmute(self)
        }
    }
    impl<T> ::core::default::Default for __BindgenUnionField<T> {
        #[inline]
        fn default() -> Self {
            Self::new()
        }
    }
    impl<T> ::core::clone::Clone for __BindgenUnionField<T> {
        #[inline]
        fn clone(&self) -> Self {
            *self
        }
    }
    impl<T> ::core::marker::Copy for __BindgenUnionField<T> {}
    impl<T> ::core::fmt::Debug for __BindgenUnionField<T> {
        fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            fmt.write_str("__BindgenUnionField")
        }
    }
    impl<T> ::core::hash::Hash for __BindgenUnionField<T> {
        fn hash<H: ::core::hash::Hasher>(&self, _state: &mut H) {}
    }
    impl<T> ::core::cmp::PartialEq for __BindgenUnionField<T> {
        fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
            true
        }
    }
    impl<T> ::core::cmp::Eq for __BindgenUnionField<T> {}
    #[allow(unused_imports)]
    use self::super::root;
    pub const POSIX: u32 = 1;
    pub const LINUX: u32 = 1;
    pub const _LINUX: u32 = 1;
    pub const COMPILER_GCC: u32 = 1;
    pub const _DLFCN_H: u32 = 1;
    pub const _FEATURES_H: u32 = 1;
    pub const _ISOC95_SOURCE: u32 = 1;
    pub const _ISOC99_SOURCE: u32 = 1;
    pub const _ISOC11_SOURCE: u32 = 1;
    pub const _ISOC23_SOURCE: u32 = 1;
    pub const _ISOC2Y_SOURCE: u32 = 1;
    pub const _POSIX_SOURCE: u32 = 1;
    pub const _POSIX_C_SOURCE: u32 = 200809;
    pub const _XOPEN_SOURCE: u32 = 700;
    pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
    pub const _LARGEFILE64_SOURCE: u32 = 1;
    pub const _DEFAULT_SOURCE: u32 = 1;
    pub const _ATFILE_SOURCE: u32 = 1;
    pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
    pub const __GLIBC_USE_ISOC2Y: u32 = 1;
    pub const __GLIBC_USE_ISOC23: u32 = 1;
    pub const __USE_ISOC11: u32 = 1;
    pub const __USE_ISOC99: u32 = 1;
    pub const __USE_ISOC95: u32 = 1;
    pub const __USE_ISOCXX11: u32 = 1;
    pub const __USE_POSIX: u32 = 1;
    pub const __USE_POSIX2: u32 = 1;
    pub const __USE_POSIX199309: u32 = 1;
    pub const __USE_POSIX199506: u32 = 1;
    pub const __USE_XOPEN2K: u32 = 1;
    pub const __USE_XOPEN2K8: u32 = 1;
    pub const __USE_XOPEN: u32 = 1;
    pub const __USE_XOPEN_EXTENDED: u32 = 1;
    pub const __USE_UNIX98: u32 = 1;
    pub const _LARGEFILE_SOURCE: u32 = 1;
    pub const __USE_XOPEN2K8XSI: u32 = 1;
    pub const __USE_XOPEN2KXSI: u32 = 1;
    pub const __USE_LARGEFILE: u32 = 1;
    pub const __USE_LARGEFILE64: u32 = 1;
    pub const __WORDSIZE: u32 = 64;
    pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
    pub const __SYSCALL_WORDSIZE: u32 = 64;
    pub const __TIMESIZE: u32 = 64;
    pub const __USE_TIME_BITS64: u32 = 1;
    pub const __USE_MISC: u32 = 1;
    pub const __USE_ATFILE: u32 = 1;
    pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
    pub const __USE_GNU: u32 = 1;
    pub const __USE_FORTIFY_LEVEL: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
    pub const __GLIBC_USE_C23_STRTOL: u32 = 1;
    pub const _STDC_PREDEF_H: u32 = 1;
    pub const __STDC_IEC_559__: u32 = 1;
    pub const __STDC_IEC_60559_BFP__: u32 = 201404;
    pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
    pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
    pub const __STDC_ISO_10646__: u32 = 201706;
    pub const __GNU_LIBRARY__: u32 = 6;
    pub const __GLIBC__: u32 = 2;
    pub const __GLIBC_MINOR__: u32 = 41;
    pub const _SYS_CDEFS_H: u32 = 1;
    pub const __glibc_c99_flexarr_available: u32 = 1;
    pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
    pub const __HAVE_GENERIC_SELECTION: u32 = 0;
    pub const RTLD_LAZY: u32 = 1;
    pub const RTLD_NOW: u32 = 2;
    pub const RTLD_BINDING_MASK: u32 = 3;
    pub const RTLD_NOLOAD: u32 = 4;
    pub const RTLD_DEEPBIND: u32 = 8;
    pub const RTLD_GLOBAL: u32 = 256;
    pub const RTLD_LOCAL: u32 = 0;
    pub const RTLD_NODELETE: u32 = 4096;
    pub const DLFO_STRUCT_HAS_EH_DBASE: u32 = 0;
    pub const DLFO_STRUCT_HAS_EH_COUNT: u32 = 0;
    pub const LM_ID_BASE: u32 = 0;
    pub const LM_ID_NEWLM: i32 = -1;
    pub const _UNISTD_H: u32 = 1;
    pub const _POSIX_VERSION: u32 = 200809;
    pub const __POSIX2_THIS_VERSION: u32 = 200809;
    pub const _POSIX2_VERSION: u32 = 200809;
    pub const _POSIX2_C_VERSION: u32 = 200809;
    pub const _POSIX2_C_BIND: u32 = 200809;
    pub const _POSIX2_C_DEV: u32 = 200809;
    pub const _POSIX2_SW_DEV: u32 = 200809;
    pub const _POSIX2_LOCALEDEF: u32 = 200809;
    pub const _XOPEN_VERSION: u32 = 700;
    pub const _XOPEN_XCU_VERSION: u32 = 4;
    pub const _XOPEN_XPG2: u32 = 1;
    pub const _XOPEN_XPG3: u32 = 1;
    pub const _XOPEN_XPG4: u32 = 1;
    pub const _XOPEN_UNIX: u32 = 1;
    pub const _XOPEN_ENH_I18N: u32 = 1;
    pub const _XOPEN_LEGACY: u32 = 1;
    pub const _BITS_POSIX_OPT_H: u32 = 1;
    pub const _POSIX_JOB_CONTROL: u32 = 1;
    pub const _POSIX_SAVED_IDS: u32 = 1;
    pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
    pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
    pub const _POSIX_FSYNC: u32 = 200809;
    pub const _POSIX_MAPPED_FILES: u32 = 200809;
    pub const _POSIX_MEMLOCK: u32 = 200809;
    pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
    pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
    pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
    pub const _POSIX_VDISABLE: u8 = 0u8;
    pub const _POSIX_NO_TRUNC: u32 = 1;
    pub const _XOPEN_REALTIME: u32 = 1;
    pub const _XOPEN_REALTIME_THREADS: u32 = 1;
    pub const _XOPEN_SHM: u32 = 1;
    pub const _POSIX_THREADS: u32 = 200809;
    pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
    pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
    pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
    pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
    pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
    pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
    pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
    pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
    pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
    pub const _POSIX_SEMAPHORES: u32 = 200809;
    pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
    pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
    pub const _POSIX_ASYNC_IO: u32 = 1;
    pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
    pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
    pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
    pub const _LFS_LARGEFILE: u32 = 1;
    pub const _LFS64_LARGEFILE: u32 = 1;
    pub const _LFS64_STDIO: u32 = 1;
    pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
    pub const _POSIX_CPUTIME: u32 = 0;
    pub const _POSIX_THREAD_CPUTIME: u32 = 0;
    pub const _POSIX_REGEXP: u32 = 1;
    pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
    pub const _POSIX_SHELL: u32 = 1;
    pub const _POSIX_TIMEOUTS: u32 = 200809;
    pub const _POSIX_SPIN_LOCKS: u32 = 200809;
    pub const _POSIX_SPAWN: u32 = 200809;
    pub const _POSIX_TIMERS: u32 = 200809;
    pub const _POSIX_BARRIERS: u32 = 200809;
    pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
    pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
    pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
    pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
    pub const _POSIX_ADVISORY_INFO: u32 = 200809;
    pub const _POSIX_IPV6: u32 = 200809;
    pub const _POSIX_RAW_SOCKETS: u32 = 200809;
    pub const _POSIX2_CHAR_TERM: u32 = 200809;
    pub const _POSIX_SPORADIC_SERVER: i32 = -1;
    pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
    pub const _POSIX_TRACE: i32 = -1;
    pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
    pub const _POSIX_TRACE_INHERIT: i32 = -1;
    pub const _POSIX_TRACE_LOG: i32 = -1;
    pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
    pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
    pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
    pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
    pub const _POSIX_V7_LP64_OFF64: u32 = 1;
    pub const _POSIX_V6_LP64_OFF64: u32 = 1;
    pub const _XBS5_LP64_OFF64: u32 = 1;
    pub const __ILP32_OFF32_CFLAGS: &[u8; 5] = b"-m32\0";
    pub const __ILP32_OFF32_LDFLAGS: &[u8; 5] = b"-m32\0";
    pub const __ILP32_OFFBIG_CFLAGS: &[u8; 48] =
        b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
    pub const __ILP32_OFFBIG_LDFLAGS: &[u8; 5] = b"-m32\0";
    pub const __LP64_OFF64_CFLAGS: &[u8; 5] = b"-m64\0";
    pub const __LP64_OFF64_LDFLAGS: &[u8; 5] = b"-m64\0";
    pub const STDIN_FILENO: u32 = 0;
    pub const STDOUT_FILENO: u32 = 1;
    pub const STDERR_FILENO: u32 = 2;
    pub const _BITS_TYPES_H: u32 = 1;
    pub const _BITS_TYPESIZES_H: u32 = 1;
    pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
    pub const __INO_T_MATCHES_INO64_T: u32 = 1;
    pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
    pub const __STATFS_MATCHES_STATFS64: u32 = 1;
    pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
    pub const __FD_SETSIZE: u32 = 1024;
    pub const _BITS_TIME64_H: u32 = 1;
    pub const R_OK: u32 = 4;
    pub const W_OK: u32 = 2;
    pub const X_OK: u32 = 1;
    pub const F_OK: u32 = 0;
    pub const SEEK_SET: u32 = 0;
    pub const SEEK_CUR: u32 = 1;
    pub const SEEK_END: u32 = 2;
    pub const SEEK_DATA: u32 = 3;
    pub const SEEK_HOLE: u32 = 4;
    pub const L_SET: u32 = 0;
    pub const L_INCR: u32 = 1;
    pub const L_XTND: u32 = 2;
    pub const _GETOPT_POSIX_H: u32 = 1;
    pub const _GETOPT_CORE_H: u32 = 1;
    pub const F_ULOCK: u32 = 0;
    pub const F_LOCK: u32 = 1;
    pub const F_TLOCK: u32 = 2;
    pub const F_TEST: u32 = 3;
    pub const CLOSE_RANGE_UNSHARE: u32 = 2;
    pub const CLOSE_RANGE_CLOEXEC: u32 = 4;
    pub const _SYS_TYPES_H: u32 = 1;
    pub const __clock_t_defined: u32 = 1;
    pub const __clockid_t_defined: u32 = 1;
    pub const __time_t_defined: u32 = 1;
    pub const __timer_t_defined: u32 = 1;
    pub const _BITS_STDINT_INTN_H: u32 = 1;
    pub const __BIT_TYPES_DEFINED__: u32 = 1;
    pub const _ENDIAN_H: u32 = 1;
    pub const _BITS_ENDIAN_H: u32 = 1;
    pub const __LITTLE_ENDIAN: u32 = 1234;
    pub const __BIG_ENDIAN: u32 = 4321;
    pub const __PDP_ENDIAN: u32 = 3412;
    pub const _BITS_ENDIANNESS_H: u32 = 1;
    pub const __BYTE_ORDER: u32 = 1234;
    pub const __FLOAT_WORD_ORDER: u32 = 1234;
    pub const LITTLE_ENDIAN: u32 = 1234;
    pub const BIG_ENDIAN: u32 = 4321;
    pub const PDP_ENDIAN: u32 = 3412;
    pub const BYTE_ORDER: u32 = 1234;
    pub const _BITS_BYTESWAP_H: u32 = 1;
    pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
    pub const _SYS_SELECT_H: u32 = 1;
    pub const __sigset_t_defined: u32 = 1;
    pub const __timeval_defined: u32 = 1;
    pub const _STRUCT_TIMESPEC: u32 = 1;
    pub const FD_SETSIZE: u32 = 1024;
    pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
    pub const _THREAD_SHARED_TYPES_H: u32 = 1;
    pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
    pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
    pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
    pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
    pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
    pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
    pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
    pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
    pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
    pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
    pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
    pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
    pub const __have_pthread_attr_t: u32 = 1;
    pub const _DIRENT_H: u32 = 1;
    pub const _DIRENT_MATCHES_DIRENT64: u32 = 1;
    pub const _BITS_POSIX1_LIM_H: u32 = 1;
    pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
    pub const _POSIX_AIO_MAX: u32 = 1;
    pub const _POSIX_ARG_MAX: u32 = 4096;
    pub const _POSIX_CHILD_MAX: u32 = 25;
    pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
    pub const _POSIX_HOST_NAME_MAX: u32 = 255;
    pub const _POSIX_LINK_MAX: u32 = 8;
    pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
    pub const _POSIX_MAX_CANON: u32 = 255;
    pub const _POSIX_MAX_INPUT: u32 = 255;
    pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
    pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
    pub const _POSIX_NAME_MAX: u32 = 14;
    pub const _POSIX_NGROUPS_MAX: u32 = 8;
    pub const _POSIX_OPEN_MAX: u32 = 20;
    pub const _POSIX_FD_SETSIZE: u32 = 20;
    pub const _POSIX_PATH_MAX: u32 = 256;
    pub const _POSIX_PIPE_BUF: u32 = 512;
    pub const _POSIX_RE_DUP_MAX: u32 = 255;
    pub const _POSIX_RTSIG_MAX: u32 = 8;
    pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
    pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
    pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
    pub const _POSIX_SSIZE_MAX: u32 = 32767;
    pub const _POSIX_STREAM_MAX: u32 = 8;
    pub const _POSIX_SYMLINK_MAX: u32 = 255;
    pub const _POSIX_SYMLOOP_MAX: u32 = 8;
    pub const _POSIX_TIMER_MAX: u32 = 32;
    pub const _POSIX_TTY_NAME_MAX: u32 = 9;
    pub const _POSIX_TZNAME_MAX: u32 = 6;
    pub const _POSIX_QLIMIT: u32 = 1;
    pub const _POSIX_HIWAT: u32 = 512;
    pub const _POSIX_UIO_MAXIOV: u32 = 16;
    pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
    pub const NR_OPEN: u32 = 1024;
    pub const NGROUPS_MAX: u32 = 65536;
    pub const ARG_MAX: u32 = 131072;
    pub const LINK_MAX: u32 = 127;
    pub const MAX_CANON: u32 = 255;
    pub const MAX_INPUT: u32 = 255;
    pub const NAME_MAX: u32 = 255;
    pub const PATH_MAX: u32 = 4096;
    pub const PIPE_BUF: u32 = 4096;
    pub const XATTR_NAME_MAX: u32 = 255;
    pub const XATTR_SIZE_MAX: u32 = 65536;
    pub const XATTR_LIST_MAX: u32 = 65536;
    pub const RTSIG_MAX: u32 = 32;
    pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
    pub const PTHREAD_KEYS_MAX: u32 = 1024;
    pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
    pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
    pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
    pub const AIO_PRIO_DELTA_MAX: u32 = 20;
    pub const __SC_THREAD_STACK_MIN_VALUE: u32 = 75;
    pub const DELAYTIMER_MAX: u32 = 2147483647;
    pub const TTY_NAME_MAX: u32 = 32;
    pub const LOGIN_NAME_MAX: u32 = 256;
    pub const HOST_NAME_MAX: u32 = 64;
    pub const MQ_PRIO_MAX: u32 = 32768;
    pub const SEM_VALUE_MAX: u32 = 2147483647;
    pub const MAXNAMLEN: u32 = 255;
    pub const PATH_SEP_STR: &[u8; 2] = b"/\0";
    pub const PATH_SEP_CHAR: u8 = 47u8;
    pub const ALT_SEP_CHAR: u8 = 92u8;
    pub const PATH_SIZE: u32 = 4096;
    pub const _GLIBCXX_CERRNO: u32 = 1;
    pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
    pub const _GLIBCXX_RELEASE: u32 = 15;
    pub const __GLIBCXX__: u32 = 20250425;
    pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
    pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
    pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
    pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
    pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
    pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
    pub const _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED: u32 = 1;
    pub const _GLIBCXX_ASSERTIONS: u32 = 1;
    pub const _GLIBCXX_VERBOSE_ASSERT: u32 = 1;
    pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
    pub const _GLIBCXX_OS_DEFINES: u32 = 1;
    pub const __NO_CTYPE: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOAT128_MATH: u32 = 1;
    pub const _GLIBCXX_MAY_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
    pub const _GLIBCXX_GTHREAD_USE_WEAK: u32 = 0;
    pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
    pub const _GLIBCXX_FAST_MATH: u32 = 0;
    pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
    pub const _GLIBCXX_FLOAT_IS_IEEE_BINARY32: u32 = 1;
    pub const _GLIBCXX_DOUBLE_IS_IEEE_BINARY64: u32 = 1;
    pub const _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP: u32 = 1;
    pub const _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE: u32 = 1;
    pub const _GLIBCXX_HAVE_BUILTIN_LAUNDER: u32 = 1;
    pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
    pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
    pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
    pub const _GLIBCXX_HAVE_ARC4RANDOM: u32 = 1;
    pub const _GLIBCXX_HAVE_ARPA_INET_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
    pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
    pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
    pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
    pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
    pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
    pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
    pub const _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY: u32 = 1;
    pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
    pub const _GLIBCXX_HAVE_C99_FLT_EVAL_TYPES: u32 = 1;
    pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
    pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
    pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
    pub const _GLIBCXX_HAVE_COSF: u32 = 1;
    pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
    pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
    pub const _GLIBCXX_HAVE_COSL: u32 = 1;
    pub const _GLIBCXX_HAVE_DECL_STRNLEN: u32 = 1;
    pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_DIRFD: u32 = 1;
    pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
    pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
    pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
    pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FDOPENDIR: u32 = 1;
    pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
    pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
    pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
    pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_GETENTROPY: u32 = 1;
    pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
    pub const _GLIBCXX_HAVE_GETS: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
    pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
    pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
    pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
    pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
    pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
    pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
    pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
    pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
    pub const _GLIBCXX_HAVE_LINK: u32 = 1;
    pub const _GLIBCXX_HAVE_LINK_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_RANDOM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_TYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
    pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
    pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
    pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
    pub const _GLIBCXX_HAVE_LSEEK: u32 = 1;
    pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
    pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
    pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
    pub const _GLIBCXX_HAVE_MODF: u32 = 1;
    pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
    pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
    pub const _GLIBCXX_HAVE_NETDB_H: u32 = 1;
    pub const _GLIBCXX_HAVE_NETINET_IN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_NETINET_TCP_H: u32 = 1;
    pub const _GLIBCXX_HAVE_OPENAT: u32 = 1;
    pub const _GLIBCXX_HAVE_O_NONBLOCK: u32 = 1;
    pub const _GLIBCXX_HAVE_POLL: u32 = 1;
    pub const _GLIBCXX_HAVE_POLL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
    pub const _GLIBCXX_HAVE_POSIX_SEMAPHORE: u32 = 1;
    pub const _GLIBCXX_HAVE_POWF: u32 = 1;
    pub const _GLIBCXX_HAVE_POWL: u32 = 1;
    pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
    pub const _GLIBCXX_HAVE_READLINK: u32 = 1;
    pub const _GLIBCXX_HAVE_SECURE_GETENV: u32 = 1;
    pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
    pub const _GLIBCXX_HAVE_SINF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
    pub const _GLIBCXX_HAVE_SINL: u32 = 1;
    pub const _GLIBCXX_HAVE_SOCKATMARK: u32 = 1;
    pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
    pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
    pub const _GLIBCXX_HAVE_STACKTRACE: u32 = 1;
    pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
    pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
    pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
    pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
    pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
    pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
    pub const _GLIBCXX_HAVE_SYMLINK: u32 = 1;
    pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_MMAN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SDT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SOCKET_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
    pub const _GLIBCXX_HAVE_TANF: u32 = 1;
    pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
    pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
    pub const _GLIBCXX_HAVE_TANL: u32 = 1;
    pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
    pub const _GLIBCXX_HAVE_TIMESPEC_GET: u32 = 1;
    pub const _GLIBCXX_HAVE_TLS: u32 = 1;
    pub const _GLIBCXX_HAVE_TRUNCATE: u32 = 1;
    pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
    pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
    pub const _GLIBCXX_HAVE_UNLINKAT: u32 = 1;
    pub const _GLIBCXX_HAVE_USELOCALE: u32 = 1;
    pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
    pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
    pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
    pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
    pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
    pub const _GLIBCXX_LT_OBJDIR: &[u8; 7] = b".libs/\0";
    pub const _GLIBCXX_PACKAGE_BUGREPORT: &[u8; 1] = b"\0";
    pub const _GLIBCXX_PACKAGE_NAME: &[u8; 15] = b"package-unused\0";
    pub const _GLIBCXX_PACKAGE_STRING: &[u8; 30] = b"package-unused version-unused\0";
    pub const _GLIBCXX_PACKAGE_TARNAME: &[u8; 10] = b"libstdc++\0";
    pub const _GLIBCXX_PACKAGE_URL: &[u8; 1] = b"\0";
    pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &[u8; 15] = b"version-unused\0";
    pub const _GLIBCXX_STDC_HEADERS: u32 = 1;
    pub const _GLIBCXX_DARWIN_USE_64_BIT_INODE: u32 = 1;
    pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
    pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
    pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
    pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
    pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
    pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
    pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
    pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
    pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
    pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
    pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
    pub const _GLIBCXX_CAN_ALIGNAS_DESTRUCTIVE_SIZE: u32 = 1;
    pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
    pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
    pub const _GLIBCXX_RES_LIMITS: u32 = 1;
    pub const _GLIBCXX_STATIC_TZDATA: u32 = 1;
    pub const _GLIBCXX_STDIO_EOF: i32 = -1;
    pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
    pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
    pub const _GLIBCXX_SYMVER: u32 = 1;
    pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
    pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
    pub const _GLIBCXX_USE_C99: u32 = 1;
    pub const _GLIBCXX_USE_C99_COMPLEX_ARC: u32 = 1;
    pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_CTYPE: u32 = 1;
    pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_FENV: u32 = 1;
    pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_MATH_FUNCS: u32 = 1;
    pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_STDINT: u32 = 1;
    pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
    pub const _GLIBCXX_USE_CHDIR: u32 = 1;
    pub const _GLIBCXX_USE_CHMOD: u32 = 1;
    pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
    pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
    pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
    pub const _GLIBCXX_USE_DEV_RANDOM: u32 = 1;
    pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
    pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
    pub const _GLIBCXX_USE_FSEEKO_FTELLO: u32 = 1;
    pub const _GLIBCXX_USE_GETCWD: u32 = 1;
    pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
    pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
    pub const _GLIBCXX_USE_INIT_PRIORITY_ATTRIBUTE: u32 = 1;
    pub const _GLIBCXX_USE_LFS: u32 = 1;
    pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
    pub const _GLIBCXX_USE_LSTAT: u32 = 1;
    pub const _GLIBCXX_USE_MKDIR: u32 = 1;
    pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
    pub const _GLIBCXX_USE_NLS: u32 = 1;
    pub const _GLIBCXX_USE_NL_LANGINFO_L: u32 = 1;
    pub const _GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT: u32 = 1;
    pub const _GLIBCXX_USE_PTHREAD_RWLOCK_CLOCKLOCK: u32 = 1;
    pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
    pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
    pub const _GLIBCXX_USE_REALPATH: u32 = 1;
    pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
    pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
    pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
    pub const _GLIBCXX_USE_STRUCT_TM_TM_ZONE: u32 = 1;
    pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
    pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
    pub const _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_CXX20: u32 = 1;
    pub const _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_FCHAR8_T: u32 = 1;
    pub const _GLIBCXX_USE_UTIME: u32 = 1;
    pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
    pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
    pub const _GLIBCXX_VERBOSE: u32 = 1;
    pub const _GLIBCXX_X86_RDRAND: u32 = 1;
    pub const _GLIBCXX_X86_RDSEED: u32 = 1;
    pub const _GLIBCXX_ZONEINFO_DIR: &[u8; 20] = b"/usr/share/zoneinfo\0";
    pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
    pub const _ERRNO_H: u32 = 1;
    pub const _BITS_ERRNO_H: u32 = 1;
    pub const EPERM: u32 = 1;
    pub const ENOENT: u32 = 2;
    pub const ESRCH: u32 = 3;
    pub const EINTR: u32 = 4;
    pub const EIO: u32 = 5;
    pub const ENXIO: u32 = 6;
    pub const E2BIG: u32 = 7;
    pub const ENOEXEC: u32 = 8;
    pub const EBADF: u32 = 9;
    pub const ECHILD: u32 = 10;
    pub const EAGAIN: u32 = 11;
    pub const ENOMEM: u32 = 12;
    pub const EACCES: u32 = 13;
    pub const EFAULT: u32 = 14;
    pub const ENOTBLK: u32 = 15;
    pub const EBUSY: u32 = 16;
    pub const EEXIST: u32 = 17;
    pub const EXDEV: u32 = 18;
    pub const ENODEV: u32 = 19;
    pub const ENOTDIR: u32 = 20;
    pub const EISDIR: u32 = 21;
    pub const EINVAL: u32 = 22;
    pub const ENFILE: u32 = 23;
    pub const EMFILE: u32 = 24;
    pub const ENOTTY: u32 = 25;
    pub const ETXTBSY: u32 = 26;
    pub const EFBIG: u32 = 27;
    pub const ENOSPC: u32 = 28;
    pub const ESPIPE: u32 = 29;
    pub const EROFS: u32 = 30;
    pub const EMLINK: u32 = 31;
    pub const EPIPE: u32 = 32;
    pub const EDOM: u32 = 33;
    pub const ERANGE: u32 = 34;
    pub const EDEADLK: u32 = 35;
    pub const ENAMETOOLONG: u32 = 36;
    pub const ENOLCK: u32 = 37;
    pub const ENOSYS: u32 = 38;
    pub const ENOTEMPTY: u32 = 39;
    pub const ELOOP: u32 = 40;
    pub const EWOULDBLOCK: u32 = 11;
    pub const ENOMSG: u32 = 42;
    pub const EIDRM: u32 = 43;
    pub const ECHRNG: u32 = 44;
    pub const EL2NSYNC: u32 = 45;
    pub const EL3HLT: u32 = 46;
    pub const EL3RST: u32 = 47;
    pub const ELNRNG: u32 = 48;
    pub const EUNATCH: u32 = 49;
    pub const ENOCSI: u32 = 50;
    pub const EL2HLT: u32 = 51;
    pub const EBADE: u32 = 52;
    pub const EBADR: u32 = 53;
    pub const EXFULL: u32 = 54;
    pub const ENOANO: u32 = 55;
    pub const EBADRQC: u32 = 56;
    pub const EBADSLT: u32 = 57;
    pub const EDEADLOCK: u32 = 35;
    pub const EBFONT: u32 = 59;
    pub const ENOSTR: u32 = 60;
    pub const ENODATA: u32 = 61;
    pub const ETIME: u32 = 62;
    pub const ENOSR: u32 = 63;
    pub const ENONET: u32 = 64;
    pub const ENOPKG: u32 = 65;
    pub const EREMOTE: u32 = 66;
    pub const ENOLINK: u32 = 67;
    pub const EADV: u32 = 68;
    pub const ESRMNT: u32 = 69;
    pub const ECOMM: u32 = 70;
    pub const EPROTO: u32 = 71;
    pub const EMULTIHOP: u32 = 72;
    pub const EDOTDOT: u32 = 73;
    pub const EBADMSG: u32 = 74;
    pub const EOVERFLOW: u32 = 75;
    pub const ENOTUNIQ: u32 = 76;
    pub const EBADFD: u32 = 77;
    pub const EREMCHG: u32 = 78;
    pub const ELIBACC: u32 = 79;
    pub const ELIBBAD: u32 = 80;
    pub const ELIBSCN: u32 = 81;
    pub const ELIBMAX: u32 = 82;
    pub const ELIBEXEC: u32 = 83;
    pub const EILSEQ: u32 = 84;
    pub const ERESTART: u32 = 85;
    pub const ESTRPIPE: u32 = 86;
    pub const EUSERS: u32 = 87;
    pub const ENOTSOCK: u32 = 88;
    pub const EDESTADDRREQ: u32 = 89;
    pub const EMSGSIZE: u32 = 90;
    pub const EPROTOTYPE: u32 = 91;
    pub const ENOPROTOOPT: u32 = 92;
    pub const EPROTONOSUPPORT: u32 = 93;
    pub const ESOCKTNOSUPPORT: u32 = 94;
    pub const EOPNOTSUPP: u32 = 95;
    pub const EPFNOSUPPORT: u32 = 96;
    pub const EAFNOSUPPORT: u32 = 97;
    pub const EADDRINUSE: u32 = 98;
    pub const EADDRNOTAVAIL: u32 = 99;
    pub const ENETDOWN: u32 = 100;
    pub const ENETUNREACH: u32 = 101;
    pub const ENETRESET: u32 = 102;
    pub const ECONNABORTED: u32 = 103;
    pub const ECONNRESET: u32 = 104;
    pub const ENOBUFS: u32 = 105;
    pub const EISCONN: u32 = 106;
    pub const ENOTCONN: u32 = 107;
    pub const ESHUTDOWN: u32 = 108;
    pub const ETOOMANYREFS: u32 = 109;
    pub const ETIMEDOUT: u32 = 110;
    pub const ECONNREFUSED: u32 = 111;
    pub const EHOSTDOWN: u32 = 112;
    pub const EHOSTUNREACH: u32 = 113;
    pub const EALREADY: u32 = 114;
    pub const EINPROGRESS: u32 = 115;
    pub const ESTALE: u32 = 116;
    pub const EUCLEAN: u32 = 117;
    pub const ENOTNAM: u32 = 118;
    pub const ENAVAIL: u32 = 119;
    pub const EISNAM: u32 = 120;
    pub const EREMOTEIO: u32 = 121;
    pub const EDQUOT: u32 = 122;
    pub const ENOMEDIUM: u32 = 123;
    pub const EMEDIUMTYPE: u32 = 124;
    pub const ECANCELED: u32 = 125;
    pub const ENOKEY: u32 = 126;
    pub const EKEYEXPIRED: u32 = 127;
    pub const EKEYREVOKED: u32 = 128;
    pub const EKEYREJECTED: u32 = 129;
    pub const EOWNERDEAD: u32 = 130;
    pub const ENOTRECOVERABLE: u32 = 131;
    pub const ERFKILL: u32 = 132;
    pub const EHWPOISON: u32 = 133;
    pub const ENOTSUP: u32 = 95;
    pub const __error_t_defined: u32 = 1;
    pub const _GLIBCXX_CSTDINT: u32 = 1;
    pub const _STDINT_H: u32 = 1;
    pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_EXT: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
    pub const _BITS_WCHAR_H: u32 = 1;
    pub const _BITS_STDINT_UINTN_H: u32 = 1;
    pub const _BITS_STDINT_LEAST_H: u32 = 1;
    pub const INT8_MIN: i32 = -128;
    pub const INT16_MIN: i32 = -32768;
    pub const INT32_MIN: i32 = -2147483648;
    pub const INT8_MAX: u32 = 127;
    pub const INT16_MAX: u32 = 32767;
    pub const INT32_MAX: u32 = 2147483647;
    pub const UINT8_MAX: u32 = 255;
    pub const UINT16_MAX: u32 = 65535;
    pub const UINT32_MAX: u32 = 4294967295;
    pub const INT_LEAST8_MIN: i32 = -128;
    pub const INT_LEAST16_MIN: i32 = -32768;
    pub const INT_LEAST32_MIN: i32 = -2147483648;
    pub const INT_LEAST8_MAX: u32 = 127;
    pub const INT_LEAST16_MAX: u32 = 32767;
    pub const INT_LEAST32_MAX: u32 = 2147483647;
    pub const UINT_LEAST8_MAX: u32 = 255;
    pub const UINT_LEAST16_MAX: u32 = 65535;
    pub const UINT_LEAST32_MAX: u32 = 4294967295;
    pub const INT_FAST8_MIN: i32 = -128;
    pub const INT_FAST16_MIN: i64 = -9223372036854775808;
    pub const INT_FAST32_MIN: i64 = -9223372036854775808;
    pub const INT_FAST8_MAX: u32 = 127;
    pub const INT_FAST16_MAX: u64 = 9223372036854775807;
    pub const INT_FAST32_MAX: u64 = 9223372036854775807;
    pub const UINT_FAST8_MAX: u32 = 255;
    pub const UINT_FAST16_MAX: i32 = -1;
    pub const UINT_FAST32_MAX: i32 = -1;
    pub const INTPTR_MIN: i64 = -9223372036854775808;
    pub const INTPTR_MAX: u64 = 9223372036854775807;
    pub const UINTPTR_MAX: i32 = -1;
    pub const PTRDIFF_MIN: i64 = -9223372036854775808;
    pub const PTRDIFF_MAX: u64 = 9223372036854775807;
    pub const SIG_ATOMIC_MIN: i32 = -2147483648;
    pub const SIG_ATOMIC_MAX: u32 = 2147483647;
    pub const SIZE_MAX: i32 = -1;
    pub const WINT_MIN: u32 = 0;
    pub const WINT_MAX: u32 = 4294967295;
    pub const INT8_WIDTH: u32 = 8;
    pub const UINT8_WIDTH: u32 = 8;
    pub const INT16_WIDTH: u32 = 16;
    pub const UINT16_WIDTH: u32 = 16;
    pub const INT32_WIDTH: u32 = 32;
    pub const UINT32_WIDTH: u32 = 32;
    pub const INT64_WIDTH: u32 = 64;
    pub const UINT64_WIDTH: u32 = 64;
    pub const INT_LEAST8_WIDTH: u32 = 8;
    pub const UINT_LEAST8_WIDTH: u32 = 8;
    pub const INT_LEAST16_WIDTH: u32 = 16;
    pub const UINT_LEAST16_WIDTH: u32 = 16;
    pub const INT_LEAST32_WIDTH: u32 = 32;
    pub const UINT_LEAST32_WIDTH: u32 = 32;
    pub const INT_LEAST64_WIDTH: u32 = 64;
    pub const UINT_LEAST64_WIDTH: u32 = 64;
    pub const INT_FAST8_WIDTH: u32 = 8;
    pub const UINT_FAST8_WIDTH: u32 = 8;
    pub const INT_FAST16_WIDTH: u32 = 64;
    pub const UINT_FAST16_WIDTH: u32 = 64;
    pub const INT_FAST32_WIDTH: u32 = 64;
    pub const UINT_FAST32_WIDTH: u32 = 64;
    pub const INT_FAST64_WIDTH: u32 = 64;
    pub const UINT_FAST64_WIDTH: u32 = 64;
    pub const INTPTR_WIDTH: u32 = 64;
    pub const UINTPTR_WIDTH: u32 = 64;
    pub const INTMAX_WIDTH: u32 = 64;
    pub const UINTMAX_WIDTH: u32 = 64;
    pub const PTRDIFF_WIDTH: u32 = 64;
    pub const SIG_ATOMIC_WIDTH: u32 = 32;
    pub const SIZE_WIDTH: u32 = 64;
    pub const WCHAR_WIDTH: u32 = 32;
    pub const WINT_WIDTH: u32 = 32;
    pub const _ASSERT_H: u32 = 1;
    pub const _GLIBCXX_STDLIB_H: u32 = 1;
    pub const _GLIBCXX_CSTDLIB: u32 = 1;
    pub const _STDLIB_H: u32 = 1;
    pub const WNOHANG: u32 = 1;
    pub const WUNTRACED: u32 = 2;
    pub const WSTOPPED: u32 = 2;
    pub const WEXITED: u32 = 4;
    pub const WCONTINUED: u32 = 8;
    pub const WNOWAIT: u32 = 16777216;
    pub const __WNOTHREAD: u32 = 536870912;
    pub const __WALL: u32 = 1073741824;
    pub const __WCLONE: u32 = 2147483648;
    pub const __W_CONTINUED: u32 = 65535;
    pub const __WCOREFLAG: u32 = 128;
    pub const __HAVE_FLOAT128: u32 = 1;
    pub const __HAVE_DISTINCT_FLOAT128: u32 = 1;
    pub const __HAVE_FLOAT64X: u32 = 1;
    pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
    pub const __HAVE_FLOAT16: u32 = 0;
    pub const __HAVE_FLOAT32: u32 = 1;
    pub const __HAVE_FLOAT64: u32 = 1;
    pub const __HAVE_FLOAT32X: u32 = 1;
    pub const __HAVE_FLOAT128X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
    pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
    pub const __ldiv_t_defined: u32 = 1;
    pub const __lldiv_t_defined: u32 = 1;
    pub const RAND_MAX: u32 = 2147483647;
    pub const EXIT_FAILURE: u32 = 1;
    pub const EXIT_SUCCESS: u32 = 0;
    pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
    pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
    pub const _ALLOCA_H: u32 = 1;
    pub const _STDIO_H: u32 = 1;
    pub const _____fpos_t_defined: u32 = 1;
    pub const ____mbstate_t_defined: u32 = 1;
    pub const _____fpos64_t_defined: u32 = 1;
    pub const ____FILE_defined: u32 = 1;
    pub const __FILE_defined: u32 = 1;
    pub const __struct_FILE_defined: u32 = 1;
    pub const _IO_EOF_SEEN: u32 = 16;
    pub const _IO_ERR_SEEN: u32 = 32;
    pub const _IO_USER_LOCK: u32 = 32768;
    pub const __cookie_io_functions_t_defined: u32 = 1;
    pub const _IOFBF: u32 = 0;
    pub const _IOLBF: u32 = 1;
    pub const _IONBF: u32 = 2;
    pub const BUFSIZ: u32 = 8192;
    pub const EOF: i32 = -1;
    pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
    pub const L_tmpnam: u32 = 20;
    pub const TMP_MAX: u32 = 238328;
    pub const _BITS_STDIO_LIM_H: u32 = 1;
    pub const FILENAME_MAX: u32 = 4096;
    pub const L_ctermid: u32 = 9;
    pub const L_cuserid: u32 = 9;
    pub const FOPEN_MAX: u32 = 16;
    pub const _PRINTF_NAN_LEN_MAX: u32 = 4;
    pub const RENAME_NOREPLACE: u32 = 1;
    pub const RENAME_EXCHANGE: u32 = 2;
    pub const RENAME_WHITEOUT: u32 = 4;
    pub const _PTHREAD_H: u32 = 1;
    pub const _SCHED_H: u32 = 1;
    pub const _BITS_SCHED_H: u32 = 1;
    pub const SCHED_OTHER: u32 = 0;
    pub const SCHED_FIFO: u32 = 1;
    pub const SCHED_RR: u32 = 2;
    pub const SCHED_NORMAL: u32 = 0;
    pub const SCHED_BATCH: u32 = 3;
    pub const SCHED_ISO: u32 = 4;
    pub const SCHED_IDLE: u32 = 5;
    pub const SCHED_DEADLINE: u32 = 6;
    pub const SCHED_EXT: u32 = 7;
    pub const SCHED_RESET_ON_FORK: u32 = 1073741824;
    pub const SCHED_FLAG_RESET_ON_FORK: u32 = 1;
    pub const SCHED_FLAG_RECLAIM: u32 = 2;
    pub const SCHED_FLAG_DL_OVERRUN: u32 = 4;
    pub const SCHED_FLAG_KEEP_POLICY: u32 = 8;
    pub const SCHED_FLAG_KEEP_PARAMS: u32 = 16;
    pub const SCHED_FLAG_UTIL_CLAMP_MIN: u32 = 32;
    pub const SCHED_FLAG_UTIL_CLAMP_MAX: u32 = 64;
    pub const SCHED_FLAG_KEEP_ALL: u32 = 24;
    pub const SCHED_FLAG_UTIL_CLAMP: u32 = 96;
    pub const __BITS_PER_LONG: u32 = 64;
    pub const __BITS_PER_LONG_LONG: u32 = 64;
    pub const SCHED_ATTR_SIZE_VER0: u32 = 48;
    pub const SCHED_ATTR_SIZE_VER1: u32 = 56;
    pub const CSIGNAL: u32 = 255;
    pub const CLONE_VM: u32 = 256;
    pub const CLONE_FS: u32 = 512;
    pub const CLONE_FILES: u32 = 1024;
    pub const CLONE_SIGHAND: u32 = 2048;
    pub const CLONE_PIDFD: u32 = 4096;
    pub const CLONE_PTRACE: u32 = 8192;
    pub const CLONE_VFORK: u32 = 16384;
    pub const CLONE_PARENT: u32 = 32768;
    pub const CLONE_THREAD: u32 = 65536;
    pub const CLONE_NEWNS: u32 = 131072;
    pub const CLONE_SYSVSEM: u32 = 262144;
    pub const CLONE_SETTLS: u32 = 524288;
    pub const CLONE_PARENT_SETTID: u32 = 1048576;
    pub const CLONE_CHILD_CLEARTID: u32 = 2097152;
    pub const CLONE_DETACHED: u32 = 4194304;
    pub const CLONE_UNTRACED: u32 = 8388608;
    pub const CLONE_CHILD_SETTID: u32 = 16777216;
    pub const CLONE_NEWCGROUP: u32 = 33554432;
    pub const CLONE_NEWUTS: u32 = 67108864;
    pub const CLONE_NEWIPC: u32 = 134217728;
    pub const CLONE_NEWUSER: u32 = 268435456;
    pub const CLONE_NEWPID: u32 = 536870912;
    pub const CLONE_NEWNET: u32 = 1073741824;
    pub const CLONE_IO: u32 = 2147483648;
    pub const CLONE_NEWTIME: u32 = 128;
    pub const _BITS_TYPES_STRUCT_SCHED_PARAM: u32 = 1;
    pub const _BITS_CPU_SET_H: u32 = 1;
    pub const __CPU_SETSIZE: u32 = 1024;
    pub const CPU_SETSIZE: u32 = 1024;
    pub const _TIME_H: u32 = 1;
    pub const _BITS_TIME_H: u32 = 1;
    pub const CLOCK_REALTIME: u32 = 0;
    pub const CLOCK_MONOTONIC: u32 = 1;
    pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
    pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
    pub const CLOCK_MONOTONIC_RAW: u32 = 4;
    pub const CLOCK_REALTIME_COARSE: u32 = 5;
    pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
    pub const CLOCK_BOOTTIME: u32 = 7;
    pub const CLOCK_REALTIME_ALARM: u32 = 8;
    pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
    pub const CLOCK_TAI: u32 = 11;
    pub const TIMER_ABSTIME: u32 = 1;
    pub const _BITS_TIMEX_H: u32 = 1;
    pub const ADJ_OFFSET: u32 = 1;
    pub const ADJ_FREQUENCY: u32 = 2;
    pub const ADJ_MAXERROR: u32 = 4;
    pub const ADJ_ESTERROR: u32 = 8;
    pub const ADJ_STATUS: u32 = 16;
    pub const ADJ_TIMECONST: u32 = 32;
    pub const ADJ_TAI: u32 = 128;
    pub const ADJ_SETOFFSET: u32 = 256;
    pub const ADJ_MICRO: u32 = 4096;
    pub const ADJ_NANO: u32 = 8192;
    pub const ADJ_TICK: u32 = 16384;
    pub const ADJ_OFFSET_SINGLESHOT: u32 = 32769;
    pub const ADJ_OFFSET_SS_READ: u32 = 40961;
    pub const MOD_OFFSET: u32 = 1;
    pub const MOD_FREQUENCY: u32 = 2;
    pub const MOD_MAXERROR: u32 = 4;
    pub const MOD_ESTERROR: u32 = 8;
    pub const MOD_STATUS: u32 = 16;
    pub const MOD_TIMECONST: u32 = 32;
    pub const MOD_CLKB: u32 = 16384;
    pub const MOD_CLKA: u32 = 32769;
    pub const MOD_TAI: u32 = 128;
    pub const MOD_MICRO: u32 = 4096;
    pub const MOD_NANO: u32 = 8192;
    pub const STA_PLL: u32 = 1;
    pub const STA_PPSFREQ: u32 = 2;
    pub const STA_PPSTIME: u32 = 4;
    pub const STA_FLL: u32 = 8;
    pub const STA_INS: u32 = 16;
    pub const STA_DEL: u32 = 32;
    pub const STA_UNSYNC: u32 = 64;
    pub const STA_FREQHOLD: u32 = 128;
    pub const STA_PPSSIGNAL: u32 = 256;
    pub const STA_PPSJITTER: u32 = 512;
    pub const STA_PPSWANDER: u32 = 1024;
    pub const STA_PPSERROR: u32 = 2048;
    pub const STA_CLOCKERR: u32 = 4096;
    pub const STA_NANO: u32 = 8192;
    pub const STA_MODE: u32 = 16384;
    pub const STA_CLK: u32 = 32768;
    pub const STA_RONLY: u32 = 65280;
    pub const __struct_tm_defined: u32 = 1;
    pub const __itimerspec_defined: u32 = 1;
    pub const TIME_UTC: u32 = 1;
    pub const _BITS_SETJMP_H: u32 = 1;
    pub const __jmp_buf_tag_defined: u32 = 1;
    pub const PTHREAD_ONCE_INIT: u32 = 0;
    pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
    pub const PTHREAD_ATTR_NO_SIGMASK_NP: i32 = -1;
    unsafe extern "C" {
        pub fn _dl_mcount_wrapper_check(__selfpc: *mut ::core::ffi::c_void);
    }
    pub type Lmid_t = ::core::ffi::c_long;
    unsafe extern "C" {
        pub fn dlopen(
            __file: *const ::core::ffi::c_char,
            __mode: ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn dlclose(__handle: *mut ::core::ffi::c_void) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn dlsym(
            __handle: *mut ::core::ffi::c_void,
            __name: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn dlmopen(
            __nsid: root::Lmid_t,
            __file: *const ::core::ffi::c_char,
            __mode: ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn dlvsym(
            __handle: *mut ::core::ffi::c_void,
            __name: *const ::core::ffi::c_char,
            __version: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn dlerror() -> *mut ::core::ffi::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Dl_info {
        pub dli_fname: *const ::core::ffi::c_char,
        pub dli_fbase: *mut ::core::ffi::c_void,
        pub dli_sname: *const ::core::ffi::c_char,
        pub dli_saddr: *mut ::core::ffi::c_void,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of Dl_info"][::core::mem::size_of::<Dl_info>() - 32usize];
        ["Alignment of Dl_info"][::core::mem::align_of::<Dl_info>() - 8usize];
        ["Offset of field: Dl_info::dli_fname"]
            [::core::mem::offset_of!(Dl_info, dli_fname) - 0usize];
        ["Offset of field: Dl_info::dli_fbase"]
            [::core::mem::offset_of!(Dl_info, dli_fbase) - 8usize];
        ["Offset of field: Dl_info::dli_sname"]
            [::core::mem::offset_of!(Dl_info, dli_sname) - 16usize];
        ["Offset of field: Dl_info::dli_saddr"]
            [::core::mem::offset_of!(Dl_info, dli_saddr) - 24usize];
    };
    unsafe extern "C" {
        pub fn dladdr(
            __address: *const ::core::ffi::c_void,
            __info: *mut root::Dl_info,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn dladdr1(
            __address: *const ::core::ffi::c_void,
            __info: *mut root::Dl_info,
            __extra_info: *mut *mut ::core::ffi::c_void,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    pub const RTLD_DL_SYMENT: root::_bindgen_ty_1 = 1;
    pub const RTLD_DL_LINKMAP: root::_bindgen_ty_1 = 2;
    pub type _bindgen_ty_1 = ::core::ffi::c_uint;
    unsafe extern "C" {
        pub fn dlinfo(
            __handle: *mut ::core::ffi::c_void,
            __request: ::core::ffi::c_int,
            __arg: *mut ::core::ffi::c_void,
        ) -> ::core::ffi::c_int;
    }
    pub const RTLD_DI_LMID: root::_bindgen_ty_2 = 1;
    pub const RTLD_DI_LINKMAP: root::_bindgen_ty_2 = 2;
    pub const RTLD_DI_CONFIGADDR: root::_bindgen_ty_2 = 3;
    pub const RTLD_DI_SERINFO: root::_bindgen_ty_2 = 4;
    pub const RTLD_DI_SERINFOSIZE: root::_bindgen_ty_2 = 5;
    pub const RTLD_DI_ORIGIN: root::_bindgen_ty_2 = 6;
    pub const RTLD_DI_PROFILENAME: root::_bindgen_ty_2 = 7;
    pub const RTLD_DI_PROFILEOUT: root::_bindgen_ty_2 = 8;
    pub const RTLD_DI_TLS_MODID: root::_bindgen_ty_2 = 9;
    pub const RTLD_DI_TLS_DATA: root::_bindgen_ty_2 = 10;
    pub const RTLD_DI_PHDR: root::_bindgen_ty_2 = 11;
    pub const RTLD_DI_MAX: root::_bindgen_ty_2 = 11;
    pub type _bindgen_ty_2 = ::core::ffi::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Dl_serpath {
        pub dls_name: *mut ::core::ffi::c_char,
        pub dls_flags: ::core::ffi::c_uint,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of Dl_serpath"][::core::mem::size_of::<Dl_serpath>() - 16usize];
        ["Alignment of Dl_serpath"][::core::mem::align_of::<Dl_serpath>() - 8usize];
        ["Offset of field: Dl_serpath::dls_name"]
            [::core::mem::offset_of!(Dl_serpath, dls_name) - 0usize];
        ["Offset of field: Dl_serpath::dls_flags"]
            [::core::mem::offset_of!(Dl_serpath, dls_flags) - 8usize];
    };
    #[repr(C)]
    pub struct Dl_serinfo {
        pub dls_size: usize,
        pub dls_cnt: ::core::ffi::c_uint,
        pub __bindgen_anon_1: root::Dl_serinfo__bindgen_ty_1,
    }
    #[repr(C)]
    pub struct Dl_serinfo__bindgen_ty_1 {
        pub dls_serpath: root::__BindgenUnionField<[root::Dl_serpath; 0usize]>,
        pub __dls_serpath_pad: root::__BindgenUnionField<[root::Dl_serpath; 1usize]>,
        pub bindgen_union_field: [u64; 2usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of Dl_serinfo__bindgen_ty_1"]
            [::core::mem::size_of::<Dl_serinfo__bindgen_ty_1>() - 16usize];
        ["Alignment of Dl_serinfo__bindgen_ty_1"]
            [::core::mem::align_of::<Dl_serinfo__bindgen_ty_1>() - 8usize];
        ["Offset of field: Dl_serinfo__bindgen_ty_1::dls_serpath"]
            [::core::mem::offset_of!(Dl_serinfo__bindgen_ty_1, dls_serpath) - 0usize];
        ["Offset of field: Dl_serinfo__bindgen_ty_1::__dls_serpath_pad"]
            [::core::mem::offset_of!(Dl_serinfo__bindgen_ty_1, __dls_serpath_pad) - 0usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of Dl_serinfo"][::core::mem::size_of::<Dl_serinfo>() - 32usize];
        ["Alignment of Dl_serinfo"][::core::mem::align_of::<Dl_serinfo>() - 8usize];
        ["Offset of field: Dl_serinfo::dls_size"]
            [::core::mem::offset_of!(Dl_serinfo, dls_size) - 0usize];
        ["Offset of field: Dl_serinfo::dls_cnt"]
            [::core::mem::offset_of!(Dl_serinfo, dls_cnt) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct dl_find_object {
        pub dlfo_flags: ::core::ffi::c_ulonglong,
        pub dlfo_map_start: *mut ::core::ffi::c_void,
        pub dlfo_map_end: *mut ::core::ffi::c_void,
        pub dlfo_link_map: *mut root::link_map,
        pub dlfo_eh_frame: *mut ::core::ffi::c_void,
        pub __dflo_reserved: [::core::ffi::c_ulonglong; 7usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of dl_find_object"][::core::mem::size_of::<dl_find_object>() - 96usize];
        ["Alignment of dl_find_object"][::core::mem::align_of::<dl_find_object>() - 8usize];
        ["Offset of field: dl_find_object::dlfo_flags"]
            [::core::mem::offset_of!(dl_find_object, dlfo_flags) - 0usize];
        ["Offset of field: dl_find_object::dlfo_map_start"]
            [::core::mem::offset_of!(dl_find_object, dlfo_map_start) - 8usize];
        ["Offset of field: dl_find_object::dlfo_map_end"]
            [::core::mem::offset_of!(dl_find_object, dlfo_map_end) - 16usize];
        ["Offset of field: dl_find_object::dlfo_link_map"]
            [::core::mem::offset_of!(dl_find_object, dlfo_link_map) - 24usize];
        ["Offset of field: dl_find_object::dlfo_eh_frame"]
            [::core::mem::offset_of!(dl_find_object, dlfo_eh_frame) - 32usize];
        ["Offset of field: dl_find_object::__dflo_reserved"]
            [::core::mem::offset_of!(dl_find_object, __dflo_reserved) - 40usize];
    };
    unsafe extern "C" {
        pub fn _dl_find_object(
            __address: *mut ::core::ffi::c_void,
            __result: *mut root::dl_find_object,
        ) -> ::core::ffi::c_int;
    }
    pub type __u_char = ::core::ffi::c_uchar;
    pub type __u_short = ::core::ffi::c_ushort;
    pub type __u_int = ::core::ffi::c_uint;
    pub type __u_long = ::core::ffi::c_ulong;
    pub type __int8_t = ::core::ffi::c_schar;
    pub type __uint8_t = ::core::ffi::c_uchar;
    pub type __int16_t = ::core::ffi::c_short;
    pub type __uint16_t = ::core::ffi::c_ushort;
    pub type __int32_t = ::core::ffi::c_int;
    pub type __uint32_t = ::core::ffi::c_uint;
    pub type __int64_t = ::core::ffi::c_long;
    pub type __uint64_t = ::core::ffi::c_ulong;
    pub type __int_least8_t = root::__int8_t;
    pub type __uint_least8_t = root::__uint8_t;
    pub type __int_least16_t = root::__int16_t;
    pub type __uint_least16_t = root::__uint16_t;
    pub type __int_least32_t = root::__int32_t;
    pub type __uint_least32_t = root::__uint32_t;
    pub type __int_least64_t = root::__int64_t;
    pub type __uint_least64_t = root::__uint64_t;
    pub type __quad_t = ::core::ffi::c_long;
    pub type __u_quad_t = ::core::ffi::c_ulong;
    pub type __intmax_t = ::core::ffi::c_long;
    pub type __uintmax_t = ::core::ffi::c_ulong;
    pub type __dev_t = ::core::ffi::c_ulong;
    pub type __uid_t = ::core::ffi::c_uint;
    pub type __gid_t = ::core::ffi::c_uint;
    pub type __ino_t = ::core::ffi::c_ulong;
    pub type __ino64_t = ::core::ffi::c_ulong;
    pub type __mode_t = ::core::ffi::c_uint;
    pub type __nlink_t = ::core::ffi::c_ulong;
    pub type __off_t = ::core::ffi::c_long;
    pub type __off64_t = ::core::ffi::c_long;
    pub type __pid_t = ::core::ffi::c_int;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __fsid_t {
        pub __val: [::core::ffi::c_int; 2usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __fsid_t"][::core::mem::size_of::<__fsid_t>() - 8usize];
        ["Alignment of __fsid_t"][::core::mem::align_of::<__fsid_t>() - 4usize];
        ["Offset of field: __fsid_t::__val"][::core::mem::offset_of!(__fsid_t, __val) - 0usize];
    };
    pub type __clock_t = ::core::ffi::c_long;
    pub type __rlim_t = ::core::ffi::c_ulong;
    pub type __rlim64_t = ::core::ffi::c_ulong;
    pub type __id_t = ::core::ffi::c_uint;
    pub type __time_t = ::core::ffi::c_long;
    pub type __useconds_t = ::core::ffi::c_uint;
    pub type __suseconds_t = ::core::ffi::c_long;
    pub type __suseconds64_t = ::core::ffi::c_long;
    pub type __daddr_t = ::core::ffi::c_int;
    pub type __key_t = ::core::ffi::c_int;
    pub type __clockid_t = ::core::ffi::c_int;
    pub type __timer_t = *mut ::core::ffi::c_void;
    pub type __blksize_t = ::core::ffi::c_long;
    pub type __blkcnt_t = ::core::ffi::c_long;
    pub type __blkcnt64_t = ::core::ffi::c_long;
    pub type __fsblkcnt_t = ::core::ffi::c_ulong;
    pub type __fsblkcnt64_t = ::core::ffi::c_ulong;
    pub type __fsfilcnt_t = ::core::ffi::c_ulong;
    pub type __fsfilcnt64_t = ::core::ffi::c_ulong;
    pub type __fsword_t = ::core::ffi::c_long;
    pub type __ssize_t = ::core::ffi::c_long;
    pub type __syscall_slong_t = ::core::ffi::c_long;
    pub type __syscall_ulong_t = ::core::ffi::c_ulong;
    pub type __loff_t = root::__off64_t;
    pub type __caddr_t = *mut ::core::ffi::c_char;
    pub type __intptr_t = ::core::ffi::c_long;
    pub type __socklen_t = ::core::ffi::c_uint;
    pub type __sig_atomic_t = ::core::ffi::c_int;
    pub type gid_t = root::__gid_t;
    pub type uid_t = root::__uid_t;
    pub type off_t = root::__off_t;
    pub type off64_t = root::__off64_t;
    pub type useconds_t = root::__useconds_t;
    pub type pid_t = root::__pid_t;
    pub type socklen_t = root::__socklen_t;
    unsafe extern "C" {
        pub fn access(
            __name: *const ::core::ffi::c_char,
            __type: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn euidaccess(
            __name: *const ::core::ffi::c_char,
            __type: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn eaccess(
            __name: *const ::core::ffi::c_char,
            __type: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn execveat(
            __fd: ::core::ffi::c_int,
            __path: *const ::core::ffi::c_char,
            __argv: *const *mut ::core::ffi::c_char,
            __envp: *const *mut ::core::ffi::c_char,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn faccessat(
            __fd: ::core::ffi::c_int,
            __file: *const ::core::ffi::c_char,
            __type: ::core::ffi::c_int,
            __flag: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn lseek(
            __fd: ::core::ffi::c_int,
            __offset: root::__off_t,
            __whence: ::core::ffi::c_int,
        ) -> root::__off_t;
    }
    unsafe extern "C" {
        pub fn lseek64(
            __fd: ::core::ffi::c_int,
            __offset: root::__off64_t,
            __whence: ::core::ffi::c_int,
        ) -> root::__off64_t;
    }
    unsafe extern "C" {
        pub fn close(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn closefrom(__lowfd: ::core::ffi::c_int);
    }
    unsafe extern "C" {
        pub fn read(
            __fd: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_void,
            __nbytes: usize,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn write(
            __fd: ::core::ffi::c_int,
            __buf: *const ::core::ffi::c_void,
            __n: usize,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn pread(
            __fd: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_void,
            __nbytes: usize,
            __offset: root::__off_t,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn pwrite(
            __fd: ::core::ffi::c_int,
            __buf: *const ::core::ffi::c_void,
            __n: usize,
            __offset: root::__off_t,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn pread64(
            __fd: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_void,
            __nbytes: usize,
            __offset: root::__off64_t,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn pwrite64(
            __fd: ::core::ffi::c_int,
            __buf: *const ::core::ffi::c_void,
            __n: usize,
            __offset: root::__off64_t,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn pipe(__pipedes: *mut ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pipe2(
            __pipedes: *mut ::core::ffi::c_int,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn alarm(__seconds: ::core::ffi::c_uint) -> ::core::ffi::c_uint;
    }
    unsafe extern "C" {
        pub fn sleep(__seconds: ::core::ffi::c_uint) -> ::core::ffi::c_uint;
    }
    unsafe extern "C" {
        pub fn ualarm(
            __value: root::__useconds_t,
            __interval: root::__useconds_t,
        ) -> root::__useconds_t;
    }
    unsafe extern "C" {
        pub fn usleep(__useconds: root::__useconds_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pause() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn chown(
            __file: *const ::core::ffi::c_char,
            __owner: root::__uid_t,
            __group: root::__gid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fchown(
            __fd: ::core::ffi::c_int,
            __owner: root::__uid_t,
            __group: root::__gid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn lchown(
            __file: *const ::core::ffi::c_char,
            __owner: root::__uid_t,
            __group: root::__gid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fchownat(
            __fd: ::core::ffi::c_int,
            __file: *const ::core::ffi::c_char,
            __owner: root::__uid_t,
            __group: root::__gid_t,
            __flag: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn chdir(__path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fchdir(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getcwd(__buf: *mut ::core::ffi::c_char, __size: usize) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn get_current_dir_name() -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn getwd(__buf: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn dup(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn dup2(__fd: ::core::ffi::c_int, __fd2: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn dup3(
            __fd: ::core::ffi::c_int,
            __fd2: ::core::ffi::c_int,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub static mut __environ: *mut *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub static mut environ: *mut *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn execve(
            __path: *const ::core::ffi::c_char,
            __argv: *const *mut ::core::ffi::c_char,
            __envp: *const *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fexecve(
            __fd: ::core::ffi::c_int,
            __argv: *const *mut ::core::ffi::c_char,
            __envp: *const *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn execv(
            __path: *const ::core::ffi::c_char,
            __argv: *const *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn execle(
            __path: *const ::core::ffi::c_char,
            __arg: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn execl(
            __path: *const ::core::ffi::c_char,
            __arg: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn execvp(
            __file: *const ::core::ffi::c_char,
            __argv: *const *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn execlp(
            __file: *const ::core::ffi::c_char,
            __arg: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn execvpe(
            __file: *const ::core::ffi::c_char,
            __argv: *const *mut ::core::ffi::c_char,
            __envp: *const *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn nice(__inc: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn _exit(__status: ::core::ffi::c_int) -> !;
    }
    pub const _PC_LINK_MAX: root::_bindgen_ty_3 = 0;
    pub const _PC_MAX_CANON: root::_bindgen_ty_3 = 1;
    pub const _PC_MAX_INPUT: root::_bindgen_ty_3 = 2;
    pub const _PC_NAME_MAX: root::_bindgen_ty_3 = 3;
    pub const _PC_PATH_MAX: root::_bindgen_ty_3 = 4;
    pub const _PC_PIPE_BUF: root::_bindgen_ty_3 = 5;
    pub const _PC_CHOWN_RESTRICTED: root::_bindgen_ty_3 = 6;
    pub const _PC_NO_TRUNC: root::_bindgen_ty_3 = 7;
    pub const _PC_VDISABLE: root::_bindgen_ty_3 = 8;
    pub const _PC_SYNC_IO: root::_bindgen_ty_3 = 9;
    pub const _PC_ASYNC_IO: root::_bindgen_ty_3 = 10;
    pub const _PC_PRIO_IO: root::_bindgen_ty_3 = 11;
    pub const _PC_SOCK_MAXBUF: root::_bindgen_ty_3 = 12;
    pub const _PC_FILESIZEBITS: root::_bindgen_ty_3 = 13;
    pub const _PC_REC_INCR_XFER_SIZE: root::_bindgen_ty_3 = 14;
    pub const _PC_REC_MAX_XFER_SIZE: root::_bindgen_ty_3 = 15;
    pub const _PC_REC_MIN_XFER_SIZE: root::_bindgen_ty_3 = 16;
    pub const _PC_REC_XFER_ALIGN: root::_bindgen_ty_3 = 17;
    pub const _PC_ALLOC_SIZE_MIN: root::_bindgen_ty_3 = 18;
    pub const _PC_SYMLINK_MAX: root::_bindgen_ty_3 = 19;
    pub const _PC_2_SYMLINKS: root::_bindgen_ty_3 = 20;
    pub type _bindgen_ty_3 = ::core::ffi::c_uint;
    pub const _SC_ARG_MAX: root::_bindgen_ty_4 = 0;
    pub const _SC_CHILD_MAX: root::_bindgen_ty_4 = 1;
    pub const _SC_CLK_TCK: root::_bindgen_ty_4 = 2;
    pub const _SC_NGROUPS_MAX: root::_bindgen_ty_4 = 3;
    pub const _SC_OPEN_MAX: root::_bindgen_ty_4 = 4;
    pub const _SC_STREAM_MAX: root::_bindgen_ty_4 = 5;
    pub const _SC_TZNAME_MAX: root::_bindgen_ty_4 = 6;
    pub const _SC_JOB_CONTROL: root::_bindgen_ty_4 = 7;
    pub const _SC_SAVED_IDS: root::_bindgen_ty_4 = 8;
    pub const _SC_REALTIME_SIGNALS: root::_bindgen_ty_4 = 9;
    pub const _SC_PRIORITY_SCHEDULING: root::_bindgen_ty_4 = 10;
    pub const _SC_TIMERS: root::_bindgen_ty_4 = 11;
    pub const _SC_ASYNCHRONOUS_IO: root::_bindgen_ty_4 = 12;
    pub const _SC_PRIORITIZED_IO: root::_bindgen_ty_4 = 13;
    pub const _SC_SYNCHRONIZED_IO: root::_bindgen_ty_4 = 14;
    pub const _SC_FSYNC: root::_bindgen_ty_4 = 15;
    pub const _SC_MAPPED_FILES: root::_bindgen_ty_4 = 16;
    pub const _SC_MEMLOCK: root::_bindgen_ty_4 = 17;
    pub const _SC_MEMLOCK_RANGE: root::_bindgen_ty_4 = 18;
    pub const _SC_MEMORY_PROTECTION: root::_bindgen_ty_4 = 19;
    pub const _SC_MESSAGE_PASSING: root::_bindgen_ty_4 = 20;
    pub const _SC_SEMAPHORES: root::_bindgen_ty_4 = 21;
    pub const _SC_SHARED_MEMORY_OBJECTS: root::_bindgen_ty_4 = 22;
    pub const _SC_AIO_LISTIO_MAX: root::_bindgen_ty_4 = 23;
    pub const _SC_AIO_MAX: root::_bindgen_ty_4 = 24;
    pub const _SC_AIO_PRIO_DELTA_MAX: root::_bindgen_ty_4 = 25;
    pub const _SC_DELAYTIMER_MAX: root::_bindgen_ty_4 = 26;
    pub const _SC_MQ_OPEN_MAX: root::_bindgen_ty_4 = 27;
    pub const _SC_MQ_PRIO_MAX: root::_bindgen_ty_4 = 28;
    pub const _SC_VERSION: root::_bindgen_ty_4 = 29;
    pub const _SC_PAGESIZE: root::_bindgen_ty_4 = 30;
    pub const _SC_RTSIG_MAX: root::_bindgen_ty_4 = 31;
    pub const _SC_SEM_NSEMS_MAX: root::_bindgen_ty_4 = 32;
    pub const _SC_SEM_VALUE_MAX: root::_bindgen_ty_4 = 33;
    pub const _SC_SIGQUEUE_MAX: root::_bindgen_ty_4 = 34;
    pub const _SC_TIMER_MAX: root::_bindgen_ty_4 = 35;
    pub const _SC_BC_BASE_MAX: root::_bindgen_ty_4 = 36;
    pub const _SC_BC_DIM_MAX: root::_bindgen_ty_4 = 37;
    pub const _SC_BC_SCALE_MAX: root::_bindgen_ty_4 = 38;
    pub const _SC_BC_STRING_MAX: root::_bindgen_ty_4 = 39;
    pub const _SC_COLL_WEIGHTS_MAX: root::_bindgen_ty_4 = 40;
    pub const _SC_EQUIV_CLASS_MAX: root::_bindgen_ty_4 = 41;
    pub const _SC_EXPR_NEST_MAX: root::_bindgen_ty_4 = 42;
    pub const _SC_LINE_MAX: root::_bindgen_ty_4 = 43;
    pub const _SC_RE_DUP_MAX: root::_bindgen_ty_4 = 44;
    pub const _SC_CHARCLASS_NAME_MAX: root::_bindgen_ty_4 = 45;
    pub const _SC_2_VERSION: root::_bindgen_ty_4 = 46;
    pub const _SC_2_C_BIND: root::_bindgen_ty_4 = 47;
    pub const _SC_2_C_DEV: root::_bindgen_ty_4 = 48;
    pub const _SC_2_FORT_DEV: root::_bindgen_ty_4 = 49;
    pub const _SC_2_FORT_RUN: root::_bindgen_ty_4 = 50;
    pub const _SC_2_SW_DEV: root::_bindgen_ty_4 = 51;
    pub const _SC_2_LOCALEDEF: root::_bindgen_ty_4 = 52;
    pub const _SC_PII: root::_bindgen_ty_4 = 53;
    pub const _SC_PII_XTI: root::_bindgen_ty_4 = 54;
    pub const _SC_PII_SOCKET: root::_bindgen_ty_4 = 55;
    pub const _SC_PII_INTERNET: root::_bindgen_ty_4 = 56;
    pub const _SC_PII_OSI: root::_bindgen_ty_4 = 57;
    pub const _SC_POLL: root::_bindgen_ty_4 = 58;
    pub const _SC_SELECT: root::_bindgen_ty_4 = 59;
    pub const _SC_UIO_MAXIOV: root::_bindgen_ty_4 = 60;
    pub const _SC_IOV_MAX: root::_bindgen_ty_4 = 60;
    pub const _SC_PII_INTERNET_STREAM: root::_bindgen_ty_4 = 61;
    pub const _SC_PII_INTERNET_DGRAM: root::_bindgen_ty_4 = 62;
    pub const _SC_PII_OSI_COTS: root::_bindgen_ty_4 = 63;
    pub const _SC_PII_OSI_CLTS: root::_bindgen_ty_4 = 64;
    pub const _SC_PII_OSI_M: root::_bindgen_ty_4 = 65;
    pub const _SC_T_IOV_MAX: root::_bindgen_ty_4 = 66;
    pub const _SC_THREADS: root::_bindgen_ty_4 = 67;
    pub const _SC_THREAD_SAFE_FUNCTIONS: root::_bindgen_ty_4 = 68;
    pub const _SC_GETGR_R_SIZE_MAX: root::_bindgen_ty_4 = 69;
    pub const _SC_GETPW_R_SIZE_MAX: root::_bindgen_ty_4 = 70;
    pub const _SC_LOGIN_NAME_MAX: root::_bindgen_ty_4 = 71;
    pub const _SC_TTY_NAME_MAX: root::_bindgen_ty_4 = 72;
    pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: root::_bindgen_ty_4 = 73;
    pub const _SC_THREAD_KEYS_MAX: root::_bindgen_ty_4 = 74;
    pub const _SC_THREAD_STACK_MIN: root::_bindgen_ty_4 = 75;
    pub const _SC_THREAD_THREADS_MAX: root::_bindgen_ty_4 = 76;
    pub const _SC_THREAD_ATTR_STACKADDR: root::_bindgen_ty_4 = 77;
    pub const _SC_THREAD_ATTR_STACKSIZE: root::_bindgen_ty_4 = 78;
    pub const _SC_THREAD_PRIORITY_SCHEDULING: root::_bindgen_ty_4 = 79;
    pub const _SC_THREAD_PRIO_INHERIT: root::_bindgen_ty_4 = 80;
    pub const _SC_THREAD_PRIO_PROTECT: root::_bindgen_ty_4 = 81;
    pub const _SC_THREAD_PROCESS_SHARED: root::_bindgen_ty_4 = 82;
    pub const _SC_NPROCESSORS_CONF: root::_bindgen_ty_4 = 83;
    pub const _SC_NPROCESSORS_ONLN: root::_bindgen_ty_4 = 84;
    pub const _SC_PHYS_PAGES: root::_bindgen_ty_4 = 85;
    pub const _SC_AVPHYS_PAGES: root::_bindgen_ty_4 = 86;
    pub const _SC_ATEXIT_MAX: root::_bindgen_ty_4 = 87;
    pub const _SC_PASS_MAX: root::_bindgen_ty_4 = 88;
    pub const _SC_XOPEN_VERSION: root::_bindgen_ty_4 = 89;
    pub const _SC_XOPEN_XCU_VERSION: root::_bindgen_ty_4 = 90;
    pub const _SC_XOPEN_UNIX: root::_bindgen_ty_4 = 91;
    pub const _SC_XOPEN_CRYPT: root::_bindgen_ty_4 = 92;
    pub const _SC_XOPEN_ENH_I18N: root::_bindgen_ty_4 = 93;
    pub const _SC_XOPEN_SHM: root::_bindgen_ty_4 = 94;
    pub const _SC_2_CHAR_TERM: root::_bindgen_ty_4 = 95;
    pub const _SC_2_C_VERSION: root::_bindgen_ty_4 = 96;
    pub const _SC_2_UPE: root::_bindgen_ty_4 = 97;
    pub const _SC_XOPEN_XPG2: root::_bindgen_ty_4 = 98;
    pub const _SC_XOPEN_XPG3: root::_bindgen_ty_4 = 99;
    pub const _SC_XOPEN_XPG4: root::_bindgen_ty_4 = 100;
    pub const _SC_CHAR_BIT: root::_bindgen_ty_4 = 101;
    pub const _SC_CHAR_MAX: root::_bindgen_ty_4 = 102;
    pub const _SC_CHAR_MIN: root::_bindgen_ty_4 = 103;
    pub const _SC_INT_MAX: root::_bindgen_ty_4 = 104;
    pub const _SC_INT_MIN: root::_bindgen_ty_4 = 105;
    pub const _SC_LONG_BIT: root::_bindgen_ty_4 = 106;
    pub const _SC_WORD_BIT: root::_bindgen_ty_4 = 107;
    pub const _SC_MB_LEN_MAX: root::_bindgen_ty_4 = 108;
    pub const _SC_NZERO: root::_bindgen_ty_4 = 109;
    pub const _SC_SSIZE_MAX: root::_bindgen_ty_4 = 110;
    pub const _SC_SCHAR_MAX: root::_bindgen_ty_4 = 111;
    pub const _SC_SCHAR_MIN: root::_bindgen_ty_4 = 112;
    pub const _SC_SHRT_MAX: root::_bindgen_ty_4 = 113;
    pub const _SC_SHRT_MIN: root::_bindgen_ty_4 = 114;
    pub const _SC_UCHAR_MAX: root::_bindgen_ty_4 = 115;
    pub const _SC_UINT_MAX: root::_bindgen_ty_4 = 116;
    pub const _SC_ULONG_MAX: root::_bindgen_ty_4 = 117;
    pub const _SC_USHRT_MAX: root::_bindgen_ty_4 = 118;
    pub const _SC_NL_ARGMAX: root::_bindgen_ty_4 = 119;
    pub const _SC_NL_LANGMAX: root::_bindgen_ty_4 = 120;
    pub const _SC_NL_MSGMAX: root::_bindgen_ty_4 = 121;
    pub const _SC_NL_NMAX: root::_bindgen_ty_4 = 122;
    pub const _SC_NL_SETMAX: root::_bindgen_ty_4 = 123;
    pub const _SC_NL_TEXTMAX: root::_bindgen_ty_4 = 124;
    pub const _SC_XBS5_ILP32_OFF32: root::_bindgen_ty_4 = 125;
    pub const _SC_XBS5_ILP32_OFFBIG: root::_bindgen_ty_4 = 126;
    pub const _SC_XBS5_LP64_OFF64: root::_bindgen_ty_4 = 127;
    pub const _SC_XBS5_LPBIG_OFFBIG: root::_bindgen_ty_4 = 128;
    pub const _SC_XOPEN_LEGACY: root::_bindgen_ty_4 = 129;
    pub const _SC_XOPEN_REALTIME: root::_bindgen_ty_4 = 130;
    pub const _SC_XOPEN_REALTIME_THREADS: root::_bindgen_ty_4 = 131;
    pub const _SC_ADVISORY_INFO: root::_bindgen_ty_4 = 132;
    pub const _SC_BARRIERS: root::_bindgen_ty_4 = 133;
    pub const _SC_BASE: root::_bindgen_ty_4 = 134;
    pub const _SC_C_LANG_SUPPORT: root::_bindgen_ty_4 = 135;
    pub const _SC_C_LANG_SUPPORT_R: root::_bindgen_ty_4 = 136;
    pub const _SC_CLOCK_SELECTION: root::_bindgen_ty_4 = 137;
    pub const _SC_CPUTIME: root::_bindgen_ty_4 = 138;
    pub const _SC_THREAD_CPUTIME: root::_bindgen_ty_4 = 139;
    pub const _SC_DEVICE_IO: root::_bindgen_ty_4 = 140;
    pub const _SC_DEVICE_SPECIFIC: root::_bindgen_ty_4 = 141;
    pub const _SC_DEVICE_SPECIFIC_R: root::_bindgen_ty_4 = 142;
    pub const _SC_FD_MGMT: root::_bindgen_ty_4 = 143;
    pub const _SC_FIFO: root::_bindgen_ty_4 = 144;
    pub const _SC_PIPE: root::_bindgen_ty_4 = 145;
    pub const _SC_FILE_ATTRIBUTES: root::_bindgen_ty_4 = 146;
    pub const _SC_FILE_LOCKING: root::_bindgen_ty_4 = 147;
    pub const _SC_FILE_SYSTEM: root::_bindgen_ty_4 = 148;
    pub const _SC_MONOTONIC_CLOCK: root::_bindgen_ty_4 = 149;
    pub const _SC_MULTI_PROCESS: root::_bindgen_ty_4 = 150;
    pub const _SC_SINGLE_PROCESS: root::_bindgen_ty_4 = 151;
    pub const _SC_NETWORKING: root::_bindgen_ty_4 = 152;
    pub const _SC_READER_WRITER_LOCKS: root::_bindgen_ty_4 = 153;
    pub const _SC_SPIN_LOCKS: root::_bindgen_ty_4 = 154;
    pub const _SC_REGEXP: root::_bindgen_ty_4 = 155;
    pub const _SC_REGEX_VERSION: root::_bindgen_ty_4 = 156;
    pub const _SC_SHELL: root::_bindgen_ty_4 = 157;
    pub const _SC_SIGNALS: root::_bindgen_ty_4 = 158;
    pub const _SC_SPAWN: root::_bindgen_ty_4 = 159;
    pub const _SC_SPORADIC_SERVER: root::_bindgen_ty_4 = 160;
    pub const _SC_THREAD_SPORADIC_SERVER: root::_bindgen_ty_4 = 161;
    pub const _SC_SYSTEM_DATABASE: root::_bindgen_ty_4 = 162;
    pub const _SC_SYSTEM_DATABASE_R: root::_bindgen_ty_4 = 163;
    pub const _SC_TIMEOUTS: root::_bindgen_ty_4 = 164;
    pub const _SC_TYPED_MEMORY_OBJECTS: root::_bindgen_ty_4 = 165;
    pub const _SC_USER_GROUPS: root::_bindgen_ty_4 = 166;
    pub const _SC_USER_GROUPS_R: root::_bindgen_ty_4 = 167;
    pub const _SC_2_PBS: root::_bindgen_ty_4 = 168;
    pub const _SC_2_PBS_ACCOUNTING: root::_bindgen_ty_4 = 169;
    pub const _SC_2_PBS_LOCATE: root::_bindgen_ty_4 = 170;
    pub const _SC_2_PBS_MESSAGE: root::_bindgen_ty_4 = 171;
    pub const _SC_2_PBS_TRACK: root::_bindgen_ty_4 = 172;
    pub const _SC_SYMLOOP_MAX: root::_bindgen_ty_4 = 173;
    pub const _SC_STREAMS: root::_bindgen_ty_4 = 174;
    pub const _SC_2_PBS_CHECKPOINT: root::_bindgen_ty_4 = 175;
    pub const _SC_V6_ILP32_OFF32: root::_bindgen_ty_4 = 176;
    pub const _SC_V6_ILP32_OFFBIG: root::_bindgen_ty_4 = 177;
    pub const _SC_V6_LP64_OFF64: root::_bindgen_ty_4 = 178;
    pub const _SC_V6_LPBIG_OFFBIG: root::_bindgen_ty_4 = 179;
    pub const _SC_HOST_NAME_MAX: root::_bindgen_ty_4 = 180;
    pub const _SC_TRACE: root::_bindgen_ty_4 = 181;
    pub const _SC_TRACE_EVENT_FILTER: root::_bindgen_ty_4 = 182;
    pub const _SC_TRACE_INHERIT: root::_bindgen_ty_4 = 183;
    pub const _SC_TRACE_LOG: root::_bindgen_ty_4 = 184;
    pub const _SC_LEVEL1_ICACHE_SIZE: root::_bindgen_ty_4 = 185;
    pub const _SC_LEVEL1_ICACHE_ASSOC: root::_bindgen_ty_4 = 186;
    pub const _SC_LEVEL1_ICACHE_LINESIZE: root::_bindgen_ty_4 = 187;
    pub const _SC_LEVEL1_DCACHE_SIZE: root::_bindgen_ty_4 = 188;
    pub const _SC_LEVEL1_DCACHE_ASSOC: root::_bindgen_ty_4 = 189;
    pub const _SC_LEVEL1_DCACHE_LINESIZE: root::_bindgen_ty_4 = 190;
    pub const _SC_LEVEL2_CACHE_SIZE: root::_bindgen_ty_4 = 191;
    pub const _SC_LEVEL2_CACHE_ASSOC: root::_bindgen_ty_4 = 192;
    pub const _SC_LEVEL2_CACHE_LINESIZE: root::_bindgen_ty_4 = 193;
    pub const _SC_LEVEL3_CACHE_SIZE: root::_bindgen_ty_4 = 194;
    pub const _SC_LEVEL3_CACHE_ASSOC: root::_bindgen_ty_4 = 195;
    pub const _SC_LEVEL3_CACHE_LINESIZE: root::_bindgen_ty_4 = 196;
    pub const _SC_LEVEL4_CACHE_SIZE: root::_bindgen_ty_4 = 197;
    pub const _SC_LEVEL4_CACHE_ASSOC: root::_bindgen_ty_4 = 198;
    pub const _SC_LEVEL4_CACHE_LINESIZE: root::_bindgen_ty_4 = 199;
    pub const _SC_IPV6: root::_bindgen_ty_4 = 235;
    pub const _SC_RAW_SOCKETS: root::_bindgen_ty_4 = 236;
    pub const _SC_V7_ILP32_OFF32: root::_bindgen_ty_4 = 237;
    pub const _SC_V7_ILP32_OFFBIG: root::_bindgen_ty_4 = 238;
    pub const _SC_V7_LP64_OFF64: root::_bindgen_ty_4 = 239;
    pub const _SC_V7_LPBIG_OFFBIG: root::_bindgen_ty_4 = 240;
    pub const _SC_SS_REPL_MAX: root::_bindgen_ty_4 = 241;
    pub const _SC_TRACE_EVENT_NAME_MAX: root::_bindgen_ty_4 = 242;
    pub const _SC_TRACE_NAME_MAX: root::_bindgen_ty_4 = 243;
    pub const _SC_TRACE_SYS_MAX: root::_bindgen_ty_4 = 244;
    pub const _SC_TRACE_USER_EVENT_MAX: root::_bindgen_ty_4 = 245;
    pub const _SC_XOPEN_STREAMS: root::_bindgen_ty_4 = 246;
    pub const _SC_THREAD_ROBUST_PRIO_INHERIT: root::_bindgen_ty_4 = 247;
    pub const _SC_THREAD_ROBUST_PRIO_PROTECT: root::_bindgen_ty_4 = 248;
    pub const _SC_MINSIGSTKSZ: root::_bindgen_ty_4 = 249;
    pub const _SC_SIGSTKSZ: root::_bindgen_ty_4 = 250;
    pub type _bindgen_ty_4 = ::core::ffi::c_uint;
    pub const _CS_PATH: root::_bindgen_ty_5 = 0;
    pub const _CS_V6_WIDTH_RESTRICTED_ENVS: root::_bindgen_ty_5 = 1;
    pub const _CS_GNU_LIBC_VERSION: root::_bindgen_ty_5 = 2;
    pub const _CS_GNU_LIBPTHREAD_VERSION: root::_bindgen_ty_5 = 3;
    pub const _CS_V5_WIDTH_RESTRICTED_ENVS: root::_bindgen_ty_5 = 4;
    pub const _CS_V7_WIDTH_RESTRICTED_ENVS: root::_bindgen_ty_5 = 5;
    pub const _CS_LFS_CFLAGS: root::_bindgen_ty_5 = 1000;
    pub const _CS_LFS_LDFLAGS: root::_bindgen_ty_5 = 1001;
    pub const _CS_LFS_LIBS: root::_bindgen_ty_5 = 1002;
    pub const _CS_LFS_LINTFLAGS: root::_bindgen_ty_5 = 1003;
    pub const _CS_LFS64_CFLAGS: root::_bindgen_ty_5 = 1004;
    pub const _CS_LFS64_LDFLAGS: root::_bindgen_ty_5 = 1005;
    pub const _CS_LFS64_LIBS: root::_bindgen_ty_5 = 1006;
    pub const _CS_LFS64_LINTFLAGS: root::_bindgen_ty_5 = 1007;
    pub const _CS_XBS5_ILP32_OFF32_CFLAGS: root::_bindgen_ty_5 = 1100;
    pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: root::_bindgen_ty_5 = 1101;
    pub const _CS_XBS5_ILP32_OFF32_LIBS: root::_bindgen_ty_5 = 1102;
    pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: root::_bindgen_ty_5 = 1103;
    pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: root::_bindgen_ty_5 = 1104;
    pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: root::_bindgen_ty_5 = 1105;
    pub const _CS_XBS5_ILP32_OFFBIG_LIBS: root::_bindgen_ty_5 = 1106;
    pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: root::_bindgen_ty_5 = 1107;
    pub const _CS_XBS5_LP64_OFF64_CFLAGS: root::_bindgen_ty_5 = 1108;
    pub const _CS_XBS5_LP64_OFF64_LDFLAGS: root::_bindgen_ty_5 = 1109;
    pub const _CS_XBS5_LP64_OFF64_LIBS: root::_bindgen_ty_5 = 1110;
    pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: root::_bindgen_ty_5 = 1111;
    pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: root::_bindgen_ty_5 = 1112;
    pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: root::_bindgen_ty_5 = 1113;
    pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: root::_bindgen_ty_5 = 1114;
    pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: root::_bindgen_ty_5 = 1115;
    pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: root::_bindgen_ty_5 = 1116;
    pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: root::_bindgen_ty_5 = 1117;
    pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: root::_bindgen_ty_5 = 1118;
    pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: root::_bindgen_ty_5 = 1119;
    pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: root::_bindgen_ty_5 = 1120;
    pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: root::_bindgen_ty_5 = 1121;
    pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: root::_bindgen_ty_5 = 1122;
    pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: root::_bindgen_ty_5 = 1123;
    pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: root::_bindgen_ty_5 = 1124;
    pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: root::_bindgen_ty_5 = 1125;
    pub const _CS_POSIX_V6_LP64_OFF64_LIBS: root::_bindgen_ty_5 = 1126;
    pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: root::_bindgen_ty_5 = 1127;
    pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: root::_bindgen_ty_5 = 1128;
    pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: root::_bindgen_ty_5 = 1129;
    pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: root::_bindgen_ty_5 = 1130;
    pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: root::_bindgen_ty_5 = 1131;
    pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: root::_bindgen_ty_5 = 1132;
    pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: root::_bindgen_ty_5 = 1133;
    pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: root::_bindgen_ty_5 = 1134;
    pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: root::_bindgen_ty_5 = 1135;
    pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: root::_bindgen_ty_5 = 1136;
    pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: root::_bindgen_ty_5 = 1137;
    pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: root::_bindgen_ty_5 = 1138;
    pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: root::_bindgen_ty_5 = 1139;
    pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: root::_bindgen_ty_5 = 1140;
    pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: root::_bindgen_ty_5 = 1141;
    pub const _CS_POSIX_V7_LP64_OFF64_LIBS: root::_bindgen_ty_5 = 1142;
    pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: root::_bindgen_ty_5 = 1143;
    pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: root::_bindgen_ty_5 = 1144;
    pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: root::_bindgen_ty_5 = 1145;
    pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: root::_bindgen_ty_5 = 1146;
    pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: root::_bindgen_ty_5 = 1147;
    pub const _CS_V6_ENV: root::_bindgen_ty_5 = 1148;
    pub const _CS_V7_ENV: root::_bindgen_ty_5 = 1149;
    pub type _bindgen_ty_5 = ::core::ffi::c_uint;
    unsafe extern "C" {
        pub fn pathconf(
            __path: *const ::core::ffi::c_char,
            __name: ::core::ffi::c_int,
        ) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn fpathconf(
            __fd: ::core::ffi::c_int,
            __name: ::core::ffi::c_int,
        ) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn sysconf(__name: ::core::ffi::c_int) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn confstr(
            __name: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __len: usize,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn getpid() -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn getppid() -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn getpgrp() -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn __getpgid(__pid: root::__pid_t) -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn getpgid(__pid: root::__pid_t) -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn setpgid(__pid: root::__pid_t, __pgid: root::__pid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setpgrp() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setsid() -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn getsid(__pid: root::__pid_t) -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn getuid() -> root::__uid_t;
    }
    unsafe extern "C" {
        pub fn geteuid() -> root::__uid_t;
    }
    unsafe extern "C" {
        pub fn getgid() -> root::__gid_t;
    }
    unsafe extern "C" {
        pub fn getegid() -> root::__gid_t;
    }
    unsafe extern "C" {
        pub fn getgroups(
            __size: ::core::ffi::c_int,
            __list: *mut root::__gid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn group_member(__gid: root::__gid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setuid(__uid: root::__uid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setreuid(__ruid: root::__uid_t, __euid: root::__uid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn seteuid(__uid: root::__uid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setgid(__gid: root::__gid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setregid(__rgid: root::__gid_t, __egid: root::__gid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setegid(__gid: root::__gid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getresuid(
            __ruid: *mut root::__uid_t,
            __euid: *mut root::__uid_t,
            __suid: *mut root::__uid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getresgid(
            __rgid: *mut root::__gid_t,
            __egid: *mut root::__gid_t,
            __sgid: *mut root::__gid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setresuid(
            __ruid: root::__uid_t,
            __euid: root::__uid_t,
            __suid: root::__uid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setresgid(
            __rgid: root::__gid_t,
            __egid: root::__gid_t,
            __sgid: root::__gid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fork() -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn vfork() -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn _Fork() -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn ttyname(__fd: ::core::ffi::c_int) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn ttyname_r(
            __fd: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __buflen: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn isatty(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ttyslot() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn link(
            __from: *const ::core::ffi::c_char,
            __to: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn linkat(
            __fromfd: ::core::ffi::c_int,
            __from: *const ::core::ffi::c_char,
            __tofd: ::core::ffi::c_int,
            __to: *const ::core::ffi::c_char,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn symlink(
            __from: *const ::core::ffi::c_char,
            __to: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn readlink(
            __path: *const ::core::ffi::c_char,
            __buf: *mut ::core::ffi::c_char,
            __len: usize,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn symlinkat(
            __from: *const ::core::ffi::c_char,
            __tofd: ::core::ffi::c_int,
            __to: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn readlinkat(
            __fd: ::core::ffi::c_int,
            __path: *const ::core::ffi::c_char,
            __buf: *mut ::core::ffi::c_char,
            __len: usize,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn unlink(__name: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn unlinkat(
            __fd: ::core::ffi::c_int,
            __name: *const ::core::ffi::c_char,
            __flag: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn rmdir(__path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn tcgetpgrp(__fd: ::core::ffi::c_int) -> root::__pid_t;
    }
    unsafe extern "C" {
        pub fn tcsetpgrp(__fd: ::core::ffi::c_int, __pgrp_id: root::__pid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getlogin() -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn getlogin_r(
            __name: *mut ::core::ffi::c_char,
            __name_len: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setlogin(__name: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub static mut optarg: *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub static mut optind: ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub static mut opterr: ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub static mut optopt: ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getopt(
            ___argc: ::core::ffi::c_int,
            ___argv: *const *mut ::core::ffi::c_char,
            __shortopts: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn gethostname(__name: *mut ::core::ffi::c_char, __len: usize) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sethostname(__name: *const ::core::ffi::c_char, __len: usize) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sethostid(__id: ::core::ffi::c_long) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getdomainname(__name: *mut ::core::ffi::c_char, __len: usize) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setdomainname(
            __name: *const ::core::ffi::c_char,
            __len: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vhangup() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn revoke(__file: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn profil(
            __sample_buffer: *mut ::core::ffi::c_ushort,
            __size: usize,
            __offset: usize,
            __scale: ::core::ffi::c_uint,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn acct(__name: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getusershell() -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn endusershell();
    }
    unsafe extern "C" {
        pub fn setusershell();
    }
    unsafe extern "C" {
        pub fn daemon(
            __nochdir: ::core::ffi::c_int,
            __noclose: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn chroot(__path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getpass(__prompt: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn fsync(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn syncfs(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn gethostid() -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn sync();
    }
    unsafe extern "C" {
        pub fn getpagesize() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getdtablesize() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn truncate(
            __file: *const ::core::ffi::c_char,
            __length: root::__off_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn truncate64(
            __file: *const ::core::ffi::c_char,
            __length: root::__off64_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ftruncate(__fd: ::core::ffi::c_int, __length: root::__off_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ftruncate64(
            __fd: ::core::ffi::c_int,
            __length: root::__off64_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn brk(__addr: *mut ::core::ffi::c_void) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sbrk(__delta: isize) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn syscall(__sysno: ::core::ffi::c_long, ...) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn lockf(
            __fd: ::core::ffi::c_int,
            __cmd: ::core::ffi::c_int,
            __len: root::__off_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn lockf64(
            __fd: ::core::ffi::c_int,
            __cmd: ::core::ffi::c_int,
            __len: root::__off64_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn copy_file_range(
            __infd: ::core::ffi::c_int,
            __pinoff: *mut root::__off64_t,
            __outfd: ::core::ffi::c_int,
            __poutoff: *mut root::__off64_t,
            __length: usize,
            __flags: ::core::ffi::c_uint,
        ) -> isize;
    }
    unsafe extern "C" {
        pub fn fdatasync(__fildes: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn crypt(
            __key: *const ::core::ffi::c_char,
            __salt: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn swab(__from: *const ::core::ffi::c_void, __to: *mut ::core::ffi::c_void, __n: isize);
    }
    unsafe extern "C" {
        pub fn getentropy(
            __buffer: *mut ::core::ffi::c_void,
            __length: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn close_range(
            __fd: ::core::ffi::c_uint,
            __max_fd: ::core::ffi::c_uint,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn gettid() -> root::__pid_t;
    }
    pub type u_char = root::__u_char;
    pub type u_short = root::__u_short;
    pub type u_int = root::__u_int;
    pub type u_long = root::__u_long;
    pub type quad_t = root::__quad_t;
    pub type u_quad_t = root::__u_quad_t;
    pub type fsid_t = root::__fsid_t;
    pub type loff_t = root::__loff_t;
    pub type ino_t = root::__ino_t;
    pub type ino64_t = root::__ino64_t;
    pub type dev_t = root::__dev_t;
    pub type mode_t = root::__mode_t;
    pub type nlink_t = root::__nlink_t;
    pub type id_t = root::__id_t;
    pub type daddr_t = root::__daddr_t;
    pub type caddr_t = root::__caddr_t;
    pub type key_t = root::__key_t;
    pub type clock_t = root::__clock_t;
    pub type clockid_t = root::__clockid_t;
    pub type time_t = root::__time_t;
    pub type timer_t = root::__timer_t;
    pub type suseconds_t = root::__suseconds_t;
    pub type ulong = ::core::ffi::c_ulong;
    pub type ushort = ::core::ffi::c_ushort;
    pub type uint = ::core::ffi::c_uint;
    pub type u_int8_t = root::__uint8_t;
    pub type u_int16_t = root::__uint16_t;
    pub type u_int32_t = root::__uint32_t;
    pub type u_int64_t = root::__uint64_t;
    pub type register_t = ::core::ffi::c_long;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __sigset_t {
        pub __val: [::core::ffi::c_ulong; 16usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __sigset_t"][::core::mem::size_of::<__sigset_t>() - 128usize];
        ["Alignment of __sigset_t"][::core::mem::align_of::<__sigset_t>() - 8usize];
        ["Offset of field: __sigset_t::__val"][::core::mem::offset_of!(__sigset_t, __val) - 0usize];
    };
    pub type sigset_t = root::__sigset_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct timeval {
        pub tv_sec: root::__time_t,
        pub tv_usec: root::__suseconds_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of timeval"][::core::mem::size_of::<timeval>() - 16usize];
        ["Alignment of timeval"][::core::mem::align_of::<timeval>() - 8usize];
        ["Offset of field: timeval::tv_sec"][::core::mem::offset_of!(timeval, tv_sec) - 0usize];
        ["Offset of field: timeval::tv_usec"][::core::mem::offset_of!(timeval, tv_usec) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct timespec {
        pub tv_sec: root::__time_t,
        pub tv_nsec: root::__syscall_slong_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of timespec"][::core::mem::size_of::<timespec>() - 16usize];
        ["Alignment of timespec"][::core::mem::align_of::<timespec>() - 8usize];
        ["Offset of field: timespec::tv_sec"][::core::mem::offset_of!(timespec, tv_sec) - 0usize];
        ["Offset of field: timespec::tv_nsec"][::core::mem::offset_of!(timespec, tv_nsec) - 8usize];
    };
    pub type __fd_mask = ::core::ffi::c_long;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct fd_set {
        pub fds_bits: [root::__fd_mask; 16usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of fd_set"][::core::mem::size_of::<fd_set>() - 128usize];
        ["Alignment of fd_set"][::core::mem::align_of::<fd_set>() - 8usize];
        ["Offset of field: fd_set::fds_bits"][::core::mem::offset_of!(fd_set, fds_bits) - 0usize];
    };
    pub type fd_mask = root::__fd_mask;
    unsafe extern "C" {
        pub fn select(
            __nfds: ::core::ffi::c_int,
            __readfds: *mut root::fd_set,
            __writefds: *mut root::fd_set,
            __exceptfds: *mut root::fd_set,
            __timeout: *mut root::timeval,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pselect(
            __nfds: ::core::ffi::c_int,
            __readfds: *mut root::fd_set,
            __writefds: *mut root::fd_set,
            __exceptfds: *mut root::fd_set,
            __timeout: *const root::timespec,
            __sigmask: *const root::__sigset_t,
        ) -> ::core::ffi::c_int;
    }
    pub type blksize_t = root::__blksize_t;
    pub type blkcnt_t = root::__blkcnt_t;
    pub type fsblkcnt_t = root::__fsblkcnt_t;
    pub type fsfilcnt_t = root::__fsfilcnt_t;
    pub type blkcnt64_t = root::__blkcnt64_t;
    pub type fsblkcnt64_t = root::__fsblkcnt64_t;
    pub type fsfilcnt64_t = root::__fsfilcnt64_t;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __atomic_wide_counter {
        pub __value64: ::core::ffi::c_ulonglong,
        pub __value32: root::__atomic_wide_counter__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __atomic_wide_counter__bindgen_ty_1 {
        pub __low: ::core::ffi::c_uint,
        pub __high: ::core::ffi::c_uint,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __atomic_wide_counter__bindgen_ty_1"]
            [::core::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>() - 8usize];
        ["Alignment of __atomic_wide_counter__bindgen_ty_1"]
            [::core::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>() - 4usize];
        ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__low"]
            [::core::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __low) - 0usize];
        ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__high"]
            [::core::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __high) - 4usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __atomic_wide_counter"][::core::mem::size_of::<__atomic_wide_counter>() - 8usize];
        ["Alignment of __atomic_wide_counter"]
            [::core::mem::align_of::<__atomic_wide_counter>() - 8usize];
        ["Offset of field: __atomic_wide_counter::__value64"]
            [::core::mem::offset_of!(__atomic_wide_counter, __value64) - 0usize];
        ["Offset of field: __atomic_wide_counter::__value32"]
            [::core::mem::offset_of!(__atomic_wide_counter, __value32) - 0usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_internal_list {
        pub __prev: *mut root::__pthread_internal_list,
        pub __next: *mut root::__pthread_internal_list,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_internal_list"]
            [::core::mem::size_of::<__pthread_internal_list>() - 16usize];
        ["Alignment of __pthread_internal_list"]
            [::core::mem::align_of::<__pthread_internal_list>() - 8usize];
        ["Offset of field: __pthread_internal_list::__prev"]
            [::core::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
        ["Offset of field: __pthread_internal_list::__next"]
            [::core::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
    };
    pub type __pthread_list_t = root::__pthread_internal_list;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_internal_slist {
        pub __next: *mut root::__pthread_internal_slist,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_internal_slist"]
            [::core::mem::size_of::<__pthread_internal_slist>() - 8usize];
        ["Alignment of __pthread_internal_slist"]
            [::core::mem::align_of::<__pthread_internal_slist>() - 8usize];
        ["Offset of field: __pthread_internal_slist::__next"]
            [::core::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
    };
    pub type __pthread_slist_t = root::__pthread_internal_slist;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_mutex_s {
        pub __lock: ::core::ffi::c_int,
        pub __count: ::core::ffi::c_uint,
        pub __owner: ::core::ffi::c_int,
        pub __nusers: ::core::ffi::c_uint,
        pub __kind: ::core::ffi::c_int,
        pub __spins: ::core::ffi::c_short,
        pub __elision: ::core::ffi::c_short,
        pub __list: root::__pthread_list_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_mutex_s"][::core::mem::size_of::<__pthread_mutex_s>() - 40usize];
        ["Alignment of __pthread_mutex_s"][::core::mem::align_of::<__pthread_mutex_s>() - 8usize];
        ["Offset of field: __pthread_mutex_s::__lock"]
            [::core::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
        ["Offset of field: __pthread_mutex_s::__count"]
            [::core::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
        ["Offset of field: __pthread_mutex_s::__owner"]
            [::core::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
        ["Offset of field: __pthread_mutex_s::__nusers"]
            [::core::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
        ["Offset of field: __pthread_mutex_s::__kind"]
            [::core::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
        ["Offset of field: __pthread_mutex_s::__spins"]
            [::core::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
        ["Offset of field: __pthread_mutex_s::__elision"]
            [::core::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
        ["Offset of field: __pthread_mutex_s::__list"]
            [::core::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_rwlock_arch_t {
        pub __readers: ::core::ffi::c_uint,
        pub __writers: ::core::ffi::c_uint,
        pub __wrphase_futex: ::core::ffi::c_uint,
        pub __writers_futex: ::core::ffi::c_uint,
        pub __pad3: ::core::ffi::c_uint,
        pub __pad4: ::core::ffi::c_uint,
        pub __cur_writer: ::core::ffi::c_int,
        pub __shared: ::core::ffi::c_int,
        pub __rwelision: ::core::ffi::c_schar,
        pub __pad1: [::core::ffi::c_uchar; 7usize],
        pub __pad2: ::core::ffi::c_ulong,
        pub __flags: ::core::ffi::c_uint,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_rwlock_arch_t"]
            [::core::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
        ["Alignment of __pthread_rwlock_arch_t"]
            [::core::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
        ["Offset of field: __pthread_rwlock_arch_t::__readers"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
        ["Offset of field: __pthread_rwlock_arch_t::__writers"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
        ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
        ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
        ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
        ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
        ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
        ["Offset of field: __pthread_rwlock_arch_t::__shared"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
        ["Offset of field: __pthread_rwlock_arch_t::__rwelision"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __rwelision) - 32usize];
        ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
        ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
        ["Offset of field: __pthread_rwlock_arch_t::__flags"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __pthread_cond_s {
        pub __wseq: root::__atomic_wide_counter,
        pub __g1_start: root::__atomic_wide_counter,
        pub __g_size: [::core::ffi::c_uint; 2usize],
        pub __g1_orig_size: ::core::ffi::c_uint,
        pub __wrefs: ::core::ffi::c_uint,
        pub __g_signals: [::core::ffi::c_uint; 2usize],
        pub __unused_initialized_1: ::core::ffi::c_uint,
        pub __unused_initialized_2: ::core::ffi::c_uint,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_cond_s"][::core::mem::size_of::<__pthread_cond_s>() - 48usize];
        ["Alignment of __pthread_cond_s"][::core::mem::align_of::<__pthread_cond_s>() - 8usize];
        ["Offset of field: __pthread_cond_s::__wseq"]
            [::core::mem::offset_of!(__pthread_cond_s, __wseq) - 0usize];
        ["Offset of field: __pthread_cond_s::__g1_start"]
            [::core::mem::offset_of!(__pthread_cond_s, __g1_start) - 8usize];
        ["Offset of field: __pthread_cond_s::__g_size"]
            [::core::mem::offset_of!(__pthread_cond_s, __g_size) - 16usize];
        ["Offset of field: __pthread_cond_s::__g1_orig_size"]
            [::core::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 24usize];
        ["Offset of field: __pthread_cond_s::__wrefs"]
            [::core::mem::offset_of!(__pthread_cond_s, __wrefs) - 28usize];
        ["Offset of field: __pthread_cond_s::__g_signals"]
            [::core::mem::offset_of!(__pthread_cond_s, __g_signals) - 32usize];
        ["Offset of field: __pthread_cond_s::__unused_initialized_1"]
            [::core::mem::offset_of!(__pthread_cond_s, __unused_initialized_1) - 40usize];
        ["Offset of field: __pthread_cond_s::__unused_initialized_2"]
            [::core::mem::offset_of!(__pthread_cond_s, __unused_initialized_2) - 44usize];
    };
    pub type __tss_t = ::core::ffi::c_uint;
    pub type __thrd_t = ::core::ffi::c_ulong;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __once_flag {
        pub __data: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __once_flag"][::core::mem::size_of::<__once_flag>() - 4usize];
        ["Alignment of __once_flag"][::core::mem::align_of::<__once_flag>() - 4usize];
        ["Offset of field: __once_flag::__data"]
            [::core::mem::offset_of!(__once_flag, __data) - 0usize];
    };
    pub type pthread_t = ::core::ffi::c_ulong;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_mutexattr_t {
        pub __size: [::core::ffi::c_char; 4usize],
        pub __align: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_mutexattr_t"][::core::mem::size_of::<pthread_mutexattr_t>() - 4usize];
        ["Alignment of pthread_mutexattr_t"]
            [::core::mem::align_of::<pthread_mutexattr_t>() - 4usize];
        ["Offset of field: pthread_mutexattr_t::__size"]
            [::core::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
        ["Offset of field: pthread_mutexattr_t::__align"]
            [::core::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_condattr_t {
        pub __size: [::core::ffi::c_char; 4usize],
        pub __align: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_condattr_t"][::core::mem::size_of::<pthread_condattr_t>() - 4usize];
        ["Alignment of pthread_condattr_t"][::core::mem::align_of::<pthread_condattr_t>() - 4usize];
        ["Offset of field: pthread_condattr_t::__size"]
            [::core::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
        ["Offset of field: pthread_condattr_t::__align"]
            [::core::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
    };
    pub type pthread_key_t = ::core::ffi::c_uint;
    pub type pthread_once_t = ::core::ffi::c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_attr_t {
        pub __size: [::core::ffi::c_char; 56usize],
        pub __align: ::core::ffi::c_long,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_attr_t"][::core::mem::size_of::<pthread_attr_t>() - 56usize];
        ["Alignment of pthread_attr_t"][::core::mem::align_of::<pthread_attr_t>() - 8usize];
        ["Offset of field: pthread_attr_t::__size"]
            [::core::mem::offset_of!(pthread_attr_t, __size) - 0usize];
        ["Offset of field: pthread_attr_t::__align"]
            [::core::mem::offset_of!(pthread_attr_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_mutex_t {
        pub __data: root::__pthread_mutex_s,
        pub __size: [::core::ffi::c_char; 40usize],
        pub __align: ::core::ffi::c_long,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_mutex_t"][::core::mem::size_of::<pthread_mutex_t>() - 40usize];
        ["Alignment of pthread_mutex_t"][::core::mem::align_of::<pthread_mutex_t>() - 8usize];
        ["Offset of field: pthread_mutex_t::__data"]
            [::core::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
        ["Offset of field: pthread_mutex_t::__size"]
            [::core::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
        ["Offset of field: pthread_mutex_t::__align"]
            [::core::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_cond_t {
        pub __data: root::__pthread_cond_s,
        pub __size: [::core::ffi::c_char; 48usize],
        pub __align: ::core::ffi::c_longlong,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_cond_t"][::core::mem::size_of::<pthread_cond_t>() - 48usize];
        ["Alignment of pthread_cond_t"][::core::mem::align_of::<pthread_cond_t>() - 8usize];
        ["Offset of field: pthread_cond_t::__data"]
            [::core::mem::offset_of!(pthread_cond_t, __data) - 0usize];
        ["Offset of field: pthread_cond_t::__size"]
            [::core::mem::offset_of!(pthread_cond_t, __size) - 0usize];
        ["Offset of field: pthread_cond_t::__align"]
            [::core::mem::offset_of!(pthread_cond_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_rwlock_t {
        pub __data: root::__pthread_rwlock_arch_t,
        pub __size: [::core::ffi::c_char; 56usize],
        pub __align: ::core::ffi::c_long,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_rwlock_t"][::core::mem::size_of::<pthread_rwlock_t>() - 56usize];
        ["Alignment of pthread_rwlock_t"][::core::mem::align_of::<pthread_rwlock_t>() - 8usize];
        ["Offset of field: pthread_rwlock_t::__data"]
            [::core::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
        ["Offset of field: pthread_rwlock_t::__size"]
            [::core::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
        ["Offset of field: pthread_rwlock_t::__align"]
            [::core::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_rwlockattr_t {
        pub __size: [::core::ffi::c_char; 8usize],
        pub __align: ::core::ffi::c_long,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_rwlockattr_t"][::core::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
        ["Alignment of pthread_rwlockattr_t"]
            [::core::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
        ["Offset of field: pthread_rwlockattr_t::__size"]
            [::core::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
        ["Offset of field: pthread_rwlockattr_t::__align"]
            [::core::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
    };
    pub type pthread_spinlock_t = ::core::ffi::c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_barrier_t {
        pub __size: [::core::ffi::c_char; 32usize],
        pub __align: ::core::ffi::c_long,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_barrier_t"][::core::mem::size_of::<pthread_barrier_t>() - 32usize];
        ["Alignment of pthread_barrier_t"][::core::mem::align_of::<pthread_barrier_t>() - 8usize];
        ["Offset of field: pthread_barrier_t::__size"]
            [::core::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
        ["Offset of field: pthread_barrier_t::__align"]
            [::core::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_barrierattr_t {
        pub __size: [::core::ffi::c_char; 4usize],
        pub __align: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_barrierattr_t"][::core::mem::size_of::<pthread_barrierattr_t>() - 4usize];
        ["Alignment of pthread_barrierattr_t"]
            [::core::mem::align_of::<pthread_barrierattr_t>() - 4usize];
        ["Offset of field: pthread_barrierattr_t::__size"]
            [::core::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
        ["Offset of field: pthread_barrierattr_t::__align"]
            [::core::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct dirent {
        pub d_ino: root::__ino_t,
        pub d_off: root::__off_t,
        pub d_reclen: ::core::ffi::c_ushort,
        pub d_type: ::core::ffi::c_uchar,
        pub d_name: [::core::ffi::c_char; 256usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of dirent"][::core::mem::size_of::<dirent>() - 280usize];
        ["Alignment of dirent"][::core::mem::align_of::<dirent>() - 8usize];
        ["Offset of field: dirent::d_ino"][::core::mem::offset_of!(dirent, d_ino) - 0usize];
        ["Offset of field: dirent::d_off"][::core::mem::offset_of!(dirent, d_off) - 8usize];
        ["Offset of field: dirent::d_reclen"][::core::mem::offset_of!(dirent, d_reclen) - 16usize];
        ["Offset of field: dirent::d_type"][::core::mem::offset_of!(dirent, d_type) - 18usize];
        ["Offset of field: dirent::d_name"][::core::mem::offset_of!(dirent, d_name) - 19usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct dirent64 {
        pub d_ino: root::__ino64_t,
        pub d_off: root::__off64_t,
        pub d_reclen: ::core::ffi::c_ushort,
        pub d_type: ::core::ffi::c_uchar,
        pub d_name: [::core::ffi::c_char; 256usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of dirent64"][::core::mem::size_of::<dirent64>() - 280usize];
        ["Alignment of dirent64"][::core::mem::align_of::<dirent64>() - 8usize];
        ["Offset of field: dirent64::d_ino"][::core::mem::offset_of!(dirent64, d_ino) - 0usize];
        ["Offset of field: dirent64::d_off"][::core::mem::offset_of!(dirent64, d_off) - 8usize];
        ["Offset of field: dirent64::d_reclen"]
            [::core::mem::offset_of!(dirent64, d_reclen) - 16usize];
        ["Offset of field: dirent64::d_type"][::core::mem::offset_of!(dirent64, d_type) - 18usize];
        ["Offset of field: dirent64::d_name"][::core::mem::offset_of!(dirent64, d_name) - 19usize];
    };
    pub const DT_UNKNOWN: root::_bindgen_ty_6 = 0;
    pub const DT_FIFO: root::_bindgen_ty_6 = 1;
    pub const DT_CHR: root::_bindgen_ty_6 = 2;
    pub const DT_DIR: root::_bindgen_ty_6 = 4;
    pub const DT_BLK: root::_bindgen_ty_6 = 6;
    pub const DT_REG: root::_bindgen_ty_6 = 8;
    pub const DT_LNK: root::_bindgen_ty_6 = 10;
    pub const DT_SOCK: root::_bindgen_ty_6 = 12;
    pub const DT_WHT: root::_bindgen_ty_6 = 14;
    pub type _bindgen_ty_6 = ::core::ffi::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __dirstream {
        _unused: [u8; 0],
    }
    pub type DIR = root::__dirstream;
    unsafe extern "C" {
        pub fn closedir(__dirp: *mut root::DIR) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn opendir(__name: *const ::core::ffi::c_char) -> *mut root::DIR;
    }
    unsafe extern "C" {
        pub fn fdopendir(__fd: ::core::ffi::c_int) -> *mut root::DIR;
    }
    unsafe extern "C" {
        pub fn readdir(__dirp: *mut root::DIR) -> *mut root::dirent;
    }
    unsafe extern "C" {
        pub fn readdir64(__dirp: *mut root::DIR) -> *mut root::dirent64;
    }
    unsafe extern "C" {
        pub fn readdir_r(
            __dirp: *mut root::DIR,
            __entry: *mut root::dirent,
            __result: *mut *mut root::dirent,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn readdir64_r(
            __dirp: *mut root::DIR,
            __entry: *mut root::dirent64,
            __result: *mut *mut root::dirent64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn rewinddir(__dirp: *mut root::DIR);
    }
    unsafe extern "C" {
        pub fn seekdir(__dirp: *mut root::DIR, __pos: ::core::ffi::c_long);
    }
    unsafe extern "C" {
        pub fn telldir(__dirp: *mut root::DIR) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn dirfd(__dirp: *mut root::DIR) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __sysconf(__name: ::core::ffi::c_int) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn scandir(
            __dir: *const ::core::ffi::c_char,
            __namelist: *mut *mut *mut root::dirent,
            __selector: ::core::option::Option<
                unsafe extern "C" fn(arg1: *const root::dirent) -> ::core::ffi::c_int,
            >,
            __cmp: ::core::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut *const root::dirent,
                    arg2: *mut *const root::dirent,
                ) -> ::core::ffi::c_int,
            >,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn scandir64(
            __dir: *const ::core::ffi::c_char,
            __namelist: *mut *mut *mut root::dirent64,
            __selector: ::core::option::Option<
                unsafe extern "C" fn(arg1: *const root::dirent64) -> ::core::ffi::c_int,
            >,
            __cmp: ::core::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut *const root::dirent64,
                    arg2: *mut *const root::dirent64,
                ) -> ::core::ffi::c_int,
            >,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn scandirat(
            __dfd: ::core::ffi::c_int,
            __dir: *const ::core::ffi::c_char,
            __namelist: *mut *mut *mut root::dirent,
            __selector: ::core::option::Option<
                unsafe extern "C" fn(arg1: *const root::dirent) -> ::core::ffi::c_int,
            >,
            __cmp: ::core::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut *const root::dirent,
                    arg2: *mut *const root::dirent,
                ) -> ::core::ffi::c_int,
            >,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn scandirat64(
            __dfd: ::core::ffi::c_int,
            __dir: *const ::core::ffi::c_char,
            __namelist: *mut *mut *mut root::dirent64,
            __selector: ::core::option::Option<
                unsafe extern "C" fn(arg1: *const root::dirent64) -> ::core::ffi::c_int,
            >,
            __cmp: ::core::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut *const root::dirent64,
                    arg2: *mut *const root::dirent64,
                ) -> ::core::ffi::c_int,
            >,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn alphasort(
            __e1: *mut *const root::dirent,
            __e2: *mut *const root::dirent,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn alphasort64(
            __e1: *mut *const root::dirent64,
            __e2: *mut *const root::dirent64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getdirentries(
            __fd: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __nbytes: usize,
            __basep: *mut root::__off_t,
        ) -> root::__ssize_t;
    }
    unsafe extern "C" {
        pub fn getdirentries64(
            __fd: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __nbytes: usize,
            __basep: *mut root::__off64_t,
        ) -> root::__ssize_t;
    }
    unsafe extern "C" {
        pub fn versionsort(
            __e1: *mut *const root::dirent,
            __e2: *mut *const root::dirent,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn versionsort64(
            __e1: *mut *const root::dirent64,
            __e2: *mut *const root::dirent64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getdents64(
            __fd: ::core::ffi::c_int,
            __buffer: *mut ::core::ffi::c_void,
            __length: usize,
        ) -> root::__ssize_t;
    }
    pub type HINSTANCE = *mut ::core::ffi::c_void;
    pub mod std {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub type nullptr_t = *const ::core::ffi::c_void;
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt21__glibcxx_assert_failPKciS0_S0_"]
            pub fn __glibcxx_assert_fail(
                __file: *const ::core::ffi::c_char,
                __line: ::core::ffi::c_int,
                __function: *const ::core::ffi::c_char,
                __condition: *const ::core::ffi::c_char,
            ) -> !;
        }
    }
    pub mod __gnu_cxx {
        #[allow(unused_imports)]
        use self::super::super::root;
    }
    unsafe extern "C" {
        pub fn __errno_location() -> *mut ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub static mut program_invocation_name: *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub static mut program_invocation_short_name: *mut ::core::ffi::c_char;
    }
    pub type error_t = ::core::ffi::c_int;
    unsafe extern "C" {
        #[link_name = "\u{1}_Z12GetLastErrorv"]
        pub fn GetLastError() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_Z16GetFileOfAddressPvPcm"]
        pub fn GetFileOfAddress(
            pAddr: *mut ::core::ffi::c_void,
            buffer: *mut ::core::ffi::c_char,
            maxlength: usize,
        ) -> bool;
    }
    pub type int_least8_t = root::__int_least8_t;
    pub type int_least16_t = root::__int_least16_t;
    pub type int_least32_t = root::__int_least32_t;
    pub type int_least64_t = root::__int_least64_t;
    pub type uint_least8_t = root::__uint_least8_t;
    pub type uint_least16_t = root::__uint_least16_t;
    pub type uint_least32_t = root::__uint_least32_t;
    pub type uint_least64_t = root::__uint_least64_t;
    pub type int_fast8_t = ::core::ffi::c_schar;
    pub type int_fast16_t = ::core::ffi::c_long;
    pub type int_fast32_t = ::core::ffi::c_long;
    pub type int_fast64_t = ::core::ffi::c_long;
    pub type uint_fast8_t = ::core::ffi::c_uchar;
    pub type uint_fast16_t = ::core::ffi::c_ulong;
    pub type uint_fast32_t = ::core::ffi::c_ulong;
    pub type uint_fast64_t = ::core::ffi::c_ulong;
    pub type intmax_t = root::__intmax_t;
    pub type uintmax_t = root::__uintmax_t;
    unsafe extern "C" {
        pub fn __assert_fail(
            __assertion: *const ::core::ffi::c_char,
            __file: *const ::core::ffi::c_char,
            __line: ::core::ffi::c_uint,
            __function: *const ::core::ffi::c_char,
        ) -> !;
    }
    unsafe extern "C" {
        pub fn __assert_perror_fail(
            __errnum: ::core::ffi::c_int,
            __file: *const ::core::ffi::c_char,
            __line: ::core::ffi::c_uint,
            __function: *const ::core::ffi::c_char,
        ) -> !;
    }
    unsafe extern "C" {
        pub fn __assert(
            __assertion: *const ::core::ffi::c_char,
            __file: *const ::core::ffi::c_char,
            __line: ::core::ffi::c_int,
        ) -> !;
    }
    #[repr(C)]
    #[repr(align(16))]
    #[derive(Debug, Copy, Clone)]
    pub struct max_align_t {
        pub __clang_max_align_nonce1: ::core::ffi::c_longlong,
        pub __bindgen_padding_0: u64,
        pub __clang_max_align_nonce2: u128,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of max_align_t"][::core::mem::size_of::<max_align_t>() - 32usize];
        ["Alignment of max_align_t"][::core::mem::align_of::<max_align_t>() - 16usize];
        ["Offset of field: max_align_t::__clang_max_align_nonce1"]
            [::core::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
        ["Offset of field: max_align_t::__clang_max_align_nonce2"]
            [::core::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
    };
    pub type __cfloat128 = root::__BindgenComplex<u128>;
    pub type _Float128 = u128;
    pub type _Float32 = f32;
    pub type _Float64 = f64;
    pub type _Float32x = f64;
    pub type _Float64x = u128;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct div_t {
        pub quot: ::core::ffi::c_int,
        pub rem: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of div_t"][::core::mem::size_of::<div_t>() - 8usize];
        ["Alignment of div_t"][::core::mem::align_of::<div_t>() - 4usize];
        ["Offset of field: div_t::quot"][::core::mem::offset_of!(div_t, quot) - 0usize];
        ["Offset of field: div_t::rem"][::core::mem::offset_of!(div_t, rem) - 4usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ldiv_t {
        pub quot: ::core::ffi::c_long,
        pub rem: ::core::ffi::c_long,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of ldiv_t"][::core::mem::size_of::<ldiv_t>() - 16usize];
        ["Alignment of ldiv_t"][::core::mem::align_of::<ldiv_t>() - 8usize];
        ["Offset of field: ldiv_t::quot"][::core::mem::offset_of!(ldiv_t, quot) - 0usize];
        ["Offset of field: ldiv_t::rem"][::core::mem::offset_of!(ldiv_t, rem) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lldiv_t {
        pub quot: ::core::ffi::c_longlong,
        pub rem: ::core::ffi::c_longlong,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of lldiv_t"][::core::mem::size_of::<lldiv_t>() - 16usize];
        ["Alignment of lldiv_t"][::core::mem::align_of::<lldiv_t>() - 8usize];
        ["Offset of field: lldiv_t::quot"][::core::mem::offset_of!(lldiv_t, quot) - 0usize];
        ["Offset of field: lldiv_t::rem"][::core::mem::offset_of!(lldiv_t, rem) - 8usize];
    };
    unsafe extern "C" {
        pub fn __ctype_get_mb_cur_max() -> usize;
    }
    unsafe extern "C" {
        pub fn atof(__nptr: *const ::core::ffi::c_char) -> f64;
    }
    unsafe extern "C" {
        pub fn atoi(__nptr: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn atol(__nptr: *const ::core::ffi::c_char) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn atoll(__nptr: *const ::core::ffi::c_char) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn strtod(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
        ) -> f64;
    }
    unsafe extern "C" {
        pub fn strtof(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
        ) -> f32;
    }
    unsafe extern "C" {
        pub fn strtold(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
        ) -> u128;
    }
    unsafe extern "C" {
        pub fn strtof32(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
        ) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn strtof64(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
        ) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn strtof128(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
        ) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn strtof32x(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
        ) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn strtof64x(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
        ) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn strtol(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn strtoul(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_ulong;
    }
    unsafe extern "C" {
        pub fn strtoq(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn strtouq(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_ulonglong;
    }
    unsafe extern "C" {
        pub fn strtoll(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn strtoull(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_ulonglong;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_strtol"]
        pub fn strtol1(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_strtoul"]
        pub fn strtoul1(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_ulong;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_strtoll"]
        pub fn strtoq1(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_strtoull"]
        pub fn strtouq1(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_ulonglong;
    }
    unsafe extern "C" {
        pub fn strfromd(
            __dest: *mut ::core::ffi::c_char,
            __size: usize,
            __format: *const ::core::ffi::c_char,
            __f: f64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strfromf(
            __dest: *mut ::core::ffi::c_char,
            __size: usize,
            __format: *const ::core::ffi::c_char,
            __f: f32,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strfroml(
            __dest: *mut ::core::ffi::c_char,
            __size: usize,
            __format: *const ::core::ffi::c_char,
            __f: u128,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strfromf32(
            __dest: *mut ::core::ffi::c_char,
            __size: usize,
            __format: *const ::core::ffi::c_char,
            __f: root::_Float32,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strfromf64(
            __dest: *mut ::core::ffi::c_char,
            __size: usize,
            __format: *const ::core::ffi::c_char,
            __f: root::_Float64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strfromf128(
            __dest: *mut ::core::ffi::c_char,
            __size: usize,
            __format: *const ::core::ffi::c_char,
            __f: root::_Float128,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strfromf32x(
            __dest: *mut ::core::ffi::c_char,
            __size: usize,
            __format: *const ::core::ffi::c_char,
            __f: root::_Float32x,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strfromf64x(
            __dest: *mut ::core::ffi::c_char,
            __size: usize,
            __format: *const ::core::ffi::c_char,
            __f: root::_Float64x,
        ) -> ::core::ffi::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __locale_struct {
        pub __locales: [*mut root::__locale_data; 13usize],
        pub __ctype_b: *const ::core::ffi::c_ushort,
        pub __ctype_tolower: *const ::core::ffi::c_int,
        pub __ctype_toupper: *const ::core::ffi::c_int,
        pub __names: [*const ::core::ffi::c_char; 13usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __locale_struct"][::core::mem::size_of::<__locale_struct>() - 232usize];
        ["Alignment of __locale_struct"][::core::mem::align_of::<__locale_struct>() - 8usize];
        ["Offset of field: __locale_struct::__locales"]
            [::core::mem::offset_of!(__locale_struct, __locales) - 0usize];
        ["Offset of field: __locale_struct::__ctype_b"]
            [::core::mem::offset_of!(__locale_struct, __ctype_b) - 104usize];
        ["Offset of field: __locale_struct::__ctype_tolower"]
            [::core::mem::offset_of!(__locale_struct, __ctype_tolower) - 112usize];
        ["Offset of field: __locale_struct::__ctype_toupper"]
            [::core::mem::offset_of!(__locale_struct, __ctype_toupper) - 120usize];
        ["Offset of field: __locale_struct::__names"]
            [::core::mem::offset_of!(__locale_struct, __names) - 128usize];
    };
    pub type __locale_t = *mut root::__locale_struct;
    pub type locale_t = root::__locale_t;
    unsafe extern "C" {
        pub fn strtol_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn strtoul_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_ulong;
    }
    unsafe extern "C" {
        pub fn strtoll_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn strtoull_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_ulonglong;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_strtol_l"]
        pub fn strtol_l1(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_strtoul_l"]
        pub fn strtoul_l1(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_ulong;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_strtoll_l"]
        pub fn strtoll_l1(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_strtoull_l"]
        pub fn strtoull_l1(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_ulonglong;
    }
    unsafe extern "C" {
        pub fn strtod_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __loc: root::locale_t,
        ) -> f64;
    }
    unsafe extern "C" {
        pub fn strtof_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __loc: root::locale_t,
        ) -> f32;
    }
    unsafe extern "C" {
        pub fn strtold_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __loc: root::locale_t,
        ) -> u128;
    }
    unsafe extern "C" {
        pub fn strtof32_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __loc: root::locale_t,
        ) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn strtof64_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __loc: root::locale_t,
        ) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn strtof128_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __loc: root::locale_t,
        ) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn strtof32x_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __loc: root::locale_t,
        ) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn strtof64x_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __loc: root::locale_t,
        ) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn l64a(__n: ::core::ffi::c_long) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn a64l(__s: *const ::core::ffi::c_char) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn random() -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn srandom(__seed: ::core::ffi::c_uint);
    }
    unsafe extern "C" {
        pub fn initstate(
            __seed: ::core::ffi::c_uint,
            __statebuf: *mut ::core::ffi::c_char,
            __statelen: usize,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn setstate(__statebuf: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct random_data {
        pub fptr: *mut i32,
        pub rptr: *mut i32,
        pub state: *mut i32,
        pub rand_type: ::core::ffi::c_int,
        pub rand_deg: ::core::ffi::c_int,
        pub rand_sep: ::core::ffi::c_int,
        pub end_ptr: *mut i32,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of random_data"][::core::mem::size_of::<random_data>() - 48usize];
        ["Alignment of random_data"][::core::mem::align_of::<random_data>() - 8usize];
        ["Offset of field: random_data::fptr"][::core::mem::offset_of!(random_data, fptr) - 0usize];
        ["Offset of field: random_data::rptr"][::core::mem::offset_of!(random_data, rptr) - 8usize];
        ["Offset of field: random_data::state"]
            [::core::mem::offset_of!(random_data, state) - 16usize];
        ["Offset of field: random_data::rand_type"]
            [::core::mem::offset_of!(random_data, rand_type) - 24usize];
        ["Offset of field: random_data::rand_deg"]
            [::core::mem::offset_of!(random_data, rand_deg) - 28usize];
        ["Offset of field: random_data::rand_sep"]
            [::core::mem::offset_of!(random_data, rand_sep) - 32usize];
        ["Offset of field: random_data::end_ptr"]
            [::core::mem::offset_of!(random_data, end_ptr) - 40usize];
    };
    unsafe extern "C" {
        pub fn random_r(__buf: *mut root::random_data, __result: *mut i32) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn srandom_r(
            __seed: ::core::ffi::c_uint,
            __buf: *mut root::random_data,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn initstate_r(
            __seed: ::core::ffi::c_uint,
            __statebuf: *mut ::core::ffi::c_char,
            __statelen: usize,
            __buf: *mut root::random_data,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setstate_r(
            __statebuf: *mut ::core::ffi::c_char,
            __buf: *mut root::random_data,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn rand() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn srand(__seed: ::core::ffi::c_uint);
    }
    unsafe extern "C" {
        pub fn rand_r(__seed: *mut ::core::ffi::c_uint) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn drand48() -> f64;
    }
    unsafe extern "C" {
        pub fn erand48(__xsubi: *mut ::core::ffi::c_ushort) -> f64;
    }
    unsafe extern "C" {
        pub fn lrand48() -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn nrand48(__xsubi: *mut ::core::ffi::c_ushort) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn mrand48() -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn jrand48(__xsubi: *mut ::core::ffi::c_ushort) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn srand48(__seedval: ::core::ffi::c_long);
    }
    unsafe extern "C" {
        pub fn seed48(__seed16v: *mut ::core::ffi::c_ushort) -> *mut ::core::ffi::c_ushort;
    }
    unsafe extern "C" {
        pub fn lcong48(__param: *mut ::core::ffi::c_ushort);
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct drand48_data {
        pub __x: [::core::ffi::c_ushort; 3usize],
        pub __old_x: [::core::ffi::c_ushort; 3usize],
        pub __c: ::core::ffi::c_ushort,
        pub __init: ::core::ffi::c_ushort,
        pub __a: ::core::ffi::c_ulonglong,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of drand48_data"][::core::mem::size_of::<drand48_data>() - 24usize];
        ["Alignment of drand48_data"][::core::mem::align_of::<drand48_data>() - 8usize];
        ["Offset of field: drand48_data::__x"][::core::mem::offset_of!(drand48_data, __x) - 0usize];
        ["Offset of field: drand48_data::__old_x"]
            [::core::mem::offset_of!(drand48_data, __old_x) - 6usize];
        ["Offset of field: drand48_data::__c"]
            [::core::mem::offset_of!(drand48_data, __c) - 12usize];
        ["Offset of field: drand48_data::__init"]
            [::core::mem::offset_of!(drand48_data, __init) - 14usize];
        ["Offset of field: drand48_data::__a"]
            [::core::mem::offset_of!(drand48_data, __a) - 16usize];
    };
    unsafe extern "C" {
        pub fn drand48_r(
            __buffer: *mut root::drand48_data,
            __result: *mut f64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn erand48_r(
            __xsubi: *mut ::core::ffi::c_ushort,
            __buffer: *mut root::drand48_data,
            __result: *mut f64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn lrand48_r(
            __buffer: *mut root::drand48_data,
            __result: *mut ::core::ffi::c_long,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn nrand48_r(
            __xsubi: *mut ::core::ffi::c_ushort,
            __buffer: *mut root::drand48_data,
            __result: *mut ::core::ffi::c_long,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mrand48_r(
            __buffer: *mut root::drand48_data,
            __result: *mut ::core::ffi::c_long,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn jrand48_r(
            __xsubi: *mut ::core::ffi::c_ushort,
            __buffer: *mut root::drand48_data,
            __result: *mut ::core::ffi::c_long,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn srand48_r(
            __seedval: ::core::ffi::c_long,
            __buffer: *mut root::drand48_data,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn seed48_r(
            __seed16v: *mut ::core::ffi::c_ushort,
            __buffer: *mut root::drand48_data,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn lcong48_r(
            __param: *mut ::core::ffi::c_ushort,
            __buffer: *mut root::drand48_data,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn arc4random() -> root::__uint32_t;
    }
    unsafe extern "C" {
        pub fn arc4random_buf(__buf: *mut ::core::ffi::c_void, __size: usize);
    }
    unsafe extern "C" {
        pub fn arc4random_uniform(__upper_bound: root::__uint32_t) -> root::__uint32_t;
    }
    unsafe extern "C" {
        pub fn malloc(__size: usize) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn calloc(__nmemb: usize, __size: usize) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn realloc(__ptr: *mut ::core::ffi::c_void, __size: usize) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn free(__ptr: *mut ::core::ffi::c_void);
    }
    unsafe extern "C" {
        pub fn reallocarray(
            __ptr: *mut ::core::ffi::c_void,
            __nmemb: usize,
            __size: usize,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn alloca(__size: usize) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn valloc(__size: usize) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn posix_memalign(
            __memptr: *mut *mut ::core::ffi::c_void,
            __alignment: usize,
            __size: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn abort() -> !;
    }
    unsafe extern "C" {
        pub fn atexit(__func: ::core::option::Option<unsafe extern "C" fn()>)
            -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn at_quick_exit(
            __func: ::core::option::Option<unsafe extern "C" fn()>,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn on_exit(
            __func: ::core::option::Option<
                unsafe extern "C" fn(__status: ::core::ffi::c_int, __arg: *mut ::core::ffi::c_void),
            >,
            __arg: *mut ::core::ffi::c_void,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn exit(__status: ::core::ffi::c_int) -> !;
    }
    unsafe extern "C" {
        pub fn quick_exit(__status: ::core::ffi::c_int) -> !;
    }
    unsafe extern "C" {
        pub fn _Exit(__status: ::core::ffi::c_int) -> !;
    }
    unsafe extern "C" {
        pub fn getenv(__name: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn secure_getenv(__name: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn putenv(__string: *mut ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setenv(
            __name: *const ::core::ffi::c_char,
            __value: *const ::core::ffi::c_char,
            __replace: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn unsetenv(__name: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn clearenv() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mktemp(__template: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn mkstemp(__template: *mut ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mkstemp64(__template: *mut ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mkstemps(
            __template: *mut ::core::ffi::c_char,
            __suffixlen: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mkstemps64(
            __template: *mut ::core::ffi::c_char,
            __suffixlen: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mkdtemp(__template: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn mkostemp(
            __template: *mut ::core::ffi::c_char,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mkostemp64(
            __template: *mut ::core::ffi::c_char,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mkostemps(
            __template: *mut ::core::ffi::c_char,
            __suffixlen: ::core::ffi::c_int,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mkostemps64(
            __template: *mut ::core::ffi::c_char,
            __suffixlen: ::core::ffi::c_int,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn system(__command: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn canonicalize_file_name(
            __name: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn realpath(
            __name: *const ::core::ffi::c_char,
            __resolved: *mut ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    pub type __compar_fn_t = ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::core::ffi::c_void,
            arg2: *const ::core::ffi::c_void,
        ) -> ::core::ffi::c_int,
    >;
    pub type comparison_fn_t = root::__compar_fn_t;
    pub type __compar_d_fn_t = ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::core::ffi::c_void,
            arg2: *const ::core::ffi::c_void,
            arg3: *mut ::core::ffi::c_void,
        ) -> ::core::ffi::c_int,
    >;
    unsafe extern "C" {
        pub fn bsearch(
            __key: *const ::core::ffi::c_void,
            __base: *const ::core::ffi::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: root::__compar_fn_t,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn qsort(
            __base: *mut ::core::ffi::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: root::__compar_fn_t,
        );
    }
    unsafe extern "C" {
        pub fn qsort_r(
            __base: *mut ::core::ffi::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: root::__compar_d_fn_t,
            __arg: *mut ::core::ffi::c_void,
        );
    }
    unsafe extern "C" {
        pub fn abs(__x: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn labs(__x: ::core::ffi::c_long) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn llabs(__x: ::core::ffi::c_longlong) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn div(__numer: ::core::ffi::c_int, __denom: ::core::ffi::c_int) -> root::div_t;
    }
    unsafe extern "C" {
        pub fn ldiv(__numer: ::core::ffi::c_long, __denom: ::core::ffi::c_long) -> root::ldiv_t;
    }
    unsafe extern "C" {
        pub fn lldiv(
            __numer: ::core::ffi::c_longlong,
            __denom: ::core::ffi::c_longlong,
        ) -> root::lldiv_t;
    }
    unsafe extern "C" {
        pub fn ecvt(
            __value: f64,
            __ndigit: ::core::ffi::c_int,
            __decpt: *mut ::core::ffi::c_int,
            __sign: *mut ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn fcvt(
            __value: f64,
            __ndigit: ::core::ffi::c_int,
            __decpt: *mut ::core::ffi::c_int,
            __sign: *mut ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn gcvt(
            __value: f64,
            __ndigit: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn qecvt(
            __value: u128,
            __ndigit: ::core::ffi::c_int,
            __decpt: *mut ::core::ffi::c_int,
            __sign: *mut ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn qfcvt(
            __value: u128,
            __ndigit: ::core::ffi::c_int,
            __decpt: *mut ::core::ffi::c_int,
            __sign: *mut ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn qgcvt(
            __value: u128,
            __ndigit: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn ecvt_r(
            __value: f64,
            __ndigit: ::core::ffi::c_int,
            __decpt: *mut ::core::ffi::c_int,
            __sign: *mut ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __len: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fcvt_r(
            __value: f64,
            __ndigit: ::core::ffi::c_int,
            __decpt: *mut ::core::ffi::c_int,
            __sign: *mut ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __len: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn qecvt_r(
            __value: u128,
            __ndigit: ::core::ffi::c_int,
            __decpt: *mut ::core::ffi::c_int,
            __sign: *mut ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __len: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn qfcvt_r(
            __value: u128,
            __ndigit: ::core::ffi::c_int,
            __decpt: *mut ::core::ffi::c_int,
            __sign: *mut ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __len: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mblen(__s: *const ::core::ffi::c_char, __n: usize) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mbtowc(
            __pwc: *mut u32,
            __s: *const ::core::ffi::c_char,
            __n: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn wctomb(__s: *mut ::core::ffi::c_char, __wchar: u32) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mbstowcs(__pwcs: *mut u32, __s: *const ::core::ffi::c_char, __n: usize) -> usize;
    }
    unsafe extern "C" {
        pub fn wcstombs(__s: *mut ::core::ffi::c_char, __pwcs: *const u32, __n: usize) -> usize;
    }
    unsafe extern "C" {
        pub fn rpmatch(__response: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getsubopt(
            __optionp: *mut *mut ::core::ffi::c_char,
            __tokens: *const *mut ::core::ffi::c_char,
            __valuep: *mut *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn posix_openpt(__oflag: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn grantpt(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn unlockpt(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ptsname(__fd: ::core::ffi::c_int) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn ptsname_r(
            __fd: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __buflen: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getpt() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getloadavg(__loadavg: *mut f64, __nelem: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    pub mod ke {
        #[allow(unused_imports)]
        use self::super::super::root;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct cast_to_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct ThreadLocal {
            pub allocated_: ::core::ffi::c_int,
            pub key_: root::pthread_key_t,
        }
    }
    pub type __gnuc_va_list = root::__builtin_va_list;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __mbstate_t {
        pub __count: ::core::ffi::c_int,
        pub __value: root::__mbstate_t__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __mbstate_t__bindgen_ty_1 {
        pub __wch: ::core::ffi::c_uint,
        pub __wchb: [::core::ffi::c_char; 4usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __mbstate_t__bindgen_ty_1"]
            [::core::mem::size_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
        ["Alignment of __mbstate_t__bindgen_ty_1"]
            [::core::mem::align_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
        ["Offset of field: __mbstate_t__bindgen_ty_1::__wch"]
            [::core::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wch) - 0usize];
        ["Offset of field: __mbstate_t__bindgen_ty_1::__wchb"]
            [::core::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wchb) - 0usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __mbstate_t"][::core::mem::size_of::<__mbstate_t>() - 8usize];
        ["Alignment of __mbstate_t"][::core::mem::align_of::<__mbstate_t>() - 4usize];
        ["Offset of field: __mbstate_t::__count"]
            [::core::mem::offset_of!(__mbstate_t, __count) - 0usize];
        ["Offset of field: __mbstate_t::__value"]
            [::core::mem::offset_of!(__mbstate_t, __value) - 4usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _G_fpos_t {
        pub __pos: root::__off_t,
        pub __state: root::__mbstate_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of _G_fpos_t"][::core::mem::size_of::<_G_fpos_t>() - 16usize];
        ["Alignment of _G_fpos_t"][::core::mem::align_of::<_G_fpos_t>() - 8usize];
        ["Offset of field: _G_fpos_t::__pos"][::core::mem::offset_of!(_G_fpos_t, __pos) - 0usize];
        ["Offset of field: _G_fpos_t::__state"]
            [::core::mem::offset_of!(_G_fpos_t, __state) - 8usize];
    };
    pub type __fpos_t = root::_G_fpos_t;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _G_fpos64_t {
        pub __pos: root::__off64_t,
        pub __state: root::__mbstate_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of _G_fpos64_t"][::core::mem::size_of::<_G_fpos64_t>() - 16usize];
        ["Alignment of _G_fpos64_t"][::core::mem::align_of::<_G_fpos64_t>() - 8usize];
        ["Offset of field: _G_fpos64_t::__pos"]
            [::core::mem::offset_of!(_G_fpos64_t, __pos) - 0usize];
        ["Offset of field: _G_fpos64_t::__state"]
            [::core::mem::offset_of!(_G_fpos64_t, __state) - 8usize];
    };
    pub type __fpos64_t = root::_G_fpos64_t;
    pub type __FILE = root::_IO_FILE;
    pub type FILE = root::_IO_FILE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_marker {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_codecvt {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_wide_data {
        _unused: [u8; 0],
    }
    pub type _IO_lock_t = ::core::ffi::c_void;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_FILE {
        pub _flags: ::core::ffi::c_int,
        pub _IO_read_ptr: *mut ::core::ffi::c_char,
        pub _IO_read_end: *mut ::core::ffi::c_char,
        pub _IO_read_base: *mut ::core::ffi::c_char,
        pub _IO_write_base: *mut ::core::ffi::c_char,
        pub _IO_write_ptr: *mut ::core::ffi::c_char,
        pub _IO_write_end: *mut ::core::ffi::c_char,
        pub _IO_buf_base: *mut ::core::ffi::c_char,
        pub _IO_buf_end: *mut ::core::ffi::c_char,
        pub _IO_save_base: *mut ::core::ffi::c_char,
        pub _IO_backup_base: *mut ::core::ffi::c_char,
        pub _IO_save_end: *mut ::core::ffi::c_char,
        pub _markers: *mut root::_IO_marker,
        pub _chain: *mut root::_IO_FILE,
        pub _fileno: ::core::ffi::c_int,
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 3usize]>,
        pub _short_backupbuf: [::core::ffi::c_char; 1usize],
        pub _old_offset: root::__off_t,
        pub _cur_column: ::core::ffi::c_ushort,
        pub _vtable_offset: ::core::ffi::c_schar,
        pub _shortbuf: [::core::ffi::c_char; 1usize],
        pub _lock: *mut root::_IO_lock_t,
        pub _offset: root::__off64_t,
        pub _codecvt: *mut root::_IO_codecvt,
        pub _wide_data: *mut root::_IO_wide_data,
        pub _freeres_list: *mut root::_IO_FILE,
        pub _freeres_buf: *mut ::core::ffi::c_void,
        pub _prevchain: *mut *mut root::_IO_FILE,
        pub _mode: ::core::ffi::c_int,
        pub _unused2: [::core::ffi::c_char; 20usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of _IO_FILE"][::core::mem::size_of::<_IO_FILE>() - 216usize];
        ["Alignment of _IO_FILE"][::core::mem::align_of::<_IO_FILE>() - 8usize];
        ["Offset of field: _IO_FILE::_flags"][::core::mem::offset_of!(_IO_FILE, _flags) - 0usize];
        ["Offset of field: _IO_FILE::_IO_read_ptr"]
            [::core::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
        ["Offset of field: _IO_FILE::_IO_read_end"]
            [::core::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
        ["Offset of field: _IO_FILE::_IO_read_base"]
            [::core::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
        ["Offset of field: _IO_FILE::_IO_write_base"]
            [::core::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
        ["Offset of field: _IO_FILE::_IO_write_ptr"]
            [::core::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
        ["Offset of field: _IO_FILE::_IO_write_end"]
            [::core::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
        ["Offset of field: _IO_FILE::_IO_buf_base"]
            [::core::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
        ["Offset of field: _IO_FILE::_IO_buf_end"]
            [::core::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
        ["Offset of field: _IO_FILE::_IO_save_base"]
            [::core::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
        ["Offset of field: _IO_FILE::_IO_backup_base"]
            [::core::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
        ["Offset of field: _IO_FILE::_IO_save_end"]
            [::core::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
        ["Offset of field: _IO_FILE::_markers"]
            [::core::mem::offset_of!(_IO_FILE, _markers) - 96usize];
        ["Offset of field: _IO_FILE::_chain"][::core::mem::offset_of!(_IO_FILE, _chain) - 104usize];
        ["Offset of field: _IO_FILE::_fileno"]
            [::core::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
        ["Offset of field: _IO_FILE::_short_backupbuf"]
            [::core::mem::offset_of!(_IO_FILE, _short_backupbuf) - 119usize];
        ["Offset of field: _IO_FILE::_old_offset"]
            [::core::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
        ["Offset of field: _IO_FILE::_cur_column"]
            [::core::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
        ["Offset of field: _IO_FILE::_vtable_offset"]
            [::core::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
        ["Offset of field: _IO_FILE::_shortbuf"]
            [::core::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
        ["Offset of field: _IO_FILE::_lock"][::core::mem::offset_of!(_IO_FILE, _lock) - 136usize];
        ["Offset of field: _IO_FILE::_offset"]
            [::core::mem::offset_of!(_IO_FILE, _offset) - 144usize];
        ["Offset of field: _IO_FILE::_codecvt"]
            [::core::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
        ["Offset of field: _IO_FILE::_wide_data"]
            [::core::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
        ["Offset of field: _IO_FILE::_freeres_list"]
            [::core::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
        ["Offset of field: _IO_FILE::_freeres_buf"]
            [::core::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
        ["Offset of field: _IO_FILE::_prevchain"]
            [::core::mem::offset_of!(_IO_FILE, _prevchain) - 184usize];
        ["Offset of field: _IO_FILE::_mode"][::core::mem::offset_of!(_IO_FILE, _mode) - 192usize];
        ["Offset of field: _IO_FILE::_unused2"]
            [::core::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
    };
    impl _IO_FILE {
        #[inline]
        pub fn _flags2(&self) -> ::core::ffi::c_int {
            unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
        }
        #[inline]
        pub fn set__flags2(&mut self, val: ::core::ffi::c_int) {
            unsafe {
                let val: u32 = ::core::mem::transmute(val);
                self._bitfield_1.set(0usize, 24u8, val as u64)
            }
        }
        #[inline]
        pub unsafe fn _flags2_raw(this: *const Self) -> ::core::ffi::c_int {
            unsafe {
                ::core::mem::transmute(<root::__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                    ::core::ptr::addr_of!((*this)._bitfield_1),
                    0usize,
                    24u8,
                ) as u32)
            }
        }
        #[inline]
        pub unsafe fn set__flags2_raw(this: *mut Self, val: ::core::ffi::c_int) {
            unsafe {
                let val: u32 = ::core::mem::transmute(val);
                <root::__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                    ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                    0usize,
                    24u8,
                    val as u64,
                )
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            _flags2: ::core::ffi::c_int,
        ) -> root::__BindgenBitfieldUnit<[u8; 3usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 3usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 24u8, {
                let _flags2: u32 = unsafe { ::core::mem::transmute(_flags2) };
                _flags2 as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type cookie_read_function_t = ::core::option::Option<
        unsafe extern "C" fn(
            __cookie: *mut ::core::ffi::c_void,
            __buf: *mut ::core::ffi::c_char,
            __nbytes: usize,
        ) -> root::__ssize_t,
    >;
    pub type cookie_write_function_t = ::core::option::Option<
        unsafe extern "C" fn(
            __cookie: *mut ::core::ffi::c_void,
            __buf: *const ::core::ffi::c_char,
            __nbytes: usize,
        ) -> root::__ssize_t,
    >;
    pub type cookie_seek_function_t = ::core::option::Option<
        unsafe extern "C" fn(
            __cookie: *mut ::core::ffi::c_void,
            __pos: *mut root::__off64_t,
            __w: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >;
    pub type cookie_close_function_t = ::core::option::Option<
        unsafe extern "C" fn(__cookie: *mut ::core::ffi::c_void) -> ::core::ffi::c_int,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_cookie_io_functions_t {
        pub read: root::cookie_read_function_t,
        pub write: root::cookie_write_function_t,
        pub seek: root::cookie_seek_function_t,
        pub close: root::cookie_close_function_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of _IO_cookie_io_functions_t"]
            [::core::mem::size_of::<_IO_cookie_io_functions_t>() - 32usize];
        ["Alignment of _IO_cookie_io_functions_t"]
            [::core::mem::align_of::<_IO_cookie_io_functions_t>() - 8usize];
        ["Offset of field: _IO_cookie_io_functions_t::read"]
            [::core::mem::offset_of!(_IO_cookie_io_functions_t, read) - 0usize];
        ["Offset of field: _IO_cookie_io_functions_t::write"]
            [::core::mem::offset_of!(_IO_cookie_io_functions_t, write) - 8usize];
        ["Offset of field: _IO_cookie_io_functions_t::seek"]
            [::core::mem::offset_of!(_IO_cookie_io_functions_t, seek) - 16usize];
        ["Offset of field: _IO_cookie_io_functions_t::close"]
            [::core::mem::offset_of!(_IO_cookie_io_functions_t, close) - 24usize];
    };
    pub type cookie_io_functions_t = root::_IO_cookie_io_functions_t;
    pub type va_list = root::__gnuc_va_list;
    pub type fpos_t = root::__fpos_t;
    pub type fpos64_t = root::__fpos64_t;
    unsafe extern "C" {
        pub static mut stdin: *mut root::FILE;
    }
    unsafe extern "C" {
        pub static mut stdout: *mut root::FILE;
    }
    unsafe extern "C" {
        pub static mut stderr: *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn remove(__filename: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn rename(
            __old: *const ::core::ffi::c_char,
            __new: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn renameat(
            __oldfd: ::core::ffi::c_int,
            __old: *const ::core::ffi::c_char,
            __newfd: ::core::ffi::c_int,
            __new: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn renameat2(
            __oldfd: ::core::ffi::c_int,
            __old: *const ::core::ffi::c_char,
            __newfd: ::core::ffi::c_int,
            __new: *const ::core::ffi::c_char,
            __flags: ::core::ffi::c_uint,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fclose(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn tmpfile() -> *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn tmpfile64() -> *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn tmpnam(arg1: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn tmpnam_r(__s: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn tempnam(
            __dir: *const ::core::ffi::c_char,
            __pfx: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn fflush(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fflush_unlocked(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fcloseall() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fopen(
            __filename: *const ::core::ffi::c_char,
            __modes: *const ::core::ffi::c_char,
        ) -> *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn freopen(
            __filename: *const ::core::ffi::c_char,
            __modes: *const ::core::ffi::c_char,
            __stream: *mut root::FILE,
        ) -> *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn fopen64(
            __filename: *const ::core::ffi::c_char,
            __modes: *const ::core::ffi::c_char,
        ) -> *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn freopen64(
            __filename: *const ::core::ffi::c_char,
            __modes: *const ::core::ffi::c_char,
            __stream: *mut root::FILE,
        ) -> *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn fdopen(
            __fd: ::core::ffi::c_int,
            __modes: *const ::core::ffi::c_char,
        ) -> *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn fopencookie(
            __magic_cookie: *mut ::core::ffi::c_void,
            __modes: *const ::core::ffi::c_char,
            __io_funcs: root::cookie_io_functions_t,
        ) -> *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn fmemopen(
            __s: *mut ::core::ffi::c_void,
            __len: usize,
            __modes: *const ::core::ffi::c_char,
        ) -> *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn open_memstream(
            __bufloc: *mut *mut ::core::ffi::c_char,
            __sizeloc: *mut usize,
        ) -> *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn setbuf(__stream: *mut root::FILE, __buf: *mut ::core::ffi::c_char);
    }
    unsafe extern "C" {
        pub fn setvbuf(
            __stream: *mut root::FILE,
            __buf: *mut ::core::ffi::c_char,
            __modes: ::core::ffi::c_int,
            __n: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setbuffer(__stream: *mut root::FILE, __buf: *mut ::core::ffi::c_char, __size: usize);
    }
    unsafe extern "C" {
        pub fn setlinebuf(__stream: *mut root::FILE);
    }
    unsafe extern "C" {
        pub fn fprintf(
            __stream: *mut root::FILE,
            __format: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn printf(__format: *const ::core::ffi::c_char, ...) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sprintf(
            __s: *mut ::core::ffi::c_char,
            __format: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vfprintf(
            __s: *mut root::FILE,
            __format: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vprintf(
            __format: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vsprintf(
            __s: *mut ::core::ffi::c_char,
            __format: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn snprintf(
            __s: *mut ::core::ffi::c_char,
            __maxlen: usize,
            __format: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vsnprintf(
            __s: *mut ::core::ffi::c_char,
            __maxlen: usize,
            __format: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vasprintf(
            __ptr: *mut *mut ::core::ffi::c_char,
            __f: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __asprintf(
            __ptr: *mut *mut ::core::ffi::c_char,
            __fmt: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn asprintf(
            __ptr: *mut *mut ::core::ffi::c_char,
            __fmt: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vdprintf(
            __fd: ::core::ffi::c_int,
            __fmt: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn dprintf(
            __fd: ::core::ffi::c_int,
            __fmt: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fscanf(
            __stream: *mut root::FILE,
            __format: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn scanf(__format: *const ::core::ffi::c_char, ...) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sscanf(
            __s: *const ::core::ffi::c_char,
            __format: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_fscanf"]
        pub fn fscanf1(
            __stream: *mut root::FILE,
            __format: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_scanf"]
        pub fn scanf1(__format: *const ::core::ffi::c_char, ...) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_sscanf"]
        pub fn sscanf1(
            __s: *const ::core::ffi::c_char,
            __format: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vfscanf(
            __s: *mut root::FILE,
            __format: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vscanf(
            __format: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vsscanf(
            __s: *const ::core::ffi::c_char,
            __format: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_vfscanf"]
        pub fn vfscanf1(
            __s: *mut root::FILE,
            __format: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_vscanf"]
        pub fn vscanf1(
            __format: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_vsscanf"]
        pub fn vsscanf1(
            __s: *const ::core::ffi::c_char,
            __format: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fgetc(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getc(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getchar() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getc_unlocked(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getchar_unlocked() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fgetc_unlocked(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fputc(__c: ::core::ffi::c_int, __stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn putc(__c: ::core::ffi::c_int, __stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn putchar(__c: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fputc_unlocked(
            __c: ::core::ffi::c_int,
            __stream: *mut root::FILE,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn putc_unlocked(
            __c: ::core::ffi::c_int,
            __stream: *mut root::FILE,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn putchar_unlocked(__c: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getw(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn putw(__w: ::core::ffi::c_int, __stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fgets(
            __s: *mut ::core::ffi::c_char,
            __n: ::core::ffi::c_int,
            __stream: *mut root::FILE,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn fgets_unlocked(
            __s: *mut ::core::ffi::c_char,
            __n: ::core::ffi::c_int,
            __stream: *mut root::FILE,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn __getdelim(
            __lineptr: *mut *mut ::core::ffi::c_char,
            __n: *mut usize,
            __delimiter: ::core::ffi::c_int,
            __stream: *mut root::FILE,
        ) -> root::__ssize_t;
    }
    unsafe extern "C" {
        pub fn getdelim(
            __lineptr: *mut *mut ::core::ffi::c_char,
            __n: *mut usize,
            __delimiter: ::core::ffi::c_int,
            __stream: *mut root::FILE,
        ) -> root::__ssize_t;
    }
    unsafe extern "C" {
        pub fn getline(
            __lineptr: *mut *mut ::core::ffi::c_char,
            __n: *mut usize,
            __stream: *mut root::FILE,
        ) -> root::__ssize_t;
    }
    unsafe extern "C" {
        pub fn fputs(
            __s: *const ::core::ffi::c_char,
            __stream: *mut root::FILE,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn puts(__s: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ungetc(__c: ::core::ffi::c_int, __stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fread(
            __ptr: *mut ::core::ffi::c_void,
            __size: usize,
            __n: usize,
            __stream: *mut root::FILE,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn fwrite(
            __ptr: *const ::core::ffi::c_void,
            __size: usize,
            __n: usize,
            __s: *mut root::FILE,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn fputs_unlocked(
            __s: *const ::core::ffi::c_char,
            __stream: *mut root::FILE,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fread_unlocked(
            __ptr: *mut ::core::ffi::c_void,
            __size: usize,
            __n: usize,
            __stream: *mut root::FILE,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn fwrite_unlocked(
            __ptr: *const ::core::ffi::c_void,
            __size: usize,
            __n: usize,
            __stream: *mut root::FILE,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn fseek(
            __stream: *mut root::FILE,
            __off: ::core::ffi::c_long,
            __whence: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ftell(__stream: *mut root::FILE) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn rewind(__stream: *mut root::FILE);
    }
    unsafe extern "C" {
        pub fn fseeko(
            __stream: *mut root::FILE,
            __off: root::__off_t,
            __whence: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ftello(__stream: *mut root::FILE) -> root::__off_t;
    }
    unsafe extern "C" {
        pub fn fgetpos(__stream: *mut root::FILE, __pos: *mut root::fpos_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fsetpos(__stream: *mut root::FILE, __pos: *const root::fpos_t)
            -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fseeko64(
            __stream: *mut root::FILE,
            __off: root::__off64_t,
            __whence: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ftello64(__stream: *mut root::FILE) -> root::__off64_t;
    }
    unsafe extern "C" {
        pub fn fgetpos64(
            __stream: *mut root::FILE,
            __pos: *mut root::fpos64_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fsetpos64(
            __stream: *mut root::FILE,
            __pos: *const root::fpos64_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn clearerr(__stream: *mut root::FILE);
    }
    unsafe extern "C" {
        pub fn feof(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ferror(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn clearerr_unlocked(__stream: *mut root::FILE);
    }
    unsafe extern "C" {
        pub fn feof_unlocked(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ferror_unlocked(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn perror(__s: *const ::core::ffi::c_char);
    }
    unsafe extern "C" {
        pub fn fileno(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fileno_unlocked(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pclose(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn popen(
            __command: *const ::core::ffi::c_char,
            __modes: *const ::core::ffi::c_char,
        ) -> *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn ctermid(__s: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn cuserid(__s: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct obstack {
        _unused: [u8; 0],
    }
    unsafe extern "C" {
        pub fn obstack_printf(
            __obstack: *mut root::obstack,
            __format: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn obstack_vprintf(
            __obstack: *mut root::obstack,
            __format: *const ::core::ffi::c_char,
            __args: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn flockfile(__stream: *mut root::FILE);
    }
    unsafe extern "C" {
        pub fn ftrylockfile(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn funlockfile(__stream: *mut root::FILE);
    }
    unsafe extern "C" {
        pub fn __uflow(arg1: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __overflow(arg1: *mut root::FILE, arg2: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    pub type __s8 = ::core::ffi::c_schar;
    pub type __u8 = ::core::ffi::c_uchar;
    pub type __s16 = ::core::ffi::c_short;
    pub type __u16 = ::core::ffi::c_ushort;
    pub type __s32 = ::core::ffi::c_int;
    pub type __u32 = ::core::ffi::c_uint;
    pub type __s64 = ::core::ffi::c_longlong;
    pub type __u64 = ::core::ffi::c_ulonglong;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __kernel_fd_set {
        pub fds_bits: [::core::ffi::c_ulong; 16usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __kernel_fd_set"][::core::mem::size_of::<__kernel_fd_set>() - 128usize];
        ["Alignment of __kernel_fd_set"][::core::mem::align_of::<__kernel_fd_set>() - 8usize];
        ["Offset of field: __kernel_fd_set::fds_bits"]
            [::core::mem::offset_of!(__kernel_fd_set, fds_bits) - 0usize];
    };
    pub type __kernel_sighandler_t =
        ::core::option::Option<unsafe extern "C" fn(arg1: ::core::ffi::c_int)>;
    pub type __kernel_key_t = ::core::ffi::c_int;
    pub type __kernel_mqd_t = ::core::ffi::c_int;
    pub type __kernel_old_uid_t = ::core::ffi::c_ushort;
    pub type __kernel_old_gid_t = ::core::ffi::c_ushort;
    pub type __kernel_old_dev_t = ::core::ffi::c_ulong;
    pub type __kernel_long_t = ::core::ffi::c_long;
    pub type __kernel_ulong_t = ::core::ffi::c_ulong;
    pub type __kernel_ino_t = root::__kernel_ulong_t;
    pub type __kernel_mode_t = ::core::ffi::c_uint;
    pub type __kernel_pid_t = ::core::ffi::c_int;
    pub type __kernel_ipc_pid_t = ::core::ffi::c_int;
    pub type __kernel_uid_t = ::core::ffi::c_uint;
    pub type __kernel_gid_t = ::core::ffi::c_uint;
    pub type __kernel_suseconds_t = root::__kernel_long_t;
    pub type __kernel_daddr_t = ::core::ffi::c_int;
    pub type __kernel_uid32_t = ::core::ffi::c_uint;
    pub type __kernel_gid32_t = ::core::ffi::c_uint;
    pub type __kernel_size_t = root::__kernel_ulong_t;
    pub type __kernel_ssize_t = root::__kernel_long_t;
    pub type __kernel_ptrdiff_t = root::__kernel_long_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __kernel_fsid_t {
        pub val: [::core::ffi::c_int; 2usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __kernel_fsid_t"][::core::mem::size_of::<__kernel_fsid_t>() - 8usize];
        ["Alignment of __kernel_fsid_t"][::core::mem::align_of::<__kernel_fsid_t>() - 4usize];
        ["Offset of field: __kernel_fsid_t::val"]
            [::core::mem::offset_of!(__kernel_fsid_t, val) - 0usize];
    };
    pub type __kernel_off_t = root::__kernel_long_t;
    pub type __kernel_loff_t = ::core::ffi::c_longlong;
    pub type __kernel_old_time_t = root::__kernel_long_t;
    pub type __kernel_time_t = root::__kernel_long_t;
    pub type __kernel_time64_t = ::core::ffi::c_longlong;
    pub type __kernel_clock_t = root::__kernel_long_t;
    pub type __kernel_timer_t = ::core::ffi::c_int;
    pub type __kernel_clockid_t = ::core::ffi::c_int;
    pub type __kernel_caddr_t = *mut ::core::ffi::c_char;
    pub type __kernel_uid16_t = ::core::ffi::c_ushort;
    pub type __kernel_gid16_t = ::core::ffi::c_ushort;
    pub type __s128 = i128;
    pub type __u128 = u128;
    pub type __le16 = root::__u16;
    pub type __be16 = root::__u16;
    pub type __le32 = root::__u32;
    pub type __be32 = root::__u32;
    pub type __le64 = root::__u64;
    pub type __be64 = root::__u64;
    pub type __sum16 = root::__u16;
    pub type __wsum = root::__u32;
    pub type __poll_t = ::core::ffi::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct sched_attr {
        pub size: root::__u32,
        pub sched_policy: root::__u32,
        pub sched_flags: root::__u64,
        pub sched_nice: root::__s32,
        pub sched_priority: root::__u32,
        pub sched_runtime: root::__u64,
        pub sched_deadline: root::__u64,
        pub sched_period: root::__u64,
        pub sched_util_min: root::__u32,
        pub sched_util_max: root::__u32,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of sched_attr"][::core::mem::size_of::<sched_attr>() - 56usize];
        ["Alignment of sched_attr"][::core::mem::align_of::<sched_attr>() - 8usize];
        ["Offset of field: sched_attr::size"][::core::mem::offset_of!(sched_attr, size) - 0usize];
        ["Offset of field: sched_attr::sched_policy"]
            [::core::mem::offset_of!(sched_attr, sched_policy) - 4usize];
        ["Offset of field: sched_attr::sched_flags"]
            [::core::mem::offset_of!(sched_attr, sched_flags) - 8usize];
        ["Offset of field: sched_attr::sched_nice"]
            [::core::mem::offset_of!(sched_attr, sched_nice) - 16usize];
        ["Offset of field: sched_attr::sched_priority"]
            [::core::mem::offset_of!(sched_attr, sched_priority) - 20usize];
        ["Offset of field: sched_attr::sched_runtime"]
            [::core::mem::offset_of!(sched_attr, sched_runtime) - 24usize];
        ["Offset of field: sched_attr::sched_deadline"]
            [::core::mem::offset_of!(sched_attr, sched_deadline) - 32usize];
        ["Offset of field: sched_attr::sched_period"]
            [::core::mem::offset_of!(sched_attr, sched_period) - 40usize];
        ["Offset of field: sched_attr::sched_util_min"]
            [::core::mem::offset_of!(sched_attr, sched_util_min) - 48usize];
        ["Offset of field: sched_attr::sched_util_max"]
            [::core::mem::offset_of!(sched_attr, sched_util_max) - 52usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct sched_param {
        pub sched_priority: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of sched_param"][::core::mem::size_of::<sched_param>() - 4usize];
        ["Alignment of sched_param"][::core::mem::align_of::<sched_param>() - 4usize];
        ["Offset of field: sched_param::sched_priority"]
            [::core::mem::offset_of!(sched_param, sched_priority) - 0usize];
    };
    unsafe extern "C" {
        pub fn clone(
            __fn: ::core::option::Option<
                unsafe extern "C" fn(__arg: *mut ::core::ffi::c_void) -> ::core::ffi::c_int,
            >,
            __child_stack: *mut ::core::ffi::c_void,
            __flags: ::core::ffi::c_int,
            __arg: *mut ::core::ffi::c_void,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn unshare(__flags: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sched_getcpu() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getcpu(
            arg1: *mut ::core::ffi::c_uint,
            arg2: *mut ::core::ffi::c_uint,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setns(__fd: ::core::ffi::c_int, __nstype: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sched_setattr(
            tid: root::pid_t,
            attr: *mut root::sched_attr,
            flags: ::core::ffi::c_uint,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sched_getattr(
            tid: root::pid_t,
            attr: *mut root::sched_attr,
            size: ::core::ffi::c_uint,
            flags: ::core::ffi::c_uint,
        ) -> ::core::ffi::c_int;
    }
    pub type __cpu_mask = ::core::ffi::c_ulong;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct cpu_set_t {
        pub __bits: [root::__cpu_mask; 16usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of cpu_set_t"][::core::mem::size_of::<cpu_set_t>() - 128usize];
        ["Alignment of cpu_set_t"][::core::mem::align_of::<cpu_set_t>() - 8usize];
        ["Offset of field: cpu_set_t::__bits"][::core::mem::offset_of!(cpu_set_t, __bits) - 0usize];
    };
    unsafe extern "C" {
        pub fn __sched_cpucount(
            __setsize: usize,
            __setp: *const root::cpu_set_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __sched_cpualloc(__count: usize) -> *mut root::cpu_set_t;
    }
    unsafe extern "C" {
        pub fn __sched_cpufree(__set: *mut root::cpu_set_t);
    }
    unsafe extern "C" {
        pub fn sched_setparam(
            __pid: root::__pid_t,
            __param: *const root::sched_param,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sched_getparam(
            __pid: root::__pid_t,
            __param: *mut root::sched_param,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sched_setscheduler(
            __pid: root::__pid_t,
            __policy: ::core::ffi::c_int,
            __param: *const root::sched_param,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sched_getscheduler(__pid: root::__pid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sched_yield() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sched_get_priority_max(__algorithm: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sched_get_priority_min(__algorithm: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sched_rr_get_interval(
            __pid: root::__pid_t,
            __t: *mut root::timespec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sched_setaffinity(
            __pid: root::__pid_t,
            __cpusetsize: usize,
            __cpuset: *const root::cpu_set_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sched_getaffinity(
            __pid: root::__pid_t,
            __cpusetsize: usize,
            __cpuset: *mut root::cpu_set_t,
        ) -> ::core::ffi::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct timex {
        pub modes: ::core::ffi::c_uint,
        pub offset: root::__syscall_slong_t,
        pub freq: root::__syscall_slong_t,
        pub maxerror: root::__syscall_slong_t,
        pub esterror: root::__syscall_slong_t,
        pub status: ::core::ffi::c_int,
        pub constant: root::__syscall_slong_t,
        pub precision: root::__syscall_slong_t,
        pub tolerance: root::__syscall_slong_t,
        pub time: root::timeval,
        pub tick: root::__syscall_slong_t,
        pub ppsfreq: root::__syscall_slong_t,
        pub jitter: root::__syscall_slong_t,
        pub shift: ::core::ffi::c_int,
        pub stabil: root::__syscall_slong_t,
        pub jitcnt: root::__syscall_slong_t,
        pub calcnt: root::__syscall_slong_t,
        pub errcnt: root::__syscall_slong_t,
        pub stbcnt: root::__syscall_slong_t,
        pub tai: ::core::ffi::c_int,
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 44usize]>,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of timex"][::core::mem::size_of::<timex>() - 208usize];
        ["Alignment of timex"][::core::mem::align_of::<timex>() - 8usize];
        ["Offset of field: timex::modes"][::core::mem::offset_of!(timex, modes) - 0usize];
        ["Offset of field: timex::offset"][::core::mem::offset_of!(timex, offset) - 8usize];
        ["Offset of field: timex::freq"][::core::mem::offset_of!(timex, freq) - 16usize];
        ["Offset of field: timex::maxerror"][::core::mem::offset_of!(timex, maxerror) - 24usize];
        ["Offset of field: timex::esterror"][::core::mem::offset_of!(timex, esterror) - 32usize];
        ["Offset of field: timex::status"][::core::mem::offset_of!(timex, status) - 40usize];
        ["Offset of field: timex::constant"][::core::mem::offset_of!(timex, constant) - 48usize];
        ["Offset of field: timex::precision"][::core::mem::offset_of!(timex, precision) - 56usize];
        ["Offset of field: timex::tolerance"][::core::mem::offset_of!(timex, tolerance) - 64usize];
        ["Offset of field: timex::time"][::core::mem::offset_of!(timex, time) - 72usize];
        ["Offset of field: timex::tick"][::core::mem::offset_of!(timex, tick) - 88usize];
        ["Offset of field: timex::ppsfreq"][::core::mem::offset_of!(timex, ppsfreq) - 96usize];
        ["Offset of field: timex::jitter"][::core::mem::offset_of!(timex, jitter) - 104usize];
        ["Offset of field: timex::shift"][::core::mem::offset_of!(timex, shift) - 112usize];
        ["Offset of field: timex::stabil"][::core::mem::offset_of!(timex, stabil) - 120usize];
        ["Offset of field: timex::jitcnt"][::core::mem::offset_of!(timex, jitcnt) - 128usize];
        ["Offset of field: timex::calcnt"][::core::mem::offset_of!(timex, calcnt) - 136usize];
        ["Offset of field: timex::errcnt"][::core::mem::offset_of!(timex, errcnt) - 144usize];
        ["Offset of field: timex::stbcnt"][::core::mem::offset_of!(timex, stbcnt) - 152usize];
        ["Offset of field: timex::tai"][::core::mem::offset_of!(timex, tai) - 160usize];
    };
    unsafe extern "C" {
        pub fn clock_adjtime(
            __clock_id: root::__clockid_t,
            __utx: *mut root::timex,
        ) -> ::core::ffi::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tm {
        pub tm_sec: ::core::ffi::c_int,
        pub tm_min: ::core::ffi::c_int,
        pub tm_hour: ::core::ffi::c_int,
        pub tm_mday: ::core::ffi::c_int,
        pub tm_mon: ::core::ffi::c_int,
        pub tm_year: ::core::ffi::c_int,
        pub tm_wday: ::core::ffi::c_int,
        pub tm_yday: ::core::ffi::c_int,
        pub tm_isdst: ::core::ffi::c_int,
        pub tm_gmtoff: ::core::ffi::c_long,
        pub tm_zone: *const ::core::ffi::c_char,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of tm"][::core::mem::size_of::<tm>() - 56usize];
        ["Alignment of tm"][::core::mem::align_of::<tm>() - 8usize];
        ["Offset of field: tm::tm_sec"][::core::mem::offset_of!(tm, tm_sec) - 0usize];
        ["Offset of field: tm::tm_min"][::core::mem::offset_of!(tm, tm_min) - 4usize];
        ["Offset of field: tm::tm_hour"][::core::mem::offset_of!(tm, tm_hour) - 8usize];
        ["Offset of field: tm::tm_mday"][::core::mem::offset_of!(tm, tm_mday) - 12usize];
        ["Offset of field: tm::tm_mon"][::core::mem::offset_of!(tm, tm_mon) - 16usize];
        ["Offset of field: tm::tm_year"][::core::mem::offset_of!(tm, tm_year) - 20usize];
        ["Offset of field: tm::tm_wday"][::core::mem::offset_of!(tm, tm_wday) - 24usize];
        ["Offset of field: tm::tm_yday"][::core::mem::offset_of!(tm, tm_yday) - 28usize];
        ["Offset of field: tm::tm_isdst"][::core::mem::offset_of!(tm, tm_isdst) - 32usize];
        ["Offset of field: tm::tm_gmtoff"][::core::mem::offset_of!(tm, tm_gmtoff) - 40usize];
        ["Offset of field: tm::tm_zone"][::core::mem::offset_of!(tm, tm_zone) - 48usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct itimerspec {
        pub it_interval: root::timespec,
        pub it_value: root::timespec,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of itimerspec"][::core::mem::size_of::<itimerspec>() - 32usize];
        ["Alignment of itimerspec"][::core::mem::align_of::<itimerspec>() - 8usize];
        ["Offset of field: itimerspec::it_interval"]
            [::core::mem::offset_of!(itimerspec, it_interval) - 0usize];
        ["Offset of field: itimerspec::it_value"]
            [::core::mem::offset_of!(itimerspec, it_value) - 16usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct sigevent {
        _unused: [u8; 0],
    }
    unsafe extern "C" {
        pub fn clock() -> root::clock_t;
    }
    unsafe extern "C" {
        pub fn time(__timer: *mut root::time_t) -> root::time_t;
    }
    unsafe extern "C" {
        pub fn difftime(__time1: root::time_t, __time0: root::time_t) -> f64;
    }
    unsafe extern "C" {
        pub fn mktime(__tp: *mut root::tm) -> root::time_t;
    }
    unsafe extern "C" {
        pub fn strftime(
            __s: *mut ::core::ffi::c_char,
            __maxsize: usize,
            __format: *const ::core::ffi::c_char,
            __tp: *const root::tm,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn strptime(
            __s: *const ::core::ffi::c_char,
            __fmt: *const ::core::ffi::c_char,
            __tp: *mut root::tm,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn strftime_l(
            __s: *mut ::core::ffi::c_char,
            __maxsize: usize,
            __format: *const ::core::ffi::c_char,
            __tp: *const root::tm,
            __loc: root::locale_t,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn strptime_l(
            __s: *const ::core::ffi::c_char,
            __fmt: *const ::core::ffi::c_char,
            __tp: *mut root::tm,
            __loc: root::locale_t,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn gmtime(__timer: *const root::time_t) -> *mut root::tm;
    }
    unsafe extern "C" {
        pub fn localtime(__timer: *const root::time_t) -> *mut root::tm;
    }
    unsafe extern "C" {
        pub fn gmtime_r(__timer: *const root::time_t, __tp: *mut root::tm) -> *mut root::tm;
    }
    unsafe extern "C" {
        pub fn localtime_r(__timer: *const root::time_t, __tp: *mut root::tm) -> *mut root::tm;
    }
    unsafe extern "C" {
        pub fn asctime(__tp: *const root::tm) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn ctime(__timer: *const root::time_t) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn asctime_r(
            __tp: *const root::tm,
            __buf: *mut ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn ctime_r(
            __timer: *const root::time_t,
            __buf: *mut ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub static mut __tzname: [*mut ::core::ffi::c_char; 2usize];
    }
    unsafe extern "C" {
        pub static mut __daylight: ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub static mut __timezone: ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub static mut tzname: [*mut ::core::ffi::c_char; 2usize];
    }
    unsafe extern "C" {
        pub fn tzset();
    }
    unsafe extern "C" {
        pub static mut daylight: ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub static mut timezone: ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn timegm(__tp: *mut root::tm) -> root::time_t;
    }
    unsafe extern "C" {
        pub fn timelocal(__tp: *mut root::tm) -> root::time_t;
    }
    unsafe extern "C" {
        pub fn dysize(__year: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn nanosleep(
            __requested_time: *const root::timespec,
            __remaining: *mut root::timespec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn clock_getres(
            __clock_id: root::clockid_t,
            __res: *mut root::timespec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn clock_gettime(
            __clock_id: root::clockid_t,
            __tp: *mut root::timespec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn clock_settime(
            __clock_id: root::clockid_t,
            __tp: *const root::timespec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn clock_nanosleep(
            __clock_id: root::clockid_t,
            __flags: ::core::ffi::c_int,
            __req: *const root::timespec,
            __rem: *mut root::timespec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn clock_getcpuclockid(
            __pid: root::pid_t,
            __clock_id: *mut root::clockid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn timer_create(
            __clock_id: root::clockid_t,
            __evp: *mut root::sigevent,
            __timerid: *mut root::timer_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn timer_delete(__timerid: root::timer_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn timer_settime(
            __timerid: root::timer_t,
            __flags: ::core::ffi::c_int,
            __value: *const root::itimerspec,
            __ovalue: *mut root::itimerspec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn timer_gettime(
            __timerid: root::timer_t,
            __value: *mut root::itimerspec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn timer_getoverrun(__timerid: root::timer_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn timespec_get(
            __ts: *mut root::timespec,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn timespec_getres(
            __ts: *mut root::timespec,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub static mut getdate_err: ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getdate(__string: *const ::core::ffi::c_char) -> *mut root::tm;
    }
    unsafe extern "C" {
        pub fn getdate_r(
            __string: *const ::core::ffi::c_char,
            __resbufp: *mut root::tm,
        ) -> ::core::ffi::c_int;
    }
    pub type __jmp_buf = [::core::ffi::c_long; 8usize];
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __jmp_buf_tag {
        pub __jmpbuf: root::__jmp_buf,
        pub __mask_was_saved: ::core::ffi::c_int,
        pub __saved_mask: root::__sigset_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __jmp_buf_tag"][::core::mem::size_of::<__jmp_buf_tag>() - 200usize];
        ["Alignment of __jmp_buf_tag"][::core::mem::align_of::<__jmp_buf_tag>() - 8usize];
        ["Offset of field: __jmp_buf_tag::__jmpbuf"]
            [::core::mem::offset_of!(__jmp_buf_tag, __jmpbuf) - 0usize];
        ["Offset of field: __jmp_buf_tag::__mask_was_saved"]
            [::core::mem::offset_of!(__jmp_buf_tag, __mask_was_saved) - 64usize];
        ["Offset of field: __jmp_buf_tag::__saved_mask"]
            [::core::mem::offset_of!(__jmp_buf_tag, __saved_mask) - 72usize];
    };
    pub const PTHREAD_CREATE_JOINABLE: root::_bindgen_ty_7 = 0;
    pub const PTHREAD_CREATE_DETACHED: root::_bindgen_ty_7 = 1;
    pub type _bindgen_ty_7 = ::core::ffi::c_uint;
    pub const PTHREAD_MUTEX_TIMED_NP: root::_bindgen_ty_8 = 0;
    pub const PTHREAD_MUTEX_RECURSIVE_NP: root::_bindgen_ty_8 = 1;
    pub const PTHREAD_MUTEX_ERRORCHECK_NP: root::_bindgen_ty_8 = 2;
    pub const PTHREAD_MUTEX_ADAPTIVE_NP: root::_bindgen_ty_8 = 3;
    pub const PTHREAD_MUTEX_NORMAL: root::_bindgen_ty_8 = 0;
    pub const PTHREAD_MUTEX_RECURSIVE: root::_bindgen_ty_8 = 1;
    pub const PTHREAD_MUTEX_ERRORCHECK: root::_bindgen_ty_8 = 2;
    pub const PTHREAD_MUTEX_DEFAULT: root::_bindgen_ty_8 = 0;
    pub const PTHREAD_MUTEX_FAST_NP: root::_bindgen_ty_8 = 0;
    pub type _bindgen_ty_8 = ::core::ffi::c_uint;
    pub const PTHREAD_MUTEX_STALLED: root::_bindgen_ty_9 = 0;
    pub const PTHREAD_MUTEX_STALLED_NP: root::_bindgen_ty_9 = 0;
    pub const PTHREAD_MUTEX_ROBUST: root::_bindgen_ty_9 = 1;
    pub const PTHREAD_MUTEX_ROBUST_NP: root::_bindgen_ty_9 = 1;
    pub type _bindgen_ty_9 = ::core::ffi::c_uint;
    pub const PTHREAD_PRIO_NONE: root::_bindgen_ty_10 = 0;
    pub const PTHREAD_PRIO_INHERIT: root::_bindgen_ty_10 = 1;
    pub const PTHREAD_PRIO_PROTECT: root::_bindgen_ty_10 = 2;
    pub type _bindgen_ty_10 = ::core::ffi::c_uint;
    pub const PTHREAD_RWLOCK_PREFER_READER_NP: root::_bindgen_ty_11 = 0;
    pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: root::_bindgen_ty_11 = 1;
    pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: root::_bindgen_ty_11 = 2;
    pub const PTHREAD_RWLOCK_DEFAULT_NP: root::_bindgen_ty_11 = 0;
    pub type _bindgen_ty_11 = ::core::ffi::c_uint;
    pub const PTHREAD_INHERIT_SCHED: root::_bindgen_ty_12 = 0;
    pub const PTHREAD_EXPLICIT_SCHED: root::_bindgen_ty_12 = 1;
    pub type _bindgen_ty_12 = ::core::ffi::c_uint;
    pub const PTHREAD_SCOPE_SYSTEM: root::_bindgen_ty_13 = 0;
    pub const PTHREAD_SCOPE_PROCESS: root::_bindgen_ty_13 = 1;
    pub type _bindgen_ty_13 = ::core::ffi::c_uint;
    pub const PTHREAD_PROCESS_PRIVATE: root::_bindgen_ty_14 = 0;
    pub const PTHREAD_PROCESS_SHARED: root::_bindgen_ty_14 = 1;
    pub type _bindgen_ty_14 = ::core::ffi::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _pthread_cleanup_buffer {
        pub __routine: ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void)>,
        pub __arg: *mut ::core::ffi::c_void,
        pub __canceltype: ::core::ffi::c_int,
        pub __prev: *mut root::_pthread_cleanup_buffer,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of _pthread_cleanup_buffer"]
            [::core::mem::size_of::<_pthread_cleanup_buffer>() - 32usize];
        ["Alignment of _pthread_cleanup_buffer"]
            [::core::mem::align_of::<_pthread_cleanup_buffer>() - 8usize];
        ["Offset of field: _pthread_cleanup_buffer::__routine"]
            [::core::mem::offset_of!(_pthread_cleanup_buffer, __routine) - 0usize];
        ["Offset of field: _pthread_cleanup_buffer::__arg"]
            [::core::mem::offset_of!(_pthread_cleanup_buffer, __arg) - 8usize];
        ["Offset of field: _pthread_cleanup_buffer::__canceltype"]
            [::core::mem::offset_of!(_pthread_cleanup_buffer, __canceltype) - 16usize];
        ["Offset of field: _pthread_cleanup_buffer::__prev"]
            [::core::mem::offset_of!(_pthread_cleanup_buffer, __prev) - 24usize];
    };
    pub const PTHREAD_CANCEL_ENABLE: root::_bindgen_ty_15 = 0;
    pub const PTHREAD_CANCEL_DISABLE: root::_bindgen_ty_15 = 1;
    pub type _bindgen_ty_15 = ::core::ffi::c_uint;
    pub const PTHREAD_CANCEL_DEFERRED: root::_bindgen_ty_16 = 0;
    pub const PTHREAD_CANCEL_ASYNCHRONOUS: root::_bindgen_ty_16 = 1;
    pub type _bindgen_ty_16 = ::core::ffi::c_uint;
    unsafe extern "C" {
        pub fn pthread_create(
            __newthread: *mut root::pthread_t,
            __attr: *const root::pthread_attr_t,
            __start_routine: ::core::option::Option<
                unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void) -> *mut ::core::ffi::c_void,
            >,
            __arg: *mut ::core::ffi::c_void,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_exit(__retval: *mut ::core::ffi::c_void) -> !;
    }
    unsafe extern "C" {
        pub fn pthread_join(
            __th: root::pthread_t,
            __thread_return: *mut *mut ::core::ffi::c_void,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_tryjoin_np(
            __th: root::pthread_t,
            __thread_return: *mut *mut ::core::ffi::c_void,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_timedjoin_np(
            __th: root::pthread_t,
            __thread_return: *mut *mut ::core::ffi::c_void,
            __abstime: *const root::timespec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_clockjoin_np(
            __th: root::pthread_t,
            __thread_return: *mut *mut ::core::ffi::c_void,
            __clockid: root::clockid_t,
            __abstime: *const root::timespec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_detach(__th: root::pthread_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_self() -> root::pthread_t;
    }
    unsafe extern "C" {
        pub fn pthread_equal(
            __thread1: root::pthread_t,
            __thread2: root::pthread_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_init(__attr: *mut root::pthread_attr_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_destroy(__attr: *mut root::pthread_attr_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_getdetachstate(
            __attr: *const root::pthread_attr_t,
            __detachstate: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_setdetachstate(
            __attr: *mut root::pthread_attr_t,
            __detachstate: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_getguardsize(
            __attr: *const root::pthread_attr_t,
            __guardsize: *mut usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_setguardsize(
            __attr: *mut root::pthread_attr_t,
            __guardsize: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_getschedparam(
            __attr: *const root::pthread_attr_t,
            __param: *mut root::sched_param,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_setschedparam(
            __attr: *mut root::pthread_attr_t,
            __param: *const root::sched_param,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_getschedpolicy(
            __attr: *const root::pthread_attr_t,
            __policy: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_setschedpolicy(
            __attr: *mut root::pthread_attr_t,
            __policy: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_getinheritsched(
            __attr: *const root::pthread_attr_t,
            __inherit: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_setinheritsched(
            __attr: *mut root::pthread_attr_t,
            __inherit: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_getscope(
            __attr: *const root::pthread_attr_t,
            __scope: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_setscope(
            __attr: *mut root::pthread_attr_t,
            __scope: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_getstackaddr(
            __attr: *const root::pthread_attr_t,
            __stackaddr: *mut *mut ::core::ffi::c_void,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_setstackaddr(
            __attr: *mut root::pthread_attr_t,
            __stackaddr: *mut ::core::ffi::c_void,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_getstacksize(
            __attr: *const root::pthread_attr_t,
            __stacksize: *mut usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_setstacksize(
            __attr: *mut root::pthread_attr_t,
            __stacksize: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_getstack(
            __attr: *const root::pthread_attr_t,
            __stackaddr: *mut *mut ::core::ffi::c_void,
            __stacksize: *mut usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_setstack(
            __attr: *mut root::pthread_attr_t,
            __stackaddr: *mut ::core::ffi::c_void,
            __stacksize: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_setaffinity_np(
            __attr: *mut root::pthread_attr_t,
            __cpusetsize: usize,
            __cpuset: *const root::cpu_set_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_getaffinity_np(
            __attr: *const root::pthread_attr_t,
            __cpusetsize: usize,
            __cpuset: *mut root::cpu_set_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_getattr_default_np(__attr: *mut root::pthread_attr_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_setsigmask_np(
            __attr: *mut root::pthread_attr_t,
            sigmask: *const root::__sigset_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_getsigmask_np(
            __attr: *const root::pthread_attr_t,
            sigmask: *mut root::__sigset_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_setattr_default_np(
            __attr: *const root::pthread_attr_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_getattr_np(
            __th: root::pthread_t,
            __attr: *mut root::pthread_attr_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_setschedparam(
            __target_thread: root::pthread_t,
            __policy: ::core::ffi::c_int,
            __param: *const root::sched_param,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_getschedparam(
            __target_thread: root::pthread_t,
            __policy: *mut ::core::ffi::c_int,
            __param: *mut root::sched_param,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_setschedprio(
            __target_thread: root::pthread_t,
            __prio: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_getname_np(
            __target_thread: root::pthread_t,
            __buf: *mut ::core::ffi::c_char,
            __buflen: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_setname_np(
            __target_thread: root::pthread_t,
            __name: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_getconcurrency() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_setconcurrency(__level: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_yield() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_setaffinity_np(
            __th: root::pthread_t,
            __cpusetsize: usize,
            __cpuset: *const root::cpu_set_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_getaffinity_np(
            __th: root::pthread_t,
            __cpusetsize: usize,
            __cpuset: *mut root::cpu_set_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_once(
            __once_control: *mut root::pthread_once_t,
            __init_routine: ::core::option::Option<unsafe extern "C" fn()>,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_setcancelstate(
            __state: ::core::ffi::c_int,
            __oldstate: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_setcanceltype(
            __type: ::core::ffi::c_int,
            __oldtype: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_cancel(__th: root::pthread_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_testcancel();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __cancel_jmp_buf_tag {
        pub __cancel_jmp_buf: root::__jmp_buf,
        pub __mask_was_saved: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __cancel_jmp_buf_tag"][::core::mem::size_of::<__cancel_jmp_buf_tag>() - 72usize];
        ["Alignment of __cancel_jmp_buf_tag"]
            [::core::mem::align_of::<__cancel_jmp_buf_tag>() - 8usize];
        ["Offset of field: __cancel_jmp_buf_tag::__cancel_jmp_buf"]
            [::core::mem::offset_of!(__cancel_jmp_buf_tag, __cancel_jmp_buf) - 0usize];
        ["Offset of field: __cancel_jmp_buf_tag::__mask_was_saved"]
            [::core::mem::offset_of!(__cancel_jmp_buf_tag, __mask_was_saved) - 64usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_unwind_buf_t {
        pub __cancel_jmp_buf: [root::__cancel_jmp_buf_tag; 1usize],
        pub __pad: [*mut ::core::ffi::c_void; 4usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_unwind_buf_t"]
            [::core::mem::size_of::<__pthread_unwind_buf_t>() - 104usize];
        ["Alignment of __pthread_unwind_buf_t"]
            [::core::mem::align_of::<__pthread_unwind_buf_t>() - 8usize];
        ["Offset of field: __pthread_unwind_buf_t::__cancel_jmp_buf"]
            [::core::mem::offset_of!(__pthread_unwind_buf_t, __cancel_jmp_buf) - 0usize];
        ["Offset of field: __pthread_unwind_buf_t::__pad"]
            [::core::mem::offset_of!(__pthread_unwind_buf_t, __pad) - 72usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_cleanup_frame {
        pub __cancel_routine:
            ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void)>,
        pub __cancel_arg: *mut ::core::ffi::c_void,
        pub __do_it: ::core::ffi::c_int,
        pub __cancel_type: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_cleanup_frame"]
            [::core::mem::size_of::<__pthread_cleanup_frame>() - 24usize];
        ["Alignment of __pthread_cleanup_frame"]
            [::core::mem::align_of::<__pthread_cleanup_frame>() - 8usize];
        ["Offset of field: __pthread_cleanup_frame::__cancel_routine"]
            [::core::mem::offset_of!(__pthread_cleanup_frame, __cancel_routine) - 0usize];
        ["Offset of field: __pthread_cleanup_frame::__cancel_arg"]
            [::core::mem::offset_of!(__pthread_cleanup_frame, __cancel_arg) - 8usize];
        ["Offset of field: __pthread_cleanup_frame::__do_it"]
            [::core::mem::offset_of!(__pthread_cleanup_frame, __do_it) - 16usize];
        ["Offset of field: __pthread_cleanup_frame::__cancel_type"]
            [::core::mem::offset_of!(__pthread_cleanup_frame, __cancel_type) - 20usize];
    };
    unsafe extern "C" {
        pub fn __pthread_register_cancel(__buf: *mut root::__pthread_unwind_buf_t);
    }
    unsafe extern "C" {
        pub fn __pthread_unregister_cancel(__buf: *mut root::__pthread_unwind_buf_t);
    }
    unsafe extern "C" {
        pub fn __pthread_register_cancel_defer(__buf: *mut root::__pthread_unwind_buf_t);
    }
    unsafe extern "C" {
        pub fn __pthread_unregister_cancel_restore(__buf: *mut root::__pthread_unwind_buf_t);
    }
    unsafe extern "C" {
        pub fn __pthread_unwind_next(__buf: *mut root::__pthread_unwind_buf_t) -> !;
    }
    unsafe extern "C" {
        pub fn __sigsetjmp(
            __env: *mut root::__jmp_buf_tag,
            __savemask: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutex_init(
            __mutex: *mut root::pthread_mutex_t,
            __mutexattr: *const root::pthread_mutexattr_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutex_destroy(__mutex: *mut root::pthread_mutex_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutex_trylock(__mutex: *mut root::pthread_mutex_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutex_lock(__mutex: *mut root::pthread_mutex_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutex_timedlock(
            __mutex: *mut root::pthread_mutex_t,
            __abstime: *const root::timespec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutex_clocklock(
            __mutex: *mut root::pthread_mutex_t,
            __clockid: root::clockid_t,
            __abstime: *const root::timespec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutex_unlock(__mutex: *mut root::pthread_mutex_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutex_getprioceiling(
            __mutex: *const root::pthread_mutex_t,
            __prioceiling: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutex_setprioceiling(
            __mutex: *mut root::pthread_mutex_t,
            __prioceiling: ::core::ffi::c_int,
            __old_ceiling: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutex_consistent(__mutex: *mut root::pthread_mutex_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutexattr_init(__attr: *mut root::pthread_mutexattr_t)
            -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutexattr_destroy(
            __attr: *mut root::pthread_mutexattr_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutexattr_getpshared(
            __attr: *const root::pthread_mutexattr_t,
            __pshared: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutexattr_setpshared(
            __attr: *mut root::pthread_mutexattr_t,
            __pshared: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutexattr_gettype(
            __attr: *const root::pthread_mutexattr_t,
            __kind: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutexattr_settype(
            __attr: *mut root::pthread_mutexattr_t,
            __kind: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutexattr_getprotocol(
            __attr: *const root::pthread_mutexattr_t,
            __protocol: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutexattr_setprotocol(
            __attr: *mut root::pthread_mutexattr_t,
            __protocol: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutexattr_getprioceiling(
            __attr: *const root::pthread_mutexattr_t,
            __prioceiling: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutexattr_setprioceiling(
            __attr: *mut root::pthread_mutexattr_t,
            __prioceiling: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutexattr_getrobust(
            __attr: *const root::pthread_mutexattr_t,
            __robustness: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutexattr_setrobust(
            __attr: *mut root::pthread_mutexattr_t,
            __robustness: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_rwlock_init(
            __rwlock: *mut root::pthread_rwlock_t,
            __attr: *const root::pthread_rwlockattr_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_rwlock_destroy(__rwlock: *mut root::pthread_rwlock_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_rwlock_rdlock(__rwlock: *mut root::pthread_rwlock_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_rwlock_tryrdlock(
            __rwlock: *mut root::pthread_rwlock_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_rwlock_timedrdlock(
            __rwlock: *mut root::pthread_rwlock_t,
            __abstime: *const root::timespec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_rwlock_clockrdlock(
            __rwlock: *mut root::pthread_rwlock_t,
            __clockid: root::clockid_t,
            __abstime: *const root::timespec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_rwlock_wrlock(__rwlock: *mut root::pthread_rwlock_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_rwlock_trywrlock(
            __rwlock: *mut root::pthread_rwlock_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_rwlock_timedwrlock(
            __rwlock: *mut root::pthread_rwlock_t,
            __abstime: *const root::timespec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_rwlock_clockwrlock(
            __rwlock: *mut root::pthread_rwlock_t,
            __clockid: root::clockid_t,
            __abstime: *const root::timespec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_rwlock_unlock(__rwlock: *mut root::pthread_rwlock_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_rwlockattr_init(
            __attr: *mut root::pthread_rwlockattr_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_rwlockattr_destroy(
            __attr: *mut root::pthread_rwlockattr_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_rwlockattr_getpshared(
            __attr: *const root::pthread_rwlockattr_t,
            __pshared: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_rwlockattr_setpshared(
            __attr: *mut root::pthread_rwlockattr_t,
            __pshared: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_rwlockattr_getkind_np(
            __attr: *const root::pthread_rwlockattr_t,
            __pref: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_rwlockattr_setkind_np(
            __attr: *mut root::pthread_rwlockattr_t,
            __pref: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_cond_init(
            __cond: *mut root::pthread_cond_t,
            __cond_attr: *const root::pthread_condattr_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_cond_destroy(__cond: *mut root::pthread_cond_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_cond_signal(__cond: *mut root::pthread_cond_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_cond_broadcast(__cond: *mut root::pthread_cond_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_cond_wait(
            __cond: *mut root::pthread_cond_t,
            __mutex: *mut root::pthread_mutex_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_cond_timedwait(
            __cond: *mut root::pthread_cond_t,
            __mutex: *mut root::pthread_mutex_t,
            __abstime: *const root::timespec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_cond_clockwait(
            __cond: *mut root::pthread_cond_t,
            __mutex: *mut root::pthread_mutex_t,
            __clock_id: root::__clockid_t,
            __abstime: *const root::timespec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_condattr_init(__attr: *mut root::pthread_condattr_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_condattr_destroy(
            __attr: *mut root::pthread_condattr_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_condattr_getpshared(
            __attr: *const root::pthread_condattr_t,
            __pshared: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_condattr_setpshared(
            __attr: *mut root::pthread_condattr_t,
            __pshared: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_condattr_getclock(
            __attr: *const root::pthread_condattr_t,
            __clock_id: *mut root::__clockid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_condattr_setclock(
            __attr: *mut root::pthread_condattr_t,
            __clock_id: root::__clockid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_spin_init(
            __lock: *mut root::pthread_spinlock_t,
            __pshared: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_spin_destroy(__lock: *mut root::pthread_spinlock_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_spin_lock(__lock: *mut root::pthread_spinlock_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_spin_trylock(__lock: *mut root::pthread_spinlock_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_spin_unlock(__lock: *mut root::pthread_spinlock_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_barrier_init(
            __barrier: *mut root::pthread_barrier_t,
            __attr: *const root::pthread_barrierattr_t,
            __count: ::core::ffi::c_uint,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_barrier_destroy(
            __barrier: *mut root::pthread_barrier_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_barrier_wait(__barrier: *mut root::pthread_barrier_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_barrierattr_init(
            __attr: *mut root::pthread_barrierattr_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_barrierattr_destroy(
            __attr: *mut root::pthread_barrierattr_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_barrierattr_getpshared(
            __attr: *const root::pthread_barrierattr_t,
            __pshared: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_barrierattr_setpshared(
            __attr: *mut root::pthread_barrierattr_t,
            __pshared: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_key_create(
            __key: *mut root::pthread_key_t,
            __destr_function: ::core::option::Option<
                unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void),
            >,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_key_delete(__key: root::pthread_key_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_getspecific(__key: root::pthread_key_t) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn pthread_setspecific(
            __key: root::pthread_key_t,
            __pointer: *const ::core::ffi::c_void,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_getcpuclockid(
            __thread_id: root::pthread_t,
            __clock_id: *mut root::__clockid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_atfork(
            __prepare: ::core::option::Option<unsafe extern "C" fn()>,
            __parent: ::core::option::Option<unsafe extern "C" fn()>,
            __child: ::core::option::Option<unsafe extern "C" fn()>,
        ) -> ::core::ffi::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct link_map {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __locale_data {
        pub _address: u8,
    }
    pub type __builtin_va_list = [root::__va_list_tag; 1usize];
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __va_list_tag {
        pub gp_offset: ::core::ffi::c_uint,
        pub fp_offset: ::core::ffi::c_uint,
        pub overflow_arg_area: *mut ::core::ffi::c_void,
        pub reg_save_area: *mut ::core::ffi::c_void,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __va_list_tag"][::core::mem::size_of::<__va_list_tag>() - 24usize];
        ["Alignment of __va_list_tag"][::core::mem::align_of::<__va_list_tag>() - 8usize];
        ["Offset of field: __va_list_tag::gp_offset"]
            [::core::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
        ["Offset of field: __va_list_tag::fp_offset"]
            [::core::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
        ["Offset of field: __va_list_tag::overflow_arg_area"]
            [::core::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
        ["Offset of field: __va_list_tag::reg_save_area"]
            [::core::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
    };
}
