/* automatically generated by rust-bindgen 0.71.1 */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[repr(C)]
    #[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
    pub struct __BindgenBitfieldUnit<Storage> {
        storage: Storage,
    }
    impl<Storage> __BindgenBitfieldUnit<Storage> {
        #[inline]
        pub const fn new(storage: Storage) -> Self {
            Self { storage }
        }
    }
    impl<Storage> __BindgenBitfieldUnit<Storage>
    where
        Storage: AsRef<[u8]> + AsMut<[u8]>,
    {
        #[inline]
        fn extract_bit(byte: u8, index: usize) -> bool {
            let bit_index = if cfg!(target_endian = "big") {
                7 - (index % 8)
            } else {
                index % 8
            };
            let mask = 1 << bit_index;
            byte & mask == mask
        }
        #[inline]
        pub fn get_bit(&self, index: usize) -> bool {
            debug_assert!(index / 8 < self.storage.as_ref().len());
            let byte_index = index / 8;
            let byte = self.storage.as_ref()[byte_index];
            Self::extract_bit(byte, index)
        }
        #[inline]
        pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
            debug_assert!(index / 8 < core::mem::size_of::<Storage>());
            let byte_index = index / 8;
            let byte =
                *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize);
            Self::extract_bit(byte, index)
        }
        #[inline]
        fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
            let bit_index = if cfg!(target_endian = "big") {
                7 - (index % 8)
            } else {
                index % 8
            };
            let mask = 1 << bit_index;
            if val {
                byte | mask
            } else {
                byte & !mask
            }
        }
        #[inline]
        pub fn set_bit(&mut self, index: usize, val: bool) {
            debug_assert!(index / 8 < self.storage.as_ref().len());
            let byte_index = index / 8;
            let byte = &mut self.storage.as_mut()[byte_index];
            *byte = Self::change_bit(*byte, index, val);
        }
        #[inline]
        pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
            debug_assert!(index / 8 < core::mem::size_of::<Storage>());
            let byte_index = index / 8;
            let byte =
                (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize);
            *byte = Self::change_bit(*byte, index, val);
        }
        #[inline]
        pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
            debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
            let mut val = 0;
            for i in 0..(bit_width as usize) {
                if self.get_bit(i + bit_offset) {
                    let index = if cfg!(target_endian = "big") {
                        bit_width as usize - 1 - i
                    } else {
                        i
                    };
                    val |= 1 << index;
                }
            }
            val
        }
        #[inline]
        pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
            debug_assert!(
                (bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>()
            );
            let mut val = 0;
            for i in 0..(bit_width as usize) {
                if Self::raw_get_bit(this, i + bit_offset) {
                    let index = if cfg!(target_endian = "big") {
                        bit_width as usize - 1 - i
                    } else {
                        i
                    };
                    val |= 1 << index;
                }
            }
            val
        }
        #[inline]
        pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
            debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
            for i in 0..(bit_width as usize) {
                let mask = 1 << i;
                let val_bit_is_set = val & mask == mask;
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                self.set_bit(index + bit_offset, val_bit_is_set);
            }
        }
        #[inline]
        pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
            debug_assert!(
                (bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>()
            );
            for i in 0..(bit_width as usize) {
                let mask = 1 << i;
                let val_bit_is_set = val & mask == mask;
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                Self::raw_set_bit(this, index + bit_offset, val_bit_is_set);
            }
        }
    }
    #[doc = r" If Bindgen could only determine the size and alignment of a"]
    #[doc = r" type, it is represented like this."]
    #[derive(PartialEq, Copy, Clone, Debug, Hash)]
    #[repr(C)]
    pub struct __BindgenOpaqueArray<T: Copy, const N: usize>(pub [T; N]);
    impl<T: Copy + Default, const N: usize> Default for __BindgenOpaqueArray<T, N> {
        fn default() -> Self {
            Self([<T as Default>::default(); N])
        }
    }
    #[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
    #[repr(C)]
    pub struct __BindgenComplex<T> {
        pub re: T,
        pub im: T,
    }
    #[allow(unused_imports)]
    use self::super::root;
    pub const POSIX: u32 = 1;
    pub const LINUX: u32 = 1;
    pub const _LINUX: u32 = 1;
    pub const COMPILER_GCC: u32 = 1;
    pub const _ASSERT_H: u32 = 1;
    pub const _FEATURES_H: u32 = 1;
    pub const _ISOC95_SOURCE: u32 = 1;
    pub const _ISOC99_SOURCE: u32 = 1;
    pub const _ISOC11_SOURCE: u32 = 1;
    pub const _ISOC23_SOURCE: u32 = 1;
    pub const _ISOC2Y_SOURCE: u32 = 1;
    pub const _POSIX_SOURCE: u32 = 1;
    pub const _POSIX_C_SOURCE: u32 = 200809;
    pub const _XOPEN_SOURCE: u32 = 700;
    pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
    pub const _LARGEFILE64_SOURCE: u32 = 1;
    pub const _DEFAULT_SOURCE: u32 = 1;
    pub const _ATFILE_SOURCE: u32 = 1;
    pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
    pub const __GLIBC_USE_ISOC2Y: u32 = 1;
    pub const __GLIBC_USE_ISOC23: u32 = 1;
    pub const __USE_ISOC11: u32 = 1;
    pub const __USE_ISOC99: u32 = 1;
    pub const __USE_ISOC95: u32 = 1;
    pub const __USE_ISOCXX11: u32 = 1;
    pub const __USE_POSIX: u32 = 1;
    pub const __USE_POSIX2: u32 = 1;
    pub const __USE_POSIX199309: u32 = 1;
    pub const __USE_POSIX199506: u32 = 1;
    pub const __USE_XOPEN2K: u32 = 1;
    pub const __USE_XOPEN2K8: u32 = 1;
    pub const __USE_XOPEN: u32 = 1;
    pub const __USE_XOPEN_EXTENDED: u32 = 1;
    pub const __USE_UNIX98: u32 = 1;
    pub const _LARGEFILE_SOURCE: u32 = 1;
    pub const __USE_XOPEN2K8XSI: u32 = 1;
    pub const __USE_XOPEN2KXSI: u32 = 1;
    pub const __USE_LARGEFILE: u32 = 1;
    pub const __USE_LARGEFILE64: u32 = 1;
    pub const __WORDSIZE: u32 = 64;
    pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
    pub const __SYSCALL_WORDSIZE: u32 = 64;
    pub const __TIMESIZE: u32 = 64;
    pub const __USE_TIME_BITS64: u32 = 1;
    pub const __USE_MISC: u32 = 1;
    pub const __USE_ATFILE: u32 = 1;
    pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
    pub const __USE_GNU: u32 = 1;
    pub const __USE_FORTIFY_LEVEL: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
    pub const __GLIBC_USE_C23_STRTOL: u32 = 1;
    pub const _STDC_PREDEF_H: u32 = 1;
    pub const __STDC_IEC_559__: u32 = 1;
    pub const __STDC_IEC_60559_BFP__: u32 = 201404;
    pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
    pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
    pub const __STDC_ISO_10646__: u32 = 201706;
    pub const __GNU_LIBRARY__: u32 = 6;
    pub const __GLIBC__: u32 = 2;
    pub const __GLIBC_MINOR__: u32 = 41;
    pub const _SYS_CDEFS_H: u32 = 1;
    pub const __glibc_c99_flexarr_available: u32 = 1;
    pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
    pub const __HAVE_GENERIC_SELECTION: u32 = 0;
    pub const _GLIBCXX_MUTEX: u32 = 1;
    pub const _REQUIRES_FREESTANDING_H: u32 = 1;
    pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
    pub const _GLIBCXX_RELEASE: u32 = 15;
    pub const __GLIBCXX__: u32 = 20250425;
    pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
    pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
    pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
    pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
    pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
    pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
    pub const _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED: u32 = 1;
    pub const _GLIBCXX_ASSERTIONS: u32 = 1;
    pub const _GLIBCXX_VERBOSE_ASSERT: u32 = 1;
    pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
    pub const _GLIBCXX_OS_DEFINES: u32 = 1;
    pub const __NO_CTYPE: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOAT128_MATH: u32 = 1;
    pub const _GLIBCXX_MAY_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
    pub const _GLIBCXX_GTHREAD_USE_WEAK: u32 = 0;
    pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
    pub const _GLIBCXX_USE_STD_SPEC_FUNCS: u32 = 1;
    pub const _GLIBCXX_FAST_MATH: u32 = 0;
    pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
    pub const _GLIBCXX_FLOAT_IS_IEEE_BINARY32: u32 = 1;
    pub const _GLIBCXX_DOUBLE_IS_IEEE_BINARY64: u32 = 1;
    pub const _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP: u32 = 1;
    pub const _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE: u32 = 1;
    pub const _GLIBCXX_HAVE_BUILTIN_LAUNDER: u32 = 1;
    pub const _PSTL_VERSION: u32 = 17000;
    pub const _PSTL_VERSION_MAJOR: u32 = 17;
    pub const _PSTL_VERSION_MINOR: u32 = 0;
    pub const _PSTL_VERSION_PATCH: u32 = 0;
    pub const _PSTL_USAGE_WARNINGS: u32 = 0;
    pub const _PSTL_PRAGMA_LOCATION: &[u8; 26] = b" [Parallel STL message]: \0";
    pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
    pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
    pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
    pub const _GLIBCXX_HAVE_ARC4RANDOM: u32 = 1;
    pub const _GLIBCXX_HAVE_ARPA_INET_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
    pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
    pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
    pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
    pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
    pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
    pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
    pub const _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY: u32 = 1;
    pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
    pub const _GLIBCXX_HAVE_C99_FLT_EVAL_TYPES: u32 = 1;
    pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
    pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
    pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
    pub const _GLIBCXX_HAVE_COSF: u32 = 1;
    pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
    pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
    pub const _GLIBCXX_HAVE_COSL: u32 = 1;
    pub const _GLIBCXX_HAVE_DECL_STRNLEN: u32 = 1;
    pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_DIRFD: u32 = 1;
    pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
    pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
    pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
    pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FDOPENDIR: u32 = 1;
    pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
    pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
    pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
    pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_GETENTROPY: u32 = 1;
    pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
    pub const _GLIBCXX_HAVE_GETS: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
    pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
    pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
    pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
    pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
    pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
    pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
    pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
    pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
    pub const _GLIBCXX_HAVE_LINK: u32 = 1;
    pub const _GLIBCXX_HAVE_LINK_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_RANDOM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_TYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
    pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
    pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
    pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
    pub const _GLIBCXX_HAVE_LSEEK: u32 = 1;
    pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
    pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
    pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
    pub const _GLIBCXX_HAVE_MODF: u32 = 1;
    pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
    pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
    pub const _GLIBCXX_HAVE_NETDB_H: u32 = 1;
    pub const _GLIBCXX_HAVE_NETINET_IN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_NETINET_TCP_H: u32 = 1;
    pub const _GLIBCXX_HAVE_OPENAT: u32 = 1;
    pub const _GLIBCXX_HAVE_O_NONBLOCK: u32 = 1;
    pub const _GLIBCXX_HAVE_POLL: u32 = 1;
    pub const _GLIBCXX_HAVE_POLL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
    pub const _GLIBCXX_HAVE_POSIX_SEMAPHORE: u32 = 1;
    pub const _GLIBCXX_HAVE_POWF: u32 = 1;
    pub const _GLIBCXX_HAVE_POWL: u32 = 1;
    pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
    pub const _GLIBCXX_HAVE_READLINK: u32 = 1;
    pub const _GLIBCXX_HAVE_SECURE_GETENV: u32 = 1;
    pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
    pub const _GLIBCXX_HAVE_SINF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
    pub const _GLIBCXX_HAVE_SINL: u32 = 1;
    pub const _GLIBCXX_HAVE_SOCKATMARK: u32 = 1;
    pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
    pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
    pub const _GLIBCXX_HAVE_STACKTRACE: u32 = 1;
    pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
    pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
    pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
    pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
    pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
    pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
    pub const _GLIBCXX_HAVE_SYMLINK: u32 = 1;
    pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_MMAN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SDT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SOCKET_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
    pub const _GLIBCXX_HAVE_TANF: u32 = 1;
    pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
    pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
    pub const _GLIBCXX_HAVE_TANL: u32 = 1;
    pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
    pub const _GLIBCXX_HAVE_TIMESPEC_GET: u32 = 1;
    pub const _GLIBCXX_HAVE_TLS: u32 = 1;
    pub const _GLIBCXX_HAVE_TRUNCATE: u32 = 1;
    pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
    pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
    pub const _GLIBCXX_HAVE_UNLINKAT: u32 = 1;
    pub const _GLIBCXX_HAVE_USELOCALE: u32 = 1;
    pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
    pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
    pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
    pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
    pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
    pub const _GLIBCXX_LT_OBJDIR: &[u8; 7] = b".libs/\0";
    pub const _GLIBCXX_PACKAGE_BUGREPORT: &[u8; 1] = b"\0";
    pub const _GLIBCXX_PACKAGE_NAME: &[u8; 15] = b"package-unused\0";
    pub const _GLIBCXX_PACKAGE_STRING: &[u8; 30] = b"package-unused version-unused\0";
    pub const _GLIBCXX_PACKAGE_TARNAME: &[u8; 10] = b"libstdc++\0";
    pub const _GLIBCXX_PACKAGE_URL: &[u8; 1] = b"\0";
    pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &[u8; 15] = b"version-unused\0";
    pub const _GLIBCXX_STDC_HEADERS: u32 = 1;
    pub const _GLIBCXX_DARWIN_USE_64_BIT_INODE: u32 = 1;
    pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
    pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
    pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
    pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
    pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
    pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
    pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
    pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
    pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
    pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
    pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
    pub const _GLIBCXX_CAN_ALIGNAS_DESTRUCTIVE_SIZE: u32 = 1;
    pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
    pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
    pub const _GLIBCXX_RES_LIMITS: u32 = 1;
    pub const _GLIBCXX_STATIC_TZDATA: u32 = 1;
    pub const _GLIBCXX_STDIO_EOF: i32 = -1;
    pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
    pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
    pub const _GLIBCXX_SYMVER: u32 = 1;
    pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
    pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
    pub const _GLIBCXX_USE_C99: u32 = 1;
    pub const _GLIBCXX_USE_C99_COMPLEX_ARC: u32 = 1;
    pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_CTYPE: u32 = 1;
    pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_FENV: u32 = 1;
    pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_MATH_FUNCS: u32 = 1;
    pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_STDINT: u32 = 1;
    pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
    pub const _GLIBCXX_USE_CHDIR: u32 = 1;
    pub const _GLIBCXX_USE_CHMOD: u32 = 1;
    pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
    pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
    pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
    pub const _GLIBCXX_USE_DEV_RANDOM: u32 = 1;
    pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
    pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
    pub const _GLIBCXX_USE_FSEEKO_FTELLO: u32 = 1;
    pub const _GLIBCXX_USE_GETCWD: u32 = 1;
    pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
    pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
    pub const _GLIBCXX_USE_INIT_PRIORITY_ATTRIBUTE: u32 = 1;
    pub const _GLIBCXX_USE_LFS: u32 = 1;
    pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
    pub const _GLIBCXX_USE_LSTAT: u32 = 1;
    pub const _GLIBCXX_USE_MKDIR: u32 = 1;
    pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
    pub const _GLIBCXX_USE_NLS: u32 = 1;
    pub const _GLIBCXX_USE_NL_LANGINFO_L: u32 = 1;
    pub const _GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT: u32 = 1;
    pub const _GLIBCXX_USE_PTHREAD_RWLOCK_CLOCKLOCK: u32 = 1;
    pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
    pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
    pub const _GLIBCXX_USE_REALPATH: u32 = 1;
    pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
    pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
    pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
    pub const _GLIBCXX_USE_STRUCT_TM_TM_ZONE: u32 = 1;
    pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
    pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
    pub const _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_CXX20: u32 = 1;
    pub const _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_FCHAR8_T: u32 = 1;
    pub const _GLIBCXX_USE_UTIME: u32 = 1;
    pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
    pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
    pub const _GLIBCXX_VERBOSE: u32 = 1;
    pub const _GLIBCXX_X86_RDRAND: u32 = 1;
    pub const _GLIBCXX_X86_RDSEED: u32 = 1;
    pub const _GLIBCXX_ZONEINFO_DIR: &[u8; 20] = b"/usr/share/zoneinfo\0";
    pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
    pub const _GLIBCXX_TUPLE: u32 = 1;
    pub const _STL_PAIR_H: u32 = 1;
    pub const _GLIBCXX_TYPE_TRAITS: u32 = 1;
    pub const __glibcxx_incomplete_container_elements: u32 = 201505;
    pub const __glibcxx_uncaught_exceptions: u32 = 201411;
    pub const __glibcxx_allocator_traits_is_always_equal: u32 = 201411;
    pub const __glibcxx_is_null_pointer: u32 = 201309;
    pub const __cpp_lib_is_null_pointer: u32 = 201309;
    pub const __glibcxx_result_of_sfinae: u32 = 201210;
    pub const __cpp_lib_result_of_sfinae: u32 = 201210;
    pub const __glibcxx_shared_ptr_arrays: u32 = 201611;
    pub const __glibcxx_is_swappable: u32 = 201603;
    pub const __cpp_lib_is_swappable: u32 = 201603;
    pub const __glibcxx_void_t: u32 = 201411;
    pub const __cpp_lib_void_t: u32 = 201411;
    pub const __glibcxx_enable_shared_from_this: u32 = 201603;
    pub const __glibcxx_math_spec_funcs: u32 = 201003;
    pub const __glibcxx_exchange_function: u32 = 201304;
    pub const __glibcxx_integer_sequence: u32 = 201304;
    pub const __glibcxx_integral_constant_callable: u32 = 201304;
    pub const __cpp_lib_integral_constant_callable: u32 = 201304;
    pub const __glibcxx_is_final: u32 = 201402;
    pub const __cpp_lib_is_final: u32 = 201402;
    pub const __glibcxx_make_reverse_iterator: u32 = 201402;
    pub const __glibcxx_null_iterators: u32 = 201304;
    pub const __glibcxx_transformation_trait_aliases: u32 = 201304;
    pub const __cpp_lib_transformation_trait_aliases: u32 = 201304;
    pub const __glibcxx_transparent_operators: u32 = 201510;
    pub const __glibcxx_tuple_element_t: u32 = 201402;
    pub const __glibcxx_tuples_by_type: u32 = 201304;
    pub const __glibcxx_robust_nonmodifying_seq_ops: u32 = 201304;
    pub const __glibcxx_to_chars: u32 = 201611;
    pub const __glibcxx_chrono_udls: u32 = 201304;
    pub const __glibcxx_complex_udls: u32 = 201309;
    pub const __glibcxx_generic_associative_lookup: u32 = 201304;
    pub const __glibcxx_make_unique: u32 = 201304;
    pub const __glibcxx_quoted_string_io: u32 = 201304;
    pub const __glibcxx_shared_timed_mutex: u32 = 201402;
    pub const __glibcxx_string_udls: u32 = 201304;
    pub const __glibcxx_addressof_constexpr: u32 = 201603;
    pub const __glibcxx_any: u32 = 201606;
    pub const __glibcxx_apply: u32 = 201603;
    pub const __glibcxx_as_const: u32 = 201510;
    pub const __glibcxx_atomic_is_always_lock_free: u32 = 201603;
    pub const __glibcxx_bool_constant: u32 = 201505;
    pub const __cpp_lib_bool_constant: u32 = 201505;
    pub const __glibcxx_byte: u32 = 201603;
    pub const __glibcxx_has_unique_object_representations: u32 = 201606;
    pub const __cpp_lib_has_unique_object_representations: u32 = 201606;
    pub const __glibcxx_hardware_interference_size: u32 = 201703;
    pub const __glibcxx_invoke: u32 = 201411;
    pub const __glibcxx_is_aggregate: u32 = 201703;
    pub const __cpp_lib_is_aggregate: u32 = 201703;
    pub const __glibcxx_is_invocable: u32 = 201703;
    pub const __cpp_lib_is_invocable: u32 = 201703;
    pub const __glibcxx_launder: u32 = 201606;
    pub const __glibcxx_logical_traits: u32 = 201510;
    pub const __cpp_lib_logical_traits: u32 = 201510;
    pub const __glibcxx_make_from_tuple: u32 = 201606;
    pub const __glibcxx_not_fn: u32 = 201603;
    pub const __glibcxx_type_trait_variable_templates: u32 = 201510;
    pub const __cpp_lib_type_trait_variable_templates: u32 = 201510;
    pub const __glibcxx_variant: u32 = 202102;
    pub const __glibcxx_lcm: u32 = 201606;
    pub const __glibcxx_gcd: u32 = 201606;
    pub const __glibcxx_gcd_lcm: u32 = 201606;
    pub const __glibcxx_raw_memory_algorithms: u32 = 201606;
    pub const __glibcxx_array_constexpr: u32 = 201803;
    pub const __glibcxx_nonmember_container_access: u32 = 201411;
    pub const __glibcxx_clamp: u32 = 201603;
    pub const __glibcxx_sample: u32 = 201603;
    pub const __glibcxx_boyer_moore_searcher: u32 = 201603;
    pub const __glibcxx_chrono: u32 = 201611;
    pub const __glibcxx_execution: u32 = 201902;
    pub const __glibcxx_filesystem: u32 = 201703;
    pub const __glibcxx_hypot: u32 = 201603;
    pub const __glibcxx_map_try_emplace: u32 = 201411;
    pub const __glibcxx_math_special_functions: u32 = 201603;
    pub const __glibcxx_memory_resource: u32 = 201603;
    pub const __glibcxx_node_extract: u32 = 201606;
    pub const __glibcxx_parallel_algorithm: u32 = 201603;
    pub const __glibcxx_scoped_lock: u32 = 201703;
    pub const __glibcxx_shared_mutex: u32 = 201505;
    pub const __glibcxx_shared_ptr_weak_type: u32 = 201606;
    pub const __glibcxx_string_view: u32 = 201803;
    pub const __glibcxx_unordered_map_try_emplace: u32 = 201411;
    pub const __glibcxx_optional: u32 = 201606;
    pub const __glibcxx_constexpr_char_traits: u32 = 201611;
    pub const __glibcxx_constexpr_string: u32 = 201611;
    pub const _MOVE_H: u32 = 1;
    pub const _GLIBCXX_UTILITY_H: u32 = 1;
    pub const _USES_ALLOCATOR_H: u32 = 1;
    pub const _GLIBCXX_INVOKE_H: u32 = 1;
    pub const __cpp_lib_tuple_element_t: u32 = 201402;
    pub const __cpp_lib_tuples_by_type: u32 = 201304;
    pub const __cpp_lib_apply: u32 = 201603;
    pub const __cpp_lib_make_from_tuple: u32 = 201606;
    pub const _ERRNO_H: u32 = 1;
    pub const _BITS_ERRNO_H: u32 = 1;
    pub const EPERM: u32 = 1;
    pub const ENOENT: u32 = 2;
    pub const ESRCH: u32 = 3;
    pub const EINTR: u32 = 4;
    pub const EIO: u32 = 5;
    pub const ENXIO: u32 = 6;
    pub const E2BIG: u32 = 7;
    pub const ENOEXEC: u32 = 8;
    pub const EBADF: u32 = 9;
    pub const ECHILD: u32 = 10;
    pub const EAGAIN: u32 = 11;
    pub const ENOMEM: u32 = 12;
    pub const EACCES: u32 = 13;
    pub const EFAULT: u32 = 14;
    pub const ENOTBLK: u32 = 15;
    pub const EBUSY: u32 = 16;
    pub const EEXIST: u32 = 17;
    pub const EXDEV: u32 = 18;
    pub const ENODEV: u32 = 19;
    pub const ENOTDIR: u32 = 20;
    pub const EISDIR: u32 = 21;
    pub const EINVAL: u32 = 22;
    pub const ENFILE: u32 = 23;
    pub const EMFILE: u32 = 24;
    pub const ENOTTY: u32 = 25;
    pub const ETXTBSY: u32 = 26;
    pub const EFBIG: u32 = 27;
    pub const ENOSPC: u32 = 28;
    pub const ESPIPE: u32 = 29;
    pub const EROFS: u32 = 30;
    pub const EMLINK: u32 = 31;
    pub const EPIPE: u32 = 32;
    pub const EDOM: u32 = 33;
    pub const ERANGE: u32 = 34;
    pub const EDEADLK: u32 = 35;
    pub const ENAMETOOLONG: u32 = 36;
    pub const ENOLCK: u32 = 37;
    pub const ENOSYS: u32 = 38;
    pub const ENOTEMPTY: u32 = 39;
    pub const ELOOP: u32 = 40;
    pub const EWOULDBLOCK: u32 = 11;
    pub const ENOMSG: u32 = 42;
    pub const EIDRM: u32 = 43;
    pub const ECHRNG: u32 = 44;
    pub const EL2NSYNC: u32 = 45;
    pub const EL3HLT: u32 = 46;
    pub const EL3RST: u32 = 47;
    pub const ELNRNG: u32 = 48;
    pub const EUNATCH: u32 = 49;
    pub const ENOCSI: u32 = 50;
    pub const EL2HLT: u32 = 51;
    pub const EBADE: u32 = 52;
    pub const EBADR: u32 = 53;
    pub const EXFULL: u32 = 54;
    pub const ENOANO: u32 = 55;
    pub const EBADRQC: u32 = 56;
    pub const EBADSLT: u32 = 57;
    pub const EDEADLOCK: u32 = 35;
    pub const EBFONT: u32 = 59;
    pub const ENOSTR: u32 = 60;
    pub const ENODATA: u32 = 61;
    pub const ETIME: u32 = 62;
    pub const ENOSR: u32 = 63;
    pub const ENONET: u32 = 64;
    pub const ENOPKG: u32 = 65;
    pub const EREMOTE: u32 = 66;
    pub const ENOLINK: u32 = 67;
    pub const EADV: u32 = 68;
    pub const ESRMNT: u32 = 69;
    pub const ECOMM: u32 = 70;
    pub const EPROTO: u32 = 71;
    pub const EMULTIHOP: u32 = 72;
    pub const EDOTDOT: u32 = 73;
    pub const EBADMSG: u32 = 74;
    pub const EOVERFLOW: u32 = 75;
    pub const ENOTUNIQ: u32 = 76;
    pub const EBADFD: u32 = 77;
    pub const EREMCHG: u32 = 78;
    pub const ELIBACC: u32 = 79;
    pub const ELIBBAD: u32 = 80;
    pub const ELIBSCN: u32 = 81;
    pub const ELIBMAX: u32 = 82;
    pub const ELIBEXEC: u32 = 83;
    pub const EILSEQ: u32 = 84;
    pub const ERESTART: u32 = 85;
    pub const ESTRPIPE: u32 = 86;
    pub const EUSERS: u32 = 87;
    pub const ENOTSOCK: u32 = 88;
    pub const EDESTADDRREQ: u32 = 89;
    pub const EMSGSIZE: u32 = 90;
    pub const EPROTOTYPE: u32 = 91;
    pub const ENOPROTOOPT: u32 = 92;
    pub const EPROTONOSUPPORT: u32 = 93;
    pub const ESOCKTNOSUPPORT: u32 = 94;
    pub const EOPNOTSUPP: u32 = 95;
    pub const EPFNOSUPPORT: u32 = 96;
    pub const EAFNOSUPPORT: u32 = 97;
    pub const EADDRINUSE: u32 = 98;
    pub const EADDRNOTAVAIL: u32 = 99;
    pub const ENETDOWN: u32 = 100;
    pub const ENETUNREACH: u32 = 101;
    pub const ENETRESET: u32 = 102;
    pub const ECONNABORTED: u32 = 103;
    pub const ECONNRESET: u32 = 104;
    pub const ENOBUFS: u32 = 105;
    pub const EISCONN: u32 = 106;
    pub const ENOTCONN: u32 = 107;
    pub const ESHUTDOWN: u32 = 108;
    pub const ETOOMANYREFS: u32 = 109;
    pub const ETIMEDOUT: u32 = 110;
    pub const ECONNREFUSED: u32 = 111;
    pub const EHOSTDOWN: u32 = 112;
    pub const EHOSTUNREACH: u32 = 113;
    pub const EALREADY: u32 = 114;
    pub const EINPROGRESS: u32 = 115;
    pub const ESTALE: u32 = 116;
    pub const EUCLEAN: u32 = 117;
    pub const ENOTNAM: u32 = 118;
    pub const ENAVAIL: u32 = 119;
    pub const EISNAM: u32 = 120;
    pub const EREMOTEIO: u32 = 121;
    pub const EDQUOT: u32 = 122;
    pub const ENOMEDIUM: u32 = 123;
    pub const EMEDIUMTYPE: u32 = 124;
    pub const ECANCELED: u32 = 125;
    pub const ENOKEY: u32 = 126;
    pub const EKEYEXPIRED: u32 = 127;
    pub const EKEYREVOKED: u32 = 128;
    pub const EKEYREJECTED: u32 = 129;
    pub const EOWNERDEAD: u32 = 130;
    pub const ENOTRECOVERABLE: u32 = 131;
    pub const ERFKILL: u32 = 132;
    pub const EHWPOISON: u32 = 133;
    pub const ENOTSUP: u32 = 95;
    pub const __error_t_defined: u32 = 1;
    pub const _GLIBCXX_CHRONO_H: u32 = 1;
    pub const _GLIBCXX_RATIO: u32 = 1;
    pub const _GLIBCXX_CSTDINT: u32 = 1;
    pub const _STDINT_H: u32 = 1;
    pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_EXT: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
    pub const _BITS_TYPES_H: u32 = 1;
    pub const _BITS_TYPESIZES_H: u32 = 1;
    pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
    pub const __INO_T_MATCHES_INO64_T: u32 = 1;
    pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
    pub const __STATFS_MATCHES_STATFS64: u32 = 1;
    pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
    pub const __FD_SETSIZE: u32 = 1024;
    pub const _BITS_TIME64_H: u32 = 1;
    pub const _BITS_WCHAR_H: u32 = 1;
    pub const _BITS_STDINT_INTN_H: u32 = 1;
    pub const _BITS_STDINT_UINTN_H: u32 = 1;
    pub const _BITS_STDINT_LEAST_H: u32 = 1;
    pub const INT8_MIN: i32 = -128;
    pub const INT16_MIN: i32 = -32768;
    pub const INT32_MIN: i32 = -2147483648;
    pub const INT8_MAX: u32 = 127;
    pub const INT16_MAX: u32 = 32767;
    pub const INT32_MAX: u32 = 2147483647;
    pub const UINT8_MAX: u32 = 255;
    pub const UINT16_MAX: u32 = 65535;
    pub const UINT32_MAX: u32 = 4294967295;
    pub const INT_LEAST8_MIN: i32 = -128;
    pub const INT_LEAST16_MIN: i32 = -32768;
    pub const INT_LEAST32_MIN: i32 = -2147483648;
    pub const INT_LEAST8_MAX: u32 = 127;
    pub const INT_LEAST16_MAX: u32 = 32767;
    pub const INT_LEAST32_MAX: u32 = 2147483647;
    pub const UINT_LEAST8_MAX: u32 = 255;
    pub const UINT_LEAST16_MAX: u32 = 65535;
    pub const UINT_LEAST32_MAX: u32 = 4294967295;
    pub const INT_FAST8_MIN: i32 = -128;
    pub const INT_FAST16_MIN: i64 = -9223372036854775808;
    pub const INT_FAST32_MIN: i64 = -9223372036854775808;
    pub const INT_FAST8_MAX: u32 = 127;
    pub const INT_FAST16_MAX: u64 = 9223372036854775807;
    pub const INT_FAST32_MAX: u64 = 9223372036854775807;
    pub const UINT_FAST8_MAX: u32 = 255;
    pub const UINT_FAST16_MAX: i32 = -1;
    pub const UINT_FAST32_MAX: i32 = -1;
    pub const INTPTR_MIN: i64 = -9223372036854775808;
    pub const INTPTR_MAX: u64 = 9223372036854775807;
    pub const UINTPTR_MAX: i32 = -1;
    pub const PTRDIFF_MIN: i64 = -9223372036854775808;
    pub const PTRDIFF_MAX: u64 = 9223372036854775807;
    pub const SIG_ATOMIC_MIN: i32 = -2147483648;
    pub const SIG_ATOMIC_MAX: u32 = 2147483647;
    pub const SIZE_MAX: i32 = -1;
    pub const WINT_MIN: u32 = 0;
    pub const WINT_MAX: u32 = 4294967295;
    pub const INT8_WIDTH: u32 = 8;
    pub const UINT8_WIDTH: u32 = 8;
    pub const INT16_WIDTH: u32 = 16;
    pub const UINT16_WIDTH: u32 = 16;
    pub const INT32_WIDTH: u32 = 32;
    pub const UINT32_WIDTH: u32 = 32;
    pub const INT64_WIDTH: u32 = 64;
    pub const UINT64_WIDTH: u32 = 64;
    pub const INT_LEAST8_WIDTH: u32 = 8;
    pub const UINT_LEAST8_WIDTH: u32 = 8;
    pub const INT_LEAST16_WIDTH: u32 = 16;
    pub const UINT_LEAST16_WIDTH: u32 = 16;
    pub const INT_LEAST32_WIDTH: u32 = 32;
    pub const UINT_LEAST32_WIDTH: u32 = 32;
    pub const INT_LEAST64_WIDTH: u32 = 64;
    pub const UINT_LEAST64_WIDTH: u32 = 64;
    pub const INT_FAST8_WIDTH: u32 = 8;
    pub const UINT_FAST8_WIDTH: u32 = 8;
    pub const INT_FAST16_WIDTH: u32 = 64;
    pub const UINT_FAST16_WIDTH: u32 = 64;
    pub const INT_FAST32_WIDTH: u32 = 64;
    pub const UINT_FAST32_WIDTH: u32 = 64;
    pub const INT_FAST64_WIDTH: u32 = 64;
    pub const UINT_FAST64_WIDTH: u32 = 64;
    pub const INTPTR_WIDTH: u32 = 64;
    pub const UINTPTR_WIDTH: u32 = 64;
    pub const INTMAX_WIDTH: u32 = 64;
    pub const UINTMAX_WIDTH: u32 = 64;
    pub const PTRDIFF_WIDTH: u32 = 64;
    pub const SIG_ATOMIC_WIDTH: u32 = 32;
    pub const SIZE_WIDTH: u32 = 64;
    pub const WCHAR_WIDTH: u32 = 32;
    pub const WINT_WIDTH: u32 = 32;
    pub const _GLIBCXX_NUMERIC_LIMITS: u32 = 1;
    pub const _GLIBCXX_CTIME: u32 = 1;
    pub const _TIME_H: u32 = 1;
    pub const _BITS_TIME_H: u32 = 1;
    pub const CLOCK_REALTIME: u32 = 0;
    pub const CLOCK_MONOTONIC: u32 = 1;
    pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
    pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
    pub const CLOCK_MONOTONIC_RAW: u32 = 4;
    pub const CLOCK_REALTIME_COARSE: u32 = 5;
    pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
    pub const CLOCK_BOOTTIME: u32 = 7;
    pub const CLOCK_REALTIME_ALARM: u32 = 8;
    pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
    pub const CLOCK_TAI: u32 = 11;
    pub const TIMER_ABSTIME: u32 = 1;
    pub const _BITS_TIMEX_H: u32 = 1;
    pub const __timeval_defined: u32 = 1;
    pub const ADJ_OFFSET: u32 = 1;
    pub const ADJ_FREQUENCY: u32 = 2;
    pub const ADJ_MAXERROR: u32 = 4;
    pub const ADJ_ESTERROR: u32 = 8;
    pub const ADJ_STATUS: u32 = 16;
    pub const ADJ_TIMECONST: u32 = 32;
    pub const ADJ_TAI: u32 = 128;
    pub const ADJ_SETOFFSET: u32 = 256;
    pub const ADJ_MICRO: u32 = 4096;
    pub const ADJ_NANO: u32 = 8192;
    pub const ADJ_TICK: u32 = 16384;
    pub const ADJ_OFFSET_SINGLESHOT: u32 = 32769;
    pub const ADJ_OFFSET_SS_READ: u32 = 40961;
    pub const MOD_OFFSET: u32 = 1;
    pub const MOD_FREQUENCY: u32 = 2;
    pub const MOD_MAXERROR: u32 = 4;
    pub const MOD_ESTERROR: u32 = 8;
    pub const MOD_STATUS: u32 = 16;
    pub const MOD_TIMECONST: u32 = 32;
    pub const MOD_CLKB: u32 = 16384;
    pub const MOD_CLKA: u32 = 32769;
    pub const MOD_TAI: u32 = 128;
    pub const MOD_MICRO: u32 = 4096;
    pub const MOD_NANO: u32 = 8192;
    pub const STA_PLL: u32 = 1;
    pub const STA_PPSFREQ: u32 = 2;
    pub const STA_PPSTIME: u32 = 4;
    pub const STA_FLL: u32 = 8;
    pub const STA_INS: u32 = 16;
    pub const STA_DEL: u32 = 32;
    pub const STA_UNSYNC: u32 = 64;
    pub const STA_FREQHOLD: u32 = 128;
    pub const STA_PPSSIGNAL: u32 = 256;
    pub const STA_PPSJITTER: u32 = 512;
    pub const STA_PPSWANDER: u32 = 1024;
    pub const STA_PPSERROR: u32 = 2048;
    pub const STA_CLOCKERR: u32 = 4096;
    pub const STA_NANO: u32 = 8192;
    pub const STA_MODE: u32 = 16384;
    pub const STA_CLK: u32 = 32768;
    pub const STA_RONLY: u32 = 65280;
    pub const __clock_t_defined: u32 = 1;
    pub const __time_t_defined: u32 = 1;
    pub const __struct_tm_defined: u32 = 1;
    pub const _STRUCT_TIMESPEC: u32 = 1;
    pub const _BITS_ENDIAN_H: u32 = 1;
    pub const __LITTLE_ENDIAN: u32 = 1234;
    pub const __BIG_ENDIAN: u32 = 4321;
    pub const __PDP_ENDIAN: u32 = 3412;
    pub const _BITS_ENDIANNESS_H: u32 = 1;
    pub const __BYTE_ORDER: u32 = 1234;
    pub const __FLOAT_WORD_ORDER: u32 = 1234;
    pub const __clockid_t_defined: u32 = 1;
    pub const __timer_t_defined: u32 = 1;
    pub const __itimerspec_defined: u32 = 1;
    pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
    pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
    pub const TIME_UTC: u32 = 1;
    pub const _GLIBCXX_PARSE_NUMBERS_H: u32 = 1;
    pub const _EXT_NUMERIC_TRAITS: u32 = 1;
    pub const _CPP_TYPE_TRAITS_H: u32 = 1;
    pub const _EXT_TYPE_TRAITS: u32 = 1;
    pub const _FUNCTEXCEPT_H: u32 = 1;
    pub const _EXCEPTION_DEFINES_H: u32 = 1;
    pub const _GLIBCXX_MUTEX_H: u32 = 1;
    pub const __GTHREADS: u32 = 1;
    pub const __GTHREADS_CXX0X: u32 = 1;
    pub const _PTHREAD_H: u32 = 1;
    pub const _SCHED_H: u32 = 1;
    pub const _BITS_SCHED_H: u32 = 1;
    pub const SCHED_OTHER: u32 = 0;
    pub const SCHED_FIFO: u32 = 1;
    pub const SCHED_RR: u32 = 2;
    pub const SCHED_NORMAL: u32 = 0;
    pub const SCHED_BATCH: u32 = 3;
    pub const SCHED_ISO: u32 = 4;
    pub const SCHED_IDLE: u32 = 5;
    pub const SCHED_DEADLINE: u32 = 6;
    pub const SCHED_EXT: u32 = 7;
    pub const SCHED_RESET_ON_FORK: u32 = 1073741824;
    pub const SCHED_FLAG_RESET_ON_FORK: u32 = 1;
    pub const SCHED_FLAG_RECLAIM: u32 = 2;
    pub const SCHED_FLAG_DL_OVERRUN: u32 = 4;
    pub const SCHED_FLAG_KEEP_POLICY: u32 = 8;
    pub const SCHED_FLAG_KEEP_PARAMS: u32 = 16;
    pub const SCHED_FLAG_UTIL_CLAMP_MIN: u32 = 32;
    pub const SCHED_FLAG_UTIL_CLAMP_MAX: u32 = 64;
    pub const SCHED_FLAG_KEEP_ALL: u32 = 24;
    pub const SCHED_FLAG_UTIL_CLAMP: u32 = 96;
    pub const __BITS_PER_LONG: u32 = 64;
    pub const __BITS_PER_LONG_LONG: u32 = 64;
    pub const SCHED_ATTR_SIZE_VER0: u32 = 48;
    pub const SCHED_ATTR_SIZE_VER1: u32 = 56;
    pub const CSIGNAL: u32 = 255;
    pub const CLONE_VM: u32 = 256;
    pub const CLONE_FS: u32 = 512;
    pub const CLONE_FILES: u32 = 1024;
    pub const CLONE_SIGHAND: u32 = 2048;
    pub const CLONE_PIDFD: u32 = 4096;
    pub const CLONE_PTRACE: u32 = 8192;
    pub const CLONE_VFORK: u32 = 16384;
    pub const CLONE_PARENT: u32 = 32768;
    pub const CLONE_THREAD: u32 = 65536;
    pub const CLONE_NEWNS: u32 = 131072;
    pub const CLONE_SYSVSEM: u32 = 262144;
    pub const CLONE_SETTLS: u32 = 524288;
    pub const CLONE_PARENT_SETTID: u32 = 1048576;
    pub const CLONE_CHILD_CLEARTID: u32 = 2097152;
    pub const CLONE_DETACHED: u32 = 4194304;
    pub const CLONE_UNTRACED: u32 = 8388608;
    pub const CLONE_CHILD_SETTID: u32 = 16777216;
    pub const CLONE_NEWCGROUP: u32 = 33554432;
    pub const CLONE_NEWUTS: u32 = 67108864;
    pub const CLONE_NEWIPC: u32 = 134217728;
    pub const CLONE_NEWUSER: u32 = 268435456;
    pub const CLONE_NEWPID: u32 = 536870912;
    pub const CLONE_NEWNET: u32 = 1073741824;
    pub const CLONE_IO: u32 = 2147483648;
    pub const CLONE_NEWTIME: u32 = 128;
    pub const _BITS_TYPES_STRUCT_SCHED_PARAM: u32 = 1;
    pub const _BITS_CPU_SET_H: u32 = 1;
    pub const __CPU_SETSIZE: u32 = 1024;
    pub const CPU_SETSIZE: u32 = 1024;
    pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
    pub const _THREAD_SHARED_TYPES_H: u32 = 1;
    pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
    pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
    pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
    pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
    pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
    pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
    pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
    pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
    pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
    pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
    pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
    pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
    pub const __have_pthread_attr_t: u32 = 1;
    pub const _BITS_SETJMP_H: u32 = 1;
    pub const __jmp_buf_tag_defined: u32 = 1;
    pub const __SC_THREAD_STACK_MIN_VALUE: u32 = 75;
    pub const PTHREAD_ONCE_INIT: u32 = 0;
    pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
    pub const PTHREAD_ATTR_NO_SIGMASK_NP: i32 = -1;
    pub const __GTHREAD_HAS_COND: u32 = 1;
    pub const __GTHREAD_ONCE_INIT: u32 = 0;
    pub const _GLIBCXX_UNIQUE_LOCK_H: u32 = 1;
    pub const _GLIBCXX_ERROR_CONSTANTS: u32 = 1;
    pub const _GLIBCXX_CERRNO: u32 = 1;
    pub const _GLIBCXX_ATOMICITY_H: u32 = 1;
    pub const _GLIBCXX_ATOMIC_WORD_H: u32 = 1;
    pub const __cpp_lib_scoped_lock: u32 = 201703;
    pub const _GLIBCXX_THREAD: u32 = 1;
    pub const _GLIBCXX_THREAD_H: u32 = 1;
    pub const _GLIBCXX_IOSFWD: u32 = 1;
    pub const _STRINGFWD_H: u32 = 1;
    pub const _MEMORYFWD_H: u32 = 1;
    pub const _GLIBCXX_POSTYPES_H: u32 = 1;
    pub const _GLIBCXX_CWCHAR: u32 = 1;
    pub const _WCHAR_H: u32 = 1;
    pub const __HAVE_FLOAT128: u32 = 1;
    pub const __HAVE_DISTINCT_FLOAT128: u32 = 1;
    pub const __HAVE_FLOAT64X: u32 = 1;
    pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
    pub const __HAVE_FLOAT16: u32 = 0;
    pub const __HAVE_FLOAT32: u32 = 1;
    pub const __HAVE_FLOAT64: u32 = 1;
    pub const __HAVE_FLOAT32X: u32 = 1;
    pub const __HAVE_FLOAT128X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
    pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
    pub const __wint_t_defined: u32 = 1;
    pub const _WINT_T: u32 = 1;
    pub const __mbstate_t_defined: u32 = 1;
    pub const ____mbstate_t_defined: u32 = 1;
    pub const ____FILE_defined: u32 = 1;
    pub const __FILE_defined: u32 = 1;
    pub const WEOF: u32 = 4294967295;
    pub const _FUNCTIONAL_HASH_H: u32 = 1;
    pub const _HASH_BYTES_H: u32 = 1;
    pub const _GLIBCXX_REFWRAP_H: u32 = 1;
    pub const _STL_FUNCTION_H: u32 = 1;
    pub const _BACKWARD_BINDERS_H: u32 = 1;
    pub const _UNIQUE_PTR_H: u32 = 1;
    pub const _GLIBCXX_DEBUG_ASSERTIONS_H: u32 = 1;
    pub const _GLIBCXX_THIS_THREAD_SLEEP_H: u32 = 1;
    unsafe extern "C" {
        pub fn __assert_fail(
            __assertion: *const ::core::ffi::c_char,
            __file: *const ::core::ffi::c_char,
            __line: ::core::ffi::c_uint,
            __function: *const ::core::ffi::c_char,
        ) -> !;
    }
    unsafe extern "C" {
        pub fn __assert_perror_fail(
            __errnum: ::core::ffi::c_int,
            __file: *const ::core::ffi::c_char,
            __line: ::core::ffi::c_uint,
            __function: *const ::core::ffi::c_char,
        ) -> !;
    }
    unsafe extern "C" {
        pub fn __assert(
            __assertion: *const ::core::ffi::c_char,
            __file: *const ::core::ffi::c_char,
            __line: ::core::ffi::c_int,
        ) -> !;
    }
    pub mod std {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub type nullptr_t = *const ::core::ffi::c_void;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_string {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_stringbuf {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_istringstream {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_ostringstream {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_stringstream {
            pub _address: u8,
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt21__glibcxx_assert_failPKciS0_S0_"]
            pub fn __glibcxx_assert_fail(
                __file: *const ::core::ffi::c_char,
                __line: ::core::ffi::c_int,
                __function: *const ::core::ffi::c_char,
                __condition: *const ::core::ffi::c_char,
            ) -> !;
        }
        pub type integral_constant_value_type<_Tp> = _Tp;
        pub type integral_constant_type = u8;
        pub type __bool_constant = u8;
        pub type true_type = u8;
        pub type false_type = u8;
        pub type bool_constant = root::std::__bool_constant;
        pub type __enable_if_t = u8;
        pub type __conditional_type<_Tp> = _Tp;
        pub type __conditional_t = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __type_identity {
            pub _address: u8,
        }
        pub type __type_identity_type<_Type> = _Type;
        pub type __type_identity_t = root::std::__type_identity;
        pub mod __detail {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            pub type __first_t<_Tp> = _Tp;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __disjunction_impl {
                pub _address: u8,
            }
            pub type __disjunction_impl_type<_B1> = _B1;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __conjunction_impl {
                pub _address: u8,
            }
            pub type __conjunction_impl_type<_B1> = _B1;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _MakeUniq {
                pub _address: u8,
            }
            pub type _MakeUniq___single_object = root::std::unique_ptr;
            pub type __unique_ptr_t = root::std::__detail::_MakeUniq;
            pub type __unique_ptr_array_t = root::std::__detail::_MakeUniq;
            pub type __invalid_make_unique_t = root::std::__detail::_MakeUniq;
            pub mod __variant {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                #[repr(C)]
                #[derive(Debug, Copy, Clone)]
                pub struct _Never_valueless_alt {
                    pub _address: u8,
                }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __or_ {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __and_ {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __not_ {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct conjunction {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: conjunction_open0_close0"]
                [::core::mem::size_of::<root::std::conjunction>() - 1usize];
            ["Align of template specialization: conjunction_open0_close0"]
                [::core::mem::align_of::<root::std::conjunction>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct disjunction {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: disjunction_open0_close0"]
                [::core::mem::size_of::<root::std::disjunction>() - 1usize];
            ["Align of template specialization: disjunction_open0_close0"]
                [::core::mem::align_of::<root::std::disjunction>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct negation {
            pub _address: u8,
        }
        pub type __remove_cv_t = root::std::remove_cv;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_void {
            pub _base: root::std::false_type,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: is_void_open0_void_close0"]
                [::core::mem::size_of::<root::std::is_void>() - 1usize];
            ["Align of template specialization: is_void_open0_void_close0"]
                [::core::mem::align_of::<root::std::is_void>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: is_void_open0_const_void_close0"]
                [::core::mem::size_of::<root::std::is_void>() - 1usize];
            ["Align of template specialization: is_void_open0_const_void_close0"]
                [::core::mem::align_of::<root::std::is_void>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: is_void_open0_volatile_void_close0"]
                [::core::mem::size_of::<root::std::is_void>() - 1usize];
            ["Align of template specialization: is_void_open0_volatile_void_close0"]
                [::core::mem::align_of::<root::std::is_void>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: is_void_open0_const_volatile_void_close0"]
                [::core::mem::size_of::<root::std::is_void>() - 1usize];
            ["Align of template specialization: is_void_open0_const_volatile_void_close0"]
                [::core::mem::align_of::<root::std::is_void>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_integral_helper {
            pub _base: root::std::false_type,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_bool__close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_bool__close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_char_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_char_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_signed_char_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_signed_char_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_unsigned_char_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_unsigned_char_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_wchar_t_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_wchar_t_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_char16_t_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_char16_t_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_char32_t_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_char32_t_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_short_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_short_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_unsigned_short_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_unsigned_short_close0"] [:: core :: mem :: align_of :: < root :: std :: __is_integral_helper > () - 1usize] ;
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_int_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_int_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_unsigned_int_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_unsigned_int_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_long_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_long_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_unsigned_long_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_unsigned_long_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_long_long_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_long_long_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_unsigned_long_long_close0"] [:: core :: mem :: size_of :: < root :: std :: __is_integral_helper > () - 1usize] ;
            ["Align of template specialization: __is_integral_helper_open0_unsigned_long_long_close0"] [:: core :: mem :: align_of :: < root :: std :: __is_integral_helper > () - 1usize] ;
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_integral {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_floating_point_helper {
            pub _base: root::std::false_type,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_floating_point_helper_open0_float_close0"]
                [::core::mem::size_of::<root::std::__is_floating_point_helper>() - 1usize];
            ["Align of template specialization: __is_floating_point_helper_open0_float_close0"]
                [::core::mem::align_of::<root::std::__is_floating_point_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_floating_point_helper_open0_double_close0"]
                [::core::mem::size_of::<root::std::__is_floating_point_helper>() - 1usize];
            ["Align of template specialization: __is_floating_point_helper_open0_double_close0"]
                [::core::mem::align_of::<root::std::__is_floating_point_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_floating_point_helper_open0_long_double_close0"] [:: core :: mem :: size_of :: < root :: std :: __is_floating_point_helper > () - 1usize] ;
            ["Align of template specialization: __is_floating_point_helper_open0_long_double_close0"] [:: core :: mem :: align_of :: < root :: std :: __is_floating_point_helper > () - 1usize] ;
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_floating_point {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_array {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_lvalue_reference {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_rvalue_reference {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_member_object_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_member_function_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_enum {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_union {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_class {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_function {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_null_pointer {
            pub _base: root::std::false_type,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: is_null_pointer_open0_nullptr_t_close0"]
                [::core::mem::size_of::<root::std::is_null_pointer>() - 1usize];
            ["Align of template specialization: is_null_pointer_open0_nullptr_t_close0"]
                [::core::mem::align_of::<root::std::is_null_pointer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: is_null_pointer_open0_const_std__nullptr_t_close0"] [:: core :: mem :: size_of :: < root :: std :: is_null_pointer > () - 1usize] ;
            ["Align of template specialization: is_null_pointer_open0_const_std__nullptr_t_close0"] [:: core :: mem :: align_of :: < root :: std :: is_null_pointer > () - 1usize] ;
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: is_null_pointer_open0_volatile_std__nullptr_t_close0"] [:: core :: mem :: size_of :: < root :: std :: is_null_pointer > () - 1usize] ;
            ["Align of template specialization: is_null_pointer_open0_volatile_std__nullptr_t_close0"] [:: core :: mem :: align_of :: < root :: std :: is_null_pointer > () - 1usize] ;
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: is_null_pointer_open0_const_volatile_std__nullptr_t_close0"] [:: core :: mem :: size_of :: < root :: std :: is_null_pointer > () - 1usize] ;
            ["Align of template specialization: is_null_pointer_open0_const_volatile_std__nullptr_t_close0"] [:: core :: mem :: align_of :: < root :: std :: is_null_pointer > () - 1usize] ;
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nullptr_t {
            pub _base: root::std::is_null_pointer,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_reference {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_arithmetic {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_fundamental {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_object {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_scalar {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_compound {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_member_pointer {
            pub _address: u8,
        }
        pub type __is_one_of = root::std::__or_;
        pub type __is_signed_integer = root::std::__is_one_of;
        pub type __is_unsigned_integer = root::std::__is_one_of;
        pub type __is_standard_integer = root::std::__or_;
        pub type __void_t = ::core::ffi::c_void;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_const {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_volatile {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivial {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_copyable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_standard_layout {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_pod {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_literal_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_empty {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_polymorphic {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_final {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_abstract {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_signed {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_unsigned {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_array_known_bounds {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_array_unknown_bounds {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __do_is_destructible_impl {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __do_is_destructible_impl"]
                [::core::mem::size_of::<__do_is_destructible_impl>() - 1usize];
            ["Alignment of __do_is_destructible_impl"]
                [::core::mem::align_of::<__do_is_destructible_impl>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_destructible_impl {
            pub _address: u8,
        }
        pub type __is_destructible_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_destructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __do_is_nt_destructible_impl {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __do_is_nt_destructible_impl"]
                [::core::mem::size_of::<__do_is_nt_destructible_impl>() - 1usize];
            ["Alignment of __do_is_nt_destructible_impl"]
                [::core::mem::align_of::<__do_is_nt_destructible_impl>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nt_destructible_impl {
            pub _address: u8,
        }
        pub type __is_nt_destructible_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_destructible {
            pub _address: u8,
        }
        pub type __is_constructible_impl = root::std::__bool_constant;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_default_constructible {
            pub _address: u8,
        }
        pub type __add_lval_ref_t<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_copy_constructible {
            pub _address: u8,
        }
        pub type __add_rval_ref_t<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_move_constructible {
            pub _address: u8,
        }
        pub type __is_nothrow_constructible_impl = root::std::__bool_constant;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_default_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_copy_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_move_constructible {
            pub _address: u8,
        }
        pub type __is_assignable_impl = root::std::__bool_constant;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_copy_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_move_assignable {
            pub _address: u8,
        }
        pub type __is_nothrow_assignable_impl = root::std::__bool_constant;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_copy_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_move_assignable {
            pub _address: u8,
        }
        pub type __is_trivially_constructible_impl = root::std::__bool_constant;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_default_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __do_is_implicitly_default_constructible_impl {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __do_is_implicitly_default_constructible_impl"]
                [::core::mem::size_of::<__do_is_implicitly_default_constructible_impl>() - 1usize];
            ["Alignment of __do_is_implicitly_default_constructible_impl"]
                [::core::mem::align_of::<__do_is_implicitly_default_constructible_impl>() - 1usize];
        };
        unsafe extern "C" {
            #[link_name = "\u{1}_ZNSt45__do_is_implicitly_default_constructible_impl6__testEz"]
            pub fn __do_is_implicitly_default_constructible_impl___test() -> root::std::false_type;
        }
        impl __do_is_implicitly_default_constructible_impl {
            #[inline]
            pub unsafe fn __test() -> root::std::false_type {
                __do_is_implicitly_default_constructible_impl___test()
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_implicitly_default_constructible_impl {
            pub _address: u8,
        }
        pub type __is_implicitly_default_constructible_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_implicitly_default_constructible_safe {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_implicitly_default_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_copy_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_move_constructible {
            pub _address: u8,
        }
        pub type __is_trivially_assignable_impl = root::std::__bool_constant;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_copy_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_move_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_destructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct has_virtual_destructor {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct alignment_of {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct rank {
            pub _base: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_same {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_base_of {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_convertible {
            pub _address: u8,
        }
        pub type __is_array_convertible = root::std::is_convertible;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nothrow_new_constructible_impl {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_const {
            pub _address: u8,
        }
        pub type remove_const_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_volatile {
            pub _address: u8,
        }
        pub type remove_volatile_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_cv {
            pub _address: u8,
        }
        pub type remove_cv_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_const {
            pub _address: u8,
        }
        pub type add_const_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_volatile {
            pub _address: u8,
        }
        pub type add_volatile_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_cv {
            pub _address: u8,
        }
        pub type add_cv_type<_Tp> = _Tp;
        pub type remove_const_t = root::std::remove_const;
        pub type remove_volatile_t = root::std::remove_volatile;
        pub type remove_cv_t = root::std::remove_cv;
        pub type add_const_t = root::std::add_const;
        pub type add_volatile_t = root::std::add_volatile;
        pub type add_cv_t = root::std::add_cv;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_reference {
            pub _address: u8,
        }
        pub type remove_reference_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_lvalue_reference {
            pub _address: u8,
        }
        pub type add_lvalue_reference_type<_Tp> = root::std::__add_lval_ref_t<_Tp>;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_rvalue_reference {
            pub _address: u8,
        }
        pub type add_rvalue_reference_type<_Tp> = root::std::__add_rval_ref_t<_Tp>;
        pub type remove_reference_t = root::std::remove_reference;
        pub type add_lvalue_reference_t = root::std::add_lvalue_reference;
        pub type add_rvalue_reference_t = root::std::add_rvalue_reference;
        pub type __match_cv_qualifiers___match = u8;
        pub type __match_cv_qualifiers___type = root::std::__match_cv_qualifiers___match;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __make_unsigned {
            pub _address: u8,
        }
        pub type __make_unsigned___type<_Tp> = _Tp;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_unsigned_open0_char_close0"]
                [::core::mem::size_of::<root::std::__make_unsigned>() - 1usize];
            ["Align of template specialization: __make_unsigned_open0_char_close0"]
                [::core::mem::align_of::<root::std::__make_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_unsigned_open0_signed_char_close0"]
                [::core::mem::size_of::<root::std::__make_unsigned>() - 1usize];
            ["Align of template specialization: __make_unsigned_open0_signed_char_close0"]
                [::core::mem::align_of::<root::std::__make_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_unsigned_open0_short_close0"]
                [::core::mem::size_of::<root::std::__make_unsigned>() - 1usize];
            ["Align of template specialization: __make_unsigned_open0_short_close0"]
                [::core::mem::align_of::<root::std::__make_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_unsigned_open0_int_close0"]
                [::core::mem::size_of::<root::std::__make_unsigned>() - 1usize];
            ["Align of template specialization: __make_unsigned_open0_int_close0"]
                [::core::mem::align_of::<root::std::__make_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_unsigned_open0_long_close0"]
                [::core::mem::size_of::<root::std::__make_unsigned>() - 1usize];
            ["Align of template specialization: __make_unsigned_open0_long_close0"]
                [::core::mem::align_of::<root::std::__make_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_unsigned_open0_long_long_close0"]
                [::core::mem::size_of::<root::std::__make_unsigned>() - 1usize];
            ["Align of template specialization: __make_unsigned_open0_long_long_close0"]
                [::core::mem::align_of::<root::std::__make_unsigned>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __make_unsigned_selector_base {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __make_unsigned_selector_base__List {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __make_unsigned_selector_base"]
                [::core::mem::size_of::<__make_unsigned_selector_base>() - 1usize];
            ["Alignment of __make_unsigned_selector_base"]
                [::core::mem::align_of::<__make_unsigned_selector_base>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_unsigned_open0_wchar_t_close0"]
                [::core::mem::size_of::<root::std::__make_unsigned>() - 1usize];
            ["Align of template specialization: __make_unsigned_open0_wchar_t_close0"]
                [::core::mem::align_of::<root::std::__make_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_unsigned_open0_char16_t_close0"]
                [::core::mem::size_of::<root::std::__make_unsigned>() - 1usize];
            ["Align of template specialization: __make_unsigned_open0_char16_t_close0"]
                [::core::mem::align_of::<root::std::__make_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_unsigned_open0_char32_t_close0"]
                [::core::mem::size_of::<root::std::__make_unsigned>() - 1usize];
            ["Align of template specialization: __make_unsigned_open0_char32_t_close0"]
                [::core::mem::align_of::<root::std::__make_unsigned>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct make_unsigned {
            pub _address: u8,
        }
        pub type make_unsigned_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __make_signed {
            pub _address: u8,
        }
        pub type __make_signed___type<_Tp> = _Tp;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_signed_open0_char_close0"]
                [::core::mem::size_of::<root::std::__make_signed>() - 1usize];
            ["Align of template specialization: __make_signed_open0_char_close0"]
                [::core::mem::align_of::<root::std::__make_signed>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_signed_open0_unsigned_char_close0"]
                [::core::mem::size_of::<root::std::__make_signed>() - 1usize];
            ["Align of template specialization: __make_signed_open0_unsigned_char_close0"]
                [::core::mem::align_of::<root::std::__make_signed>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_signed_open0_unsigned_short_close0"]
                [::core::mem::size_of::<root::std::__make_signed>() - 1usize];
            ["Align of template specialization: __make_signed_open0_unsigned_short_close0"]
                [::core::mem::align_of::<root::std::__make_signed>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_signed_open0_unsigned_int_close0"]
                [::core::mem::size_of::<root::std::__make_signed>() - 1usize];
            ["Align of template specialization: __make_signed_open0_unsigned_int_close0"]
                [::core::mem::align_of::<root::std::__make_signed>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_signed_open0_unsigned_long_close0"]
                [::core::mem::size_of::<root::std::__make_signed>() - 1usize];
            ["Align of template specialization: __make_signed_open0_unsigned_long_close0"]
                [::core::mem::align_of::<root::std::__make_signed>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_signed_open0_unsigned_long_long_close0"]
                [::core::mem::size_of::<root::std::__make_signed>() - 1usize];
            ["Align of template specialization: __make_signed_open0_unsigned_long_long_close0"]
                [::core::mem::align_of::<root::std::__make_signed>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_signed_open0_wchar_t_close0"]
                [::core::mem::size_of::<root::std::__make_signed>() - 1usize];
            ["Align of template specialization: __make_signed_open0_wchar_t_close0"]
                [::core::mem::align_of::<root::std::__make_signed>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_signed_open0_char16_t_close0"]
                [::core::mem::size_of::<root::std::__make_signed>() - 1usize];
            ["Align of template specialization: __make_signed_open0_char16_t_close0"]
                [::core::mem::align_of::<root::std::__make_signed>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_signed_open0_char32_t_close0"]
                [::core::mem::size_of::<root::std::__make_signed>() - 1usize];
            ["Align of template specialization: __make_signed_open0_char32_t_close0"]
                [::core::mem::align_of::<root::std::__make_signed>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct make_signed {
            pub _address: u8,
        }
        pub type make_signed_type = u8;
        pub type make_signed_t = root::std::make_signed;
        pub type make_unsigned_t = root::std::make_unsigned;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_extent {
            pub _address: u8,
        }
        pub type remove_extent_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_all_extents {
            pub _address: u8,
        }
        pub type remove_all_extents_type<_Tp> = _Tp;
        pub type remove_extent_t = root::std::remove_extent;
        pub type remove_all_extents_t = root::std::remove_all_extents;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_pointer {
            pub _address: u8,
        }
        pub type remove_pointer_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_pointer {
            pub _address: u8,
        }
        pub type add_pointer_type<_Tp> = _Tp;
        pub type remove_pointer_t = root::std::remove_pointer;
        pub type add_pointer_t = root::std::add_pointer;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __aligned_storage_max_align_t {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __aligned_storage_max_align_t"]
                [::core::mem::size_of::<__aligned_storage_max_align_t>() - 16usize];
            ["Alignment of __aligned_storage_max_align_t"]
                [::core::mem::align_of::<__aligned_storage_max_align_t>() - 16usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct aligned_storage_type {
            pub __data: *mut ::core::ffi::c_uchar,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __strictest_alignment {
            pub _address: u8,
        }
        pub type aligned_union___strictest = root::std::__strictest_alignment;
        pub type aligned_union_type = u8;
        unsafe extern "C" {
            pub static alignment_value: usize;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct decay {
            pub _address: u8,
        }
        pub type decay_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __strip_reference_wrapper {
            pub _address: u8,
        }
        pub type __strip_reference_wrapper___type<_Tp> = _Tp;
        pub type __decay_t = root::std::decay;
        pub type __decay_and_strip = root::std::__strip_reference_wrapper;
        pub type _Require = root::std::__enable_if_t;
        pub type __remove_cvref_t = root::std::remove_cv;
        pub type conditional_type<_Iftrue> = _Iftrue;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct common_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __success_type {
            pub _address: u8,
        }
        pub type __success_type_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __failure_type {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __failure_type"][::core::mem::size_of::<__failure_type>() - 1usize];
            ["Alignment of __failure_type"][::core::mem::align_of::<__failure_type>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __do_common_type_impl {
            pub _address: u8,
        }
        pub type __do_common_type_impl___cond_t<_Tp> = _Tp;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __do_common_type_impl"]
                [::core::mem::size_of::<__do_common_type_impl>() - 1usize];
            ["Alignment of __do_common_type_impl"]
                [::core::mem::align_of::<__do_common_type_impl>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: common_type_open0_close0"]
                [::core::mem::size_of::<root::std::common_type>() - 1usize];
            ["Align of template specialization: common_type_open0_close0"]
                [::core::mem::align_of::<root::std::common_type>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __common_type_impl {
            pub _address: u8,
        }
        pub type __common_type_impl_type = root::std::common_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __common_type_pack {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __common_type_fold {
            pub _address: u8,
        }
        pub type __underlying_type_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct underlying_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __declval_protector {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct result_of {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __invoke_memfun_ref {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __invoke_memfun_ref"][::core::mem::size_of::<__invoke_memfun_ref>() - 1usize];
            ["Alignment of __invoke_memfun_ref"]
                [::core::mem::align_of::<__invoke_memfun_ref>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __invoke_memfun_deref {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __invoke_memfun_deref"]
                [::core::mem::size_of::<__invoke_memfun_deref>() - 1usize];
            ["Alignment of __invoke_memfun_deref"]
                [::core::mem::align_of::<__invoke_memfun_deref>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __invoke_memobj_ref {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __invoke_memobj_ref"][::core::mem::size_of::<__invoke_memobj_ref>() - 1usize];
            ["Alignment of __invoke_memobj_ref"]
                [::core::mem::align_of::<__invoke_memobj_ref>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __invoke_memobj_deref {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __invoke_memobj_deref"]
                [::core::mem::size_of::<__invoke_memobj_deref>() - 1usize];
            ["Alignment of __invoke_memobj_deref"]
                [::core::mem::align_of::<__invoke_memobj_deref>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __invoke_other {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __invoke_other"][::core::mem::size_of::<__invoke_other>() - 1usize];
            ["Alignment of __invoke_other"][::core::mem::align_of::<__invoke_other>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_success {
            pub _address: u8,
        }
        pub type __result_of_success___invoke_type<_Tag> = _Tag;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memfun_ref_impl {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __result_of_memfun_ref_impl"]
                [::core::mem::size_of::<__result_of_memfun_ref_impl>() - 1usize];
            ["Alignment of __result_of_memfun_ref_impl"]
                [::core::mem::align_of::<__result_of_memfun_ref_impl>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memfun_ref {
            pub _address: u8,
        }
        pub type __result_of_memfun_ref_type<_MemPtr> = _MemPtr;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memfun_deref_impl {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __result_of_memfun_deref_impl"]
                [::core::mem::size_of::<__result_of_memfun_deref_impl>() - 1usize];
            ["Alignment of __result_of_memfun_deref_impl"]
                [::core::mem::align_of::<__result_of_memfun_deref_impl>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memfun_deref {
            pub _address: u8,
        }
        pub type __result_of_memfun_deref_type<_MemPtr> = _MemPtr;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memobj_ref_impl {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __result_of_memobj_ref_impl"]
                [::core::mem::size_of::<__result_of_memobj_ref_impl>() - 1usize];
            ["Alignment of __result_of_memobj_ref_impl"]
                [::core::mem::align_of::<__result_of_memobj_ref_impl>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memobj_ref {
            pub _address: u8,
        }
        pub type __result_of_memobj_ref_type<_MemPtr> = _MemPtr;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memobj_deref_impl {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __result_of_memobj_deref_impl"]
                [::core::mem::size_of::<__result_of_memobj_deref_impl>() - 1usize];
            ["Alignment of __result_of_memobj_deref_impl"]
                [::core::mem::align_of::<__result_of_memobj_deref_impl>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memobj_deref {
            pub _address: u8,
        }
        pub type __result_of_memobj_deref_type<_MemPtr> = _MemPtr;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memobj {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memfun {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __inv_unwrap {
            pub _address: u8,
        }
        pub type __inv_unwrap_type<_Tp> = _Tp;
        pub type __result_of_impl_type = root::std::__failure_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_other_impl {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __result_of_other_impl"]
                [::core::mem::size_of::<__result_of_other_impl>() - 1usize];
            ["Alignment of __result_of_other_impl"]
                [::core::mem::align_of::<__result_of_other_impl>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __invoke_result {
            pub _address: u8,
        }
        pub type __invoke_result_t = root::std::__invoke_result;
        pub type aligned_storage_t = u8;
        pub type aligned_union_t = u8;
        pub type decay_t = root::std::decay;
        pub type enable_if_t = u8;
        pub type conditional_t = u8;
        pub type common_type_t = root::std::common_type;
        pub type underlying_type_t = root::std::underlying_type;
        pub type result_of_t = root::std::result_of;
        pub type void_t = ::core::ffi::c_void;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __detector {
            pub _address: u8,
        }
        pub type __detector_type<_Default> = _Default;
        pub type __detector___is_detected = root::std::false_type;
        pub type __detected_or = root::std::__detector;
        pub type __detected_or_t = root::std::__detected_or;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_tuple_like_impl {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_tuple_like {
            pub _address: u8,
        }
        pub mod __swappable_details {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __do_is_swappable_impl {
                pub _address: u8,
            }
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of __do_is_swappable_impl"]
                    [::core::mem::size_of::<__do_is_swappable_impl>() - 1usize];
                ["Alignment of __do_is_swappable_impl"]
                    [::core::mem::align_of::<__do_is_swappable_impl>() - 1usize];
            };
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __do_is_nothrow_swappable_impl {
                pub _address: u8,
            }
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of __do_is_nothrow_swappable_impl"]
                    [::core::mem::size_of::<__do_is_nothrow_swappable_impl>() - 1usize];
                ["Alignment of __do_is_nothrow_swappable_impl"]
                    [::core::mem::align_of::<__do_is_nothrow_swappable_impl>() - 1usize];
            };
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_swappable_impl {
            pub _address: u8,
        }
        pub type __is_swappable_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nothrow_swappable_impl {
            pub _address: u8,
        }
        pub type __is_nothrow_swappable_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_swappable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nothrow_swappable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_swappable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_swappable {
            pub _address: u8,
        }
        pub mod __swappable_with_details {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __do_is_swappable_with_impl {
                pub _address: u8,
            }
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of __do_is_swappable_with_impl"]
                    [::core::mem::size_of::<__do_is_swappable_with_impl>() - 1usize];
                ["Alignment of __do_is_swappable_with_impl"]
                    [::core::mem::align_of::<__do_is_swappable_with_impl>() - 1usize];
            };
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __do_is_nothrow_swappable_with_impl {
                pub _address: u8,
            }
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of __do_is_nothrow_swappable_with_impl"]
                    [::core::mem::size_of::<__do_is_nothrow_swappable_with_impl>() - 1usize];
                ["Alignment of __do_is_nothrow_swappable_with_impl"]
                    [::core::mem::align_of::<__do_is_nothrow_swappable_with_impl>() - 1usize];
            };
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_swappable_with_impl {
            pub _address: u8,
        }
        pub type __is_swappable_with_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nothrow_swappable_with_impl {
            pub _address: u8,
        }
        pub type __is_nothrow_swappable_with_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_swappable_with {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_swappable_with {
            pub _address: u8,
        }
        pub type __is_invocable_impl___nothrow_conv = root::std::false_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_invocable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __call_is_nothrow {
            pub _address: u8,
        }
        pub type __call_is_nothrow_ = root::std::__call_is_nothrow;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nothrow_invocable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __nonesuchbase {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __nonesuchbase"][::core::mem::size_of::<__nonesuchbase>() - 1usize];
            ["Alignment of __nonesuchbase"][::core::mem::align_of::<__nonesuchbase>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug)]
        pub struct __nonesuch {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __nonesuch"][::core::mem::size_of::<__nonesuch>() - 1usize];
            ["Alignment of __nonesuch"][::core::mem::align_of::<__nonesuch>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct invoke_result {
            pub _address: u8,
        }
        pub type invoke_result_t = root::std::invoke_result;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_invocable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_invocable_r {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_invocable {
            pub _address: u8,
        }
        pub type __is_nt_invocable_impl = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_invocable_r {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct has_unique_object_representations {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_aggregate {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __move_if_noexcept_cond {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct tuple_size {
            pub _address: u8,
        }
        pub type __enable_if_has_tuple_size<_Tp> = _Tp;
        pub type __tuple_element_t = u8;
        pub type tuple_element_t = u8;
        pub type _Build_index_tuple__IdxTuple = u8;
        pub type _Build_index_tuple___type = u8;
        pub type integer_sequence_value_type<_Tp> = _Tp;
        pub type make_integer_sequence = u8;
        pub type index_sequence = u8;
        pub type make_index_sequence = root::std::make_integer_sequence;
        pub type index_sequence_for = root::std::make_index_sequence;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct in_place_t {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of in_place_t"][::core::mem::size_of::<in_place_t>() - 1usize];
            ["Alignment of in_place_t"][::core::mem::align_of::<in_place_t>() - 1usize];
        };
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt8in_place"]
            pub static in_place: root::std::in_place_t;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct in_place_type_t {
            pub _address: u8,
        }
        pub type _Nth_type_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Swallow_assign {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of _Swallow_assign"][::core::mem::size_of::<_Swallow_assign>() - 1usize];
            ["Alignment of _Swallow_assign"][::core::mem::align_of::<_Swallow_assign>() - 1usize];
        };
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt6ignore"]
            pub static ignore: root::std::_Swallow_assign;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct piecewise_construct_t {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of piecewise_construct_t"]
                [::core::mem::size_of::<piecewise_construct_t>() - 1usize];
            ["Alignment of piecewise_construct_t"]
                [::core::mem::align_of::<piecewise_construct_t>() - 1usize];
        };
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt19piecewise_construct"]
            pub static piecewise_construct: root::std::piecewise_construct_t;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct complex {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct __pair_base {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct pair<_T1, _T2> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_T1>>,
            pub _phantom_1: ::core::marker::PhantomData<::core::cell::UnsafeCell<_T2>>,
            pub first: _T1,
            pub second: _T2,
        }
        pub type pair_first_type<_T1> = _T1;
        pub type pair_second_type<_T2> = _T2;
        pub type pair__PCCP = u8;
        pub type pair__PCCFP = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct pair___zero_as_null_pointer_constant {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __erased_type {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __erased_type"][::core::mem::size_of::<__erased_type>() - 1usize];
            ["Alignment of __erased_type"][::core::mem::align_of::<__erased_type>() - 1usize];
        };
        pub type __is_erased_or_convertible = root::std::__or_;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_arg_t {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of allocator_arg_t"][::core::mem::size_of::<allocator_arg_t>() - 1usize];
            ["Alignment of allocator_arg_t"][::core::mem::align_of::<allocator_arg_t>() - 1usize];
        };
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt13allocator_arg"]
            pub static allocator_arg: root::std::allocator_arg_t;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __uses_allocator_helper {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct uses_allocator {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __uses_alloc_base {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __uses_alloc_base"][::core::mem::size_of::<__uses_alloc_base>() - 1usize];
            ["Alignment of __uses_alloc_base"]
                [::core::mem::align_of::<__uses_alloc_base>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __uses_alloc0 {
            pub _M_a: root::std::__uses_alloc0__Sink,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __uses_alloc0__Sink {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __uses_alloc0__Sink"][::core::mem::size_of::<__uses_alloc0__Sink>() - 1usize];
            ["Alignment of __uses_alloc0__Sink"]
                [::core::mem::align_of::<__uses_alloc0__Sink>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __uses_alloc0"][::core::mem::size_of::<__uses_alloc0>() - 1usize];
            ["Alignment of __uses_alloc0"][::core::mem::align_of::<__uses_alloc0>() - 1usize];
            ["Offset of field: __uses_alloc0::_M_a"]
                [::core::mem::offset_of!(__uses_alloc0, _M_a) - 0usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __uses_alloc1<_Alloc> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Alloc>>,
            pub _M_a: *const _Alloc,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __uses_alloc2<_Alloc> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Alloc>>,
            pub _M_a: *const _Alloc,
        }
        pub type __uses_alloc_t = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_uses_allocator_predicate {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_uses_allocator_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nothrow_uses_allocator_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_empty_non_tuple {
            pub _address: u8,
        }
        pub type __empty_not_final = root::std::__conditional_t;
        pub type _TupleConstraints___constructible = root::std::__and_;
        pub type _TupleConstraints___convertible = root::std::__and_;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct tuple {
            pub _address: u8,
        }
        pub type tuple__Inherited = u8;
        pub type tuple__TCC = u8;
        pub type tuple__ImplicitDefaultCtor = root::std::__enable_if_t;
        pub type tuple__ExplicitDefaultCtor = root::std::__enable_if_t;
        pub type tuple__ImplicitCtor = root::std::__enable_if_t;
        pub type tuple__ExplicitCtor = root::std::__enable_if_t;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct tuple__UseOtherCtor {
            pub _base: root::std::false_type,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: tuple_open0_close0"]
                [::core::mem::size_of::<root::std::tuple>() - 1usize];
            ["Align of template specialization: tuple_open0_close0"]
                [::core::mem::align_of::<root::std::tuple>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __do_make_tuple {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __make_tuple {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __combine_tuples {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __combine_tuples_open0_close0"]
                [::core::mem::size_of::<root::std::__combine_tuples>() - 1usize];
            ["Align of template specialization: __combine_tuples_open0_close0"]
                [::core::mem::align_of::<root::std::__combine_tuples>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __tuple_cat_result {
            pub _address: u8,
        }
        pub type __tuple_cat_result___type = root::std::__combine_tuples;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __make_1st_indices {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_1st_indices_open0_close0"]
                [::core::mem::size_of::<root::std::__make_1st_indices>() - 1usize];
            ["Align of template specialization: __make_1st_indices_open0_close0"]
                [::core::mem::align_of::<root::std::__make_1st_indices>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __tuple_concater {
            pub _address: u8,
        }
        pub const __safe_multiply___c: ::core::ffi::c_ulong = 4294967296;
        unsafe extern "C" {
            #[link_name = "\u{1}__a0"]
            pub static __safe_multiply___a0: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__a1"]
            pub static __safe_multiply___a1: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__b0"]
            pub static __safe_multiply___b0: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__b1"]
            pub static __safe_multiply___b1: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}value"]
            pub static __safe_multiply_value: ::core::ffi::c_long;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__lo"]
            pub static __big_add___lo: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__hi"]
            pub static __big_add___hi: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__lo"]
            pub static __big_sub___lo: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__hi"]
            pub static __big_sub___hi: ::core::ffi::c_ulong;
        }
        pub const __big_mul___c: ::core::ffi::c_ulong = 4294967296;
        unsafe extern "C" {
            #[link_name = "\u{1}__x0"]
            pub static __big_mul___x0: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__x1"]
            pub static __big_mul___x1: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__y0"]
            pub static __big_mul___y0: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__y1"]
            pub static __big_mul___y1: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__x0y0"]
            pub static __big_mul___x0y0: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__x0y1"]
            pub static __big_mul___x0y1: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__x1y0"]
            pub static __big_mul___x1y0: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__x1y1"]
            pub static __big_mul___x1y1: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__mix"]
            pub static __big_mul___mix: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__mix_lo"]
            pub static __big_mul___mix_lo: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__mix_hi"]
            pub static __big_mul___mix_hi: ::core::ffi::c_ulong;
        }
        pub type __big_mul__Res = u8;
        unsafe extern "C" {
            #[link_name = "\u{1}__hi"]
            pub static __big_mul___hi: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__lo"]
            pub static __big_mul___lo: ::core::ffi::c_ulong;
        }
        pub const __big_div_impl___c: ::core::ffi::c_ulong = 4294967296;
        unsafe extern "C" {
            #[link_name = "\u{1}__d1"]
            pub static __big_div_impl___d1: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__d0"]
            pub static __big_div_impl___d0: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__q1x"]
            pub static __big_div_impl___q1x: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__r1x"]
            pub static __big_div_impl___r1x: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__m"]
            pub static __big_div_impl___m: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__r1y"]
            pub static __big_div_impl___r1y: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__r1z"]
            pub static __big_div_impl___r1z: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__r1"]
            pub static __big_div_impl___r1: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__q1"]
            pub static __big_div_impl___q1: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__q0x"]
            pub static __big_div_impl___q0x: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__r0x"]
            pub static __big_div_impl___r0x: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__n"]
            pub static __big_div_impl___n: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__r0y"]
            pub static __big_div_impl___r0y: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__r0z"]
            pub static __big_div_impl___r0z: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__r0"]
            pub static __big_div_impl___r0: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__q0"]
            pub static __big_div_impl___q0: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__quot"]
            pub static __big_div_impl___quot: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__rem"]
            pub static __big_div_impl___rem: ::core::ffi::c_ulong;
        }
        pub type __big_div_impl__Prod = u8;
        pub type __big_div_impl__Sum = u8;
        unsafe extern "C" {
            #[link_name = "\u{1}__shift"]
            pub static __big_div___shift: ::core::ffi::c_int;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__coshift_"]
            pub static __big_div___coshift_: ::core::ffi::c_int;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__coshift"]
            pub static __big_div___coshift: ::core::ffi::c_int;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__c1"]
            pub static __big_div___c1: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__c2"]
            pub static __big_div___c2: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__new_d"]
            pub static __big_div___new_d: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__new_n0"]
            pub static __big_div___new_n0: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__n1_shifted"]
            pub static __big_div___n1_shifted: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__n0_top"]
            pub static __big_div___n0_top: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__new_n1"]
            pub static __big_div___new_n1: ::core::ffi::c_ulong;
        }
        pub type __big_div__Res = u8;
        unsafe extern "C" {
            #[link_name = "\u{1}__quot_hi"]
            pub static __big_div___quot_hi: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__quot_lo"]
            pub static __big_div___quot_lo: ::core::ffi::c_ulong;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}__rem"]
            pub static __big_div___rem: ::core::ffi::c_ulong;
        }
        pub type __big_div__P0 = u8;
        pub type __big_div__P1 = u8;
        pub type __big_div__Sum = u8;
        unsafe extern "C" {
            #[link_name = "\u{1}num"]
            pub static ratio_num: ::core::ffi::c_long;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}den"]
            pub static ratio_den: ::core::ffi::c_long;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_ratio {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __ratio_multiply {
            pub _address: u8,
        }
        pub type __ratio_multiply_type = u8;
        pub type ratio_multiply = root::std::__ratio_multiply;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __ratio_divide {
            pub _address: u8,
        }
        pub type __ratio_divide_type = root::std::__ratio_multiply;
        pub type ratio_divide = root::std::__ratio_divide;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ratio_equal {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ratio_not_equal {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __ratio_less_impl_1 {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ratio_less {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ratio_less_equal {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ratio_greater {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ratio_greater_equal {
            pub _address: u8,
        }
        pub type __ratio_add_impl___t = u8;
        pub type __ratio_add_impl_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __ratio_add {
            pub _address: u8,
        }
        pub type __ratio_add_type = u8;
        pub type ratio_add = root::std::__ratio_add;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __ratio_subtract {
            pub _address: u8,
        }
        pub type __ratio_subtract_type = root::std::__ratio_add;
        pub type ratio_subtract = root::std::__ratio_subtract;
        pub type atto = u8;
        pub type femto = u8;
        pub type pico = u8;
        pub type nano = u8;
        pub type micro = u8;
        pub type milli = u8;
        pub type centi = u8;
        pub type deci = u8;
        pub type deca = u8;
        pub type hecto = u8;
        pub type kilo = u8;
        pub type mega = u8;
        pub type giga = u8;
        pub type tera = u8;
        pub type peta = u8;
        pub type exa = u8;
        pub const float_round_style_round_indeterminate: root::std::float_round_style = -1;
        pub const float_round_style_round_toward_zero: root::std::float_round_style = 0;
        pub const float_round_style_round_to_nearest: root::std::float_round_style = 1;
        pub const float_round_style_round_toward_infinity: root::std::float_round_style = 2;
        pub const float_round_style_round_toward_neg_infinity: root::std::float_round_style = 3;
        pub type float_round_style = ::core::ffi::c_int;
        pub const float_denorm_style_denorm_indeterminate: root::std::float_denorm_style = -1;
        pub const float_denorm_style_denorm_absent: root::std::float_denorm_style = 0;
        pub const float_denorm_style_denorm_present: root::std::float_denorm_style = 1;
        pub type float_denorm_style = ::core::ffi::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __numeric_limits_base {
            pub _address: u8,
        }
        pub const __numeric_limits_base_is_specialized: bool = false;
        pub const __numeric_limits_base_digits: ::core::ffi::c_int = 0;
        pub const __numeric_limits_base_digits10: ::core::ffi::c_int = 0;
        pub const __numeric_limits_base_max_digits10: ::core::ffi::c_int = 0;
        pub const __numeric_limits_base_is_signed: bool = false;
        pub const __numeric_limits_base_is_integer: bool = false;
        pub const __numeric_limits_base_is_exact: bool = false;
        pub const __numeric_limits_base_radix: ::core::ffi::c_int = 0;
        pub const __numeric_limits_base_min_exponent: ::core::ffi::c_int = 0;
        pub const __numeric_limits_base_min_exponent10: ::core::ffi::c_int = 0;
        pub const __numeric_limits_base_max_exponent: ::core::ffi::c_int = 0;
        pub const __numeric_limits_base_max_exponent10: ::core::ffi::c_int = 0;
        pub const __numeric_limits_base_has_infinity: bool = false;
        pub const __numeric_limits_base_has_quiet_NaN: bool = false;
        pub const __numeric_limits_base_has_signaling_NaN: bool = false;
        unsafe extern "C" {
            #[link_name = "\u{1}_ZNSt21__numeric_limits_base10has_denormE"]
            pub static __numeric_limits_base_has_denorm: root::std::float_denorm_style;
        }
        pub const __numeric_limits_base_has_denorm_loss: bool = false;
        pub const __numeric_limits_base_is_iec559: bool = false;
        pub const __numeric_limits_base_is_bounded: bool = false;
        pub const __numeric_limits_base_is_modulo: bool = false;
        pub const __numeric_limits_base_traps: bool = false;
        pub const __numeric_limits_base_tinyness_before: bool = false;
        unsafe extern "C" {
            #[link_name = "\u{1}_ZNSt21__numeric_limits_base11round_styleE"]
            pub static __numeric_limits_base_round_style: root::std::float_round_style;
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __numeric_limits_base"]
                [::core::mem::size_of::<__numeric_limits_base>() - 1usize];
            ["Alignment of __numeric_limits_base"]
                [::core::mem::align_of::<__numeric_limits_base>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct numeric_limits {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: numeric_limits_open0_bool__close0"]
                [::core::mem::size_of::<root::std::numeric_limits>() - 1usize];
            ["Align of template specialization: numeric_limits_open0_bool__close0"]
                [::core::mem::align_of::<root::std::numeric_limits>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: numeric_limits_open0_char_close0"]
                [::core::mem::size_of::<root::std::numeric_limits>() - 1usize];
            ["Align of template specialization: numeric_limits_open0_char_close0"]
                [::core::mem::align_of::<root::std::numeric_limits>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: numeric_limits_open0_signed_char_close0"]
                [::core::mem::size_of::<root::std::numeric_limits>() - 1usize];
            ["Align of template specialization: numeric_limits_open0_signed_char_close0"]
                [::core::mem::align_of::<root::std::numeric_limits>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: numeric_limits_open0_unsigned_char_close0"]
                [::core::mem::size_of::<root::std::numeric_limits>() - 1usize];
            ["Align of template specialization: numeric_limits_open0_unsigned_char_close0"]
                [::core::mem::align_of::<root::std::numeric_limits>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: numeric_limits_open0_wchar_t_close0"]
                [::core::mem::size_of::<root::std::numeric_limits>() - 1usize];
            ["Align of template specialization: numeric_limits_open0_wchar_t_close0"]
                [::core::mem::align_of::<root::std::numeric_limits>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: numeric_limits_open0_char16_t_close0"]
                [::core::mem::size_of::<root::std::numeric_limits>() - 1usize];
            ["Align of template specialization: numeric_limits_open0_char16_t_close0"]
                [::core::mem::align_of::<root::std::numeric_limits>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: numeric_limits_open0_char32_t_close0"]
                [::core::mem::size_of::<root::std::numeric_limits>() - 1usize];
            ["Align of template specialization: numeric_limits_open0_char32_t_close0"]
                [::core::mem::align_of::<root::std::numeric_limits>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: numeric_limits_open0_short_close0"]
                [::core::mem::size_of::<root::std::numeric_limits>() - 1usize];
            ["Align of template specialization: numeric_limits_open0_short_close0"]
                [::core::mem::align_of::<root::std::numeric_limits>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: numeric_limits_open0_unsigned_short_close0"]
                [::core::mem::size_of::<root::std::numeric_limits>() - 1usize];
            ["Align of template specialization: numeric_limits_open0_unsigned_short_close0"]
                [::core::mem::align_of::<root::std::numeric_limits>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: numeric_limits_open0_int_close0"]
                [::core::mem::size_of::<root::std::numeric_limits>() - 1usize];
            ["Align of template specialization: numeric_limits_open0_int_close0"]
                [::core::mem::align_of::<root::std::numeric_limits>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: numeric_limits_open0_unsigned_int_close0"]
                [::core::mem::size_of::<root::std::numeric_limits>() - 1usize];
            ["Align of template specialization: numeric_limits_open0_unsigned_int_close0"]
                [::core::mem::align_of::<root::std::numeric_limits>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: numeric_limits_open0_long_close0"]
                [::core::mem::size_of::<root::std::numeric_limits>() - 1usize];
            ["Align of template specialization: numeric_limits_open0_long_close0"]
                [::core::mem::align_of::<root::std::numeric_limits>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: numeric_limits_open0_unsigned_long_close0"]
                [::core::mem::size_of::<root::std::numeric_limits>() - 1usize];
            ["Align of template specialization: numeric_limits_open0_unsigned_long_close0"]
                [::core::mem::align_of::<root::std::numeric_limits>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: numeric_limits_open0_long_long_close0"]
                [::core::mem::size_of::<root::std::numeric_limits>() - 1usize];
            ["Align of template specialization: numeric_limits_open0_long_long_close0"]
                [::core::mem::align_of::<root::std::numeric_limits>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: numeric_limits_open0_unsigned_long_long_close0"]
                [::core::mem::size_of::<root::std::numeric_limits>() - 1usize];
            ["Align of template specialization: numeric_limits_open0_unsigned_long_long_close0"]
                [::core::mem::align_of::<root::std::numeric_limits>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: numeric_limits_open0___int128_close0"]
                [::core::mem::size_of::<root::std::numeric_limits>() - 1usize];
            ["Align of template specialization: numeric_limits_open0___int128_close0"]
                [::core::mem::align_of::<root::std::numeric_limits>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: numeric_limits_open0_unsigned___int128_close0"]
                [::core::mem::size_of::<root::std::numeric_limits>() - 1usize];
            ["Align of template specialization: numeric_limits_open0_unsigned___int128_close0"]
                [::core::mem::align_of::<root::std::numeric_limits>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: numeric_limits_open0_float_close0"]
                [::core::mem::size_of::<root::std::numeric_limits>() - 1usize];
            ["Align of template specialization: numeric_limits_open0_float_close0"]
                [::core::mem::align_of::<root::std::numeric_limits>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: numeric_limits_open0_double_close0"]
                [::core::mem::size_of::<root::std::numeric_limits>() - 1usize];
            ["Align of template specialization: numeric_limits_open0_double_close0"]
                [::core::mem::align_of::<root::std::numeric_limits>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: numeric_limits_open0_long_double_close0"]
                [::core::mem::size_of::<root::std::numeric_limits>() - 1usize];
            ["Align of template specialization: numeric_limits_open0_long_double_close0"]
                [::core::mem::align_of::<root::std::numeric_limits>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: numeric_limits_open0___float128_close0"]
                [::core::mem::size_of::<root::std::numeric_limits>() - 1usize];
            ["Align of template specialization: numeric_limits_open0___float128_close0"]
                [::core::mem::align_of::<root::std::numeric_limits>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __true_type {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __true_type"][::core::mem::size_of::<__true_type>() - 1usize];
            ["Alignment of __true_type"][::core::mem::align_of::<__true_type>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __false_type {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __false_type"][::core::mem::size_of::<__false_type>() - 1usize];
            ["Alignment of __false_type"][::core::mem::align_of::<__false_type>() - 1usize];
        };
        pub type __truth_type___type = root::std::__false_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __traitor {
            pub _address: u8,
        }
        pub const __traitor___value: root::std::__traitor__bindgen_ty_1 = 0;
        pub type __traitor__bindgen_ty_1 = i32;
        pub type __traitor___type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __are_same {
            pub _address: u8,
        }
        pub const __are_same___value: root::std::__are_same__bindgen_ty_1 = 0;
        pub type __are_same__bindgen_ty_1 = i32;
        pub type __are_same___type = root::std::__false_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_integer {
            pub _address: u8,
        }
        pub const __is_integer___value: root::std::__is_integer__bindgen_ty_1 = 0;
        pub type __is_integer__bindgen_ty_1 = i32;
        pub type __is_integer___type = root::std::__false_type;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_bool__close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_bool__close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_char_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_char_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_signed_char_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_signed_char_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_unsigned_char_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_unsigned_char_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_wchar_t_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_wchar_t_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_char16_t_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_char16_t_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_char32_t_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_char32_t_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_short_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_short_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_unsigned_short_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_unsigned_short_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_int_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_int_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_unsigned_int_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_unsigned_int_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_long_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_long_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_unsigned_long_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_unsigned_long_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_long_long_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_long_long_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_unsigned_long_long_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_unsigned_long_long_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_floating {
            pub _address: u8,
        }
        pub const __is_floating___value: root::std::__is_floating__bindgen_ty_1 = 0;
        pub type __is_floating__bindgen_ty_1 = i32;
        pub type __is_floating___type = root::std::__false_type;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_floating_open0_float_close0"]
                [::core::mem::size_of::<root::std::__is_floating>() - 1usize];
            ["Align of template specialization: __is_floating_open0_float_close0"]
                [::core::mem::align_of::<root::std::__is_floating>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_floating_open0_double_close0"]
                [::core::mem::size_of::<root::std::__is_floating>() - 1usize];
            ["Align of template specialization: __is_floating_open0_double_close0"]
                [::core::mem::align_of::<root::std::__is_floating>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_floating_open0_long_double_close0"]
                [::core::mem::size_of::<root::std::__is_floating>() - 1usize];
            ["Align of template specialization: __is_floating_open0_long_double_close0"]
                [::core::mem::align_of::<root::std::__is_floating>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_arithmetic {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_char {
            pub _address: u8,
        }
        pub const __is_char___value: root::std::__is_char__bindgen_ty_1 = 0;
        pub type __is_char__bindgen_ty_1 = i32;
        pub type __is_char___type = root::std::__false_type;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_char_open0_char_close0"]
                [::core::mem::size_of::<root::std::__is_char>() - 1usize];
            ["Align of template specialization: __is_char_open0_char_close0"]
                [::core::mem::align_of::<root::std::__is_char>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_char_open0_wchar_t_close0"]
                [::core::mem::size_of::<root::std::__is_char>() - 1usize];
            ["Align of template specialization: __is_char_open0_wchar_t_close0"]
                [::core::mem::align_of::<root::std::__is_char>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_byte {
            pub _address: u8,
        }
        pub const __is_byte___value: root::std::__is_byte__bindgen_ty_1 = 0;
        pub type __is_byte__bindgen_ty_1 = i32;
        pub type __is_byte___type = root::std::__false_type;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_byte_open0_char_close0"]
                [::core::mem::size_of::<root::std::__is_byte>() - 1usize];
            ["Align of template specialization: __is_byte_open0_char_close0"]
                [::core::mem::align_of::<root::std::__is_byte>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_byte_open0_signed_char_close0"]
                [::core::mem::size_of::<root::std::__is_byte>() - 1usize];
            ["Align of template specialization: __is_byte_open0_signed_char_close0"]
                [::core::mem::align_of::<root::std::__is_byte>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_byte_open0_unsigned_char_close0"]
                [::core::mem::size_of::<root::std::__is_byte>() - 1usize];
            ["Align of template specialization: __is_byte_open0_unsigned_char_close0"]
                [::core::mem::align_of::<root::std::__is_byte>() - 1usize];
        };
        pub type byte = ::core::ffi::c_uchar;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_byte_open0_byte_close0"]
                [::core::mem::size_of::<root::std::__is_byte>() - 1usize];
            ["Align of template specialization: __is_byte_open0_byte_close0"]
                [::core::mem::align_of::<root::std::__is_byte>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nonvolatile_trivially_copyable {
            pub _address: u8,
        }
        pub const __is_nonvolatile_trivially_copyable___value:
            root::std::__is_nonvolatile_trivially_copyable__bindgen_ty_1 = 0;
        pub type __is_nonvolatile_trivially_copyable__bindgen_ty_1 = i32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __memcpyable {
            pub _address: u8,
        }
        pub const __memcpyable___value: root::std::__memcpyable__bindgen_ty_1 = 0;
        pub type __memcpyable__bindgen_ty_1 = i32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __memcpyable_integer {
            pub _address: u8,
        }
        pub const __memcpyable_integer___width: root::std::__memcpyable_integer__bindgen_ty_1 = 0;
        pub type __memcpyable_integer__bindgen_ty_1 = i32;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __memcpyable_integer_open0___int128_close0"]
                [::core::mem::size_of::<root::std::__memcpyable_integer>() - 1usize];
            ["Align of template specialization: __memcpyable_integer_open0___int128_close0"]
                [::core::mem::align_of::<root::std::__memcpyable_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __memcpyable_integer_open0_unsigned___int128_close0"] [:: core :: mem :: size_of :: < root :: std :: __memcpyable_integer > () - 1usize] ;
            ["Align of template specialization: __memcpyable_integer_open0_unsigned___int128_close0"] [:: core :: mem :: align_of :: < root :: std :: __memcpyable_integer > () - 1usize] ;
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __memcmpable {
            pub _address: u8,
        }
        pub const __memcmpable___value: root::std::__memcmpable__bindgen_ty_1 = 0;
        pub type __memcmpable__bindgen_ty_1 = i32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_move_iterator {
            pub _address: u8,
        }
        pub const __is_move_iterator___value: root::std::__is_move_iterator__bindgen_ty_1 = 0;
        pub type __is_move_iterator__bindgen_ty_1 = i32;
        pub type __is_move_iterator___type = root::std::__false_type;
        pub mod __parse_int {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            pub type _Digit_impl___valid = root::std::true_type;
            pub type __ull_constant = u8;
            pub type _Power_help___next = u8;
            pub type _Power_help___valid_digit = u8;
            pub type _Power_help_type = root::std::__parse_int::__ull_constant;
            pub type _Number_help___digit = u8;
            pub type _Number_help___valid_digit = root::std::__parse_int::_Number_help___digit;
            pub type _Number_help_type = root::std::__parse_int::__ull_constant;
        }
        pub mod __select_int {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            pub type _Select_int = u8;
        }
        pub mod filesystem {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __file_clock {
                pub _address: u8,
            }
            pub type __file_clock_duration = root::std::chrono::nanoseconds;
            pub type __file_clock_rep = root::rep;
            pub type __file_clock_period = u8;
            pub type __file_clock_time_point =
                root::std::chrono::time_point<root::std::chrono::duration<::core::ffi::c_long>>;
            pub type __file_clock___sys_clock = root::std::chrono::system_clock;
            pub const __file_clock_is_steady: bool = false;
            unsafe extern "C" {
                #[link_name = "\u{1}_ZNSt10filesystem12__file_clock13_S_epoch_diffE"]
                pub static __file_clock__S_epoch_diff: root::std::chrono::seconds;
            }
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of __file_clock"][::core::mem::size_of::<__file_clock>() - 1usize];
                ["Alignment of __file_clock"][::core::mem::align_of::<__file_clock>() - 1usize];
            };
        }
        pub mod chrono {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __is_duration {
                pub _base: root::std::false_type,
            }
            pub type __enable_if_is_duration = u8;
            pub type __disable_if_is_duration = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct treat_as_floating_point {
                pub _address: u8,
            }
            pub mod __detail {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct duration_values {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug)]
            pub struct duration<_Rep> {
                pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Rep>>,
                pub __r: root::std::chrono::duration_rep<_Rep>,
            }
            pub type duration___is_float = root::std::chrono::treat_as_floating_point;
            pub type duration___divide = u8;
            pub type duration___is_harmonic = root::std::__bool_constant;
            pub type duration_rep<_Rep> = _Rep;
            pub type duration_period = root::__BindgenOpaqueArray<u8, 0usize>;
            pub type __common_rep_t = u8;
            pub type nanoseconds = root::std::chrono::duration<::core::ffi::c_long>;
            pub type microseconds = root::std::chrono::duration<::core::ffi::c_long>;
            pub type milliseconds = root::std::chrono::duration<::core::ffi::c_long>;
            pub type seconds = root::std::chrono::duration<::core::ffi::c_long>;
            pub type minutes = root::std::chrono::duration<::core::ffi::c_long>;
            pub type hours = root::std::chrono::duration<::core::ffi::c_long>;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct time_point<_Dur> {
                pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Dur>>,
                pub __d: root::std::chrono::time_point_duration<_Dur>,
            }
            pub type time_point_clock<_Clock> = _Clock;
            pub type time_point_duration<_Dur> = _Dur;
            pub type time_point_rep = root::__BindgenOpaqueArray<u8, 0usize>;
            pub type time_point_period = root::__BindgenOpaqueArray<u8, 0usize>;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct system_clock {
                pub _address: u8,
            }
            pub type system_clock_duration = root::std::chrono::nanoseconds;
            pub type system_clock_rep = root::rep;
            pub type system_clock_period = u8;
            pub type system_clock_time_point =
                root::std::chrono::time_point<root::std::chrono::system_clock_duration>;
            pub const system_clock_is_steady: bool = false;
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of system_clock"][::core::mem::size_of::<system_clock>() - 1usize];
                ["Alignment of system_clock"][::core::mem::align_of::<system_clock>() - 1usize];
            };
            unsafe extern "C" {
                #[link_name = "\u{1}_ZNSt6chrono3_V212system_clock3nowEv"]
                pub fn system_clock_now() -> root::std::chrono::system_clock_time_point;
            }
            impl system_clock {
                #[inline]
                pub unsafe fn now() -> root::std::chrono::system_clock_time_point {
                    system_clock_now()
                }
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct steady_clock {
                pub _address: u8,
            }
            pub type steady_clock_duration = root::std::chrono::nanoseconds;
            pub type steady_clock_rep = root::rep;
            pub type steady_clock_period = u8;
            pub type steady_clock_time_point =
                root::std::chrono::time_point<root::std::chrono::steady_clock_duration>;
            pub const steady_clock_is_steady: bool = true;
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of steady_clock"][::core::mem::size_of::<steady_clock>() - 1usize];
                ["Alignment of steady_clock"][::core::mem::align_of::<steady_clock>() - 1usize];
            };
            unsafe extern "C" {
                #[link_name = "\u{1}_ZNSt6chrono3_V212steady_clock3nowEv"]
                pub fn steady_clock_now() -> root::std::chrono::steady_clock_time_point;
            }
            impl steady_clock {
                #[inline]
                pub unsafe fn now() -> root::std::chrono::steady_clock_time_point {
                    steady_clock_now()
                }
            }
            pub type high_resolution_clock = root::std::chrono::system_clock;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __duration_common_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __timepoint_common_type {
            pub _address: u8,
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt21__throw_bad_exceptionv"]
            pub fn __throw_bad_exception() -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt17__throw_bad_allocv"]
            pub fn __throw_bad_alloc() -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt28__throw_bad_array_new_lengthv"]
            pub fn __throw_bad_array_new_length() -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt16__throw_bad_castv"]
            pub fn __throw_bad_cast() -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt18__throw_bad_typeidv"]
            pub fn __throw_bad_typeid() -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt19__throw_logic_errorPKc"]
            pub fn __throw_logic_error(arg1: *const ::core::ffi::c_char) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_domain_errorPKc"]
            pub fn __throw_domain_error(arg1: *const ::core::ffi::c_char) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt24__throw_invalid_argumentPKc"]
            pub fn __throw_invalid_argument(arg1: *const ::core::ffi::c_char) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_length_errorPKc"]
            pub fn __throw_length_error(arg1: *const ::core::ffi::c_char) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_out_of_rangePKc"]
            pub fn __throw_out_of_range(arg1: *const ::core::ffi::c_char) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt24__throw_out_of_range_fmtPKcz"]
            pub fn __throw_out_of_range_fmt(arg1: *const ::core::ffi::c_char, ...) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt21__throw_runtime_errorPKc"]
            pub fn __throw_runtime_error(arg1: *const ::core::ffi::c_char) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt19__throw_range_errorPKc"]
            pub fn __throw_range_error(arg1: *const ::core::ffi::c_char) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt22__throw_overflow_errorPKc"]
            pub fn __throw_overflow_error(arg1: *const ::core::ffi::c_char) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt23__throw_underflow_errorPKc"]
            pub fn __throw_underflow_error(arg1: *const ::core::ffi::c_char) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt19__throw_ios_failurePKc"]
            pub fn __throw_ios_failure(arg1: *const ::core::ffi::c_char) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt19__throw_ios_failurePKci"]
            pub fn __throw_ios_failure1(
                arg1: *const ::core::ffi::c_char,
                arg2: ::core::ffi::c_int,
            ) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_system_errori"]
            pub fn __throw_system_error(arg1: ::core::ffi::c_int) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_future_errori"]
            pub fn __throw_future_error(arg1: ::core::ffi::c_int) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt25__throw_bad_function_callv"]
            pub fn __throw_bad_function_call() -> !;
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct __mutex_base {
            pub _M_mutex: root::std::__mutex_base___native_type,
        }
        pub type __mutex_base___native_type = root::__gthread_mutex_t;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __mutex_base"][::core::mem::size_of::<__mutex_base>() - 40usize];
            ["Alignment of __mutex_base"][::core::mem::align_of::<__mutex_base>() - 8usize];
            ["Offset of field: __mutex_base::_M_mutex"]
                [::core::mem::offset_of!(__mutex_base, _M_mutex) - 0usize];
        };
        #[repr(C)]
        pub struct mutex {
            pub _base: root::std::__mutex_base,
        }
        pub type mutex_native_handle_type = *mut root::std::__mutex_base___native_type;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of mutex"][::core::mem::size_of::<mutex>() - 40usize];
            ["Alignment of mutex"][::core::mem::align_of::<mutex>() - 8usize];
        };
        #[repr(C)]
        pub struct __condvar {
            pub _M_cond: root::__gthread_cond_t,
        }
        pub type __condvar_timespec = root::__gthread_time_t;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __condvar"][::core::mem::size_of::<__condvar>() - 48usize];
            ["Alignment of __condvar"][::core::mem::align_of::<__condvar>() - 8usize];
            ["Offset of field: __condvar::_M_cond"]
                [::core::mem::offset_of!(__condvar, _M_cond) - 0usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct defer_lock_t {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of defer_lock_t"][::core::mem::size_of::<defer_lock_t>() - 1usize];
            ["Alignment of defer_lock_t"][::core::mem::align_of::<defer_lock_t>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct try_to_lock_t {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of try_to_lock_t"][::core::mem::size_of::<try_to_lock_t>() - 1usize];
            ["Alignment of try_to_lock_t"][::core::mem::align_of::<try_to_lock_t>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct adopt_lock_t {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of adopt_lock_t"][::core::mem::size_of::<adopt_lock_t>() - 1usize];
            ["Alignment of adopt_lock_t"][::core::mem::align_of::<adopt_lock_t>() - 1usize];
        };
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt10defer_lock"]
            pub static defer_lock: root::std::defer_lock_t;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt11try_to_lock"]
            pub static try_to_lock: root::std::try_to_lock_t;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt10adopt_lock"]
            pub static adopt_lock: root::std::adopt_lock_t;
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct lock_guard<_Mutex> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Mutex>>,
            pub _M_device: *mut root::std::lock_guard_mutex_type<_Mutex>,
        }
        pub type lock_guard_mutex_type<_Mutex> = _Mutex;
        pub const errc_address_family_not_supported: root::std::errc = 97;
        pub const errc_address_in_use: root::std::errc = 98;
        pub const errc_address_not_available: root::std::errc = 99;
        pub const errc_already_connected: root::std::errc = 106;
        pub const errc_argument_list_too_long: root::std::errc = 7;
        pub const errc_argument_out_of_domain: root::std::errc = 33;
        pub const errc_bad_address: root::std::errc = 14;
        pub const errc_bad_file_descriptor: root::std::errc = 9;
        pub const errc_bad_message: root::std::errc = 74;
        pub const errc_broken_pipe: root::std::errc = 32;
        pub const errc_connection_aborted: root::std::errc = 103;
        pub const errc_connection_already_in_progress: root::std::errc = 114;
        pub const errc_connection_refused: root::std::errc = 111;
        pub const errc_connection_reset: root::std::errc = 104;
        pub const errc_cross_device_link: root::std::errc = 18;
        pub const errc_destination_address_required: root::std::errc = 89;
        pub const errc_device_or_resource_busy: root::std::errc = 16;
        pub const errc_directory_not_empty: root::std::errc = 39;
        pub const errc_executable_format_error: root::std::errc = 8;
        pub const errc_file_exists: root::std::errc = 17;
        pub const errc_file_too_large: root::std::errc = 27;
        pub const errc_filename_too_long: root::std::errc = 36;
        pub const errc_function_not_supported: root::std::errc = 38;
        pub const errc_host_unreachable: root::std::errc = 113;
        pub const errc_identifier_removed: root::std::errc = 43;
        pub const errc_illegal_byte_sequence: root::std::errc = 84;
        pub const errc_inappropriate_io_control_operation: root::std::errc = 25;
        pub const errc_interrupted: root::std::errc = 4;
        pub const errc_invalid_argument: root::std::errc = 22;
        pub const errc_invalid_seek: root::std::errc = 29;
        pub const errc_io_error: root::std::errc = 5;
        pub const errc_is_a_directory: root::std::errc = 21;
        pub const errc_message_size: root::std::errc = 90;
        pub const errc_network_down: root::std::errc = 100;
        pub const errc_network_reset: root::std::errc = 102;
        pub const errc_network_unreachable: root::std::errc = 101;
        pub const errc_no_buffer_space: root::std::errc = 105;
        pub const errc_no_child_process: root::std::errc = 10;
        pub const errc_no_link: root::std::errc = 67;
        pub const errc_no_lock_available: root::std::errc = 37;
        pub const errc_no_message_available: root::std::errc = 61;
        pub const errc_no_message: root::std::errc = 42;
        pub const errc_no_protocol_option: root::std::errc = 92;
        pub const errc_no_space_on_device: root::std::errc = 28;
        pub const errc_no_stream_resources: root::std::errc = 63;
        pub const errc_no_such_device_or_address: root::std::errc = 6;
        pub const errc_no_such_device: root::std::errc = 19;
        pub const errc_no_such_file_or_directory: root::std::errc = 2;
        pub const errc_no_such_process: root::std::errc = 3;
        pub const errc_not_a_directory: root::std::errc = 20;
        pub const errc_not_a_socket: root::std::errc = 88;
        pub const errc_not_a_stream: root::std::errc = 60;
        pub const errc_not_connected: root::std::errc = 107;
        pub const errc_not_enough_memory: root::std::errc = 12;
        pub const errc_not_supported: root::std::errc = 95;
        pub const errc_operation_canceled: root::std::errc = 125;
        pub const errc_operation_in_progress: root::std::errc = 115;
        pub const errc_operation_not_permitted: root::std::errc = 1;
        pub const errc_operation_not_supported: root::std::errc = 95;
        pub const errc_operation_would_block: root::std::errc = 11;
        pub const errc_owner_dead: root::std::errc = 130;
        pub const errc_permission_denied: root::std::errc = 13;
        pub const errc_protocol_error: root::std::errc = 71;
        pub const errc_protocol_not_supported: root::std::errc = 93;
        pub const errc_read_only_file_system: root::std::errc = 30;
        pub const errc_resource_deadlock_would_occur: root::std::errc = 35;
        pub const errc_resource_unavailable_try_again: root::std::errc = 11;
        pub const errc_result_out_of_range: root::std::errc = 34;
        pub const errc_state_not_recoverable: root::std::errc = 131;
        pub const errc_stream_timeout: root::std::errc = 62;
        pub const errc_text_file_busy: root::std::errc = 26;
        pub const errc_timed_out: root::std::errc = 110;
        pub const errc_too_many_files_open_in_system: root::std::errc = 23;
        pub const errc_too_many_files_open: root::std::errc = 24;
        pub const errc_too_many_links: root::std::errc = 31;
        pub const errc_too_many_symbolic_link_levels: root::std::errc = 40;
        pub const errc_value_too_large: root::std::errc = 75;
        pub const errc_wrong_protocol_type: root::std::errc = 91;
        pub type errc = ::core::ffi::c_int;
        #[repr(C)]
        #[derive(Debug)]
        pub struct unique_lock<_Mutex> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Mutex>>,
            pub _M_device: *mut root::std::unique_lock_mutex_type<_Mutex>,
            pub _M_owns: bool,
        }
        pub type unique_lock_mutex_type<_Mutex> = _Mutex;
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct __recursive_mutex_base {
            pub _M_mutex: root::std::__recursive_mutex_base___native_type,
        }
        pub type __recursive_mutex_base___native_type = root::__gthread_recursive_mutex_t;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __recursive_mutex_base"]
                [::core::mem::size_of::<__recursive_mutex_base>() - 40usize];
            ["Alignment of __recursive_mutex_base"]
                [::core::mem::align_of::<__recursive_mutex_base>() - 8usize];
            ["Offset of field: __recursive_mutex_base::_M_mutex"]
                [::core::mem::offset_of!(__recursive_mutex_base, _M_mutex) - 0usize];
        };
        #[repr(C)]
        pub struct recursive_mutex {
            pub _base: root::std::__recursive_mutex_base,
        }
        pub type recursive_mutex_native_handle_type =
            *mut root::std::__recursive_mutex_base___native_type;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of recursive_mutex"][::core::mem::size_of::<recursive_mutex>() - 40usize];
            ["Alignment of recursive_mutex"][::core::mem::align_of::<recursive_mutex>() - 8usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __timed_mutex_impl {
            pub _address: u8,
        }
        #[repr(C)]
        pub struct timed_mutex {
            pub _base: root::std::__mutex_base,
        }
        pub type timed_mutex_native_handle_type = *mut root::std::__mutex_base___native_type;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of timed_mutex"][::core::mem::size_of::<timed_mutex>() - 40usize];
            ["Alignment of timed_mutex"][::core::mem::align_of::<timed_mutex>() - 8usize];
        };
        #[repr(C)]
        pub struct recursive_timed_mutex {
            pub _base: root::std::__recursive_mutex_base,
        }
        pub type recursive_timed_mutex_native_handle_type =
            *mut root::std::__recursive_mutex_base___native_type;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of recursive_timed_mutex"]
                [::core::mem::size_of::<recursive_timed_mutex>() - 40usize];
            ["Alignment of recursive_timed_mutex"]
                [::core::mem::align_of::<recursive_timed_mutex>() - 8usize];
        };
        #[repr(C)]
        #[derive(Debug)]
        pub struct scoped_lock {
            pub _M_devices: root::std::tuple,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: scoped_lock_open0_close0"]
                [::core::mem::size_of::<root::std::scoped_lock>() - 1usize];
            ["Align of template specialization: scoped_lock_open0_close0"]
                [::core::mem::align_of::<root::std::scoped_lock>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct once_flag {
            pub _M_once: root::__gthread_once_t,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of once_flag"][::core::mem::size_of::<once_flag>() - 4usize];
            ["Alignment of once_flag"][::core::mem::align_of::<once_flag>() - 4usize];
            ["Offset of field: once_flag::_M_once"]
                [::core::mem::offset_of!(once_flag, _M_once) - 0usize];
        };
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt15__once_callable"]
            pub static mut __once_callable: *mut ::core::ffi::c_void;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt11__once_call"]
            pub static mut __once_call: ::core::option::Option<unsafe extern "C" fn()>;
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct once_flag__Prepare_execution {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of once_flag__Prepare_execution"]
                [::core::mem::size_of::<once_flag__Prepare_execution>() - 1usize];
            ["Alignment of once_flag__Prepare_execution"]
                [::core::mem::align_of::<once_flag__Prepare_execution>() - 1usize];
        };
        unsafe extern "C" {
            pub fn __once_proxy();
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_traits {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct char_traits {
            pub _address: u8,
        }
        pub type string = root::std::basic_string;
        pub type wstring = root::std::basic_string;
        pub type u16string = root::std::basic_string;
        pub type u32string = root::std::basic_string;
        pub type streamoff = ::core::ffi::c_long;
        pub type streamsize = isize;
        #[repr(C)]
        #[derive(Debug)]
        pub struct fpos<_StateT> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_StateT>>,
            pub _M_off: root::std::streamoff,
            pub _M_state: _StateT,
        }
        pub type streampos = root::std::fpos<root::__mbstate_t>;
        pub type wstreampos = root::std::fpos<root::__mbstate_t>;
        pub type u16streampos = root::std::fpos<root::__mbstate_t>;
        pub type u32streampos = root::std::fpos<root::__mbstate_t>;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ios_base {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_ios {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_streambuf {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_istream {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_ostream {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_iostream {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_filebuf {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_ifstream {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_ofstream {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_fstream {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct istreambuf_iterator {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ostreambuf_iterator {
            pub _address: u8,
        }
        pub type ios = root::std::basic_ios;
        pub type streambuf = root::std::basic_streambuf;
        pub type istream = root::std::basic_istream;
        pub type ostream = root::std::basic_ostream;
        pub type iostream = root::std::basic_iostream;
        pub type stringbuf = root::std::basic_stringbuf;
        pub type istringstream = root::std::basic_istringstream;
        pub type ostringstream = root::std::basic_ostringstream;
        pub type stringstream = root::std::basic_stringstream;
        pub type filebuf = root::std::basic_filebuf;
        pub type ifstream = root::std::basic_ifstream;
        pub type ofstream = root::std::basic_ofstream;
        pub type fstream = root::std::basic_fstream;
        pub type wios = root::std::basic_ios;
        pub type wstreambuf = root::std::basic_streambuf;
        pub type wistream = root::std::basic_istream;
        pub type wostream = root::std::basic_ostream;
        pub type wiostream = root::std::basic_iostream;
        pub type wstringbuf = root::std::basic_stringbuf;
        pub type wistringstream = root::std::basic_istringstream;
        pub type wostringstream = root::std::basic_ostringstream;
        pub type wstringstream = root::std::basic_stringstream;
        pub type wfilebuf = root::std::basic_filebuf;
        pub type wifstream = root::std::basic_ifstream;
        pub type wofstream = root::std::basic_ofstream;
        pub type wfstream = root::std::basic_fstream;
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt11_Hash_bytesPKvmm"]
            pub fn _Hash_bytes(
                __ptr: *const ::core::ffi::c_void,
                __len: usize,
                __seed: usize,
            ) -> usize;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt15_Fnv_hash_bytesPKvmm"]
            pub fn _Fnv_hash_bytes(
                __ptr: *const ::core::ffi::c_void,
                __len: usize,
                __seed: usize,
            ) -> usize;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __hash_base {
            pub _address: u8,
        }
        pub type __hash_base_result_type<_Result> = _Result;
        pub type __hash_base_argument_type<_Arg> = _Arg;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __hash_empty_base {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct __hash_not_enabled {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct hash {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_bool__close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_bool__close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_char_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_char_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_signed_char_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_signed_char_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_unsigned_char_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_unsigned_char_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_wchar_t_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_wchar_t_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_char16_t_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_char16_t_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_char32_t_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_char32_t_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_short_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_short_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_int_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_int_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_long_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_long_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_long_long_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_long_long_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_unsigned_short_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_unsigned_short_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_unsigned_int_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_unsigned_int_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_unsigned_long_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_unsigned_long_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_unsigned_long_long_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_unsigned_long_long_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Hash_impl {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of _Hash_impl"][::core::mem::size_of::<_Hash_impl>() - 1usize];
            ["Alignment of _Hash_impl"][::core::mem::align_of::<_Hash_impl>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Fnv_hash_impl {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of _Fnv_hash_impl"][::core::mem::size_of::<_Fnv_hash_impl>() - 1usize];
            ["Alignment of _Fnv_hash_impl"][::core::mem::align_of::<_Fnv_hash_impl>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_float_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_float_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_double_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_double_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_long_double_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_long_double_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_nullptr_t_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_nullptr_t_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_fast_hash {
            pub _base: root::std::true_type,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_fast_hash_open0_hash_open1_long_double_close1_close0"] [:: core :: mem :: size_of :: < root :: std :: __is_fast_hash > () - 1usize] ;
            ["Align of template specialization: __is_fast_hash_open0_hash_open1_long_double_close1_close0"] [:: core :: mem :: align_of :: < root :: std :: __is_fast_hash > () - 1usize] ;
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct unary_function {
            pub _address: u8,
        }
        pub type unary_function_argument_type<_Arg> = _Arg;
        pub type unary_function_result_type<_Result> = _Result;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct binary_function {
            pub _address: u8,
        }
        pub type binary_function_first_argument_type<_Arg1> = _Arg1;
        pub type binary_function_second_argument_type<_Arg2> = _Arg2;
        pub type binary_function_result_type<_Result> = _Result;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_transparent {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct plus {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct minus {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct multiplies {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct divides {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct modulus {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct negate {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: plus_open0_void_close0"]
                [::core::mem::size_of::<root::std::plus>() - 1usize];
            ["Align of template specialization: plus_open0_void_close0"]
                [::core::mem::align_of::<root::std::plus>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: minus_open0_void_close0"]
                [::core::mem::size_of::<root::std::minus>() - 1usize];
            ["Align of template specialization: minus_open0_void_close0"]
                [::core::mem::align_of::<root::std::minus>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: multiplies_open0_void_close0"]
                [::core::mem::size_of::<root::std::multiplies>() - 1usize];
            ["Align of template specialization: multiplies_open0_void_close0"]
                [::core::mem::align_of::<root::std::multiplies>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: divides_open0_void_close0"]
                [::core::mem::size_of::<root::std::divides>() - 1usize];
            ["Align of template specialization: divides_open0_void_close0"]
                [::core::mem::align_of::<root::std::divides>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: modulus_open0_void_close0"]
                [::core::mem::size_of::<root::std::modulus>() - 1usize];
            ["Align of template specialization: modulus_open0_void_close0"]
                [::core::mem::align_of::<root::std::modulus>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: negate_open0_void_close0"]
                [::core::mem::size_of::<root::std::negate>() - 1usize];
            ["Align of template specialization: negate_open0_void_close0"]
                [::core::mem::align_of::<root::std::negate>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct equal_to {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct not_equal_to {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct greater {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct less {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct greater_equal {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct less_equal {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: equal_to_open0_void_close0"]
                [::core::mem::size_of::<root::std::equal_to>() - 1usize];
            ["Align of template specialization: equal_to_open0_void_close0"]
                [::core::mem::align_of::<root::std::equal_to>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: not_equal_to_open0_void_close0"]
                [::core::mem::size_of::<root::std::not_equal_to>() - 1usize];
            ["Align of template specialization: not_equal_to_open0_void_close0"]
                [::core::mem::align_of::<root::std::not_equal_to>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: greater_open0_void_close0"]
                [::core::mem::size_of::<root::std::greater>() - 1usize];
            ["Align of template specialization: greater_open0_void_close0"]
                [::core::mem::align_of::<root::std::greater>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: less_open0_void_close0"]
                [::core::mem::size_of::<root::std::less>() - 1usize];
            ["Align of template specialization: less_open0_void_close0"]
                [::core::mem::align_of::<root::std::less>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: greater_equal_open0_void_close0"]
                [::core::mem::size_of::<root::std::greater_equal>() - 1usize];
            ["Align of template specialization: greater_equal_open0_void_close0"]
                [::core::mem::align_of::<root::std::greater_equal>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: less_equal_open0_void_close0"]
                [::core::mem::size_of::<root::std::less_equal>() - 1usize];
            ["Align of template specialization: less_equal_open0_void_close0"]
                [::core::mem::align_of::<root::std::less_equal>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct logical_and {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct logical_or {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct logical_not {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: logical_and_open0_void_close0"]
                [::core::mem::size_of::<root::std::logical_and>() - 1usize];
            ["Align of template specialization: logical_and_open0_void_close0"]
                [::core::mem::align_of::<root::std::logical_and>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: logical_or_open0_void_close0"]
                [::core::mem::size_of::<root::std::logical_or>() - 1usize];
            ["Align of template specialization: logical_or_open0_void_close0"]
                [::core::mem::align_of::<root::std::logical_or>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: logical_not_open0_void_close0"]
                [::core::mem::size_of::<root::std::logical_not>() - 1usize];
            ["Align of template specialization: logical_not_open0_void_close0"]
                [::core::mem::align_of::<root::std::logical_not>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct bit_and {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct bit_or {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct bit_xor {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct bit_not {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: bit_and_open0_void_close0"]
                [::core::mem::size_of::<root::std::bit_and>() - 1usize];
            ["Align of template specialization: bit_and_open0_void_close0"]
                [::core::mem::align_of::<root::std::bit_and>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: bit_or_open0_void_close0"]
                [::core::mem::size_of::<root::std::bit_or>() - 1usize];
            ["Align of template specialization: bit_or_open0_void_close0"]
                [::core::mem::align_of::<root::std::bit_or>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: bit_xor_open0_void_close0"]
                [::core::mem::size_of::<root::std::bit_xor>() - 1usize];
            ["Align of template specialization: bit_xor_open0_void_close0"]
                [::core::mem::align_of::<root::std::bit_xor>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: bit_not_open0_void_close0"]
                [::core::mem::size_of::<root::std::bit_not>() - 1usize];
            ["Align of template specialization: bit_not_open0_void_close0"]
                [::core::mem::align_of::<root::std::bit_not>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct unary_negate<_Predicate> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Predicate>>,
            pub _M_pred: _Predicate,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct binary_negate<_Predicate> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Predicate>>,
            pub _M_pred: _Predicate,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct pointer_to_unary_function<_Arg, _Result> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Arg>>,
            pub _phantom_1: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Result>>,
            pub _M_ptr: ::core::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Result>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct pointer_to_binary_function<_Arg1, _Arg2, _Result> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Arg1>>,
            pub _phantom_1: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Arg2>>,
            pub _phantom_2: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Result>>,
            pub _M_ptr:
                ::core::option::Option<unsafe extern "C" fn(arg1: _Arg1, arg2: _Arg2) -> _Result>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Identity {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Select1st {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Select2nd {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct mem_fun_t<_Ret> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Ret>>,
            pub _M_f: ::core::option::Option<unsafe extern "C" fn() -> _Ret>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct const_mem_fun_t<_Ret> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Ret>>,
            pub _M_f: ::core::option::Option<unsafe extern "C" fn() -> _Ret>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct mem_fun_ref_t<_Ret> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Ret>>,
            pub _M_f: ::core::option::Option<unsafe extern "C" fn() -> _Ret>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct const_mem_fun_ref_t<_Ret> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Ret>>,
            pub _M_f: ::core::option::Option<unsafe extern "C" fn() -> _Ret>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct mem_fun1_t<_Ret, _Arg> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Ret>>,
            pub _phantom_1: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Arg>>,
            pub _M_f: ::core::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct const_mem_fun1_t<_Ret, _Arg> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Ret>>,
            pub _phantom_1: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Arg>>,
            pub _M_f: ::core::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct mem_fun1_ref_t<_Ret, _Arg> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Ret>>,
            pub _phantom_1: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Arg>>,
            pub _M_f: ::core::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct const_mem_fun1_ref_t<_Ret, _Arg> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Ret>>,
            pub _phantom_1: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Arg>>,
            pub _M_f: ::core::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __has_is_transparent {
            pub _address: u8,
        }
        pub type __has_is_transparent_t = root::std::__has_is_transparent;
        #[repr(C)]
        pub struct binder1st<_Operation> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Operation>>,
            pub op: _Operation,
            pub value: root::__BindgenOpaqueArray<u8, 0usize>,
        }
        #[repr(C)]
        pub struct binder2nd<_Operation> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Operation>>,
            pub op: _Operation,
            pub value: root::__BindgenOpaqueArray<u8, 0usize>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Maybe_unary_or_binary_function {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Mem_fn_traits {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Mem_fn_traits_base {
            pub _address: u8,
        }
        pub type _Mem_fn_traits_base___result_type<_Res> = _Res;
        pub type _Mem_fn_traits_base___maybe_type = root::std::_Maybe_unary_or_binary_function;
        pub type _Mem_fn_traits_base___arity = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Maybe_get_result_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Weak_result_type_impl {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Weak_result_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Refwrap_base_arg1 {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Refwrap_base_arg2 {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Reference_wrapper_base {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct reference_wrapper<_Tp> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Tp>>,
            pub _M_data: *mut _Tp,
        }
        pub type reference_wrapper___not_same = u8;
        pub type reference_wrapper_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct auto_ptr {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct default_delete {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __uniq_ptr_impl {
            pub _M_t: root::std::tuple,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __uniq_ptr_impl__Ptr {
            pub _address: u8,
        }
        pub type __uniq_ptr_impl__Ptr_type<_Up> = *mut _Up;
        pub type __uniq_ptr_impl__DeleterConstraint = u8;
        pub type __uniq_ptr_impl_pointer = root::std::__uniq_ptr_impl__Ptr;
        #[repr(C)]
        #[derive(Debug)]
        pub struct unique_ptr {
            pub _M_t: u8,
        }
        pub type unique_ptr__DeleterConstraint = root::std::__uniq_ptr_impl;
        pub type unique_ptr_pointer = root::std::__uniq_ptr_impl;
        pub type unique_ptr_element_type<_Tp> = _Tp;
        pub type unique_ptr_deleter_type<_Dp> = _Dp;
        pub type unique_ptr___safe_conversion_up = root::std::__and_;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __uniq_ptr_hash {
            pub _address: u8,
        }
        pub type __uniq_ptr_hash_base = root::std::__conditional_t;
        #[repr(C)]
        #[derive(Debug)]
        pub struct thread {
            pub _M_id: root::std::thread_id,
        }
        pub type thread_native_handle_type = root::__gthread_t;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct thread_id {
            pub _M_thread: root::std::thread_native_handle_type,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of thread_id"][::core::mem::size_of::<thread_id>() - 8usize];
            ["Alignment of thread_id"][::core::mem::align_of::<thread_id>() - 8usize];
            ["Offset of field: thread_id::_M_thread"]
                [::core::mem::offset_of!(thread_id, _M_thread) - 0usize];
        };
        pub type thread___not_same = root::std::__not_;
        #[repr(C)]
        pub struct thread__State__bindgen_vtable(::core::ffi::c_void);
        #[repr(C)]
        #[derive(Debug)]
        pub struct thread__State {
            pub vtable_: *const thread__State__bindgen_vtable,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of thread__State"][::core::mem::size_of::<thread__State>() - 8usize];
            ["Alignment of thread__State"][::core::mem::align_of::<thread__State>() - 8usize];
        };
        pub type thread__State_ptr = root::std::unique_ptr;
        #[repr(C)]
        #[derive(Debug)]
        pub struct thread__State_impl<_Callable> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Callable>>,
            pub _base: root::std::thread__State,
            pub _M_func: _Callable,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct thread__Invoker<_Tuple> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Tuple>>,
            pub _M_t: _Tuple,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct thread__Invoker___result {
            pub _address: u8,
        }
        pub type thread__Call_wrapper = root::std::thread__Invoker<root::std::tuple>;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of thread"][::core::mem::size_of::<thread>() - 8usize];
            ["Alignment of thread"][::core::mem::align_of::<thread>() - 8usize];
            ["Offset of field: thread::_M_id"][::core::mem::offset_of!(thread, _M_id) - 0usize];
        };
        unsafe extern "C" {
            #[link_name = "\u{1}_ZNSt6thread4joinEv"]
            pub fn thread_join(this: *mut root::std::thread);
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZNSt6thread6detachEv"]
            pub fn thread_detach(this: *mut root::std::thread);
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZNSt6thread20hardware_concurrencyEv"]
            pub fn thread_hardware_concurrency() -> ::core::ffi::c_uint;
        }
        impl thread {
            #[inline]
            pub unsafe fn join(&mut self) {
                thread_join(self)
            }
            #[inline]
            pub unsafe fn detach(&mut self) {
                thread_detach(self)
            }
            #[inline]
            pub unsafe fn hardware_concurrency() -> ::core::ffi::c_uint {
                thread_hardware_concurrency()
            }
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZNSt6thread6_StateD1Ev"]
            pub fn thread__State__State_destructor(this: *mut root::std::thread__State);
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: hash_open0_thread_id_close0"]
                [::core::mem::size_of::<root::std::hash>() - 1usize];
            ["Align of template specialization: hash_open0_thread_id_close0"]
                [::core::mem::align_of::<root::std::hash>() - 1usize];
        };
        pub mod this_thread {
            #[allow(unused_imports)]
            use self::super::super::super::root;
        }
    }
    pub mod __gnu_cxx {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub type __conditional_type___type<_Iftrue> = _Iftrue;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __add_unsigned {
            pub _address: u8,
        }
        pub type __add_unsigned___if_type = u8;
        pub type __add_unsigned___type = root::__gnu_cxx::__add_unsigned___if_type;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __add_unsigned_open0_char_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
            ["Align of template specialization: __add_unsigned_open0_char_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __add_unsigned_open0_signed_char_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
            ["Align of template specialization: __add_unsigned_open0_signed_char_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __add_unsigned_open0_short_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
            ["Align of template specialization: __add_unsigned_open0_short_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __add_unsigned_open0_int_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
            ["Align of template specialization: __add_unsigned_open0_int_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __add_unsigned_open0_long_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
            ["Align of template specialization: __add_unsigned_open0_long_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __add_unsigned_open0_long_long_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
            ["Align of template specialization: __add_unsigned_open0_long_long_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __remove_unsigned {
            pub _address: u8,
        }
        pub type __remove_unsigned___if_type = u8;
        pub type __remove_unsigned___type = root::__gnu_cxx::__remove_unsigned___if_type;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __remove_unsigned_open0_char_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
            ["Align of template specialization: __remove_unsigned_open0_char_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __remove_unsigned_open0_unsigned_char_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
            ["Align of template specialization: __remove_unsigned_open0_unsigned_char_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __remove_unsigned_open0_unsigned_short_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
            ["Align of template specialization: __remove_unsigned_open0_unsigned_short_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __remove_unsigned_open0_unsigned_int_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
            ["Align of template specialization: __remove_unsigned_open0_unsigned_int_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __remove_unsigned_open0_unsigned_long_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
            ["Align of template specialization: __remove_unsigned_open0_unsigned_long_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __remove_unsigned_open0_unsigned_long_long_close0"] [:: core :: mem :: size_of :: < root :: __gnu_cxx :: __remove_unsigned > () - 1usize] ;
            ["Align of template specialization: __remove_unsigned_open0_unsigned_long_long_close0"] [:: core :: mem :: align_of :: < root :: __gnu_cxx :: __remove_unsigned > () - 1usize] ;
        };
        pub type __promote___type = f64;
        pub type __promoted_t = u8;
        pub type __promote_2 = u8;
        pub type __promote_3 = u8;
        pub type __promote_4 = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_integer_nonstrict {
            pub _address: u8,
        }
        pub const __is_integer_nonstrict___width:
            root::__gnu_cxx::__is_integer_nonstrict__bindgen_ty_1 = 0;
        pub type __is_integer_nonstrict__bindgen_ty_1 = i32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __numeric_traits_integer {
            pub _address: u8,
        }
        unsafe extern "C" {
            pub static __min: _Value;
        }
        unsafe extern "C" {
            pub static __max: _Value;
        }
        unsafe extern "C" {
            pub static __is_signed: bool;
        }
        unsafe extern "C" {
            pub static __digits: ::core::ffi::c_int;
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_nonstrict_open0___int128_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__is_integer_nonstrict>() - 1usize];
            ["Align of template specialization: __is_integer_nonstrict_open0___int128_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__is_integer_nonstrict>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_nonstrict_open0_unsigned___int128_close0"] [:: core :: mem :: size_of :: < root :: __gnu_cxx :: __is_integer_nonstrict > () - 1usize] ;
            ["Align of template specialization: __is_integer_nonstrict_open0_unsigned___int128_close0"] [:: core :: mem :: align_of :: < root :: __gnu_cxx :: __is_integer_nonstrict > () - 1usize] ;
        };
        pub type __int_traits = root::__gnu_cxx::__numeric_traits_integer;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __numeric_traits_floating {
            pub _address: u8,
        }
        unsafe extern "C" {
            pub static __max_digits10: ::core::ffi::c_int;
        }
        unsafe extern "C" {
            pub static __digits10: ::core::ffi::c_int;
        }
        unsafe extern "C" {
            pub static __max_exponent10: ::core::ffi::c_int;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __numeric_traits {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __numeric_traits_open0_float_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__numeric_traits>() - 1usize];
            ["Align of template specialization: __numeric_traits_open0_float_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__numeric_traits>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __numeric_traits_open0_double_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__numeric_traits>() - 1usize];
            ["Align of template specialization: __numeric_traits_open0_double_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__numeric_traits>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __numeric_traits_open0_long_double_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__numeric_traits>() - 1usize];
            ["Align of template specialization: __numeric_traits_open0_long_double_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__numeric_traits>() - 1usize];
        };
    }
    unsafe extern "C" {
        pub fn __errno_location() -> *mut ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub static mut program_invocation_name: *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub static mut program_invocation_short_name: *mut ::core::ffi::c_char;
    }
    pub type error_t = ::core::ffi::c_int;
    pub type __u_char = ::core::ffi::c_uchar;
    pub type __u_short = ::core::ffi::c_ushort;
    pub type __u_int = ::core::ffi::c_uint;
    pub type __u_long = ::core::ffi::c_ulong;
    pub type __int8_t = ::core::ffi::c_schar;
    pub type __uint8_t = ::core::ffi::c_uchar;
    pub type __int16_t = ::core::ffi::c_short;
    pub type __uint16_t = ::core::ffi::c_ushort;
    pub type __int32_t = ::core::ffi::c_int;
    pub type __uint32_t = ::core::ffi::c_uint;
    pub type __int64_t = ::core::ffi::c_long;
    pub type __uint64_t = ::core::ffi::c_ulong;
    pub type __int_least8_t = root::__int8_t;
    pub type __uint_least8_t = root::__uint8_t;
    pub type __int_least16_t = root::__int16_t;
    pub type __uint_least16_t = root::__uint16_t;
    pub type __int_least32_t = root::__int32_t;
    pub type __uint_least32_t = root::__uint32_t;
    pub type __int_least64_t = root::__int64_t;
    pub type __uint_least64_t = root::__uint64_t;
    pub type __quad_t = ::core::ffi::c_long;
    pub type __u_quad_t = ::core::ffi::c_ulong;
    pub type __intmax_t = ::core::ffi::c_long;
    pub type __uintmax_t = ::core::ffi::c_ulong;
    pub type __dev_t = ::core::ffi::c_ulong;
    pub type __uid_t = ::core::ffi::c_uint;
    pub type __gid_t = ::core::ffi::c_uint;
    pub type __ino_t = ::core::ffi::c_ulong;
    pub type __ino64_t = ::core::ffi::c_ulong;
    pub type __mode_t = ::core::ffi::c_uint;
    pub type __nlink_t = ::core::ffi::c_ulong;
    pub type __off_t = ::core::ffi::c_long;
    pub type __off64_t = ::core::ffi::c_long;
    pub type __pid_t = ::core::ffi::c_int;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __fsid_t {
        pub __val: [::core::ffi::c_int; 2usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __fsid_t"][::core::mem::size_of::<__fsid_t>() - 8usize];
        ["Alignment of __fsid_t"][::core::mem::align_of::<__fsid_t>() - 4usize];
        ["Offset of field: __fsid_t::__val"][::core::mem::offset_of!(__fsid_t, __val) - 0usize];
    };
    pub type __clock_t = ::core::ffi::c_long;
    pub type __rlim_t = ::core::ffi::c_ulong;
    pub type __rlim64_t = ::core::ffi::c_ulong;
    pub type __id_t = ::core::ffi::c_uint;
    pub type __time_t = ::core::ffi::c_long;
    pub type __useconds_t = ::core::ffi::c_uint;
    pub type __suseconds_t = ::core::ffi::c_long;
    pub type __suseconds64_t = ::core::ffi::c_long;
    pub type __daddr_t = ::core::ffi::c_int;
    pub type __key_t = ::core::ffi::c_int;
    pub type __clockid_t = ::core::ffi::c_int;
    pub type __timer_t = *mut ::core::ffi::c_void;
    pub type __blksize_t = ::core::ffi::c_long;
    pub type __blkcnt_t = ::core::ffi::c_long;
    pub type __blkcnt64_t = ::core::ffi::c_long;
    pub type __fsblkcnt_t = ::core::ffi::c_ulong;
    pub type __fsblkcnt64_t = ::core::ffi::c_ulong;
    pub type __fsfilcnt_t = ::core::ffi::c_ulong;
    pub type __fsfilcnt64_t = ::core::ffi::c_ulong;
    pub type __fsword_t = ::core::ffi::c_long;
    pub type __ssize_t = ::core::ffi::c_long;
    pub type __syscall_slong_t = ::core::ffi::c_long;
    pub type __syscall_ulong_t = ::core::ffi::c_ulong;
    pub type __loff_t = root::__off64_t;
    pub type __caddr_t = *mut ::core::ffi::c_char;
    pub type __intptr_t = ::core::ffi::c_long;
    pub type __socklen_t = ::core::ffi::c_uint;
    pub type __sig_atomic_t = ::core::ffi::c_int;
    pub type int_least8_t = root::__int_least8_t;
    pub type int_least16_t = root::__int_least16_t;
    pub type int_least32_t = root::__int_least32_t;
    pub type int_least64_t = root::__int_least64_t;
    pub type uint_least8_t = root::__uint_least8_t;
    pub type uint_least16_t = root::__uint_least16_t;
    pub type uint_least32_t = root::__uint_least32_t;
    pub type uint_least64_t = root::__uint_least64_t;
    pub type int_fast8_t = ::core::ffi::c_schar;
    pub type int_fast16_t = ::core::ffi::c_long;
    pub type int_fast32_t = ::core::ffi::c_long;
    pub type int_fast64_t = ::core::ffi::c_long;
    pub type uint_fast8_t = ::core::ffi::c_uchar;
    pub type uint_fast16_t = ::core::ffi::c_ulong;
    pub type uint_fast32_t = ::core::ffi::c_ulong;
    pub type uint_fast64_t = ::core::ffi::c_ulong;
    pub type intmax_t = root::__intmax_t;
    pub type uintmax_t = root::__uintmax_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct timeval {
        pub tv_sec: root::__time_t,
        pub tv_usec: root::__suseconds_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of timeval"][::core::mem::size_of::<timeval>() - 16usize];
        ["Alignment of timeval"][::core::mem::align_of::<timeval>() - 8usize];
        ["Offset of field: timeval::tv_sec"][::core::mem::offset_of!(timeval, tv_sec) - 0usize];
        ["Offset of field: timeval::tv_usec"][::core::mem::offset_of!(timeval, tv_usec) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct timex {
        pub modes: ::core::ffi::c_uint,
        pub offset: root::__syscall_slong_t,
        pub freq: root::__syscall_slong_t,
        pub maxerror: root::__syscall_slong_t,
        pub esterror: root::__syscall_slong_t,
        pub status: ::core::ffi::c_int,
        pub constant: root::__syscall_slong_t,
        pub precision: root::__syscall_slong_t,
        pub tolerance: root::__syscall_slong_t,
        pub time: root::timeval,
        pub tick: root::__syscall_slong_t,
        pub ppsfreq: root::__syscall_slong_t,
        pub jitter: root::__syscall_slong_t,
        pub shift: ::core::ffi::c_int,
        pub stabil: root::__syscall_slong_t,
        pub jitcnt: root::__syscall_slong_t,
        pub calcnt: root::__syscall_slong_t,
        pub errcnt: root::__syscall_slong_t,
        pub stbcnt: root::__syscall_slong_t,
        pub tai: ::core::ffi::c_int,
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 44usize]>,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of timex"][::core::mem::size_of::<timex>() - 208usize];
        ["Alignment of timex"][::core::mem::align_of::<timex>() - 8usize];
        ["Offset of field: timex::modes"][::core::mem::offset_of!(timex, modes) - 0usize];
        ["Offset of field: timex::offset"][::core::mem::offset_of!(timex, offset) - 8usize];
        ["Offset of field: timex::freq"][::core::mem::offset_of!(timex, freq) - 16usize];
        ["Offset of field: timex::maxerror"][::core::mem::offset_of!(timex, maxerror) - 24usize];
        ["Offset of field: timex::esterror"][::core::mem::offset_of!(timex, esterror) - 32usize];
        ["Offset of field: timex::status"][::core::mem::offset_of!(timex, status) - 40usize];
        ["Offset of field: timex::constant"][::core::mem::offset_of!(timex, constant) - 48usize];
        ["Offset of field: timex::precision"][::core::mem::offset_of!(timex, precision) - 56usize];
        ["Offset of field: timex::tolerance"][::core::mem::offset_of!(timex, tolerance) - 64usize];
        ["Offset of field: timex::time"][::core::mem::offset_of!(timex, time) - 72usize];
        ["Offset of field: timex::tick"][::core::mem::offset_of!(timex, tick) - 88usize];
        ["Offset of field: timex::ppsfreq"][::core::mem::offset_of!(timex, ppsfreq) - 96usize];
        ["Offset of field: timex::jitter"][::core::mem::offset_of!(timex, jitter) - 104usize];
        ["Offset of field: timex::shift"][::core::mem::offset_of!(timex, shift) - 112usize];
        ["Offset of field: timex::stabil"][::core::mem::offset_of!(timex, stabil) - 120usize];
        ["Offset of field: timex::jitcnt"][::core::mem::offset_of!(timex, jitcnt) - 128usize];
        ["Offset of field: timex::calcnt"][::core::mem::offset_of!(timex, calcnt) - 136usize];
        ["Offset of field: timex::errcnt"][::core::mem::offset_of!(timex, errcnt) - 144usize];
        ["Offset of field: timex::stbcnt"][::core::mem::offset_of!(timex, stbcnt) - 152usize];
        ["Offset of field: timex::tai"][::core::mem::offset_of!(timex, tai) - 160usize];
    };
    unsafe extern "C" {
        pub fn clock_adjtime(
            __clock_id: root::__clockid_t,
            __utx: *mut root::timex,
        ) -> ::core::ffi::c_int;
    }
    pub type clock_t = root::__clock_t;
    pub type time_t = root::__time_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tm {
        pub tm_sec: ::core::ffi::c_int,
        pub tm_min: ::core::ffi::c_int,
        pub tm_hour: ::core::ffi::c_int,
        pub tm_mday: ::core::ffi::c_int,
        pub tm_mon: ::core::ffi::c_int,
        pub tm_year: ::core::ffi::c_int,
        pub tm_wday: ::core::ffi::c_int,
        pub tm_yday: ::core::ffi::c_int,
        pub tm_isdst: ::core::ffi::c_int,
        pub tm_gmtoff: ::core::ffi::c_long,
        pub tm_zone: *const ::core::ffi::c_char,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of tm"][::core::mem::size_of::<tm>() - 56usize];
        ["Alignment of tm"][::core::mem::align_of::<tm>() - 8usize];
        ["Offset of field: tm::tm_sec"][::core::mem::offset_of!(tm, tm_sec) - 0usize];
        ["Offset of field: tm::tm_min"][::core::mem::offset_of!(tm, tm_min) - 4usize];
        ["Offset of field: tm::tm_hour"][::core::mem::offset_of!(tm, tm_hour) - 8usize];
        ["Offset of field: tm::tm_mday"][::core::mem::offset_of!(tm, tm_mday) - 12usize];
        ["Offset of field: tm::tm_mon"][::core::mem::offset_of!(tm, tm_mon) - 16usize];
        ["Offset of field: tm::tm_year"][::core::mem::offset_of!(tm, tm_year) - 20usize];
        ["Offset of field: tm::tm_wday"][::core::mem::offset_of!(tm, tm_wday) - 24usize];
        ["Offset of field: tm::tm_yday"][::core::mem::offset_of!(tm, tm_yday) - 28usize];
        ["Offset of field: tm::tm_isdst"][::core::mem::offset_of!(tm, tm_isdst) - 32usize];
        ["Offset of field: tm::tm_gmtoff"][::core::mem::offset_of!(tm, tm_gmtoff) - 40usize];
        ["Offset of field: tm::tm_zone"][::core::mem::offset_of!(tm, tm_zone) - 48usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct timespec {
        pub tv_sec: root::__time_t,
        pub tv_nsec: root::__syscall_slong_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of timespec"][::core::mem::size_of::<timespec>() - 16usize];
        ["Alignment of timespec"][::core::mem::align_of::<timespec>() - 8usize];
        ["Offset of field: timespec::tv_sec"][::core::mem::offset_of!(timespec, tv_sec) - 0usize];
        ["Offset of field: timespec::tv_nsec"][::core::mem::offset_of!(timespec, tv_nsec) - 8usize];
    };
    pub type clockid_t = root::__clockid_t;
    pub type timer_t = root::__timer_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct itimerspec {
        pub it_interval: root::timespec,
        pub it_value: root::timespec,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of itimerspec"][::core::mem::size_of::<itimerspec>() - 32usize];
        ["Alignment of itimerspec"][::core::mem::align_of::<itimerspec>() - 8usize];
        ["Offset of field: itimerspec::it_interval"]
            [::core::mem::offset_of!(itimerspec, it_interval) - 0usize];
        ["Offset of field: itimerspec::it_value"]
            [::core::mem::offset_of!(itimerspec, it_value) - 16usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct sigevent {
        _unused: [u8; 0],
    }
    pub type pid_t = root::__pid_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __locale_struct {
        pub __locales: [*mut root::__locale_data; 13usize],
        pub __ctype_b: *const ::core::ffi::c_ushort,
        pub __ctype_tolower: *const ::core::ffi::c_int,
        pub __ctype_toupper: *const ::core::ffi::c_int,
        pub __names: [*const ::core::ffi::c_char; 13usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __locale_struct"][::core::mem::size_of::<__locale_struct>() - 232usize];
        ["Alignment of __locale_struct"][::core::mem::align_of::<__locale_struct>() - 8usize];
        ["Offset of field: __locale_struct::__locales"]
            [::core::mem::offset_of!(__locale_struct, __locales) - 0usize];
        ["Offset of field: __locale_struct::__ctype_b"]
            [::core::mem::offset_of!(__locale_struct, __ctype_b) - 104usize];
        ["Offset of field: __locale_struct::__ctype_tolower"]
            [::core::mem::offset_of!(__locale_struct, __ctype_tolower) - 112usize];
        ["Offset of field: __locale_struct::__ctype_toupper"]
            [::core::mem::offset_of!(__locale_struct, __ctype_toupper) - 120usize];
        ["Offset of field: __locale_struct::__names"]
            [::core::mem::offset_of!(__locale_struct, __names) - 128usize];
    };
    pub type __locale_t = *mut root::__locale_struct;
    pub type locale_t = root::__locale_t;
    unsafe extern "C" {
        pub fn clock() -> root::clock_t;
    }
    unsafe extern "C" {
        pub fn time(__timer: *mut root::time_t) -> root::time_t;
    }
    unsafe extern "C" {
        pub fn difftime(__time1: root::time_t, __time0: root::time_t) -> f64;
    }
    unsafe extern "C" {
        pub fn mktime(__tp: *mut root::tm) -> root::time_t;
    }
    unsafe extern "C" {
        pub fn strftime(
            __s: *mut ::core::ffi::c_char,
            __maxsize: usize,
            __format: *const ::core::ffi::c_char,
            __tp: *const root::tm,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn strptime(
            __s: *const ::core::ffi::c_char,
            __fmt: *const ::core::ffi::c_char,
            __tp: *mut root::tm,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn strftime_l(
            __s: *mut ::core::ffi::c_char,
            __maxsize: usize,
            __format: *const ::core::ffi::c_char,
            __tp: *const root::tm,
            __loc: root::locale_t,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn strptime_l(
            __s: *const ::core::ffi::c_char,
            __fmt: *const ::core::ffi::c_char,
            __tp: *mut root::tm,
            __loc: root::locale_t,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn gmtime(__timer: *const root::time_t) -> *mut root::tm;
    }
    unsafe extern "C" {
        pub fn localtime(__timer: *const root::time_t) -> *mut root::tm;
    }
    unsafe extern "C" {
        pub fn gmtime_r(__timer: *const root::time_t, __tp: *mut root::tm) -> *mut root::tm;
    }
    unsafe extern "C" {
        pub fn localtime_r(__timer: *const root::time_t, __tp: *mut root::tm) -> *mut root::tm;
    }
    unsafe extern "C" {
        pub fn asctime(__tp: *const root::tm) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn ctime(__timer: *const root::time_t) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn asctime_r(
            __tp: *const root::tm,
            __buf: *mut ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn ctime_r(
            __timer: *const root::time_t,
            __buf: *mut ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub static mut __tzname: [*mut ::core::ffi::c_char; 2usize];
    }
    unsafe extern "C" {
        pub static mut __daylight: ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub static mut __timezone: ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub static mut tzname: [*mut ::core::ffi::c_char; 2usize];
    }
    unsafe extern "C" {
        pub fn tzset();
    }
    unsafe extern "C" {
        pub static mut daylight: ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub static mut timezone: ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn timegm(__tp: *mut root::tm) -> root::time_t;
    }
    unsafe extern "C" {
        pub fn timelocal(__tp: *mut root::tm) -> root::time_t;
    }
    unsafe extern "C" {
        pub fn dysize(__year: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn nanosleep(
            __requested_time: *const root::timespec,
            __remaining: *mut root::timespec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn clock_getres(
            __clock_id: root::clockid_t,
            __res: *mut root::timespec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn clock_gettime(
            __clock_id: root::clockid_t,
            __tp: *mut root::timespec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn clock_settime(
            __clock_id: root::clockid_t,
            __tp: *const root::timespec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn clock_nanosleep(
            __clock_id: root::clockid_t,
            __flags: ::core::ffi::c_int,
            __req: *const root::timespec,
            __rem: *mut root::timespec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn clock_getcpuclockid(
            __pid: root::pid_t,
            __clock_id: *mut root::clockid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn timer_create(
            __clock_id: root::clockid_t,
            __evp: *mut root::sigevent,
            __timerid: *mut root::timer_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn timer_delete(__timerid: root::timer_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn timer_settime(
            __timerid: root::timer_t,
            __flags: ::core::ffi::c_int,
            __value: *const root::itimerspec,
            __ovalue: *mut root::itimerspec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn timer_gettime(
            __timerid: root::timer_t,
            __value: *mut root::itimerspec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn timer_getoverrun(__timerid: root::timer_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn timespec_get(
            __ts: *mut root::timespec,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn timespec_getres(
            __ts: *mut root::timespec,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub static mut getdate_err: ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getdate(__string: *const ::core::ffi::c_char) -> *mut root::tm;
    }
    unsafe extern "C" {
        pub fn getdate_r(
            __string: *const ::core::ffi::c_char,
            __resbufp: *mut root::tm,
        ) -> ::core::ffi::c_int;
    }
    pub type __s8 = ::core::ffi::c_schar;
    pub type __u8 = ::core::ffi::c_uchar;
    pub type __s16 = ::core::ffi::c_short;
    pub type __u16 = ::core::ffi::c_ushort;
    pub type __s32 = ::core::ffi::c_int;
    pub type __u32 = ::core::ffi::c_uint;
    pub type __s64 = ::core::ffi::c_longlong;
    pub type __u64 = ::core::ffi::c_ulonglong;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __kernel_fd_set {
        pub fds_bits: [::core::ffi::c_ulong; 16usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __kernel_fd_set"][::core::mem::size_of::<__kernel_fd_set>() - 128usize];
        ["Alignment of __kernel_fd_set"][::core::mem::align_of::<__kernel_fd_set>() - 8usize];
        ["Offset of field: __kernel_fd_set::fds_bits"]
            [::core::mem::offset_of!(__kernel_fd_set, fds_bits) - 0usize];
    };
    pub type __kernel_sighandler_t =
        ::core::option::Option<unsafe extern "C" fn(arg1: ::core::ffi::c_int)>;
    pub type __kernel_key_t = ::core::ffi::c_int;
    pub type __kernel_mqd_t = ::core::ffi::c_int;
    pub type __kernel_old_uid_t = ::core::ffi::c_ushort;
    pub type __kernel_old_gid_t = ::core::ffi::c_ushort;
    pub type __kernel_old_dev_t = ::core::ffi::c_ulong;
    pub type __kernel_long_t = ::core::ffi::c_long;
    pub type __kernel_ulong_t = ::core::ffi::c_ulong;
    pub type __kernel_ino_t = root::__kernel_ulong_t;
    pub type __kernel_mode_t = ::core::ffi::c_uint;
    pub type __kernel_pid_t = ::core::ffi::c_int;
    pub type __kernel_ipc_pid_t = ::core::ffi::c_int;
    pub type __kernel_uid_t = ::core::ffi::c_uint;
    pub type __kernel_gid_t = ::core::ffi::c_uint;
    pub type __kernel_suseconds_t = root::__kernel_long_t;
    pub type __kernel_daddr_t = ::core::ffi::c_int;
    pub type __kernel_uid32_t = ::core::ffi::c_uint;
    pub type __kernel_gid32_t = ::core::ffi::c_uint;
    pub type __kernel_size_t = root::__kernel_ulong_t;
    pub type __kernel_ssize_t = root::__kernel_long_t;
    pub type __kernel_ptrdiff_t = root::__kernel_long_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __kernel_fsid_t {
        pub val: [::core::ffi::c_int; 2usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __kernel_fsid_t"][::core::mem::size_of::<__kernel_fsid_t>() - 8usize];
        ["Alignment of __kernel_fsid_t"][::core::mem::align_of::<__kernel_fsid_t>() - 4usize];
        ["Offset of field: __kernel_fsid_t::val"]
            [::core::mem::offset_of!(__kernel_fsid_t, val) - 0usize];
    };
    pub type __kernel_off_t = root::__kernel_long_t;
    pub type __kernel_loff_t = ::core::ffi::c_longlong;
    pub type __kernel_old_time_t = root::__kernel_long_t;
    pub type __kernel_time_t = root::__kernel_long_t;
    pub type __kernel_time64_t = ::core::ffi::c_longlong;
    pub type __kernel_clock_t = root::__kernel_long_t;
    pub type __kernel_timer_t = ::core::ffi::c_int;
    pub type __kernel_clockid_t = ::core::ffi::c_int;
    pub type __kernel_caddr_t = *mut ::core::ffi::c_char;
    pub type __kernel_uid16_t = ::core::ffi::c_ushort;
    pub type __kernel_gid16_t = ::core::ffi::c_ushort;
    pub type __s128 = i128;
    pub type __u128 = u128;
    pub type __le16 = root::__u16;
    pub type __be16 = root::__u16;
    pub type __le32 = root::__u32;
    pub type __be32 = root::__u32;
    pub type __le64 = root::__u64;
    pub type __be64 = root::__u64;
    pub type __sum16 = root::__u16;
    pub type __wsum = root::__u32;
    pub type __poll_t = ::core::ffi::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct sched_attr {
        pub size: root::__u32,
        pub sched_policy: root::__u32,
        pub sched_flags: root::__u64,
        pub sched_nice: root::__s32,
        pub sched_priority: root::__u32,
        pub sched_runtime: root::__u64,
        pub sched_deadline: root::__u64,
        pub sched_period: root::__u64,
        pub sched_util_min: root::__u32,
        pub sched_util_max: root::__u32,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of sched_attr"][::core::mem::size_of::<sched_attr>() - 56usize];
        ["Alignment of sched_attr"][::core::mem::align_of::<sched_attr>() - 8usize];
        ["Offset of field: sched_attr::size"][::core::mem::offset_of!(sched_attr, size) - 0usize];
        ["Offset of field: sched_attr::sched_policy"]
            [::core::mem::offset_of!(sched_attr, sched_policy) - 4usize];
        ["Offset of field: sched_attr::sched_flags"]
            [::core::mem::offset_of!(sched_attr, sched_flags) - 8usize];
        ["Offset of field: sched_attr::sched_nice"]
            [::core::mem::offset_of!(sched_attr, sched_nice) - 16usize];
        ["Offset of field: sched_attr::sched_priority"]
            [::core::mem::offset_of!(sched_attr, sched_priority) - 20usize];
        ["Offset of field: sched_attr::sched_runtime"]
            [::core::mem::offset_of!(sched_attr, sched_runtime) - 24usize];
        ["Offset of field: sched_attr::sched_deadline"]
            [::core::mem::offset_of!(sched_attr, sched_deadline) - 32usize];
        ["Offset of field: sched_attr::sched_period"]
            [::core::mem::offset_of!(sched_attr, sched_period) - 40usize];
        ["Offset of field: sched_attr::sched_util_min"]
            [::core::mem::offset_of!(sched_attr, sched_util_min) - 48usize];
        ["Offset of field: sched_attr::sched_util_max"]
            [::core::mem::offset_of!(sched_attr, sched_util_max) - 52usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct sched_param {
        pub sched_priority: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of sched_param"][::core::mem::size_of::<sched_param>() - 4usize];
        ["Alignment of sched_param"][::core::mem::align_of::<sched_param>() - 4usize];
        ["Offset of field: sched_param::sched_priority"]
            [::core::mem::offset_of!(sched_param, sched_priority) - 0usize];
    };
    unsafe extern "C" {
        pub fn clone(
            __fn: ::core::option::Option<
                unsafe extern "C" fn(__arg: *mut ::core::ffi::c_void) -> ::core::ffi::c_int,
            >,
            __child_stack: *mut ::core::ffi::c_void,
            __flags: ::core::ffi::c_int,
            __arg: *mut ::core::ffi::c_void,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn unshare(__flags: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sched_getcpu() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getcpu(
            arg1: *mut ::core::ffi::c_uint,
            arg2: *mut ::core::ffi::c_uint,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setns(__fd: ::core::ffi::c_int, __nstype: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sched_setattr(
            tid: root::pid_t,
            attr: *mut root::sched_attr,
            flags: ::core::ffi::c_uint,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sched_getattr(
            tid: root::pid_t,
            attr: *mut root::sched_attr,
            size: ::core::ffi::c_uint,
            flags: ::core::ffi::c_uint,
        ) -> ::core::ffi::c_int;
    }
    pub type __cpu_mask = ::core::ffi::c_ulong;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct cpu_set_t {
        pub __bits: [root::__cpu_mask; 16usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of cpu_set_t"][::core::mem::size_of::<cpu_set_t>() - 128usize];
        ["Alignment of cpu_set_t"][::core::mem::align_of::<cpu_set_t>() - 8usize];
        ["Offset of field: cpu_set_t::__bits"][::core::mem::offset_of!(cpu_set_t, __bits) - 0usize];
    };
    unsafe extern "C" {
        pub fn __sched_cpucount(
            __setsize: usize,
            __setp: *const root::cpu_set_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __sched_cpualloc(__count: usize) -> *mut root::cpu_set_t;
    }
    unsafe extern "C" {
        pub fn __sched_cpufree(__set: *mut root::cpu_set_t);
    }
    unsafe extern "C" {
        pub fn sched_setparam(
            __pid: root::__pid_t,
            __param: *const root::sched_param,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sched_getparam(
            __pid: root::__pid_t,
            __param: *mut root::sched_param,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sched_setscheduler(
            __pid: root::__pid_t,
            __policy: ::core::ffi::c_int,
            __param: *const root::sched_param,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sched_getscheduler(__pid: root::__pid_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sched_yield() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sched_get_priority_max(__algorithm: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sched_get_priority_min(__algorithm: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sched_rr_get_interval(
            __pid: root::__pid_t,
            __t: *mut root::timespec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sched_setaffinity(
            __pid: root::__pid_t,
            __cpusetsize: usize,
            __cpuset: *const root::cpu_set_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sched_getaffinity(
            __pid: root::__pid_t,
            __cpusetsize: usize,
            __cpuset: *mut root::cpu_set_t,
        ) -> ::core::ffi::c_int;
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __atomic_wide_counter {
        pub __value64: ::core::ffi::c_ulonglong,
        pub __value32: root::__atomic_wide_counter__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __atomic_wide_counter__bindgen_ty_1 {
        pub __low: ::core::ffi::c_uint,
        pub __high: ::core::ffi::c_uint,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __atomic_wide_counter__bindgen_ty_1"]
            [::core::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>() - 8usize];
        ["Alignment of __atomic_wide_counter__bindgen_ty_1"]
            [::core::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>() - 4usize];
        ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__low"]
            [::core::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __low) - 0usize];
        ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__high"]
            [::core::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __high) - 4usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __atomic_wide_counter"][::core::mem::size_of::<__atomic_wide_counter>() - 8usize];
        ["Alignment of __atomic_wide_counter"]
            [::core::mem::align_of::<__atomic_wide_counter>() - 8usize];
        ["Offset of field: __atomic_wide_counter::__value64"]
            [::core::mem::offset_of!(__atomic_wide_counter, __value64) - 0usize];
        ["Offset of field: __atomic_wide_counter::__value32"]
            [::core::mem::offset_of!(__atomic_wide_counter, __value32) - 0usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_internal_list {
        pub __prev: *mut root::__pthread_internal_list,
        pub __next: *mut root::__pthread_internal_list,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_internal_list"]
            [::core::mem::size_of::<__pthread_internal_list>() - 16usize];
        ["Alignment of __pthread_internal_list"]
            [::core::mem::align_of::<__pthread_internal_list>() - 8usize];
        ["Offset of field: __pthread_internal_list::__prev"]
            [::core::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
        ["Offset of field: __pthread_internal_list::__next"]
            [::core::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
    };
    pub type __pthread_list_t = root::__pthread_internal_list;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_internal_slist {
        pub __next: *mut root::__pthread_internal_slist,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_internal_slist"]
            [::core::mem::size_of::<__pthread_internal_slist>() - 8usize];
        ["Alignment of __pthread_internal_slist"]
            [::core::mem::align_of::<__pthread_internal_slist>() - 8usize];
        ["Offset of field: __pthread_internal_slist::__next"]
            [::core::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
    };
    pub type __pthread_slist_t = root::__pthread_internal_slist;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_mutex_s {
        pub __lock: ::core::ffi::c_int,
        pub __count: ::core::ffi::c_uint,
        pub __owner: ::core::ffi::c_int,
        pub __nusers: ::core::ffi::c_uint,
        pub __kind: ::core::ffi::c_int,
        pub __spins: ::core::ffi::c_short,
        pub __elision: ::core::ffi::c_short,
        pub __list: root::__pthread_list_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_mutex_s"][::core::mem::size_of::<__pthread_mutex_s>() - 40usize];
        ["Alignment of __pthread_mutex_s"][::core::mem::align_of::<__pthread_mutex_s>() - 8usize];
        ["Offset of field: __pthread_mutex_s::__lock"]
            [::core::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
        ["Offset of field: __pthread_mutex_s::__count"]
            [::core::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
        ["Offset of field: __pthread_mutex_s::__owner"]
            [::core::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
        ["Offset of field: __pthread_mutex_s::__nusers"]
            [::core::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
        ["Offset of field: __pthread_mutex_s::__kind"]
            [::core::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
        ["Offset of field: __pthread_mutex_s::__spins"]
            [::core::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
        ["Offset of field: __pthread_mutex_s::__elision"]
            [::core::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
        ["Offset of field: __pthread_mutex_s::__list"]
            [::core::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_rwlock_arch_t {
        pub __readers: ::core::ffi::c_uint,
        pub __writers: ::core::ffi::c_uint,
        pub __wrphase_futex: ::core::ffi::c_uint,
        pub __writers_futex: ::core::ffi::c_uint,
        pub __pad3: ::core::ffi::c_uint,
        pub __pad4: ::core::ffi::c_uint,
        pub __cur_writer: ::core::ffi::c_int,
        pub __shared: ::core::ffi::c_int,
        pub __rwelision: ::core::ffi::c_schar,
        pub __pad1: [::core::ffi::c_uchar; 7usize],
        pub __pad2: ::core::ffi::c_ulong,
        pub __flags: ::core::ffi::c_uint,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_rwlock_arch_t"]
            [::core::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
        ["Alignment of __pthread_rwlock_arch_t"]
            [::core::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
        ["Offset of field: __pthread_rwlock_arch_t::__readers"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
        ["Offset of field: __pthread_rwlock_arch_t::__writers"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
        ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
        ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
        ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
        ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
        ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
        ["Offset of field: __pthread_rwlock_arch_t::__shared"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
        ["Offset of field: __pthread_rwlock_arch_t::__rwelision"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __rwelision) - 32usize];
        ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
        ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
        ["Offset of field: __pthread_rwlock_arch_t::__flags"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __pthread_cond_s {
        pub __wseq: root::__atomic_wide_counter,
        pub __g1_start: root::__atomic_wide_counter,
        pub __g_size: [::core::ffi::c_uint; 2usize],
        pub __g1_orig_size: ::core::ffi::c_uint,
        pub __wrefs: ::core::ffi::c_uint,
        pub __g_signals: [::core::ffi::c_uint; 2usize],
        pub __unused_initialized_1: ::core::ffi::c_uint,
        pub __unused_initialized_2: ::core::ffi::c_uint,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_cond_s"][::core::mem::size_of::<__pthread_cond_s>() - 48usize];
        ["Alignment of __pthread_cond_s"][::core::mem::align_of::<__pthread_cond_s>() - 8usize];
        ["Offset of field: __pthread_cond_s::__wseq"]
            [::core::mem::offset_of!(__pthread_cond_s, __wseq) - 0usize];
        ["Offset of field: __pthread_cond_s::__g1_start"]
            [::core::mem::offset_of!(__pthread_cond_s, __g1_start) - 8usize];
        ["Offset of field: __pthread_cond_s::__g_size"]
            [::core::mem::offset_of!(__pthread_cond_s, __g_size) - 16usize];
        ["Offset of field: __pthread_cond_s::__g1_orig_size"]
            [::core::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 24usize];
        ["Offset of field: __pthread_cond_s::__wrefs"]
            [::core::mem::offset_of!(__pthread_cond_s, __wrefs) - 28usize];
        ["Offset of field: __pthread_cond_s::__g_signals"]
            [::core::mem::offset_of!(__pthread_cond_s, __g_signals) - 32usize];
        ["Offset of field: __pthread_cond_s::__unused_initialized_1"]
            [::core::mem::offset_of!(__pthread_cond_s, __unused_initialized_1) - 40usize];
        ["Offset of field: __pthread_cond_s::__unused_initialized_2"]
            [::core::mem::offset_of!(__pthread_cond_s, __unused_initialized_2) - 44usize];
    };
    pub type __tss_t = ::core::ffi::c_uint;
    pub type __thrd_t = ::core::ffi::c_ulong;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __once_flag {
        pub __data: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __once_flag"][::core::mem::size_of::<__once_flag>() - 4usize];
        ["Alignment of __once_flag"][::core::mem::align_of::<__once_flag>() - 4usize];
        ["Offset of field: __once_flag::__data"]
            [::core::mem::offset_of!(__once_flag, __data) - 0usize];
    };
    pub type pthread_t = ::core::ffi::c_ulong;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_mutexattr_t {
        pub __size: [::core::ffi::c_char; 4usize],
        pub __align: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_mutexattr_t"][::core::mem::size_of::<pthread_mutexattr_t>() - 4usize];
        ["Alignment of pthread_mutexattr_t"]
            [::core::mem::align_of::<pthread_mutexattr_t>() - 4usize];
        ["Offset of field: pthread_mutexattr_t::__size"]
            [::core::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
        ["Offset of field: pthread_mutexattr_t::__align"]
            [::core::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_condattr_t {
        pub __size: [::core::ffi::c_char; 4usize],
        pub __align: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_condattr_t"][::core::mem::size_of::<pthread_condattr_t>() - 4usize];
        ["Alignment of pthread_condattr_t"][::core::mem::align_of::<pthread_condattr_t>() - 4usize];
        ["Offset of field: pthread_condattr_t::__size"]
            [::core::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
        ["Offset of field: pthread_condattr_t::__align"]
            [::core::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
    };
    pub type pthread_key_t = ::core::ffi::c_uint;
    pub type pthread_once_t = ::core::ffi::c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_attr_t {
        pub __size: [::core::ffi::c_char; 56usize],
        pub __align: ::core::ffi::c_long,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_attr_t"][::core::mem::size_of::<pthread_attr_t>() - 56usize];
        ["Alignment of pthread_attr_t"][::core::mem::align_of::<pthread_attr_t>() - 8usize];
        ["Offset of field: pthread_attr_t::__size"]
            [::core::mem::offset_of!(pthread_attr_t, __size) - 0usize];
        ["Offset of field: pthread_attr_t::__align"]
            [::core::mem::offset_of!(pthread_attr_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_mutex_t {
        pub __data: root::__pthread_mutex_s,
        pub __size: [::core::ffi::c_char; 40usize],
        pub __align: ::core::ffi::c_long,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_mutex_t"][::core::mem::size_of::<pthread_mutex_t>() - 40usize];
        ["Alignment of pthread_mutex_t"][::core::mem::align_of::<pthread_mutex_t>() - 8usize];
        ["Offset of field: pthread_mutex_t::__data"]
            [::core::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
        ["Offset of field: pthread_mutex_t::__size"]
            [::core::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
        ["Offset of field: pthread_mutex_t::__align"]
            [::core::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_cond_t {
        pub __data: root::__pthread_cond_s,
        pub __size: [::core::ffi::c_char; 48usize],
        pub __align: ::core::ffi::c_longlong,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_cond_t"][::core::mem::size_of::<pthread_cond_t>() - 48usize];
        ["Alignment of pthread_cond_t"][::core::mem::align_of::<pthread_cond_t>() - 8usize];
        ["Offset of field: pthread_cond_t::__data"]
            [::core::mem::offset_of!(pthread_cond_t, __data) - 0usize];
        ["Offset of field: pthread_cond_t::__size"]
            [::core::mem::offset_of!(pthread_cond_t, __size) - 0usize];
        ["Offset of field: pthread_cond_t::__align"]
            [::core::mem::offset_of!(pthread_cond_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_rwlock_t {
        pub __data: root::__pthread_rwlock_arch_t,
        pub __size: [::core::ffi::c_char; 56usize],
        pub __align: ::core::ffi::c_long,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_rwlock_t"][::core::mem::size_of::<pthread_rwlock_t>() - 56usize];
        ["Alignment of pthread_rwlock_t"][::core::mem::align_of::<pthread_rwlock_t>() - 8usize];
        ["Offset of field: pthread_rwlock_t::__data"]
            [::core::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
        ["Offset of field: pthread_rwlock_t::__size"]
            [::core::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
        ["Offset of field: pthread_rwlock_t::__align"]
            [::core::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_rwlockattr_t {
        pub __size: [::core::ffi::c_char; 8usize],
        pub __align: ::core::ffi::c_long,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_rwlockattr_t"][::core::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
        ["Alignment of pthread_rwlockattr_t"]
            [::core::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
        ["Offset of field: pthread_rwlockattr_t::__size"]
            [::core::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
        ["Offset of field: pthread_rwlockattr_t::__align"]
            [::core::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
    };
    pub type pthread_spinlock_t = ::core::ffi::c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_barrier_t {
        pub __size: [::core::ffi::c_char; 32usize],
        pub __align: ::core::ffi::c_long,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_barrier_t"][::core::mem::size_of::<pthread_barrier_t>() - 32usize];
        ["Alignment of pthread_barrier_t"][::core::mem::align_of::<pthread_barrier_t>() - 8usize];
        ["Offset of field: pthread_barrier_t::__size"]
            [::core::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
        ["Offset of field: pthread_barrier_t::__align"]
            [::core::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_barrierattr_t {
        pub __size: [::core::ffi::c_char; 4usize],
        pub __align: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_barrierattr_t"][::core::mem::size_of::<pthread_barrierattr_t>() - 4usize];
        ["Alignment of pthread_barrierattr_t"]
            [::core::mem::align_of::<pthread_barrierattr_t>() - 4usize];
        ["Offset of field: pthread_barrierattr_t::__size"]
            [::core::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
        ["Offset of field: pthread_barrierattr_t::__align"]
            [::core::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
    };
    pub type __jmp_buf = [::core::ffi::c_long; 8usize];
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __sigset_t {
        pub __val: [::core::ffi::c_ulong; 16usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __sigset_t"][::core::mem::size_of::<__sigset_t>() - 128usize];
        ["Alignment of __sigset_t"][::core::mem::align_of::<__sigset_t>() - 8usize];
        ["Offset of field: __sigset_t::__val"][::core::mem::offset_of!(__sigset_t, __val) - 0usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __jmp_buf_tag {
        pub __jmpbuf: root::__jmp_buf,
        pub __mask_was_saved: ::core::ffi::c_int,
        pub __saved_mask: root::__sigset_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __jmp_buf_tag"][::core::mem::size_of::<__jmp_buf_tag>() - 200usize];
        ["Alignment of __jmp_buf_tag"][::core::mem::align_of::<__jmp_buf_tag>() - 8usize];
        ["Offset of field: __jmp_buf_tag::__jmpbuf"]
            [::core::mem::offset_of!(__jmp_buf_tag, __jmpbuf) - 0usize];
        ["Offset of field: __jmp_buf_tag::__mask_was_saved"]
            [::core::mem::offset_of!(__jmp_buf_tag, __mask_was_saved) - 64usize];
        ["Offset of field: __jmp_buf_tag::__saved_mask"]
            [::core::mem::offset_of!(__jmp_buf_tag, __saved_mask) - 72usize];
    };
    unsafe extern "C" {
        pub fn __sysconf(__name: ::core::ffi::c_int) -> ::core::ffi::c_long;
    }
    pub const PTHREAD_CREATE_JOINABLE: root::_bindgen_ty_39 = 0;
    pub const PTHREAD_CREATE_DETACHED: root::_bindgen_ty_39 = 1;
    pub type _bindgen_ty_39 = ::core::ffi::c_uint;
    pub const PTHREAD_MUTEX_TIMED_NP: root::_bindgen_ty_40 = 0;
    pub const PTHREAD_MUTEX_RECURSIVE_NP: root::_bindgen_ty_40 = 1;
    pub const PTHREAD_MUTEX_ERRORCHECK_NP: root::_bindgen_ty_40 = 2;
    pub const PTHREAD_MUTEX_ADAPTIVE_NP: root::_bindgen_ty_40 = 3;
    pub const PTHREAD_MUTEX_NORMAL: root::_bindgen_ty_40 = 0;
    pub const PTHREAD_MUTEX_RECURSIVE: root::_bindgen_ty_40 = 1;
    pub const PTHREAD_MUTEX_ERRORCHECK: root::_bindgen_ty_40 = 2;
    pub const PTHREAD_MUTEX_DEFAULT: root::_bindgen_ty_40 = 0;
    pub const PTHREAD_MUTEX_FAST_NP: root::_bindgen_ty_40 = 0;
    pub type _bindgen_ty_40 = ::core::ffi::c_uint;
    pub const PTHREAD_MUTEX_STALLED: root::_bindgen_ty_41 = 0;
    pub const PTHREAD_MUTEX_STALLED_NP: root::_bindgen_ty_41 = 0;
    pub const PTHREAD_MUTEX_ROBUST: root::_bindgen_ty_41 = 1;
    pub const PTHREAD_MUTEX_ROBUST_NP: root::_bindgen_ty_41 = 1;
    pub type _bindgen_ty_41 = ::core::ffi::c_uint;
    pub const PTHREAD_PRIO_NONE: root::_bindgen_ty_42 = 0;
    pub const PTHREAD_PRIO_INHERIT: root::_bindgen_ty_42 = 1;
    pub const PTHREAD_PRIO_PROTECT: root::_bindgen_ty_42 = 2;
    pub type _bindgen_ty_42 = ::core::ffi::c_uint;
    pub const PTHREAD_RWLOCK_PREFER_READER_NP: root::_bindgen_ty_43 = 0;
    pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: root::_bindgen_ty_43 = 1;
    pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: root::_bindgen_ty_43 = 2;
    pub const PTHREAD_RWLOCK_DEFAULT_NP: root::_bindgen_ty_43 = 0;
    pub type _bindgen_ty_43 = ::core::ffi::c_uint;
    pub const PTHREAD_INHERIT_SCHED: root::_bindgen_ty_44 = 0;
    pub const PTHREAD_EXPLICIT_SCHED: root::_bindgen_ty_44 = 1;
    pub type _bindgen_ty_44 = ::core::ffi::c_uint;
    pub const PTHREAD_SCOPE_SYSTEM: root::_bindgen_ty_45 = 0;
    pub const PTHREAD_SCOPE_PROCESS: root::_bindgen_ty_45 = 1;
    pub type _bindgen_ty_45 = ::core::ffi::c_uint;
    pub const PTHREAD_PROCESS_PRIVATE: root::_bindgen_ty_46 = 0;
    pub const PTHREAD_PROCESS_SHARED: root::_bindgen_ty_46 = 1;
    pub type _bindgen_ty_46 = ::core::ffi::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _pthread_cleanup_buffer {
        pub __routine: ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void)>,
        pub __arg: *mut ::core::ffi::c_void,
        pub __canceltype: ::core::ffi::c_int,
        pub __prev: *mut root::_pthread_cleanup_buffer,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of _pthread_cleanup_buffer"]
            [::core::mem::size_of::<_pthread_cleanup_buffer>() - 32usize];
        ["Alignment of _pthread_cleanup_buffer"]
            [::core::mem::align_of::<_pthread_cleanup_buffer>() - 8usize];
        ["Offset of field: _pthread_cleanup_buffer::__routine"]
            [::core::mem::offset_of!(_pthread_cleanup_buffer, __routine) - 0usize];
        ["Offset of field: _pthread_cleanup_buffer::__arg"]
            [::core::mem::offset_of!(_pthread_cleanup_buffer, __arg) - 8usize];
        ["Offset of field: _pthread_cleanup_buffer::__canceltype"]
            [::core::mem::offset_of!(_pthread_cleanup_buffer, __canceltype) - 16usize];
        ["Offset of field: _pthread_cleanup_buffer::__prev"]
            [::core::mem::offset_of!(_pthread_cleanup_buffer, __prev) - 24usize];
    };
    pub const PTHREAD_CANCEL_ENABLE: root::_bindgen_ty_47 = 0;
    pub const PTHREAD_CANCEL_DISABLE: root::_bindgen_ty_47 = 1;
    pub type _bindgen_ty_47 = ::core::ffi::c_uint;
    pub const PTHREAD_CANCEL_DEFERRED: root::_bindgen_ty_48 = 0;
    pub const PTHREAD_CANCEL_ASYNCHRONOUS: root::_bindgen_ty_48 = 1;
    pub type _bindgen_ty_48 = ::core::ffi::c_uint;
    unsafe extern "C" {
        pub fn pthread_create(
            __newthread: *mut root::pthread_t,
            __attr: *const root::pthread_attr_t,
            __start_routine: ::core::option::Option<
                unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void) -> *mut ::core::ffi::c_void,
            >,
            __arg: *mut ::core::ffi::c_void,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_exit(__retval: *mut ::core::ffi::c_void) -> !;
    }
    unsafe extern "C" {
        pub fn pthread_join(
            __th: root::pthread_t,
            __thread_return: *mut *mut ::core::ffi::c_void,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_tryjoin_np(
            __th: root::pthread_t,
            __thread_return: *mut *mut ::core::ffi::c_void,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_timedjoin_np(
            __th: root::pthread_t,
            __thread_return: *mut *mut ::core::ffi::c_void,
            __abstime: *const root::timespec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_clockjoin_np(
            __th: root::pthread_t,
            __thread_return: *mut *mut ::core::ffi::c_void,
            __clockid: root::clockid_t,
            __abstime: *const root::timespec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_detach(__th: root::pthread_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_self() -> root::pthread_t;
    }
    unsafe extern "C" {
        pub fn pthread_equal(
            __thread1: root::pthread_t,
            __thread2: root::pthread_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_init(__attr: *mut root::pthread_attr_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_destroy(__attr: *mut root::pthread_attr_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_getdetachstate(
            __attr: *const root::pthread_attr_t,
            __detachstate: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_setdetachstate(
            __attr: *mut root::pthread_attr_t,
            __detachstate: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_getguardsize(
            __attr: *const root::pthread_attr_t,
            __guardsize: *mut usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_setguardsize(
            __attr: *mut root::pthread_attr_t,
            __guardsize: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_getschedparam(
            __attr: *const root::pthread_attr_t,
            __param: *mut root::sched_param,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_setschedparam(
            __attr: *mut root::pthread_attr_t,
            __param: *const root::sched_param,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_getschedpolicy(
            __attr: *const root::pthread_attr_t,
            __policy: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_setschedpolicy(
            __attr: *mut root::pthread_attr_t,
            __policy: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_getinheritsched(
            __attr: *const root::pthread_attr_t,
            __inherit: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_setinheritsched(
            __attr: *mut root::pthread_attr_t,
            __inherit: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_getscope(
            __attr: *const root::pthread_attr_t,
            __scope: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_setscope(
            __attr: *mut root::pthread_attr_t,
            __scope: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_getstackaddr(
            __attr: *const root::pthread_attr_t,
            __stackaddr: *mut *mut ::core::ffi::c_void,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_setstackaddr(
            __attr: *mut root::pthread_attr_t,
            __stackaddr: *mut ::core::ffi::c_void,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_getstacksize(
            __attr: *const root::pthread_attr_t,
            __stacksize: *mut usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_setstacksize(
            __attr: *mut root::pthread_attr_t,
            __stacksize: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_getstack(
            __attr: *const root::pthread_attr_t,
            __stackaddr: *mut *mut ::core::ffi::c_void,
            __stacksize: *mut usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_setstack(
            __attr: *mut root::pthread_attr_t,
            __stackaddr: *mut ::core::ffi::c_void,
            __stacksize: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_setaffinity_np(
            __attr: *mut root::pthread_attr_t,
            __cpusetsize: usize,
            __cpuset: *const root::cpu_set_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_getaffinity_np(
            __attr: *const root::pthread_attr_t,
            __cpusetsize: usize,
            __cpuset: *mut root::cpu_set_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_getattr_default_np(__attr: *mut root::pthread_attr_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_setsigmask_np(
            __attr: *mut root::pthread_attr_t,
            sigmask: *const root::__sigset_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_attr_getsigmask_np(
            __attr: *const root::pthread_attr_t,
            sigmask: *mut root::__sigset_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_setattr_default_np(
            __attr: *const root::pthread_attr_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_getattr_np(
            __th: root::pthread_t,
            __attr: *mut root::pthread_attr_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_setschedparam(
            __target_thread: root::pthread_t,
            __policy: ::core::ffi::c_int,
            __param: *const root::sched_param,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_getschedparam(
            __target_thread: root::pthread_t,
            __policy: *mut ::core::ffi::c_int,
            __param: *mut root::sched_param,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_setschedprio(
            __target_thread: root::pthread_t,
            __prio: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_getname_np(
            __target_thread: root::pthread_t,
            __buf: *mut ::core::ffi::c_char,
            __buflen: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_setname_np(
            __target_thread: root::pthread_t,
            __name: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_getconcurrency() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_setconcurrency(__level: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_yield() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_setaffinity_np(
            __th: root::pthread_t,
            __cpusetsize: usize,
            __cpuset: *const root::cpu_set_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_getaffinity_np(
            __th: root::pthread_t,
            __cpusetsize: usize,
            __cpuset: *mut root::cpu_set_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_once(
            __once_control: *mut root::pthread_once_t,
            __init_routine: ::core::option::Option<unsafe extern "C" fn()>,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_setcancelstate(
            __state: ::core::ffi::c_int,
            __oldstate: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_setcanceltype(
            __type: ::core::ffi::c_int,
            __oldtype: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_cancel(__th: root::pthread_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_testcancel();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __cancel_jmp_buf_tag {
        pub __cancel_jmp_buf: root::__jmp_buf,
        pub __mask_was_saved: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __cancel_jmp_buf_tag"][::core::mem::size_of::<__cancel_jmp_buf_tag>() - 72usize];
        ["Alignment of __cancel_jmp_buf_tag"]
            [::core::mem::align_of::<__cancel_jmp_buf_tag>() - 8usize];
        ["Offset of field: __cancel_jmp_buf_tag::__cancel_jmp_buf"]
            [::core::mem::offset_of!(__cancel_jmp_buf_tag, __cancel_jmp_buf) - 0usize];
        ["Offset of field: __cancel_jmp_buf_tag::__mask_was_saved"]
            [::core::mem::offset_of!(__cancel_jmp_buf_tag, __mask_was_saved) - 64usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_unwind_buf_t {
        pub __cancel_jmp_buf: [root::__cancel_jmp_buf_tag; 1usize],
        pub __pad: [*mut ::core::ffi::c_void; 4usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_unwind_buf_t"]
            [::core::mem::size_of::<__pthread_unwind_buf_t>() - 104usize];
        ["Alignment of __pthread_unwind_buf_t"]
            [::core::mem::align_of::<__pthread_unwind_buf_t>() - 8usize];
        ["Offset of field: __pthread_unwind_buf_t::__cancel_jmp_buf"]
            [::core::mem::offset_of!(__pthread_unwind_buf_t, __cancel_jmp_buf) - 0usize];
        ["Offset of field: __pthread_unwind_buf_t::__pad"]
            [::core::mem::offset_of!(__pthread_unwind_buf_t, __pad) - 72usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_cleanup_frame {
        pub __cancel_routine:
            ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void)>,
        pub __cancel_arg: *mut ::core::ffi::c_void,
        pub __do_it: ::core::ffi::c_int,
        pub __cancel_type: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_cleanup_frame"]
            [::core::mem::size_of::<__pthread_cleanup_frame>() - 24usize];
        ["Alignment of __pthread_cleanup_frame"]
            [::core::mem::align_of::<__pthread_cleanup_frame>() - 8usize];
        ["Offset of field: __pthread_cleanup_frame::__cancel_routine"]
            [::core::mem::offset_of!(__pthread_cleanup_frame, __cancel_routine) - 0usize];
        ["Offset of field: __pthread_cleanup_frame::__cancel_arg"]
            [::core::mem::offset_of!(__pthread_cleanup_frame, __cancel_arg) - 8usize];
        ["Offset of field: __pthread_cleanup_frame::__do_it"]
            [::core::mem::offset_of!(__pthread_cleanup_frame, __do_it) - 16usize];
        ["Offset of field: __pthread_cleanup_frame::__cancel_type"]
            [::core::mem::offset_of!(__pthread_cleanup_frame, __cancel_type) - 20usize];
    };
    #[repr(C)]
    #[derive(Debug)]
    pub struct __pthread_cleanup_class {
        pub __cancel_routine:
            ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void)>,
        pub __cancel_arg: *mut ::core::ffi::c_void,
        pub __do_it: ::core::ffi::c_int,
        pub __cancel_type: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_cleanup_class"]
            [::core::mem::size_of::<__pthread_cleanup_class>() - 24usize];
        ["Alignment of __pthread_cleanup_class"]
            [::core::mem::align_of::<__pthread_cleanup_class>() - 8usize];
        ["Offset of field: __pthread_cleanup_class::__cancel_routine"]
            [::core::mem::offset_of!(__pthread_cleanup_class, __cancel_routine) - 0usize];
        ["Offset of field: __pthread_cleanup_class::__cancel_arg"]
            [::core::mem::offset_of!(__pthread_cleanup_class, __cancel_arg) - 8usize];
        ["Offset of field: __pthread_cleanup_class::__do_it"]
            [::core::mem::offset_of!(__pthread_cleanup_class, __do_it) - 16usize];
        ["Offset of field: __pthread_cleanup_class::__cancel_type"]
            [::core::mem::offset_of!(__pthread_cleanup_class, __cancel_type) - 20usize];
    };
    unsafe extern "C" {
        pub fn __sigsetjmp(
            __env: *mut root::__jmp_buf_tag,
            __savemask: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutex_init(
            __mutex: *mut root::pthread_mutex_t,
            __mutexattr: *const root::pthread_mutexattr_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutex_destroy(__mutex: *mut root::pthread_mutex_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutex_trylock(__mutex: *mut root::pthread_mutex_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutex_lock(__mutex: *mut root::pthread_mutex_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutex_timedlock(
            __mutex: *mut root::pthread_mutex_t,
            __abstime: *const root::timespec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutex_clocklock(
            __mutex: *mut root::pthread_mutex_t,
            __clockid: root::clockid_t,
            __abstime: *const root::timespec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutex_unlock(__mutex: *mut root::pthread_mutex_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutex_getprioceiling(
            __mutex: *const root::pthread_mutex_t,
            __prioceiling: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutex_setprioceiling(
            __mutex: *mut root::pthread_mutex_t,
            __prioceiling: ::core::ffi::c_int,
            __old_ceiling: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutex_consistent(__mutex: *mut root::pthread_mutex_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutexattr_init(__attr: *mut root::pthread_mutexattr_t)
            -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutexattr_destroy(
            __attr: *mut root::pthread_mutexattr_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutexattr_getpshared(
            __attr: *const root::pthread_mutexattr_t,
            __pshared: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutexattr_setpshared(
            __attr: *mut root::pthread_mutexattr_t,
            __pshared: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutexattr_gettype(
            __attr: *const root::pthread_mutexattr_t,
            __kind: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutexattr_settype(
            __attr: *mut root::pthread_mutexattr_t,
            __kind: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutexattr_getprotocol(
            __attr: *const root::pthread_mutexattr_t,
            __protocol: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutexattr_setprotocol(
            __attr: *mut root::pthread_mutexattr_t,
            __protocol: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutexattr_getprioceiling(
            __attr: *const root::pthread_mutexattr_t,
            __prioceiling: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutexattr_setprioceiling(
            __attr: *mut root::pthread_mutexattr_t,
            __prioceiling: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutexattr_getrobust(
            __attr: *const root::pthread_mutexattr_t,
            __robustness: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_mutexattr_setrobust(
            __attr: *mut root::pthread_mutexattr_t,
            __robustness: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_rwlock_init(
            __rwlock: *mut root::pthread_rwlock_t,
            __attr: *const root::pthread_rwlockattr_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_rwlock_destroy(__rwlock: *mut root::pthread_rwlock_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_rwlock_rdlock(__rwlock: *mut root::pthread_rwlock_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_rwlock_tryrdlock(
            __rwlock: *mut root::pthread_rwlock_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_rwlock_timedrdlock(
            __rwlock: *mut root::pthread_rwlock_t,
            __abstime: *const root::timespec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_rwlock_clockrdlock(
            __rwlock: *mut root::pthread_rwlock_t,
            __clockid: root::clockid_t,
            __abstime: *const root::timespec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_rwlock_wrlock(__rwlock: *mut root::pthread_rwlock_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_rwlock_trywrlock(
            __rwlock: *mut root::pthread_rwlock_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_rwlock_timedwrlock(
            __rwlock: *mut root::pthread_rwlock_t,
            __abstime: *const root::timespec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_rwlock_clockwrlock(
            __rwlock: *mut root::pthread_rwlock_t,
            __clockid: root::clockid_t,
            __abstime: *const root::timespec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_rwlock_unlock(__rwlock: *mut root::pthread_rwlock_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_rwlockattr_init(
            __attr: *mut root::pthread_rwlockattr_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_rwlockattr_destroy(
            __attr: *mut root::pthread_rwlockattr_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_rwlockattr_getpshared(
            __attr: *const root::pthread_rwlockattr_t,
            __pshared: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_rwlockattr_setpshared(
            __attr: *mut root::pthread_rwlockattr_t,
            __pshared: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_rwlockattr_getkind_np(
            __attr: *const root::pthread_rwlockattr_t,
            __pref: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_rwlockattr_setkind_np(
            __attr: *mut root::pthread_rwlockattr_t,
            __pref: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_cond_init(
            __cond: *mut root::pthread_cond_t,
            __cond_attr: *const root::pthread_condattr_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_cond_destroy(__cond: *mut root::pthread_cond_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_cond_signal(__cond: *mut root::pthread_cond_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_cond_broadcast(__cond: *mut root::pthread_cond_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_cond_wait(
            __cond: *mut root::pthread_cond_t,
            __mutex: *mut root::pthread_mutex_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_cond_timedwait(
            __cond: *mut root::pthread_cond_t,
            __mutex: *mut root::pthread_mutex_t,
            __abstime: *const root::timespec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_cond_clockwait(
            __cond: *mut root::pthread_cond_t,
            __mutex: *mut root::pthread_mutex_t,
            __clock_id: root::__clockid_t,
            __abstime: *const root::timespec,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_condattr_init(__attr: *mut root::pthread_condattr_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_condattr_destroy(
            __attr: *mut root::pthread_condattr_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_condattr_getpshared(
            __attr: *const root::pthread_condattr_t,
            __pshared: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_condattr_setpshared(
            __attr: *mut root::pthread_condattr_t,
            __pshared: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_condattr_getclock(
            __attr: *const root::pthread_condattr_t,
            __clock_id: *mut root::__clockid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_condattr_setclock(
            __attr: *mut root::pthread_condattr_t,
            __clock_id: root::__clockid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_spin_init(
            __lock: *mut root::pthread_spinlock_t,
            __pshared: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_spin_destroy(__lock: *mut root::pthread_spinlock_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_spin_lock(__lock: *mut root::pthread_spinlock_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_spin_trylock(__lock: *mut root::pthread_spinlock_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_spin_unlock(__lock: *mut root::pthread_spinlock_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_barrier_init(
            __barrier: *mut root::pthread_barrier_t,
            __attr: *const root::pthread_barrierattr_t,
            __count: ::core::ffi::c_uint,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_barrier_destroy(
            __barrier: *mut root::pthread_barrier_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_barrier_wait(__barrier: *mut root::pthread_barrier_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_barrierattr_init(
            __attr: *mut root::pthread_barrierattr_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_barrierattr_destroy(
            __attr: *mut root::pthread_barrierattr_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_barrierattr_getpshared(
            __attr: *const root::pthread_barrierattr_t,
            __pshared: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_barrierattr_setpshared(
            __attr: *mut root::pthread_barrierattr_t,
            __pshared: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_key_create(
            __key: *mut root::pthread_key_t,
            __destr_function: ::core::option::Option<
                unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void),
            >,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_key_delete(__key: root::pthread_key_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_getspecific(__key: root::pthread_key_t) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn pthread_setspecific(
            __key: root::pthread_key_t,
            __pointer: *const ::core::ffi::c_void,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_getcpuclockid(
            __thread_id: root::pthread_t,
            __clock_id: *mut root::__clockid_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pthread_atfork(
            __prepare: ::core::option::Option<unsafe extern "C" fn()>,
            __parent: ::core::option::Option<unsafe extern "C" fn()>,
            __child: ::core::option::Option<unsafe extern "C" fn()>,
        ) -> ::core::ffi::c_int;
    }
    pub type __gthread_t = root::pthread_t;
    pub type __gthread_key_t = root::pthread_key_t;
    pub type __gthread_once_t = root::pthread_once_t;
    pub type __gthread_mutex_t = root::pthread_mutex_t;
    pub type __gthread_recursive_mutex_t = root::pthread_mutex_t;
    pub type __gthread_cond_t = root::pthread_cond_t;
    pub type __gthread_time_t = root::timespec;
    pub type _Atomic_word = ::core::ffi::c_int;
    unsafe extern "C" {
        pub static mut __libc_single_threaded: ::core::ffi::c_char;
    }
    pub type __cfloat128 = root::__BindgenComplex<u128>;
    pub type _Float128 = u128;
    pub type _Float32 = f32;
    pub type _Float64 = f64;
    pub type _Float32x = f64;
    pub type _Float64x = u128;
    pub type __gnuc_va_list = root::__builtin_va_list;
    pub type va_list = root::__gnuc_va_list;
    pub type wint_t = ::core::ffi::c_uint;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __mbstate_t {
        pub __count: ::core::ffi::c_int,
        pub __value: root::__mbstate_t__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __mbstate_t__bindgen_ty_1 {
        pub __wch: ::core::ffi::c_uint,
        pub __wchb: [::core::ffi::c_char; 4usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __mbstate_t__bindgen_ty_1"]
            [::core::mem::size_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
        ["Alignment of __mbstate_t__bindgen_ty_1"]
            [::core::mem::align_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
        ["Offset of field: __mbstate_t__bindgen_ty_1::__wch"]
            [::core::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wch) - 0usize];
        ["Offset of field: __mbstate_t__bindgen_ty_1::__wchb"]
            [::core::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wchb) - 0usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __mbstate_t"][::core::mem::size_of::<__mbstate_t>() - 8usize];
        ["Alignment of __mbstate_t"][::core::mem::align_of::<__mbstate_t>() - 4usize];
        ["Offset of field: __mbstate_t::__count"]
            [::core::mem::offset_of!(__mbstate_t, __count) - 0usize];
        ["Offset of field: __mbstate_t::__value"]
            [::core::mem::offset_of!(__mbstate_t, __value) - 4usize];
    };
    pub type mbstate_t = root::__mbstate_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_FILE {
        _unused: [u8; 0],
    }
    pub type __FILE = root::_IO_FILE;
    pub type FILE = root::_IO_FILE;
    unsafe extern "C" {
        pub fn wcscpy(__dest: *mut u32, __src: *const u32) -> *mut u32;
    }
    unsafe extern "C" {
        pub fn wcsncpy(__dest: *mut u32, __src: *const u32, __n: usize) -> *mut u32;
    }
    unsafe extern "C" {
        pub fn wcslcpy(__dest: *mut u32, __src: *const u32, __n: usize) -> usize;
    }
    unsafe extern "C" {
        pub fn wcslcat(__dest: *mut u32, __src: *const u32, __n: usize) -> usize;
    }
    unsafe extern "C" {
        pub fn wcscat(__dest: *mut u32, __src: *const u32) -> *mut u32;
    }
    unsafe extern "C" {
        pub fn wcsncat(__dest: *mut u32, __src: *const u32, __n: usize) -> *mut u32;
    }
    unsafe extern "C" {
        pub fn wcscmp(__s1: *const u32, __s2: *const u32) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn wcsncmp(__s1: *const u32, __s2: *const u32, __n: usize) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn wcscasecmp(__s1: *const u32, __s2: *const u32) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn wcsncasecmp(__s1: *const u32, __s2: *const u32, __n: usize) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn wcscasecmp_l(
            __s1: *const u32,
            __s2: *const u32,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn wcsncasecmp_l(
            __s1: *const u32,
            __s2: *const u32,
            __n: usize,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn wcscoll(__s1: *const u32, __s2: *const u32) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn wcsxfrm(__s1: *mut u32, __s2: *const u32, __n: usize) -> usize;
    }
    unsafe extern "C" {
        pub fn wcscoll_l(
            __s1: *const u32,
            __s2: *const u32,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn wcsxfrm_l(
            __s1: *mut u32,
            __s2: *const u32,
            __n: usize,
            __loc: root::locale_t,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn wcsdup(__s: *const u32) -> *mut u32;
    }
    unsafe extern "C" {
        pub fn wcschr(__wcs: *const u32, __wc: u32) -> *mut u32;
    }
    unsafe extern "C" {
        pub fn wcsrchr(__wcs: *const u32, __wc: u32) -> *mut u32;
    }
    unsafe extern "C" {
        pub fn wcschrnul(__s: *const u32, __wc: u32) -> *mut u32;
    }
    unsafe extern "C" {
        pub fn wcscspn(__wcs: *const u32, __reject: *const u32) -> usize;
    }
    unsafe extern "C" {
        pub fn wcsspn(__wcs: *const u32, __accept: *const u32) -> usize;
    }
    unsafe extern "C" {
        pub fn wcspbrk(__wcs: *const u32, __accept: *const u32) -> *mut u32;
    }
    unsafe extern "C" {
        pub fn wcsstr(__haystack: *const u32, __needle: *const u32) -> *mut u32;
    }
    unsafe extern "C" {
        pub fn wcstok(__s: *mut u32, __delim: *const u32, __ptr: *mut *mut u32) -> *mut u32;
    }
    unsafe extern "C" {
        pub fn wcslen(__s: *const u32) -> usize;
    }
    unsafe extern "C" {
        pub fn wcswcs(__haystack: *const u32, __needle: *const u32) -> *mut u32;
    }
    unsafe extern "C" {
        pub fn wcsnlen(__s: *const u32, __maxlen: usize) -> usize;
    }
    unsafe extern "C" {
        pub fn wmemchr(__s: *const u32, __c: u32, __n: usize) -> *mut u32;
    }
    unsafe extern "C" {
        pub fn wmemcmp(__s1: *const u32, __s2: *const u32, __n: usize) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn wmemcpy(__s1: *mut u32, __s2: *const u32, __n: usize) -> *mut u32;
    }
    unsafe extern "C" {
        pub fn wmemmove(__s1: *mut u32, __s2: *const u32, __n: usize) -> *mut u32;
    }
    unsafe extern "C" {
        pub fn wmemset(__s: *mut u32, __c: u32, __n: usize) -> *mut u32;
    }
    unsafe extern "C" {
        pub fn wmempcpy(__s1: *mut u32, __s2: *const u32, __n: usize) -> *mut u32;
    }
    unsafe extern "C" {
        pub fn btowc(__c: ::core::ffi::c_int) -> root::wint_t;
    }
    unsafe extern "C" {
        pub fn wctob(__c: root::wint_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mbsinit(__ps: *const root::mbstate_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mbrtowc(
            __pwc: *mut u32,
            __s: *const ::core::ffi::c_char,
            __n: usize,
            __p: *mut root::mbstate_t,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn wcrtomb(
            __s: *mut ::core::ffi::c_char,
            __wc: u32,
            __ps: *mut root::mbstate_t,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn __mbrlen(
            __s: *const ::core::ffi::c_char,
            __n: usize,
            __ps: *mut root::mbstate_t,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn mbrlen(
            __s: *const ::core::ffi::c_char,
            __n: usize,
            __ps: *mut root::mbstate_t,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn mbsrtowcs(
            __dst: *mut u32,
            __src: *mut *const ::core::ffi::c_char,
            __len: usize,
            __ps: *mut root::mbstate_t,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn wcsrtombs(
            __dst: *mut ::core::ffi::c_char,
            __src: *mut *const u32,
            __len: usize,
            __ps: *mut root::mbstate_t,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn mbsnrtowcs(
            __dst: *mut u32,
            __src: *mut *const ::core::ffi::c_char,
            __nmc: usize,
            __len: usize,
            __ps: *mut root::mbstate_t,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn wcsnrtombs(
            __dst: *mut ::core::ffi::c_char,
            __src: *mut *const u32,
            __nwc: usize,
            __len: usize,
            __ps: *mut root::mbstate_t,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn wcwidth(__c: u32) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn wcswidth(__s: *const u32, __n: usize) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn wcstod(__nptr: *const u32, __endptr: *mut *mut u32) -> f64;
    }
    unsafe extern "C" {
        pub fn wcstof(__nptr: *const u32, __endptr: *mut *mut u32) -> f32;
    }
    unsafe extern "C" {
        pub fn wcstold(__nptr: *const u32, __endptr: *mut *mut u32) -> u128;
    }
    unsafe extern "C" {
        pub fn wcstof32(__nptr: *const u32, __endptr: *mut *mut u32) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn wcstof64(__nptr: *const u32, __endptr: *mut *mut u32) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn wcstof128(__nptr: *const u32, __endptr: *mut *mut u32) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn wcstof32x(__nptr: *const u32, __endptr: *mut *mut u32) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn wcstof64x(__nptr: *const u32, __endptr: *mut *mut u32) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn wcstol(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn wcstoul(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_ulong;
    }
    unsafe extern "C" {
        pub fn wcstoll(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn wcstoull(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_ulonglong;
    }
    unsafe extern "C" {
        pub fn wcstoq(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn wcstouq(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_ulonglong;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_wcstol"]
        pub fn wcstol1(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_wcstoul"]
        pub fn wcstoul1(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_ulong;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_wcstoll"]
        pub fn wcstoll1(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_wcstoull"]
        pub fn wcstoull1(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_ulonglong;
    }
    unsafe extern "C" {
        pub fn wcstol_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn wcstoul_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_ulong;
    }
    unsafe extern "C" {
        pub fn wcstoll_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn wcstoull_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_ulonglong;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_wcstol_l"]
        pub fn wcstol_l1(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_wcstoul_l"]
        pub fn wcstoul_l1(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_ulong;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_wcstoll_l"]
        pub fn wcstoll_l1(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_wcstoull_l"]
        pub fn wcstoull_l1(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_ulonglong;
    }
    unsafe extern "C" {
        pub fn wcstod_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: root::locale_t) -> f64;
    }
    unsafe extern "C" {
        pub fn wcstof_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: root::locale_t) -> f32;
    }
    unsafe extern "C" {
        pub fn wcstold_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __loc: root::locale_t,
        ) -> u128;
    }
    unsafe extern "C" {
        pub fn wcstof32_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __loc: root::locale_t,
        ) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn wcstof64_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __loc: root::locale_t,
        ) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn wcstof128_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __loc: root::locale_t,
        ) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn wcstof32x_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __loc: root::locale_t,
        ) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn wcstof64x_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __loc: root::locale_t,
        ) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn wcpcpy(__dest: *mut u32, __src: *const u32) -> *mut u32;
    }
    unsafe extern "C" {
        pub fn wcpncpy(__dest: *mut u32, __src: *const u32, __n: usize) -> *mut u32;
    }
    unsafe extern "C" {
        pub fn open_wmemstream(__bufloc: *mut *mut u32, __sizeloc: *mut usize)
            -> *mut root::__FILE;
    }
    unsafe extern "C" {
        pub fn fwide(__fp: *mut root::__FILE, __mode: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fwprintf(
            __stream: *mut root::__FILE,
            __format: *const u32,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn wprintf(__format: *const u32, ...) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn swprintf(__s: *mut u32, __n: usize, __format: *const u32, ...)
            -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vfwprintf(
            __s: *mut root::__FILE,
            __format: *const u32,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vwprintf(
            __format: *const u32,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vswprintf(
            __s: *mut u32,
            __n: usize,
            __format: *const u32,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fwscanf(
            __stream: *mut root::__FILE,
            __format: *const u32,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn wscanf(__format: *const u32, ...) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn swscanf(__s: *const u32, __format: *const u32, ...) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_fwscanf"]
        pub fn fwscanf1(
            __stream: *mut root::__FILE,
            __format: *const u32,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_wscanf"]
        pub fn wscanf1(__format: *const u32, ...) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_swscanf"]
        pub fn swscanf1(__s: *const u32, __format: *const u32, ...) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vfwscanf(
            __s: *mut root::__FILE,
            __format: *const u32,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vwscanf(__format: *const u32, __arg: *mut root::__va_list_tag)
            -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vswscanf(
            __s: *const u32,
            __format: *const u32,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_vfwscanf"]
        pub fn vfwscanf1(
            __s: *mut root::__FILE,
            __format: *const u32,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_vwscanf"]
        pub fn vwscanf1(
            __format: *const u32,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_vswscanf"]
        pub fn vswscanf1(
            __s: *const u32,
            __format: *const u32,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fgetwc(__stream: *mut root::__FILE) -> root::wint_t;
    }
    unsafe extern "C" {
        pub fn getwc(__stream: *mut root::__FILE) -> root::wint_t;
    }
    unsafe extern "C" {
        pub fn getwchar() -> root::wint_t;
    }
    unsafe extern "C" {
        pub fn fputwc(__wc: u32, __stream: *mut root::__FILE) -> root::wint_t;
    }
    unsafe extern "C" {
        pub fn putwc(__wc: u32, __stream: *mut root::__FILE) -> root::wint_t;
    }
    unsafe extern "C" {
        pub fn putwchar(__wc: u32) -> root::wint_t;
    }
    unsafe extern "C" {
        pub fn fgetws(
            __ws: *mut u32,
            __n: ::core::ffi::c_int,
            __stream: *mut root::__FILE,
        ) -> *mut u32;
    }
    unsafe extern "C" {
        pub fn fputws(__ws: *const u32, __stream: *mut root::__FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ungetwc(__wc: root::wint_t, __stream: *mut root::__FILE) -> root::wint_t;
    }
    unsafe extern "C" {
        pub fn getwc_unlocked(__stream: *mut root::__FILE) -> root::wint_t;
    }
    unsafe extern "C" {
        pub fn getwchar_unlocked() -> root::wint_t;
    }
    unsafe extern "C" {
        pub fn fgetwc_unlocked(__stream: *mut root::__FILE) -> root::wint_t;
    }
    unsafe extern "C" {
        pub fn fputwc_unlocked(__wc: u32, __stream: *mut root::__FILE) -> root::wint_t;
    }
    unsafe extern "C" {
        pub fn putwc_unlocked(__wc: u32, __stream: *mut root::__FILE) -> root::wint_t;
    }
    unsafe extern "C" {
        pub fn putwchar_unlocked(__wc: u32) -> root::wint_t;
    }
    unsafe extern "C" {
        pub fn fgetws_unlocked(
            __ws: *mut u32,
            __n: ::core::ffi::c_int,
            __stream: *mut root::__FILE,
        ) -> *mut u32;
    }
    unsafe extern "C" {
        pub fn fputws_unlocked(__ws: *const u32, __stream: *mut root::__FILE)
            -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn wcsftime(
            __s: *mut u32,
            __maxsize: usize,
            __format: *const u32,
            __tp: *const root::tm,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn wcsftime_l(
            __s: *mut u32,
            __maxsize: usize,
            __format: *const u32,
            __tp: *const root::tm,
            __loc: root::locale_t,
        ) -> usize;
    }
    pub mod ke {
        #[allow(unused_imports)]
        use self::super::super::root;
        #[repr(C)]
        pub struct Mutex {
            pub _base: root::std::mutex,
            pub owner_: root::std::thread_id,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of Mutex"][::core::mem::size_of::<Mutex>() - 48usize];
            ["Alignment of Mutex"][::core::mem::align_of::<Mutex>() - 8usize];
            ["Offset of field: Mutex::owner_"][::core::mem::offset_of!(Mutex, owner_) - 40usize];
        };
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_1 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_2 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_3 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_4 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_5 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_6 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_7 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_8 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_9 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_10 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_11 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_12 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_13 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_14 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_15 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_16 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_17 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_18 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_19 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_20 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_21 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_22 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_23 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_24 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_25 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_26 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_27 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_28 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_29 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_30 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_31 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_32 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_33 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_34 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_35 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __locale_data {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_36 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_37 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_38 {
        pub _address: u8,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: duration_open0_long_nano_close0"]
            [::core::mem::size_of::<root::std::chrono::duration<::core::ffi::c_long>>() - 8usize];
        ["Align of template specialization: duration_open0_long_nano_close0"]
            [::core::mem::align_of::<root::std::chrono::duration<::core::ffi::c_long>>() - 8usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: duration_open0_long_micro_close0"]
            [::core::mem::size_of::<root::std::chrono::duration<::core::ffi::c_long>>() - 8usize];
        ["Align of template specialization: duration_open0_long_micro_close0"]
            [::core::mem::align_of::<root::std::chrono::duration<::core::ffi::c_long>>() - 8usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: duration_open0_long_milli_close0"]
            [::core::mem::size_of::<root::std::chrono::duration<::core::ffi::c_long>>() - 8usize];
        ["Align of template specialization: duration_open0_long_milli_close0"]
            [::core::mem::align_of::<root::std::chrono::duration<::core::ffi::c_long>>() - 8usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: duration_open0_long_ratio_open1_close1_close0"]
            [::core::mem::size_of::<root::std::chrono::duration<::core::ffi::c_long>>() - 8usize];
        ["Align of template specialization: duration_open0_long_ratio_open1_close1_close0"]
            [::core::mem::align_of::<root::std::chrono::duration<::core::ffi::c_long>>() - 8usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: duration_open0_long_ratio_open1_close1_close0"]
            [::core::mem::size_of::<root::std::chrono::duration<::core::ffi::c_long>>() - 8usize];
        ["Align of template specialization: duration_open0_long_ratio_open1_close1_close0"]
            [::core::mem::align_of::<root::std::chrono::duration<::core::ffi::c_long>>() - 8usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: duration_open0_long_ratio_open1_close1_close0"]
            [::core::mem::size_of::<root::std::chrono::duration<::core::ffi::c_long>>() - 8usize];
        ["Align of template specialization: duration_open0_long_ratio_open1_close1_close0"]
            [::core::mem::align_of::<root::std::chrono::duration<::core::ffi::c_long>>() - 8usize];
    };
    pub type rep = ::core::ffi::c_long;
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: time_point_open0_system_clock_system_clock_duration_close0"] [:: core :: mem :: size_of :: < root :: std :: chrono :: time_point < root :: std :: chrono :: system_clock_duration > > () - 8usize] ;
        ["Align of template specialization: time_point_open0_system_clock_system_clock_duration_close0"] [:: core :: mem :: align_of :: < root :: std :: chrono :: time_point < root :: std :: chrono :: system_clock_duration > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: time_point_open0_steady_clock_steady_clock_duration_close0"] [:: core :: mem :: size_of :: < root :: std :: chrono :: time_point < root :: std :: chrono :: steady_clock_duration > > () - 8usize] ;
        ["Align of template specialization: time_point_open0_steady_clock_steady_clock_duration_close0"] [:: core :: mem :: align_of :: < root :: std :: chrono :: time_point < root :: std :: chrono :: steady_clock_duration > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: time_point_open0___file_clock_duration_open1_long_ratio_open2_close2_close1_close0"] [:: core :: mem :: size_of :: < root :: std :: chrono :: time_point < root :: std :: chrono :: duration < :: core :: ffi :: c_long > > > () - 8usize] ;
        ["Align of template specialization: time_point_open0___file_clock_duration_open1_long_ratio_open2_close2_close1_close0"] [:: core :: mem :: align_of :: < root :: std :: chrono :: time_point < root :: std :: chrono :: duration < :: core :: ffi :: c_long > > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: duration_open0_long_ratio_open1_close1_close0"]
            [::core::mem::size_of::<root::std::chrono::duration<::core::ffi::c_long>>() - 8usize];
        ["Align of template specialization: duration_open0_long_ratio_open1_close1_close0"]
            [::core::mem::align_of::<root::std::chrono::duration<::core::ffi::c_long>>() - 8usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: __timed_mutex_impl_open0_timed_mutex_close0"]
            [::core::mem::size_of::<root::std::__timed_mutex_impl>() - 1usize];
        ["Align of template specialization: __timed_mutex_impl_open0_timed_mutex_close0"]
            [::core::mem::align_of::<root::std::__timed_mutex_impl>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: __timed_mutex_impl_open0_recursive_timed_mutex_close0"] [:: core :: mem :: size_of :: < root :: std :: __timed_mutex_impl > () - 1usize] ;
        ["Align of template specialization: __timed_mutex_impl_open0_recursive_timed_mutex_close0"] [:: core :: mem :: align_of :: < root :: std :: __timed_mutex_impl > () - 1usize] ;
    };
    pub type __builtin_va_list = [root::__va_list_tag; 1usize];
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __va_list_tag {
        pub gp_offset: ::core::ffi::c_uint,
        pub fp_offset: ::core::ffi::c_uint,
        pub overflow_arg_area: *mut ::core::ffi::c_void,
        pub reg_save_area: *mut ::core::ffi::c_void,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __va_list_tag"][::core::mem::size_of::<__va_list_tag>() - 24usize];
        ["Alignment of __va_list_tag"][::core::mem::align_of::<__va_list_tag>() - 8usize];
        ["Offset of field: __va_list_tag::gp_offset"]
            [::core::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
        ["Offset of field: __va_list_tag::fp_offset"]
            [::core::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
        ["Offset of field: __va_list_tag::overflow_arg_area"]
            [::core::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
        ["Offset of field: __va_list_tag::reg_save_area"]
            [::core::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: hash_open0_long_double_close0"]
            [::core::mem::size_of::<root::std::hash>() - 1usize];
        ["Align of template specialization: hash_open0_long_double_close0"]
            [::core::mem::align_of::<root::std::hash>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: unique_ptr_open0_thread__State_default_delete_open1_thread__State_close1_close0"] [:: core :: mem :: size_of :: < root :: std :: unique_ptr > () - 8usize] ;
        ["Align of template specialization: unique_ptr_open0_thread__State_default_delete_open1_thread__State_close1_close0"] [:: core :: mem :: align_of :: < root :: std :: unique_ptr > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: default_delete_open0_thread__State_close0"]
            [::core::mem::size_of::<root::std::default_delete>() - 1usize];
        ["Align of template specialization: default_delete_open0_thread__State_close0"]
            [::core::mem::align_of::<root::std::default_delete>() - 1usize];
    };
}
