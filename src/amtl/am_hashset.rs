/* automatically generated by rust-bindgen 0.71.1 */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[repr(C)]
    #[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
    pub struct __BindgenBitfieldUnit<Storage> {
        storage: Storage,
    }
    impl<Storage> __BindgenBitfieldUnit<Storage> {
        #[inline]
        pub const fn new(storage: Storage) -> Self {
            Self { storage }
        }
    }
    impl<Storage> __BindgenBitfieldUnit<Storage>
    where
        Storage: AsRef<[u8]> + AsMut<[u8]>,
    {
        #[inline]
        fn extract_bit(byte: u8, index: usize) -> bool {
            let bit_index = if cfg!(target_endian = "big") {
                7 - (index % 8)
            } else {
                index % 8
            };
            let mask = 1 << bit_index;
            byte & mask == mask
        }
        #[inline]
        pub fn get_bit(&self, index: usize) -> bool {
            debug_assert!(index / 8 < self.storage.as_ref().len());
            let byte_index = index / 8;
            let byte = self.storage.as_ref()[byte_index];
            Self::extract_bit(byte, index)
        }
        #[inline]
        pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
            debug_assert!(index / 8 < core::mem::size_of::<Storage>());
            let byte_index = index / 8;
            let byte =
                *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize);
            Self::extract_bit(byte, index)
        }
        #[inline]
        fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
            let bit_index = if cfg!(target_endian = "big") {
                7 - (index % 8)
            } else {
                index % 8
            };
            let mask = 1 << bit_index;
            if val {
                byte | mask
            } else {
                byte & !mask
            }
        }
        #[inline]
        pub fn set_bit(&mut self, index: usize, val: bool) {
            debug_assert!(index / 8 < self.storage.as_ref().len());
            let byte_index = index / 8;
            let byte = &mut self.storage.as_mut()[byte_index];
            *byte = Self::change_bit(*byte, index, val);
        }
        #[inline]
        pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
            debug_assert!(index / 8 < core::mem::size_of::<Storage>());
            let byte_index = index / 8;
            let byte =
                (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize);
            *byte = Self::change_bit(*byte, index, val);
        }
        #[inline]
        pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
            debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
            let mut val = 0;
            for i in 0..(bit_width as usize) {
                if self.get_bit(i + bit_offset) {
                    let index = if cfg!(target_endian = "big") {
                        bit_width as usize - 1 - i
                    } else {
                        i
                    };
                    val |= 1 << index;
                }
            }
            val
        }
        #[inline]
        pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
            debug_assert!(
                (bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>()
            );
            let mut val = 0;
            for i in 0..(bit_width as usize) {
                if Self::raw_get_bit(this, i + bit_offset) {
                    let index = if cfg!(target_endian = "big") {
                        bit_width as usize - 1 - i
                    } else {
                        i
                    };
                    val |= 1 << index;
                }
            }
            val
        }
        #[inline]
        pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
            debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
            for i in 0..(bit_width as usize) {
                let mask = 1 << i;
                let val_bit_is_set = val & mask == mask;
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                self.set_bit(index + bit_offset, val_bit_is_set);
            }
        }
        #[inline]
        pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
            debug_assert!(
                (bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>()
            );
            for i in 0..(bit_width as usize) {
                let mask = 1 << i;
                let val_bit_is_set = val & mask == mask;
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                Self::raw_set_bit(this, index + bit_offset, val_bit_is_set);
            }
        }
    }
    #[doc = r" If Bindgen could only determine the size and alignment of a"]
    #[doc = r" type, it is represented like this."]
    #[derive(PartialEq, Copy, Clone, Debug, Hash)]
    #[repr(C)]
    pub struct __BindgenOpaqueArray<T: Copy, const N: usize>(pub [T; N]);
    impl<T: Copy + Default, const N: usize> Default for __BindgenOpaqueArray<T, N> {
        fn default() -> Self {
            Self([<T as Default>::default(); N])
        }
    }
    #[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
    #[repr(C)]
    pub struct __BindgenComplex<T> {
        pub re: T,
        pub im: T,
    }
    #[allow(unused_imports)]
    use self::super::root;
    pub const POSIX: u32 = 1;
    pub const LINUX: u32 = 1;
    pub const _LINUX: u32 = 1;
    pub const COMPILER_GCC: u32 = 1;
    pub const _GLIBCXX_UTILITY: u32 = 1;
    pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
    pub const _GLIBCXX_RELEASE: u32 = 15;
    pub const __GLIBCXX__: u32 = 20250425;
    pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
    pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
    pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
    pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
    pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
    pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
    pub const _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED: u32 = 1;
    pub const _GLIBCXX_ASSERTIONS: u32 = 1;
    pub const _GLIBCXX_VERBOSE_ASSERT: u32 = 1;
    pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
    pub const _GLIBCXX_OS_DEFINES: u32 = 1;
    pub const __NO_CTYPE: u32 = 1;
    pub const _FEATURES_H: u32 = 1;
    pub const _ISOC95_SOURCE: u32 = 1;
    pub const _ISOC99_SOURCE: u32 = 1;
    pub const _ISOC11_SOURCE: u32 = 1;
    pub const _ISOC23_SOURCE: u32 = 1;
    pub const _ISOC2Y_SOURCE: u32 = 1;
    pub const _POSIX_SOURCE: u32 = 1;
    pub const _POSIX_C_SOURCE: u32 = 200809;
    pub const _XOPEN_SOURCE: u32 = 700;
    pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
    pub const _LARGEFILE64_SOURCE: u32 = 1;
    pub const _DEFAULT_SOURCE: u32 = 1;
    pub const _ATFILE_SOURCE: u32 = 1;
    pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
    pub const __GLIBC_USE_ISOC2Y: u32 = 1;
    pub const __GLIBC_USE_ISOC23: u32 = 1;
    pub const __USE_ISOC11: u32 = 1;
    pub const __USE_ISOC99: u32 = 1;
    pub const __USE_ISOC95: u32 = 1;
    pub const __USE_ISOCXX11: u32 = 1;
    pub const __USE_POSIX: u32 = 1;
    pub const __USE_POSIX2: u32 = 1;
    pub const __USE_POSIX199309: u32 = 1;
    pub const __USE_POSIX199506: u32 = 1;
    pub const __USE_XOPEN2K: u32 = 1;
    pub const __USE_XOPEN2K8: u32 = 1;
    pub const __USE_XOPEN: u32 = 1;
    pub const __USE_XOPEN_EXTENDED: u32 = 1;
    pub const __USE_UNIX98: u32 = 1;
    pub const _LARGEFILE_SOURCE: u32 = 1;
    pub const __USE_XOPEN2K8XSI: u32 = 1;
    pub const __USE_XOPEN2KXSI: u32 = 1;
    pub const __USE_LARGEFILE: u32 = 1;
    pub const __USE_LARGEFILE64: u32 = 1;
    pub const __WORDSIZE: u32 = 64;
    pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
    pub const __SYSCALL_WORDSIZE: u32 = 64;
    pub const __TIMESIZE: u32 = 64;
    pub const __USE_TIME_BITS64: u32 = 1;
    pub const __USE_MISC: u32 = 1;
    pub const __USE_ATFILE: u32 = 1;
    pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
    pub const __USE_GNU: u32 = 1;
    pub const __USE_FORTIFY_LEVEL: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
    pub const __GLIBC_USE_C23_STRTOL: u32 = 1;
    pub const _STDC_PREDEF_H: u32 = 1;
    pub const __STDC_IEC_559__: u32 = 1;
    pub const __STDC_IEC_60559_BFP__: u32 = 201404;
    pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
    pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
    pub const __STDC_ISO_10646__: u32 = 201706;
    pub const __GNU_LIBRARY__: u32 = 6;
    pub const __GLIBC__: u32 = 2;
    pub const __GLIBC_MINOR__: u32 = 41;
    pub const _SYS_CDEFS_H: u32 = 1;
    pub const __glibc_c99_flexarr_available: u32 = 1;
    pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
    pub const __HAVE_GENERIC_SELECTION: u32 = 0;
    pub const _GLIBCXX_HAVE_FLOAT128_MATH: u32 = 1;
    pub const _GLIBCXX_MAY_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
    pub const _GLIBCXX_GTHREAD_USE_WEAK: u32 = 0;
    pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
    pub const _GLIBCXX_USE_STD_SPEC_FUNCS: u32 = 1;
    pub const _GLIBCXX_FAST_MATH: u32 = 0;
    pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
    pub const _GLIBCXX_FLOAT_IS_IEEE_BINARY32: u32 = 1;
    pub const _GLIBCXX_DOUBLE_IS_IEEE_BINARY64: u32 = 1;
    pub const _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP: u32 = 1;
    pub const _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE: u32 = 1;
    pub const _GLIBCXX_HAVE_BUILTIN_LAUNDER: u32 = 1;
    pub const _PSTL_VERSION: u32 = 17000;
    pub const _PSTL_VERSION_MAJOR: u32 = 17;
    pub const _PSTL_VERSION_MINOR: u32 = 0;
    pub const _PSTL_VERSION_PATCH: u32 = 0;
    pub const _PSTL_USAGE_WARNINGS: u32 = 0;
    pub const _PSTL_PRAGMA_LOCATION: &[u8; 26] = b" [Parallel STL message]: \0";
    pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
    pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
    pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
    pub const _GLIBCXX_HAVE_ARC4RANDOM: u32 = 1;
    pub const _GLIBCXX_HAVE_ARPA_INET_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
    pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
    pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
    pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
    pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
    pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
    pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
    pub const _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY: u32 = 1;
    pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
    pub const _GLIBCXX_HAVE_C99_FLT_EVAL_TYPES: u32 = 1;
    pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
    pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
    pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
    pub const _GLIBCXX_HAVE_COSF: u32 = 1;
    pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
    pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
    pub const _GLIBCXX_HAVE_COSL: u32 = 1;
    pub const _GLIBCXX_HAVE_DECL_STRNLEN: u32 = 1;
    pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_DIRFD: u32 = 1;
    pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
    pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
    pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
    pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FDOPENDIR: u32 = 1;
    pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
    pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
    pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
    pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_GETENTROPY: u32 = 1;
    pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
    pub const _GLIBCXX_HAVE_GETS: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
    pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
    pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
    pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
    pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
    pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
    pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
    pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
    pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
    pub const _GLIBCXX_HAVE_LINK: u32 = 1;
    pub const _GLIBCXX_HAVE_LINK_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_RANDOM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_TYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
    pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
    pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
    pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
    pub const _GLIBCXX_HAVE_LSEEK: u32 = 1;
    pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
    pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
    pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
    pub const _GLIBCXX_HAVE_MODF: u32 = 1;
    pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
    pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
    pub const _GLIBCXX_HAVE_NETDB_H: u32 = 1;
    pub const _GLIBCXX_HAVE_NETINET_IN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_NETINET_TCP_H: u32 = 1;
    pub const _GLIBCXX_HAVE_OPENAT: u32 = 1;
    pub const _GLIBCXX_HAVE_O_NONBLOCK: u32 = 1;
    pub const _GLIBCXX_HAVE_POLL: u32 = 1;
    pub const _GLIBCXX_HAVE_POLL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
    pub const _GLIBCXX_HAVE_POSIX_SEMAPHORE: u32 = 1;
    pub const _GLIBCXX_HAVE_POWF: u32 = 1;
    pub const _GLIBCXX_HAVE_POWL: u32 = 1;
    pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
    pub const _GLIBCXX_HAVE_READLINK: u32 = 1;
    pub const _GLIBCXX_HAVE_SECURE_GETENV: u32 = 1;
    pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
    pub const _GLIBCXX_HAVE_SINF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
    pub const _GLIBCXX_HAVE_SINL: u32 = 1;
    pub const _GLIBCXX_HAVE_SOCKATMARK: u32 = 1;
    pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
    pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
    pub const _GLIBCXX_HAVE_STACKTRACE: u32 = 1;
    pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
    pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
    pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
    pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
    pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
    pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
    pub const _GLIBCXX_HAVE_SYMLINK: u32 = 1;
    pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_MMAN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SDT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SOCKET_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
    pub const _GLIBCXX_HAVE_TANF: u32 = 1;
    pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
    pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
    pub const _GLIBCXX_HAVE_TANL: u32 = 1;
    pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
    pub const _GLIBCXX_HAVE_TIMESPEC_GET: u32 = 1;
    pub const _GLIBCXX_HAVE_TLS: u32 = 1;
    pub const _GLIBCXX_HAVE_TRUNCATE: u32 = 1;
    pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
    pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
    pub const _GLIBCXX_HAVE_UNLINKAT: u32 = 1;
    pub const _GLIBCXX_HAVE_USELOCALE: u32 = 1;
    pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
    pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
    pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
    pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
    pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
    pub const _GLIBCXX_LT_OBJDIR: &[u8; 7] = b".libs/\0";
    pub const _GLIBCXX_PACKAGE_BUGREPORT: &[u8; 1] = b"\0";
    pub const _GLIBCXX_PACKAGE_NAME: &[u8; 15] = b"package-unused\0";
    pub const _GLIBCXX_PACKAGE_STRING: &[u8; 30] = b"package-unused version-unused\0";
    pub const _GLIBCXX_PACKAGE_TARNAME: &[u8; 10] = b"libstdc++\0";
    pub const _GLIBCXX_PACKAGE_URL: &[u8; 1] = b"\0";
    pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &[u8; 15] = b"version-unused\0";
    pub const _GLIBCXX_STDC_HEADERS: u32 = 1;
    pub const _GLIBCXX_DARWIN_USE_64_BIT_INODE: u32 = 1;
    pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
    pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
    pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
    pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
    pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
    pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
    pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
    pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
    pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
    pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
    pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
    pub const _GLIBCXX_CAN_ALIGNAS_DESTRUCTIVE_SIZE: u32 = 1;
    pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
    pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
    pub const _GLIBCXX_RES_LIMITS: u32 = 1;
    pub const _GLIBCXX_STATIC_TZDATA: u32 = 1;
    pub const _GLIBCXX_STDIO_EOF: i32 = -1;
    pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
    pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
    pub const _GLIBCXX_SYMVER: u32 = 1;
    pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
    pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
    pub const _GLIBCXX_USE_C99: u32 = 1;
    pub const _GLIBCXX_USE_C99_COMPLEX_ARC: u32 = 1;
    pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_CTYPE: u32 = 1;
    pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_FENV: u32 = 1;
    pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_MATH_FUNCS: u32 = 1;
    pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_STDINT: u32 = 1;
    pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
    pub const _GLIBCXX_USE_CHDIR: u32 = 1;
    pub const _GLIBCXX_USE_CHMOD: u32 = 1;
    pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
    pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
    pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
    pub const _GLIBCXX_USE_DEV_RANDOM: u32 = 1;
    pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
    pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
    pub const _GLIBCXX_USE_FSEEKO_FTELLO: u32 = 1;
    pub const _GLIBCXX_USE_GETCWD: u32 = 1;
    pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
    pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
    pub const _GLIBCXX_USE_INIT_PRIORITY_ATTRIBUTE: u32 = 1;
    pub const _GLIBCXX_USE_LFS: u32 = 1;
    pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
    pub const _GLIBCXX_USE_LSTAT: u32 = 1;
    pub const _GLIBCXX_USE_MKDIR: u32 = 1;
    pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
    pub const _GLIBCXX_USE_NLS: u32 = 1;
    pub const _GLIBCXX_USE_NL_LANGINFO_L: u32 = 1;
    pub const _GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT: u32 = 1;
    pub const _GLIBCXX_USE_PTHREAD_RWLOCK_CLOCKLOCK: u32 = 1;
    pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
    pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
    pub const _GLIBCXX_USE_REALPATH: u32 = 1;
    pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
    pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
    pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
    pub const _GLIBCXX_USE_STRUCT_TM_TM_ZONE: u32 = 1;
    pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
    pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
    pub const _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_CXX20: u32 = 1;
    pub const _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_FCHAR8_T: u32 = 1;
    pub const _GLIBCXX_USE_UTIME: u32 = 1;
    pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
    pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
    pub const _GLIBCXX_VERBOSE: u32 = 1;
    pub const _GLIBCXX_X86_RDRAND: u32 = 1;
    pub const _GLIBCXX_X86_RDSEED: u32 = 1;
    pub const _GLIBCXX_ZONEINFO_DIR: &[u8; 20] = b"/usr/share/zoneinfo\0";
    pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
    pub const _STL_RELOPS_H: u32 = 1;
    pub const _STL_PAIR_H: u32 = 1;
    pub const _GLIBCXX_TYPE_TRAITS: u32 = 1;
    pub const __glibcxx_incomplete_container_elements: u32 = 201505;
    pub const __glibcxx_uncaught_exceptions: u32 = 201411;
    pub const __glibcxx_allocator_traits_is_always_equal: u32 = 201411;
    pub const __glibcxx_is_null_pointer: u32 = 201309;
    pub const __cpp_lib_is_null_pointer: u32 = 201309;
    pub const __glibcxx_result_of_sfinae: u32 = 201210;
    pub const __cpp_lib_result_of_sfinae: u32 = 201210;
    pub const __glibcxx_shared_ptr_arrays: u32 = 201611;
    pub const __glibcxx_is_swappable: u32 = 201603;
    pub const __cpp_lib_is_swappable: u32 = 201603;
    pub const __glibcxx_void_t: u32 = 201411;
    pub const __cpp_lib_void_t: u32 = 201411;
    pub const __glibcxx_enable_shared_from_this: u32 = 201603;
    pub const __glibcxx_math_spec_funcs: u32 = 201003;
    pub const __glibcxx_exchange_function: u32 = 201304;
    pub const __glibcxx_integer_sequence: u32 = 201304;
    pub const __glibcxx_integral_constant_callable: u32 = 201304;
    pub const __cpp_lib_integral_constant_callable: u32 = 201304;
    pub const __glibcxx_is_final: u32 = 201402;
    pub const __cpp_lib_is_final: u32 = 201402;
    pub const __glibcxx_make_reverse_iterator: u32 = 201402;
    pub const __glibcxx_null_iterators: u32 = 201304;
    pub const __glibcxx_transformation_trait_aliases: u32 = 201304;
    pub const __cpp_lib_transformation_trait_aliases: u32 = 201304;
    pub const __glibcxx_transparent_operators: u32 = 201510;
    pub const __glibcxx_tuple_element_t: u32 = 201402;
    pub const __glibcxx_tuples_by_type: u32 = 201304;
    pub const __glibcxx_robust_nonmodifying_seq_ops: u32 = 201304;
    pub const __glibcxx_to_chars: u32 = 201611;
    pub const __glibcxx_chrono_udls: u32 = 201304;
    pub const __glibcxx_complex_udls: u32 = 201309;
    pub const __glibcxx_generic_associative_lookup: u32 = 201304;
    pub const __glibcxx_make_unique: u32 = 201304;
    pub const __glibcxx_quoted_string_io: u32 = 201304;
    pub const __glibcxx_shared_timed_mutex: u32 = 201402;
    pub const __glibcxx_string_udls: u32 = 201304;
    pub const __glibcxx_addressof_constexpr: u32 = 201603;
    pub const __glibcxx_any: u32 = 201606;
    pub const __glibcxx_apply: u32 = 201603;
    pub const __glibcxx_as_const: u32 = 201510;
    pub const __glibcxx_atomic_is_always_lock_free: u32 = 201603;
    pub const __glibcxx_bool_constant: u32 = 201505;
    pub const __cpp_lib_bool_constant: u32 = 201505;
    pub const __glibcxx_byte: u32 = 201603;
    pub const __glibcxx_has_unique_object_representations: u32 = 201606;
    pub const __cpp_lib_has_unique_object_representations: u32 = 201606;
    pub const __glibcxx_hardware_interference_size: u32 = 201703;
    pub const __glibcxx_invoke: u32 = 201411;
    pub const __glibcxx_is_aggregate: u32 = 201703;
    pub const __cpp_lib_is_aggregate: u32 = 201703;
    pub const __glibcxx_is_invocable: u32 = 201703;
    pub const __cpp_lib_is_invocable: u32 = 201703;
    pub const __glibcxx_launder: u32 = 201606;
    pub const __glibcxx_logical_traits: u32 = 201510;
    pub const __cpp_lib_logical_traits: u32 = 201510;
    pub const __glibcxx_make_from_tuple: u32 = 201606;
    pub const __glibcxx_not_fn: u32 = 201603;
    pub const __glibcxx_type_trait_variable_templates: u32 = 201510;
    pub const __cpp_lib_type_trait_variable_templates: u32 = 201510;
    pub const __glibcxx_variant: u32 = 202102;
    pub const __glibcxx_lcm: u32 = 201606;
    pub const __glibcxx_gcd: u32 = 201606;
    pub const __glibcxx_gcd_lcm: u32 = 201606;
    pub const __glibcxx_raw_memory_algorithms: u32 = 201606;
    pub const __glibcxx_array_constexpr: u32 = 201803;
    pub const __glibcxx_nonmember_container_access: u32 = 201411;
    pub const __glibcxx_clamp: u32 = 201603;
    pub const __glibcxx_sample: u32 = 201603;
    pub const __glibcxx_boyer_moore_searcher: u32 = 201603;
    pub const __glibcxx_chrono: u32 = 201611;
    pub const __glibcxx_execution: u32 = 201902;
    pub const __glibcxx_filesystem: u32 = 201703;
    pub const __glibcxx_hypot: u32 = 201603;
    pub const __glibcxx_map_try_emplace: u32 = 201411;
    pub const __glibcxx_math_special_functions: u32 = 201603;
    pub const __glibcxx_memory_resource: u32 = 201603;
    pub const __glibcxx_node_extract: u32 = 201606;
    pub const __glibcxx_parallel_algorithm: u32 = 201603;
    pub const __glibcxx_scoped_lock: u32 = 201703;
    pub const __glibcxx_shared_mutex: u32 = 201505;
    pub const __glibcxx_shared_ptr_weak_type: u32 = 201606;
    pub const __glibcxx_string_view: u32 = 201803;
    pub const __glibcxx_unordered_map_try_emplace: u32 = 201411;
    pub const __glibcxx_optional: u32 = 201606;
    pub const __glibcxx_constexpr_char_traits: u32 = 201611;
    pub const __glibcxx_constexpr_string: u32 = 201611;
    pub const _MOVE_H: u32 = 1;
    pub const _GLIBCXX_UTILITY_H: u32 = 1;
    pub const __cpp_lib_exchange_function: u32 = 201304;
    pub const __cpp_lib_integer_sequence: u32 = 201304;
    pub const __cpp_lib_tuple_element_t: u32 = 201402;
    pub const __cpp_lib_tuples_by_type: u32 = 201304;
    pub const __cpp_lib_addressof_constexpr: u32 = 201603;
    pub const __cpp_lib_as_const: u32 = 201510;
    pub const _LIBC_LIMITS_H_: u32 = 1;
    pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_EXT: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
    pub const MB_LEN_MAX: u32 = 16;
    pub const CHAR_WIDTH: u32 = 8;
    pub const SCHAR_WIDTH: u32 = 8;
    pub const UCHAR_WIDTH: u32 = 8;
    pub const SHRT_WIDTH: u32 = 16;
    pub const USHRT_WIDTH: u32 = 16;
    pub const INT_WIDTH: u32 = 32;
    pub const UINT_WIDTH: u32 = 32;
    pub const LONG_WIDTH: u32 = 64;
    pub const ULONG_WIDTH: u32 = 64;
    pub const LLONG_WIDTH: u32 = 64;
    pub const ULLONG_WIDTH: u32 = 64;
    pub const BOOL_MAX: u32 = 1;
    pub const BOOL_WIDTH: u32 = 1;
    pub const _BITS_POSIX1_LIM_H: u32 = 1;
    pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
    pub const _POSIX_AIO_MAX: u32 = 1;
    pub const _POSIX_ARG_MAX: u32 = 4096;
    pub const _POSIX_CHILD_MAX: u32 = 25;
    pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
    pub const _POSIX_HOST_NAME_MAX: u32 = 255;
    pub const _POSIX_LINK_MAX: u32 = 8;
    pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
    pub const _POSIX_MAX_CANON: u32 = 255;
    pub const _POSIX_MAX_INPUT: u32 = 255;
    pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
    pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
    pub const _POSIX_NAME_MAX: u32 = 14;
    pub const _POSIX_NGROUPS_MAX: u32 = 8;
    pub const _POSIX_OPEN_MAX: u32 = 20;
    pub const _POSIX_FD_SETSIZE: u32 = 20;
    pub const _POSIX_PATH_MAX: u32 = 256;
    pub const _POSIX_PIPE_BUF: u32 = 512;
    pub const _POSIX_RE_DUP_MAX: u32 = 255;
    pub const _POSIX_RTSIG_MAX: u32 = 8;
    pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
    pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
    pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
    pub const _POSIX_SSIZE_MAX: u32 = 32767;
    pub const _POSIX_STREAM_MAX: u32 = 8;
    pub const _POSIX_SYMLINK_MAX: u32 = 255;
    pub const _POSIX_SYMLOOP_MAX: u32 = 8;
    pub const _POSIX_TIMER_MAX: u32 = 32;
    pub const _POSIX_TTY_NAME_MAX: u32 = 9;
    pub const _POSIX_TZNAME_MAX: u32 = 6;
    pub const _POSIX_QLIMIT: u32 = 1;
    pub const _POSIX_HIWAT: u32 = 512;
    pub const _POSIX_UIO_MAXIOV: u32 = 16;
    pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
    pub const NR_OPEN: u32 = 1024;
    pub const NGROUPS_MAX: u32 = 65536;
    pub const ARG_MAX: u32 = 131072;
    pub const LINK_MAX: u32 = 127;
    pub const MAX_CANON: u32 = 255;
    pub const MAX_INPUT: u32 = 255;
    pub const NAME_MAX: u32 = 255;
    pub const PATH_MAX: u32 = 4096;
    pub const PIPE_BUF: u32 = 4096;
    pub const XATTR_NAME_MAX: u32 = 255;
    pub const XATTR_SIZE_MAX: u32 = 65536;
    pub const XATTR_LIST_MAX: u32 = 65536;
    pub const RTSIG_MAX: u32 = 32;
    pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
    pub const PTHREAD_KEYS_MAX: u32 = 1024;
    pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
    pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
    pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
    pub const AIO_PRIO_DELTA_MAX: u32 = 20;
    pub const __SC_THREAD_STACK_MIN_VALUE: u32 = 75;
    pub const DELAYTIMER_MAX: u32 = 2147483647;
    pub const TTY_NAME_MAX: u32 = 32;
    pub const LOGIN_NAME_MAX: u32 = 256;
    pub const HOST_NAME_MAX: u32 = 64;
    pub const MQ_PRIO_MAX: u32 = 32768;
    pub const SEM_VALUE_MAX: u32 = 2147483647;
    pub const _BITS_POSIX2_LIM_H: u32 = 1;
    pub const _POSIX2_BC_BASE_MAX: u32 = 99;
    pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
    pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
    pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
    pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
    pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
    pub const _POSIX2_LINE_MAX: u32 = 2048;
    pub const _POSIX2_RE_DUP_MAX: u32 = 255;
    pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
    pub const BC_BASE_MAX: u32 = 99;
    pub const BC_DIM_MAX: u32 = 2048;
    pub const BC_SCALE_MAX: u32 = 99;
    pub const BC_STRING_MAX: u32 = 1000;
    pub const COLL_WEIGHTS_MAX: u32 = 255;
    pub const EXPR_NEST_MAX: u32 = 32;
    pub const LINE_MAX: u32 = 2048;
    pub const CHARCLASS_NAME_MAX: u32 = 2048;
    pub const RE_DUP_MAX: u32 = 32767;
    pub const _XOPEN_LIM_H: u32 = 1;
    pub const _XOPEN_IOV_MAX: u32 = 16;
    pub const _BITS_UIO_LIM_H: u32 = 1;
    pub const __IOV_MAX: u32 = 1024;
    pub const IOV_MAX: u32 = 1024;
    pub const NL_ARGMAX: u32 = 4096;
    pub const NL_LANGMAX: u32 = 2048;
    pub const NZERO: u32 = 20;
    pub const WORD_BIT: u32 = 32;
    pub const LONG_BIT: u32 = 64;
    pub const _GLIBCXX_STDLIB_H: u32 = 1;
    pub const _GLIBCXX_CSTDLIB: u32 = 1;
    pub const _STDLIB_H: u32 = 1;
    pub const WNOHANG: u32 = 1;
    pub const WUNTRACED: u32 = 2;
    pub const WSTOPPED: u32 = 2;
    pub const WEXITED: u32 = 4;
    pub const WCONTINUED: u32 = 8;
    pub const WNOWAIT: u32 = 16777216;
    pub const __WNOTHREAD: u32 = 536870912;
    pub const __WALL: u32 = 1073741824;
    pub const __WCLONE: u32 = 2147483648;
    pub const __W_CONTINUED: u32 = 65535;
    pub const __WCOREFLAG: u32 = 128;
    pub const __HAVE_FLOAT128: u32 = 1;
    pub const __HAVE_DISTINCT_FLOAT128: u32 = 1;
    pub const __HAVE_FLOAT64X: u32 = 1;
    pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
    pub const __HAVE_FLOAT16: u32 = 0;
    pub const __HAVE_FLOAT32: u32 = 1;
    pub const __HAVE_FLOAT64: u32 = 1;
    pub const __HAVE_FLOAT32X: u32 = 1;
    pub const __HAVE_FLOAT128X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
    pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
    pub const __ldiv_t_defined: u32 = 1;
    pub const __lldiv_t_defined: u32 = 1;
    pub const RAND_MAX: u32 = 2147483647;
    pub const EXIT_FAILURE: u32 = 1;
    pub const EXIT_SUCCESS: u32 = 0;
    pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
    pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
    pub const _SYS_TYPES_H: u32 = 1;
    pub const _BITS_TYPES_H: u32 = 1;
    pub const _BITS_TYPESIZES_H: u32 = 1;
    pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
    pub const __INO_T_MATCHES_INO64_T: u32 = 1;
    pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
    pub const __STATFS_MATCHES_STATFS64: u32 = 1;
    pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
    pub const __FD_SETSIZE: u32 = 1024;
    pub const _BITS_TIME64_H: u32 = 1;
    pub const __clock_t_defined: u32 = 1;
    pub const __clockid_t_defined: u32 = 1;
    pub const __time_t_defined: u32 = 1;
    pub const __timer_t_defined: u32 = 1;
    pub const _BITS_STDINT_INTN_H: u32 = 1;
    pub const __BIT_TYPES_DEFINED__: u32 = 1;
    pub const _ENDIAN_H: u32 = 1;
    pub const _BITS_ENDIAN_H: u32 = 1;
    pub const __LITTLE_ENDIAN: u32 = 1234;
    pub const __BIG_ENDIAN: u32 = 4321;
    pub const __PDP_ENDIAN: u32 = 3412;
    pub const _BITS_ENDIANNESS_H: u32 = 1;
    pub const __BYTE_ORDER: u32 = 1234;
    pub const __FLOAT_WORD_ORDER: u32 = 1234;
    pub const LITTLE_ENDIAN: u32 = 1234;
    pub const BIG_ENDIAN: u32 = 4321;
    pub const PDP_ENDIAN: u32 = 3412;
    pub const BYTE_ORDER: u32 = 1234;
    pub const _BITS_BYTESWAP_H: u32 = 1;
    pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
    pub const _SYS_SELECT_H: u32 = 1;
    pub const __sigset_t_defined: u32 = 1;
    pub const __timeval_defined: u32 = 1;
    pub const _STRUCT_TIMESPEC: u32 = 1;
    pub const FD_SETSIZE: u32 = 1024;
    pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
    pub const _THREAD_SHARED_TYPES_H: u32 = 1;
    pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
    pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
    pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
    pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
    pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
    pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
    pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
    pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
    pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
    pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
    pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
    pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
    pub const __have_pthread_attr_t: u32 = 1;
    pub const _ALLOCA_H: u32 = 1;
    pub const __EXCEPTION_H: u32 = 1;
    pub const __cpp_lib_hardware_interference_size: u32 = 201703;
    pub const __cpp_lib_launder: u32 = 201606;
    pub const _STDIO_H: u32 = 1;
    pub const _____fpos_t_defined: u32 = 1;
    pub const ____mbstate_t_defined: u32 = 1;
    pub const _____fpos64_t_defined: u32 = 1;
    pub const ____FILE_defined: u32 = 1;
    pub const __FILE_defined: u32 = 1;
    pub const __struct_FILE_defined: u32 = 1;
    pub const _IO_EOF_SEEN: u32 = 16;
    pub const _IO_ERR_SEEN: u32 = 32;
    pub const _IO_USER_LOCK: u32 = 32768;
    pub const __cookie_io_functions_t_defined: u32 = 1;
    pub const _IOFBF: u32 = 0;
    pub const _IOLBF: u32 = 1;
    pub const _IONBF: u32 = 2;
    pub const BUFSIZ: u32 = 8192;
    pub const EOF: i32 = -1;
    pub const SEEK_SET: u32 = 0;
    pub const SEEK_CUR: u32 = 1;
    pub const SEEK_END: u32 = 2;
    pub const SEEK_DATA: u32 = 3;
    pub const SEEK_HOLE: u32 = 4;
    pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
    pub const L_tmpnam: u32 = 20;
    pub const TMP_MAX: u32 = 238328;
    pub const _BITS_STDIO_LIM_H: u32 = 1;
    pub const FILENAME_MAX: u32 = 4096;
    pub const L_ctermid: u32 = 9;
    pub const L_cuserid: u32 = 9;
    pub const FOPEN_MAX: u32 = 16;
    pub const _PRINTF_NAN_LEN_MAX: u32 = 4;
    pub const RENAME_NOREPLACE: u32 = 1;
    pub const RENAME_EXCHANGE: u32 = 2;
    pub const RENAME_WHITEOUT: u32 = 4;
    pub const _ASSERT_H: u32 = 1;
    pub const _STDINT_H: u32 = 1;
    pub const _BITS_WCHAR_H: u32 = 1;
    pub const _BITS_STDINT_UINTN_H: u32 = 1;
    pub const _BITS_STDINT_LEAST_H: u32 = 1;
    pub const INT8_MIN: i32 = -128;
    pub const INT16_MIN: i32 = -32768;
    pub const INT32_MIN: i32 = -2147483648;
    pub const INT8_MAX: u32 = 127;
    pub const INT16_MAX: u32 = 32767;
    pub const INT32_MAX: u32 = 2147483647;
    pub const UINT8_MAX: u32 = 255;
    pub const UINT16_MAX: u32 = 65535;
    pub const UINT32_MAX: u32 = 4294967295;
    pub const INT_LEAST8_MIN: i32 = -128;
    pub const INT_LEAST16_MIN: i32 = -32768;
    pub const INT_LEAST32_MIN: i32 = -2147483648;
    pub const INT_LEAST8_MAX: u32 = 127;
    pub const INT_LEAST16_MAX: u32 = 32767;
    pub const INT_LEAST32_MAX: u32 = 2147483647;
    pub const UINT_LEAST8_MAX: u32 = 255;
    pub const UINT_LEAST16_MAX: u32 = 65535;
    pub const UINT_LEAST32_MAX: u32 = 4294967295;
    pub const INT_FAST8_MIN: i32 = -128;
    pub const INT_FAST16_MIN: i64 = -9223372036854775808;
    pub const INT_FAST32_MIN: i64 = -9223372036854775808;
    pub const INT_FAST8_MAX: u32 = 127;
    pub const INT_FAST16_MAX: u64 = 9223372036854775807;
    pub const INT_FAST32_MAX: u64 = 9223372036854775807;
    pub const UINT_FAST8_MAX: u32 = 255;
    pub const UINT_FAST16_MAX: i32 = -1;
    pub const UINT_FAST32_MAX: i32 = -1;
    pub const INTPTR_MIN: i64 = -9223372036854775808;
    pub const INTPTR_MAX: u64 = 9223372036854775807;
    pub const UINTPTR_MAX: i32 = -1;
    pub const PTRDIFF_MIN: i64 = -9223372036854775808;
    pub const PTRDIFF_MAX: u64 = 9223372036854775807;
    pub const SIG_ATOMIC_MIN: i32 = -2147483648;
    pub const SIG_ATOMIC_MAX: u32 = 2147483647;
    pub const SIZE_MAX: i32 = -1;
    pub const WINT_MIN: u32 = 0;
    pub const WINT_MAX: u32 = 4294967295;
    pub const INT8_WIDTH: u32 = 8;
    pub const UINT8_WIDTH: u32 = 8;
    pub const INT16_WIDTH: u32 = 16;
    pub const UINT16_WIDTH: u32 = 16;
    pub const INT32_WIDTH: u32 = 32;
    pub const UINT32_WIDTH: u32 = 32;
    pub const INT64_WIDTH: u32 = 64;
    pub const UINT64_WIDTH: u32 = 64;
    pub const INT_LEAST8_WIDTH: u32 = 8;
    pub const UINT_LEAST8_WIDTH: u32 = 8;
    pub const INT_LEAST16_WIDTH: u32 = 16;
    pub const UINT_LEAST16_WIDTH: u32 = 16;
    pub const INT_LEAST32_WIDTH: u32 = 32;
    pub const UINT_LEAST32_WIDTH: u32 = 32;
    pub const INT_LEAST64_WIDTH: u32 = 64;
    pub const UINT_LEAST64_WIDTH: u32 = 64;
    pub const INT_FAST8_WIDTH: u32 = 8;
    pub const UINT_FAST8_WIDTH: u32 = 8;
    pub const INT_FAST16_WIDTH: u32 = 64;
    pub const UINT_FAST16_WIDTH: u32 = 64;
    pub const INT_FAST32_WIDTH: u32 = 64;
    pub const UINT_FAST32_WIDTH: u32 = 64;
    pub const INT_FAST64_WIDTH: u32 = 64;
    pub const UINT_FAST64_WIDTH: u32 = 64;
    pub const INTPTR_WIDTH: u32 = 64;
    pub const UINTPTR_WIDTH: u32 = 64;
    pub const INTMAX_WIDTH: u32 = 64;
    pub const UINTMAX_WIDTH: u32 = 64;
    pub const PTRDIFF_WIDTH: u32 = 64;
    pub const SIG_ATOMIC_WIDTH: u32 = 32;
    pub const SIZE_WIDTH: u32 = 64;
    pub const WCHAR_WIDTH: u32 = 32;
    pub const WINT_WIDTH: u32 = 32;
    pub const _GLIBCXX_ALGORITHM: u32 = 1;
    pub const _STL_ALGOBASE_H: u32 = 1;
    pub const _FUNCTEXCEPT_H: u32 = 1;
    pub const _EXCEPTION_DEFINES_H: u32 = 1;
    pub const _CPP_TYPE_TRAITS_H: u32 = 1;
    pub const _EXT_TYPE_TRAITS: u32 = 1;
    pub const _EXT_NUMERIC_TRAITS: u32 = 1;
    pub const _STL_ITERATOR_BASE_TYPES_H: u32 = 1;
    pub const _STL_ITERATOR_BASE_FUNCS_H: u32 = 1;
    pub const _CONCEPT_CHECK_H: u32 = 1;
    pub const _GLIBCXX_DEBUG_ASSERTIONS_H: u32 = 1;
    pub const _STL_ITERATOR_H: u32 = 1;
    pub const _PTR_TRAITS_H: u32 = 1;
    pub const _GLIBCXX_DEBUG_MACRO_SWITCH_H: u32 = 1;
    pub const _GLIBCXX_PREDEFINED_OPS_H: u32 = 1;
    pub const _GLIBCXX_BIT: u32 = 1;
    pub const _GLIBCXX_CONCEPTS: u32 = 1;
    pub const _STL_ALGO_H: u32 = 1;
    pub const _GLIBCXX_ALGORITHMFWD_H: u32 = 1;
    pub const _STL_HEAP_H: u32 = 1;
    pub const _STL_TEMPBUF_H: u32 = 1;
    pub const _STL_CONSTRUCT_H: u32 = 1;
    pub const __cpp_lib_robust_nonmodifying_seq_ops: u32 = 201304;
    pub const __cpp_lib_clamp: u32 = 201603;
    pub const __cpp_lib_sample: u32 = 201603;
    pub const __cpp_lib_parallel_algorithm: u32 = 201603;
    pub const _PSTL_ALGORITHM_FORWARD_DECLARED: u32 = 1;
    pub const _GLIBCXX_CSTDDEF: u32 = 1;
    pub const __cpp_lib_byte: u32 = 201603;
    pub mod std {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub type nullptr_t = *const ::core::ffi::c_void;
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt21__glibcxx_assert_failPKciS0_S0_"]
            pub fn __glibcxx_assert_fail(
                __file: *const ::core::ffi::c_char,
                __line: ::core::ffi::c_int,
                __function: *const ::core::ffi::c_char,
                __condition: *const ::core::ffi::c_char,
            ) -> !;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct reference_wrapper {
            pub _address: u8,
        }
        pub type integral_constant_value_type<_Tp> = _Tp;
        pub type integral_constant_type = u8;
        pub type __bool_constant = u8;
        pub type true_type = u8;
        pub type false_type = u8;
        pub type bool_constant = root::std::__bool_constant;
        pub type __enable_if_t = u8;
        pub type __conditional_type<_Tp> = _Tp;
        pub type __conditional_t = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __type_identity {
            pub _address: u8,
        }
        pub type __type_identity_type<_Type> = _Type;
        pub type __type_identity_t = root::std::__type_identity;
        pub mod __detail {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            pub type __first_t<_Tp> = _Tp;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __disjunction_impl {
                pub _address: u8,
            }
            pub type __disjunction_impl_type<_B1> = _B1;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __conjunction_impl {
                pub _address: u8,
            }
            pub type __conjunction_impl_type<_B1> = _B1;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __or_ {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __and_ {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __not_ {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct conjunction {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: conjunction_open0_close0"]
                [::core::mem::size_of::<root::std::conjunction>() - 1usize];
            ["Align of template specialization: conjunction_open0_close0"]
                [::core::mem::align_of::<root::std::conjunction>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct disjunction {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: disjunction_open0_close0"]
                [::core::mem::size_of::<root::std::disjunction>() - 1usize];
            ["Align of template specialization: disjunction_open0_close0"]
                [::core::mem::align_of::<root::std::disjunction>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct negation {
            pub _address: u8,
        }
        pub type __remove_cv_t = root::std::remove_cv;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_void {
            pub _base: root::std::false_type,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: is_void_open0_void_close0"]
                [::core::mem::size_of::<root::std::is_void>() - 1usize];
            ["Align of template specialization: is_void_open0_void_close0"]
                [::core::mem::align_of::<root::std::is_void>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: is_void_open0_const_void_close0"]
                [::core::mem::size_of::<root::std::is_void>() - 1usize];
            ["Align of template specialization: is_void_open0_const_void_close0"]
                [::core::mem::align_of::<root::std::is_void>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: is_void_open0_volatile_void_close0"]
                [::core::mem::size_of::<root::std::is_void>() - 1usize];
            ["Align of template specialization: is_void_open0_volatile_void_close0"]
                [::core::mem::align_of::<root::std::is_void>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: is_void_open0_const_volatile_void_close0"]
                [::core::mem::size_of::<root::std::is_void>() - 1usize];
            ["Align of template specialization: is_void_open0_const_volatile_void_close0"]
                [::core::mem::align_of::<root::std::is_void>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_integral_helper {
            pub _base: root::std::false_type,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_bool__close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_bool__close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_char_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_char_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_signed_char_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_signed_char_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_unsigned_char_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_unsigned_char_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_wchar_t_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_wchar_t_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_char16_t_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_char16_t_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_char32_t_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_char32_t_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_short_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_short_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_unsigned_short_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_unsigned_short_close0"] [:: core :: mem :: align_of :: < root :: std :: __is_integral_helper > () - 1usize] ;
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_int_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_int_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_unsigned_int_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_unsigned_int_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_long_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_long_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_unsigned_long_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_unsigned_long_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_long_long_close0"]
                [::core::mem::size_of::<root::std::__is_integral_helper>() - 1usize];
            ["Align of template specialization: __is_integral_helper_open0_long_long_close0"]
                [::core::mem::align_of::<root::std::__is_integral_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integral_helper_open0_unsigned_long_long_close0"] [:: core :: mem :: size_of :: < root :: std :: __is_integral_helper > () - 1usize] ;
            ["Align of template specialization: __is_integral_helper_open0_unsigned_long_long_close0"] [:: core :: mem :: align_of :: < root :: std :: __is_integral_helper > () - 1usize] ;
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_integral {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_floating_point_helper {
            pub _base: root::std::false_type,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_floating_point_helper_open0_float_close0"]
                [::core::mem::size_of::<root::std::__is_floating_point_helper>() - 1usize];
            ["Align of template specialization: __is_floating_point_helper_open0_float_close0"]
                [::core::mem::align_of::<root::std::__is_floating_point_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_floating_point_helper_open0_double_close0"]
                [::core::mem::size_of::<root::std::__is_floating_point_helper>() - 1usize];
            ["Align of template specialization: __is_floating_point_helper_open0_double_close0"]
                [::core::mem::align_of::<root::std::__is_floating_point_helper>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_floating_point_helper_open0_long_double_close0"] [:: core :: mem :: size_of :: < root :: std :: __is_floating_point_helper > () - 1usize] ;
            ["Align of template specialization: __is_floating_point_helper_open0_long_double_close0"] [:: core :: mem :: align_of :: < root :: std :: __is_floating_point_helper > () - 1usize] ;
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_floating_point {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_array {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_lvalue_reference {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_rvalue_reference {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_member_object_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_member_function_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_enum {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_union {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_class {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_function {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_null_pointer {
            pub _base: root::std::false_type,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: is_null_pointer_open0_nullptr_t_close0"]
                [::core::mem::size_of::<root::std::is_null_pointer>() - 1usize];
            ["Align of template specialization: is_null_pointer_open0_nullptr_t_close0"]
                [::core::mem::align_of::<root::std::is_null_pointer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: is_null_pointer_open0_const_std__nullptr_t_close0"] [:: core :: mem :: size_of :: < root :: std :: is_null_pointer > () - 1usize] ;
            ["Align of template specialization: is_null_pointer_open0_const_std__nullptr_t_close0"] [:: core :: mem :: align_of :: < root :: std :: is_null_pointer > () - 1usize] ;
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: is_null_pointer_open0_volatile_std__nullptr_t_close0"] [:: core :: mem :: size_of :: < root :: std :: is_null_pointer > () - 1usize] ;
            ["Align of template specialization: is_null_pointer_open0_volatile_std__nullptr_t_close0"] [:: core :: mem :: align_of :: < root :: std :: is_null_pointer > () - 1usize] ;
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: is_null_pointer_open0_const_volatile_std__nullptr_t_close0"] [:: core :: mem :: size_of :: < root :: std :: is_null_pointer > () - 1usize] ;
            ["Align of template specialization: is_null_pointer_open0_const_volatile_std__nullptr_t_close0"] [:: core :: mem :: align_of :: < root :: std :: is_null_pointer > () - 1usize] ;
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nullptr_t {
            pub _base: root::std::is_null_pointer,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_reference {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_arithmetic {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_fundamental {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_object {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_scalar {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_compound {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_member_pointer {
            pub _address: u8,
        }
        pub type __is_one_of = root::std::__or_;
        pub type __is_signed_integer = root::std::__is_one_of;
        pub type __is_unsigned_integer = root::std::__is_one_of;
        pub type __is_standard_integer = root::std::__or_;
        pub type __void_t = ::core::ffi::c_void;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_const {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_volatile {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivial {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_copyable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_standard_layout {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_pod {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_literal_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_empty {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_polymorphic {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_final {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_abstract {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_signed {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_unsigned {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_array_known_bounds {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_array_unknown_bounds {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __do_is_destructible_impl {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __do_is_destructible_impl"]
                [::core::mem::size_of::<__do_is_destructible_impl>() - 1usize];
            ["Alignment of __do_is_destructible_impl"]
                [::core::mem::align_of::<__do_is_destructible_impl>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_destructible_impl {
            pub _address: u8,
        }
        pub type __is_destructible_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_destructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __do_is_nt_destructible_impl {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __do_is_nt_destructible_impl"]
                [::core::mem::size_of::<__do_is_nt_destructible_impl>() - 1usize];
            ["Alignment of __do_is_nt_destructible_impl"]
                [::core::mem::align_of::<__do_is_nt_destructible_impl>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nt_destructible_impl {
            pub _address: u8,
        }
        pub type __is_nt_destructible_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_destructible {
            pub _address: u8,
        }
        pub type __is_constructible_impl = root::std::__bool_constant;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_default_constructible {
            pub _address: u8,
        }
        pub type __add_lval_ref_t<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_copy_constructible {
            pub _address: u8,
        }
        pub type __add_rval_ref_t<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_move_constructible {
            pub _address: u8,
        }
        pub type __is_nothrow_constructible_impl = root::std::__bool_constant;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_default_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_copy_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_move_constructible {
            pub _address: u8,
        }
        pub type __is_assignable_impl = root::std::__bool_constant;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_copy_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_move_assignable {
            pub _address: u8,
        }
        pub type __is_nothrow_assignable_impl = root::std::__bool_constant;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_copy_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_move_assignable {
            pub _address: u8,
        }
        pub type __is_trivially_constructible_impl = root::std::__bool_constant;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_default_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __do_is_implicitly_default_constructible_impl {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __do_is_implicitly_default_constructible_impl"]
                [::core::mem::size_of::<__do_is_implicitly_default_constructible_impl>() - 1usize];
            ["Alignment of __do_is_implicitly_default_constructible_impl"]
                [::core::mem::align_of::<__do_is_implicitly_default_constructible_impl>() - 1usize];
        };
        unsafe extern "C" {
            #[link_name = "\u{1}_ZNSt45__do_is_implicitly_default_constructible_impl6__testEz"]
            pub fn __do_is_implicitly_default_constructible_impl___test() -> root::std::false_type;
        }
        impl __do_is_implicitly_default_constructible_impl {
            #[inline]
            pub unsafe fn __test() -> root::std::false_type {
                __do_is_implicitly_default_constructible_impl___test()
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_implicitly_default_constructible_impl {
            pub _address: u8,
        }
        pub type __is_implicitly_default_constructible_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_implicitly_default_constructible_safe {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_implicitly_default_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_copy_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_move_constructible {
            pub _address: u8,
        }
        pub type __is_trivially_assignable_impl = root::std::__bool_constant;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_copy_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_move_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_destructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct has_virtual_destructor {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct alignment_of {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct rank {
            pub _base: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_same {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_base_of {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_convertible {
            pub _address: u8,
        }
        pub type __is_array_convertible = root::std::is_convertible;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nothrow_new_constructible_impl {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_const {
            pub _address: u8,
        }
        pub type remove_const_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_volatile {
            pub _address: u8,
        }
        pub type remove_volatile_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_cv {
            pub _address: u8,
        }
        pub type remove_cv_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_const {
            pub _address: u8,
        }
        pub type add_const_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_volatile {
            pub _address: u8,
        }
        pub type add_volatile_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_cv {
            pub _address: u8,
        }
        pub type add_cv_type<_Tp> = _Tp;
        pub type remove_const_t = root::std::remove_const;
        pub type remove_volatile_t = root::std::remove_volatile;
        pub type remove_cv_t = root::std::remove_cv;
        pub type add_const_t = root::std::add_const;
        pub type add_volatile_t = root::std::add_volatile;
        pub type add_cv_t = root::std::add_cv;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_reference {
            pub _address: u8,
        }
        pub type remove_reference_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_lvalue_reference {
            pub _address: u8,
        }
        pub type add_lvalue_reference_type<_Tp> = root::std::__add_lval_ref_t<_Tp>;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_rvalue_reference {
            pub _address: u8,
        }
        pub type add_rvalue_reference_type<_Tp> = root::std::__add_rval_ref_t<_Tp>;
        pub type remove_reference_t = root::std::remove_reference;
        pub type add_lvalue_reference_t = root::std::add_lvalue_reference;
        pub type add_rvalue_reference_t = root::std::add_rvalue_reference;
        pub type __match_cv_qualifiers___match = u8;
        pub type __match_cv_qualifiers___type = root::std::__match_cv_qualifiers___match;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __make_unsigned {
            pub _address: u8,
        }
        pub type __make_unsigned___type<_Tp> = _Tp;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_unsigned_open0_char_close0"]
                [::core::mem::size_of::<root::std::__make_unsigned>() - 1usize];
            ["Align of template specialization: __make_unsigned_open0_char_close0"]
                [::core::mem::align_of::<root::std::__make_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_unsigned_open0_signed_char_close0"]
                [::core::mem::size_of::<root::std::__make_unsigned>() - 1usize];
            ["Align of template specialization: __make_unsigned_open0_signed_char_close0"]
                [::core::mem::align_of::<root::std::__make_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_unsigned_open0_short_close0"]
                [::core::mem::size_of::<root::std::__make_unsigned>() - 1usize];
            ["Align of template specialization: __make_unsigned_open0_short_close0"]
                [::core::mem::align_of::<root::std::__make_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_unsigned_open0_int_close0"]
                [::core::mem::size_of::<root::std::__make_unsigned>() - 1usize];
            ["Align of template specialization: __make_unsigned_open0_int_close0"]
                [::core::mem::align_of::<root::std::__make_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_unsigned_open0_long_close0"]
                [::core::mem::size_of::<root::std::__make_unsigned>() - 1usize];
            ["Align of template specialization: __make_unsigned_open0_long_close0"]
                [::core::mem::align_of::<root::std::__make_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_unsigned_open0_long_long_close0"]
                [::core::mem::size_of::<root::std::__make_unsigned>() - 1usize];
            ["Align of template specialization: __make_unsigned_open0_long_long_close0"]
                [::core::mem::align_of::<root::std::__make_unsigned>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __make_unsigned_selector_base {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __make_unsigned_selector_base__List {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __make_unsigned_selector_base"]
                [::core::mem::size_of::<__make_unsigned_selector_base>() - 1usize];
            ["Alignment of __make_unsigned_selector_base"]
                [::core::mem::align_of::<__make_unsigned_selector_base>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_unsigned_open0_wchar_t_close0"]
                [::core::mem::size_of::<root::std::__make_unsigned>() - 1usize];
            ["Align of template specialization: __make_unsigned_open0_wchar_t_close0"]
                [::core::mem::align_of::<root::std::__make_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_unsigned_open0_char16_t_close0"]
                [::core::mem::size_of::<root::std::__make_unsigned>() - 1usize];
            ["Align of template specialization: __make_unsigned_open0_char16_t_close0"]
                [::core::mem::align_of::<root::std::__make_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_unsigned_open0_char32_t_close0"]
                [::core::mem::size_of::<root::std::__make_unsigned>() - 1usize];
            ["Align of template specialization: __make_unsigned_open0_char32_t_close0"]
                [::core::mem::align_of::<root::std::__make_unsigned>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct make_unsigned {
            pub _address: u8,
        }
        pub type make_unsigned_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __make_signed {
            pub _address: u8,
        }
        pub type __make_signed___type<_Tp> = _Tp;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_signed_open0_char_close0"]
                [::core::mem::size_of::<root::std::__make_signed>() - 1usize];
            ["Align of template specialization: __make_signed_open0_char_close0"]
                [::core::mem::align_of::<root::std::__make_signed>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_signed_open0_unsigned_char_close0"]
                [::core::mem::size_of::<root::std::__make_signed>() - 1usize];
            ["Align of template specialization: __make_signed_open0_unsigned_char_close0"]
                [::core::mem::align_of::<root::std::__make_signed>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_signed_open0_unsigned_short_close0"]
                [::core::mem::size_of::<root::std::__make_signed>() - 1usize];
            ["Align of template specialization: __make_signed_open0_unsigned_short_close0"]
                [::core::mem::align_of::<root::std::__make_signed>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_signed_open0_unsigned_int_close0"]
                [::core::mem::size_of::<root::std::__make_signed>() - 1usize];
            ["Align of template specialization: __make_signed_open0_unsigned_int_close0"]
                [::core::mem::align_of::<root::std::__make_signed>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_signed_open0_unsigned_long_close0"]
                [::core::mem::size_of::<root::std::__make_signed>() - 1usize];
            ["Align of template specialization: __make_signed_open0_unsigned_long_close0"]
                [::core::mem::align_of::<root::std::__make_signed>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_signed_open0_unsigned_long_long_close0"]
                [::core::mem::size_of::<root::std::__make_signed>() - 1usize];
            ["Align of template specialization: __make_signed_open0_unsigned_long_long_close0"]
                [::core::mem::align_of::<root::std::__make_signed>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_signed_open0_wchar_t_close0"]
                [::core::mem::size_of::<root::std::__make_signed>() - 1usize];
            ["Align of template specialization: __make_signed_open0_wchar_t_close0"]
                [::core::mem::align_of::<root::std::__make_signed>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_signed_open0_char16_t_close0"]
                [::core::mem::size_of::<root::std::__make_signed>() - 1usize];
            ["Align of template specialization: __make_signed_open0_char16_t_close0"]
                [::core::mem::align_of::<root::std::__make_signed>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __make_signed_open0_char32_t_close0"]
                [::core::mem::size_of::<root::std::__make_signed>() - 1usize];
            ["Align of template specialization: __make_signed_open0_char32_t_close0"]
                [::core::mem::align_of::<root::std::__make_signed>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct make_signed {
            pub _address: u8,
        }
        pub type make_signed_type = u8;
        pub type make_signed_t = root::std::make_signed;
        pub type make_unsigned_t = root::std::make_unsigned;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_extent {
            pub _address: u8,
        }
        pub type remove_extent_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_all_extents {
            pub _address: u8,
        }
        pub type remove_all_extents_type<_Tp> = _Tp;
        pub type remove_extent_t = root::std::remove_extent;
        pub type remove_all_extents_t = root::std::remove_all_extents;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_pointer {
            pub _address: u8,
        }
        pub type remove_pointer_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_pointer {
            pub _address: u8,
        }
        pub type add_pointer_type<_Tp> = _Tp;
        pub type remove_pointer_t = root::std::remove_pointer;
        pub type add_pointer_t = root::std::add_pointer;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __aligned_storage_max_align_t {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __aligned_storage_max_align_t"]
                [::core::mem::size_of::<__aligned_storage_max_align_t>() - 16usize];
            ["Alignment of __aligned_storage_max_align_t"]
                [::core::mem::align_of::<__aligned_storage_max_align_t>() - 16usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct aligned_storage_type {
            pub __data: *mut ::core::ffi::c_uchar,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __strictest_alignment {
            pub _address: u8,
        }
        pub type aligned_union___strictest = root::std::__strictest_alignment;
        pub type aligned_union_type = u8;
        unsafe extern "C" {
            pub static alignment_value: usize;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct decay {
            pub _address: u8,
        }
        pub type decay_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __strip_reference_wrapper {
            pub _address: u8,
        }
        pub type __strip_reference_wrapper___type<_Tp> = _Tp;
        pub type __decay_t = root::std::decay;
        pub type __decay_and_strip = root::std::__strip_reference_wrapper;
        pub type _Require = root::std::__enable_if_t;
        pub type __remove_cvref_t = root::std::remove_cv;
        pub type conditional_type<_Iftrue> = _Iftrue;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct common_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __success_type {
            pub _address: u8,
        }
        pub type __success_type_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __failure_type {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __failure_type"][::core::mem::size_of::<__failure_type>() - 1usize];
            ["Alignment of __failure_type"][::core::mem::align_of::<__failure_type>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __do_common_type_impl {
            pub _address: u8,
        }
        pub type __do_common_type_impl___cond_t<_Tp> = _Tp;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __do_common_type_impl"]
                [::core::mem::size_of::<__do_common_type_impl>() - 1usize];
            ["Alignment of __do_common_type_impl"]
                [::core::mem::align_of::<__do_common_type_impl>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: common_type_open0_close0"]
                [::core::mem::size_of::<root::std::common_type>() - 1usize];
            ["Align of template specialization: common_type_open0_close0"]
                [::core::mem::align_of::<root::std::common_type>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __common_type_impl {
            pub _address: u8,
        }
        pub type __common_type_impl_type = root::std::common_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __common_type_pack {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __common_type_fold {
            pub _address: u8,
        }
        pub type __underlying_type_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct underlying_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __declval_protector {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct result_of {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __invoke_memfun_ref {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __invoke_memfun_ref"][::core::mem::size_of::<__invoke_memfun_ref>() - 1usize];
            ["Alignment of __invoke_memfun_ref"]
                [::core::mem::align_of::<__invoke_memfun_ref>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __invoke_memfun_deref {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __invoke_memfun_deref"]
                [::core::mem::size_of::<__invoke_memfun_deref>() - 1usize];
            ["Alignment of __invoke_memfun_deref"]
                [::core::mem::align_of::<__invoke_memfun_deref>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __invoke_memobj_ref {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __invoke_memobj_ref"][::core::mem::size_of::<__invoke_memobj_ref>() - 1usize];
            ["Alignment of __invoke_memobj_ref"]
                [::core::mem::align_of::<__invoke_memobj_ref>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __invoke_memobj_deref {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __invoke_memobj_deref"]
                [::core::mem::size_of::<__invoke_memobj_deref>() - 1usize];
            ["Alignment of __invoke_memobj_deref"]
                [::core::mem::align_of::<__invoke_memobj_deref>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __invoke_other {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __invoke_other"][::core::mem::size_of::<__invoke_other>() - 1usize];
            ["Alignment of __invoke_other"][::core::mem::align_of::<__invoke_other>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_success {
            pub _address: u8,
        }
        pub type __result_of_success___invoke_type<_Tag> = _Tag;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memfun_ref_impl {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __result_of_memfun_ref_impl"]
                [::core::mem::size_of::<__result_of_memfun_ref_impl>() - 1usize];
            ["Alignment of __result_of_memfun_ref_impl"]
                [::core::mem::align_of::<__result_of_memfun_ref_impl>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memfun_ref {
            pub _address: u8,
        }
        pub type __result_of_memfun_ref_type<_MemPtr> = _MemPtr;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memfun_deref_impl {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __result_of_memfun_deref_impl"]
                [::core::mem::size_of::<__result_of_memfun_deref_impl>() - 1usize];
            ["Alignment of __result_of_memfun_deref_impl"]
                [::core::mem::align_of::<__result_of_memfun_deref_impl>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memfun_deref {
            pub _address: u8,
        }
        pub type __result_of_memfun_deref_type<_MemPtr> = _MemPtr;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memobj_ref_impl {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __result_of_memobj_ref_impl"]
                [::core::mem::size_of::<__result_of_memobj_ref_impl>() - 1usize];
            ["Alignment of __result_of_memobj_ref_impl"]
                [::core::mem::align_of::<__result_of_memobj_ref_impl>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memobj_ref {
            pub _address: u8,
        }
        pub type __result_of_memobj_ref_type<_MemPtr> = _MemPtr;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memobj_deref_impl {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __result_of_memobj_deref_impl"]
                [::core::mem::size_of::<__result_of_memobj_deref_impl>() - 1usize];
            ["Alignment of __result_of_memobj_deref_impl"]
                [::core::mem::align_of::<__result_of_memobj_deref_impl>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memobj_deref {
            pub _address: u8,
        }
        pub type __result_of_memobj_deref_type<_MemPtr> = _MemPtr;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memobj {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memfun {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __inv_unwrap {
            pub _address: u8,
        }
        pub type __inv_unwrap_type<_Tp> = _Tp;
        pub type __result_of_impl_type = root::std::__failure_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_other_impl {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __result_of_other_impl"]
                [::core::mem::size_of::<__result_of_other_impl>() - 1usize];
            ["Alignment of __result_of_other_impl"]
                [::core::mem::align_of::<__result_of_other_impl>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __invoke_result {
            pub _address: u8,
        }
        pub type __invoke_result_t = root::std::__invoke_result;
        pub type aligned_storage_t = u8;
        pub type aligned_union_t = u8;
        pub type decay_t = root::std::decay;
        pub type enable_if_t = u8;
        pub type conditional_t = u8;
        pub type common_type_t = root::std::common_type;
        pub type underlying_type_t = root::std::underlying_type;
        pub type result_of_t = root::std::result_of;
        pub type void_t = ::core::ffi::c_void;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __detector {
            pub _address: u8,
        }
        pub type __detector_type<_Default> = _Default;
        pub type __detector___is_detected = root::std::false_type;
        pub type __detected_or = root::std::__detector;
        pub type __detected_or_t = root::std::__detected_or;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_tuple_like_impl {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_tuple_like {
            pub _address: u8,
        }
        pub mod __swappable_details {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __do_is_swappable_impl {
                pub _address: u8,
            }
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of __do_is_swappable_impl"]
                    [::core::mem::size_of::<__do_is_swappable_impl>() - 1usize];
                ["Alignment of __do_is_swappable_impl"]
                    [::core::mem::align_of::<__do_is_swappable_impl>() - 1usize];
            };
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __do_is_nothrow_swappable_impl {
                pub _address: u8,
            }
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of __do_is_nothrow_swappable_impl"]
                    [::core::mem::size_of::<__do_is_nothrow_swappable_impl>() - 1usize];
                ["Alignment of __do_is_nothrow_swappable_impl"]
                    [::core::mem::align_of::<__do_is_nothrow_swappable_impl>() - 1usize];
            };
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_swappable_impl {
            pub _address: u8,
        }
        pub type __is_swappable_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nothrow_swappable_impl {
            pub _address: u8,
        }
        pub type __is_nothrow_swappable_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_swappable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nothrow_swappable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_swappable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_swappable {
            pub _address: u8,
        }
        pub mod __swappable_with_details {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __do_is_swappable_with_impl {
                pub _address: u8,
            }
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of __do_is_swappable_with_impl"]
                    [::core::mem::size_of::<__do_is_swappable_with_impl>() - 1usize];
                ["Alignment of __do_is_swappable_with_impl"]
                    [::core::mem::align_of::<__do_is_swappable_with_impl>() - 1usize];
            };
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __do_is_nothrow_swappable_with_impl {
                pub _address: u8,
            }
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of __do_is_nothrow_swappable_with_impl"]
                    [::core::mem::size_of::<__do_is_nothrow_swappable_with_impl>() - 1usize];
                ["Alignment of __do_is_nothrow_swappable_with_impl"]
                    [::core::mem::align_of::<__do_is_nothrow_swappable_with_impl>() - 1usize];
            };
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_swappable_with_impl {
            pub _address: u8,
        }
        pub type __is_swappable_with_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nothrow_swappable_with_impl {
            pub _address: u8,
        }
        pub type __is_nothrow_swappable_with_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_swappable_with {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_swappable_with {
            pub _address: u8,
        }
        pub type __is_invocable_impl___nothrow_conv = root::std::false_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_invocable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __call_is_nothrow {
            pub _address: u8,
        }
        pub type __call_is_nothrow_ = root::std::__call_is_nothrow;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nothrow_invocable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __nonesuchbase {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __nonesuchbase"][::core::mem::size_of::<__nonesuchbase>() - 1usize];
            ["Alignment of __nonesuchbase"][::core::mem::align_of::<__nonesuchbase>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug)]
        pub struct __nonesuch {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __nonesuch"][::core::mem::size_of::<__nonesuch>() - 1usize];
            ["Alignment of __nonesuch"][::core::mem::align_of::<__nonesuch>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct invoke_result {
            pub _address: u8,
        }
        pub type invoke_result_t = root::std::invoke_result;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_invocable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_invocable_r {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_invocable {
            pub _address: u8,
        }
        pub type __is_nt_invocable_impl = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_invocable_r {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct has_unique_object_representations {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_aggregate {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __move_if_noexcept_cond {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct tuple_size {
            pub _address: u8,
        }
        pub type __enable_if_has_tuple_size<_Tp> = _Tp;
        pub type __tuple_element_t = u8;
        pub type tuple_element_t = u8;
        pub type _Build_index_tuple__IdxTuple = u8;
        pub type _Build_index_tuple___type = u8;
        pub type integer_sequence_value_type<_Tp> = _Tp;
        pub type make_integer_sequence = u8;
        pub type index_sequence = u8;
        pub type make_index_sequence = root::std::make_integer_sequence;
        pub type index_sequence_for = root::std::make_index_sequence;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct in_place_t {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of in_place_t"][::core::mem::size_of::<in_place_t>() - 1usize];
            ["Alignment of in_place_t"][::core::mem::align_of::<in_place_t>() - 1usize];
        };
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt8in_place"]
            pub static in_place: root::std::in_place_t;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct in_place_type_t {
            pub _address: u8,
        }
        pub type _Nth_type_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Swallow_assign {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of _Swallow_assign"][::core::mem::size_of::<_Swallow_assign>() - 1usize];
            ["Alignment of _Swallow_assign"][::core::mem::align_of::<_Swallow_assign>() - 1usize];
        };
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt6ignore"]
            pub static ignore: root::std::_Swallow_assign;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct piecewise_construct_t {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of piecewise_construct_t"]
                [::core::mem::size_of::<piecewise_construct_t>() - 1usize];
            ["Alignment of piecewise_construct_t"]
                [::core::mem::align_of::<piecewise_construct_t>() - 1usize];
        };
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt19piecewise_construct"]
            pub static piecewise_construct: root::std::piecewise_construct_t;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct tuple {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct complex {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct __pair_base {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct pair<_T1, _T2> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_T1>>,
            pub _phantom_1: ::core::marker::PhantomData<::core::cell::UnsafeCell<_T2>>,
            pub first: _T1,
            pub second: _T2,
        }
        pub type pair_first_type<_T1> = _T1;
        pub type pair_second_type<_T2> = _T2;
        pub type pair__PCCP = u8;
        pub type pair__PCCFP = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct pair___zero_as_null_pointer_constant {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct initializer_list<_E> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_E>>,
            pub _M_array: root::std::initializer_list_iterator<_E>,
            pub _M_len: root::std::initializer_list_size_type,
        }
        pub type initializer_list_value_type<_E> = _E;
        pub type initializer_list_reference<_E> = *const _E;
        pub type initializer_list_const_reference<_E> = *const _E;
        pub type initializer_list_size_type = usize;
        pub type initializer_list_iterator<_E> = *const _E;
        pub type initializer_list_const_iterator<_E> = *const _E;
        #[repr(C)]
        pub struct exception__bindgen_vtable(::core::ffi::c_void);
        #[repr(C)]
        #[derive(Debug)]
        pub struct exception {
            pub vtable_: *const exception__bindgen_vtable,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of exception"][::core::mem::size_of::<exception>() - 8usize];
            ["Alignment of exception"][::core::mem::align_of::<exception>() - 8usize];
        };
        unsafe extern "C" {
            #[link_name = "\u{1}_ZNSt9exceptionD1Ev"]
            pub fn exception_exception_destructor(this: *mut root::std::exception);
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZNKSt9exception4whatEv"]
            pub fn exception_what(this: *mut ::core::ffi::c_void) -> *const ::core::ffi::c_char;
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct bad_alloc {
            pub _base: root::std::exception,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of bad_alloc"][::core::mem::size_of::<bad_alloc>() - 8usize];
            ["Alignment of bad_alloc"][::core::mem::align_of::<bad_alloc>() - 8usize];
        };
        unsafe extern "C" {
            #[link_name = "\u{1}_ZNSt9bad_allocD1Ev"]
            pub fn bad_alloc_bad_alloc_destructor(this: *mut root::std::bad_alloc);
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZNKSt9bad_alloc4whatEv"]
            pub fn bad_alloc_what(this: *mut ::core::ffi::c_void) -> *const ::core::ffi::c_char;
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct bad_array_new_length {
            pub _base: root::std::bad_alloc,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of bad_array_new_length"]
                [::core::mem::size_of::<bad_array_new_length>() - 8usize];
            ["Alignment of bad_array_new_length"]
                [::core::mem::align_of::<bad_array_new_length>() - 8usize];
        };
        unsafe extern "C" {
            #[link_name = "\u{1}_ZNSt20bad_array_new_lengthD1Ev"]
            pub fn bad_array_new_length_bad_array_new_length_destructor(
                this: *mut root::std::bad_array_new_length,
            );
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZNKSt20bad_array_new_length4whatEv"]
            pub fn bad_array_new_length_what(
                this: *mut ::core::ffi::c_void,
            ) -> *const ::core::ffi::c_char;
        }
        pub type align_val_t = usize;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct nothrow_t {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of nothrow_t"][::core::mem::size_of::<nothrow_t>() - 1usize];
            ["Alignment of nothrow_t"][::core::mem::align_of::<nothrow_t>() - 1usize];
        };
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt7nothrow"]
            pub static nothrow: root::std::nothrow_t;
        }
        pub type new_handler = ::core::option::Option<unsafe extern "C" fn()>;
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt15set_new_handlerPFvvE"]
            pub fn set_new_handler(arg1: root::std::new_handler) -> root::std::new_handler;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt15get_new_handlerv"]
            pub fn get_new_handler() -> root::std::new_handler;
        }
        pub const hardware_destructive_interference_size: usize = 64;
        pub const hardware_constructive_interference_size: usize = 64;
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt21__throw_bad_exceptionv"]
            pub fn __throw_bad_exception() -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt17__throw_bad_allocv"]
            pub fn __throw_bad_alloc() -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt28__throw_bad_array_new_lengthv"]
            pub fn __throw_bad_array_new_length() -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt16__throw_bad_castv"]
            pub fn __throw_bad_cast() -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt18__throw_bad_typeidv"]
            pub fn __throw_bad_typeid() -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt19__throw_logic_errorPKc"]
            pub fn __throw_logic_error(arg1: *const ::core::ffi::c_char) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_domain_errorPKc"]
            pub fn __throw_domain_error(arg1: *const ::core::ffi::c_char) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt24__throw_invalid_argumentPKc"]
            pub fn __throw_invalid_argument(arg1: *const ::core::ffi::c_char) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_length_errorPKc"]
            pub fn __throw_length_error(arg1: *const ::core::ffi::c_char) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_out_of_rangePKc"]
            pub fn __throw_out_of_range(arg1: *const ::core::ffi::c_char) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt24__throw_out_of_range_fmtPKcz"]
            pub fn __throw_out_of_range_fmt(arg1: *const ::core::ffi::c_char, ...) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt21__throw_runtime_errorPKc"]
            pub fn __throw_runtime_error(arg1: *const ::core::ffi::c_char) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt19__throw_range_errorPKc"]
            pub fn __throw_range_error(arg1: *const ::core::ffi::c_char) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt22__throw_overflow_errorPKc"]
            pub fn __throw_overflow_error(arg1: *const ::core::ffi::c_char) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt23__throw_underflow_errorPKc"]
            pub fn __throw_underflow_error(arg1: *const ::core::ffi::c_char) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt19__throw_ios_failurePKc"]
            pub fn __throw_ios_failure(arg1: *const ::core::ffi::c_char) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt19__throw_ios_failurePKci"]
            pub fn __throw_ios_failure1(
                arg1: *const ::core::ffi::c_char,
                arg2: ::core::ffi::c_int,
            ) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_system_errori"]
            pub fn __throw_system_error(arg1: ::core::ffi::c_int) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_future_errori"]
            pub fn __throw_future_error(arg1: ::core::ffi::c_int) -> !;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt25__throw_bad_function_callv"]
            pub fn __throw_bad_function_call() -> !;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __true_type {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __true_type"][::core::mem::size_of::<__true_type>() - 1usize];
            ["Alignment of __true_type"][::core::mem::align_of::<__true_type>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __false_type {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __false_type"][::core::mem::size_of::<__false_type>() - 1usize];
            ["Alignment of __false_type"][::core::mem::align_of::<__false_type>() - 1usize];
        };
        pub type __truth_type___type = root::std::__false_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __traitor {
            pub _address: u8,
        }
        pub const __traitor___value: root::std::__traitor__bindgen_ty_1 = 0;
        pub type __traitor__bindgen_ty_1 = i32;
        pub type __traitor___type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __are_same {
            pub _address: u8,
        }
        pub const __are_same___value: root::std::__are_same__bindgen_ty_1 = 0;
        pub type __are_same__bindgen_ty_1 = i32;
        pub type __are_same___type = root::std::__false_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_integer {
            pub _address: u8,
        }
        pub const __is_integer___value: root::std::__is_integer__bindgen_ty_1 = 0;
        pub type __is_integer__bindgen_ty_1 = i32;
        pub type __is_integer___type = root::std::__false_type;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_bool__close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_bool__close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_char_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_char_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_signed_char_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_signed_char_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_unsigned_char_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_unsigned_char_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_wchar_t_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_wchar_t_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_char16_t_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_char16_t_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_char32_t_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_char32_t_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_short_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_short_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_unsigned_short_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_unsigned_short_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_int_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_int_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_unsigned_int_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_unsigned_int_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_long_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_long_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_unsigned_long_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_unsigned_long_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_long_long_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_long_long_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_open0_unsigned_long_long_close0"]
                [::core::mem::size_of::<root::std::__is_integer>() - 1usize];
            ["Align of template specialization: __is_integer_open0_unsigned_long_long_close0"]
                [::core::mem::align_of::<root::std::__is_integer>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_floating {
            pub _address: u8,
        }
        pub const __is_floating___value: root::std::__is_floating__bindgen_ty_1 = 0;
        pub type __is_floating__bindgen_ty_1 = i32;
        pub type __is_floating___type = root::std::__false_type;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_floating_open0_float_close0"]
                [::core::mem::size_of::<root::std::__is_floating>() - 1usize];
            ["Align of template specialization: __is_floating_open0_float_close0"]
                [::core::mem::align_of::<root::std::__is_floating>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_floating_open0_double_close0"]
                [::core::mem::size_of::<root::std::__is_floating>() - 1usize];
            ["Align of template specialization: __is_floating_open0_double_close0"]
                [::core::mem::align_of::<root::std::__is_floating>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_floating_open0_long_double_close0"]
                [::core::mem::size_of::<root::std::__is_floating>() - 1usize];
            ["Align of template specialization: __is_floating_open0_long_double_close0"]
                [::core::mem::align_of::<root::std::__is_floating>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_arithmetic {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_char {
            pub _address: u8,
        }
        pub const __is_char___value: root::std::__is_char__bindgen_ty_1 = 0;
        pub type __is_char__bindgen_ty_1 = i32;
        pub type __is_char___type = root::std::__false_type;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_char_open0_char_close0"]
                [::core::mem::size_of::<root::std::__is_char>() - 1usize];
            ["Align of template specialization: __is_char_open0_char_close0"]
                [::core::mem::align_of::<root::std::__is_char>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_char_open0_wchar_t_close0"]
                [::core::mem::size_of::<root::std::__is_char>() - 1usize];
            ["Align of template specialization: __is_char_open0_wchar_t_close0"]
                [::core::mem::align_of::<root::std::__is_char>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_byte {
            pub _address: u8,
        }
        pub const __is_byte___value: root::std::__is_byte__bindgen_ty_1 = 0;
        pub type __is_byte__bindgen_ty_1 = i32;
        pub type __is_byte___type = root::std::__false_type;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_byte_open0_char_close0"]
                [::core::mem::size_of::<root::std::__is_byte>() - 1usize];
            ["Align of template specialization: __is_byte_open0_char_close0"]
                [::core::mem::align_of::<root::std::__is_byte>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_byte_open0_signed_char_close0"]
                [::core::mem::size_of::<root::std::__is_byte>() - 1usize];
            ["Align of template specialization: __is_byte_open0_signed_char_close0"]
                [::core::mem::align_of::<root::std::__is_byte>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_byte_open0_unsigned_char_close0"]
                [::core::mem::size_of::<root::std::__is_byte>() - 1usize];
            ["Align of template specialization: __is_byte_open0_unsigned_char_close0"]
                [::core::mem::align_of::<root::std::__is_byte>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_byte_open0_byte_close0"]
                [::core::mem::size_of::<root::std::__is_byte>() - 1usize];
            ["Align of template specialization: __is_byte_open0_byte_close0"]
                [::core::mem::align_of::<root::std::__is_byte>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nonvolatile_trivially_copyable {
            pub _address: u8,
        }
        pub const __is_nonvolatile_trivially_copyable___value:
            root::std::__is_nonvolatile_trivially_copyable__bindgen_ty_1 = 0;
        pub type __is_nonvolatile_trivially_copyable__bindgen_ty_1 = i32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __memcpyable {
            pub _address: u8,
        }
        pub const __memcpyable___value: root::std::__memcpyable__bindgen_ty_1 = 0;
        pub type __memcpyable__bindgen_ty_1 = i32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __memcpyable_integer {
            pub _address: u8,
        }
        pub const __memcpyable_integer___width: root::std::__memcpyable_integer__bindgen_ty_1 = 0;
        pub type __memcpyable_integer__bindgen_ty_1 = i32;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __memcpyable_integer_open0___int128_close0"]
                [::core::mem::size_of::<root::std::__memcpyable_integer>() - 1usize];
            ["Align of template specialization: __memcpyable_integer_open0___int128_close0"]
                [::core::mem::align_of::<root::std::__memcpyable_integer>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __memcpyable_integer_open0_unsigned___int128_close0"] [:: core :: mem :: size_of :: < root :: std :: __memcpyable_integer > () - 1usize] ;
            ["Align of template specialization: __memcpyable_integer_open0_unsigned___int128_close0"] [:: core :: mem :: align_of :: < root :: std :: __memcpyable_integer > () - 1usize] ;
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __memcmpable {
            pub _address: u8,
        }
        pub const __memcmpable___value: root::std::__memcmpable__bindgen_ty_1 = 0;
        pub type __memcmpable__bindgen_ty_1 = i32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_move_iterator {
            pub _address: u8,
        }
        pub const __is_move_iterator___value: root::std::__is_move_iterator__bindgen_ty_1 = 0;
        pub type __is_move_iterator__bindgen_ty_1 = i32;
        pub type __is_move_iterator___type = root::std::__false_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct input_iterator_tag {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of input_iterator_tag"][::core::mem::size_of::<input_iterator_tag>() - 1usize];
            ["Alignment of input_iterator_tag"]
                [::core::mem::align_of::<input_iterator_tag>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct output_iterator_tag {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of output_iterator_tag"][::core::mem::size_of::<output_iterator_tag>() - 1usize];
            ["Alignment of output_iterator_tag"]
                [::core::mem::align_of::<output_iterator_tag>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct forward_iterator_tag {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of forward_iterator_tag"]
                [::core::mem::size_of::<forward_iterator_tag>() - 1usize];
            ["Alignment of forward_iterator_tag"]
                [::core::mem::align_of::<forward_iterator_tag>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct bidirectional_iterator_tag {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of bidirectional_iterator_tag"]
                [::core::mem::size_of::<bidirectional_iterator_tag>() - 1usize];
            ["Alignment of bidirectional_iterator_tag"]
                [::core::mem::align_of::<bidirectional_iterator_tag>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct random_access_iterator_tag {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of random_access_iterator_tag"]
                [::core::mem::size_of::<random_access_iterator_tag>() - 1usize];
            ["Alignment of random_access_iterator_tag"]
                [::core::mem::align_of::<random_access_iterator_tag>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct iterator {
            pub _address: u8,
        }
        pub type iterator_iterator_category<_Category> = _Category;
        pub type iterator_value_type<_Tp> = _Tp;
        pub type iterator_difference_type<_Distance> = _Distance;
        pub type iterator_pointer<_Pointer> = _Pointer;
        pub type iterator_reference<_Reference> = _Reference;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __iterator_traits {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct iterator_traits {
            pub _address: u8,
        }
        pub type __iter_category_t = root::std::iterator_traits;
        pub type _RequireInputIter = root::std::__enable_if_t;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_random_access_iter {
            pub _address: u8,
        }
        pub type __is_random_access_iter__Base = root::std::is_base_of;
        pub const __is_random_access_iter___value:
            root::std::__is_random_access_iter__bindgen_ty_1 = 0;
        pub type __is_random_access_iter__bindgen_ty_1 = i32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _List_iterator {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _List_const_iterator {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __undefined {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __get_first_arg {
            pub _address: u8,
        }
        pub type __get_first_arg_type = root::std::__undefined;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __replace_first_arg {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __ptr_traits_elem {
            pub _address: u8,
        }
        pub type __ptr_traits_elem_t = root::std::__ptr_traits_elem;
        pub type __ptr_traits_ptr_to_pointer<_Ptr> = _Ptr;
        pub type __ptr_traits_ptr_to_element_type<_Elt> = _Elt;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __ptr_traits_impl {
            pub _address: u8,
        }
        pub type __ptr_traits_impl___diff_t = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type __ptr_traits_impl___rebind = root::std::__type_identity;
        pub type __ptr_traits_impl_pointer<_Ptr> = _Ptr;
        pub type __ptr_traits_impl_element_type<_Elt> = _Elt;
        pub type __ptr_traits_impl_difference_type = root::std::__detected_or_t;
        pub type __ptr_traits_impl_rebind = root::std::__detected_or_t;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct pointer_traits {
            pub _address: u8,
        }
        pub type __ptr_rebind = root::std::pointer_traits;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct reverse_iterator<_Iterator> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Iterator>>,
            pub current: _Iterator,
        }
        pub type reverse_iterator___traits_type = root::std::iterator_traits;
        pub type reverse_iterator_iterator_type<_Iterator> = _Iterator;
        pub type reverse_iterator_pointer = root::std::reverse_iterator___traits_type;
        pub type reverse_iterator_difference_type = root::std::reverse_iterator___traits_type;
        pub type reverse_iterator_reference = root::std::reverse_iterator___traits_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct back_insert_iterator<_Container> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Container>>,
            pub container: *mut _Container,
        }
        pub type back_insert_iterator_container_type<_Container> = _Container;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct front_insert_iterator<_Container> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Container>>,
            pub container: *mut _Container,
        }
        pub type front_insert_iterator_container_type<_Container> = _Container;
        #[repr(C)]
        pub struct insert_iterator<_Container> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Container>>,
            pub container: *mut _Container,
            pub iter: root::std::insert_iterator__Iter,
        }
        pub type insert_iterator__Iter = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type insert_iterator_container_type<_Container> = _Container;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct move_iterator<_Iterator> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Iterator>>,
            pub _M_current: _Iterator,
        }
        pub type move_iterator___traits_type = root::std::iterator_traits;
        pub type move_iterator___base_ref = root::std::move_iterator___traits_type;
        pub type move_iterator_iterator_type<_Iterator> = _Iterator;
        pub type move_iterator_iterator_category = root::std::move_iterator___traits_type;
        pub type move_iterator_value_type = root::std::move_iterator___traits_type;
        pub type move_iterator_difference_type = root::std::move_iterator___traits_type;
        pub type move_iterator_pointer<_Iterator> = _Iterator;
        pub type move_iterator_reference = root::std::__conditional_t;
        pub type __iter_key_t = root::std::remove_const_t;
        pub type __iter_val_t = root::std::iterator_traits;
        pub type __iter_to_alloc_t =
            root::std::pair<root::std::__iter_key_t, root::std::__iter_val_t>;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Deque_iterator {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Bit_iterator {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct char_traits {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct istreambuf_iterator {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ostreambuf_iterator {
            pub _address: u8,
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZSt9__fill_a1St13_Bit_iteratorS_RKb"]
            pub fn __fill_a1(
                arg1: root::std::_Bit_iterator,
                arg2: root::std::_Bit_iterator,
                arg3: *const bool,
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __lc_rai {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __lc_rai_open0_random_access_iterator_tag_random_access_iterator_tag_close0"] [:: core :: mem :: size_of :: < root :: std :: __lc_rai > () - 1usize] ;
            ["Align of template specialization: __lc_rai_open0_random_access_iterator_tag_random_access_iterator_tag_close0"] [:: core :: mem :: align_of :: < root :: std :: __lc_rai > () - 1usize] ;
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct uniform_int_distribution<_IntType> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_IntType>>,
            pub _M_param: root::std::uniform_int_distribution_param_type<_IntType>,
        }
        pub type uniform_int_distribution_result_type<_IntType> = _IntType;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct uniform_int_distribution_param_type<_IntType> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_IntType>>,
            pub _M_a: _IntType,
            pub _M_b: _IntType,
        }
        pub type uniform_int_distribution_param_type_distribution_type<_IntType> =
            root::std::uniform_int_distribution<_IntType>;
        #[repr(C)]
        #[derive(Debug)]
        pub struct _Temporary_buffer<_Tp> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Tp>>,
            pub _M_original_len: root::std::_Temporary_buffer_size_type,
            pub _M_impl: root::std::_Temporary_buffer__Impl<_Tp>,
        }
        pub type _Temporary_buffer_value_type<_Tp> = _Tp;
        pub type _Temporary_buffer_pointer<_Tp> = *mut root::std::_Temporary_buffer_value_type<_Tp>;
        pub type _Temporary_buffer_iterator<_Tp> = root::std::_Temporary_buffer_pointer<_Tp>;
        pub type _Temporary_buffer_size_type = isize;
        #[repr(C)]
        #[derive(Debug)]
        pub struct _Temporary_buffer__Impl<_Tp> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Tp>>,
            pub _M_len: root::std::_Temporary_buffer_size_type,
            pub _M_buffer: root::std::_Temporary_buffer_pointer<_Tp>,
        }
        pub const std__S_threshold: root::std::_bindgen_ty_1 = 16;
        pub type _bindgen_ty_1 = ::core::ffi::c_uint;
        pub const std__S_chunk_size: root::std::_bindgen_ty_2 = 7;
        pub type _bindgen_ty_2 = ::core::ffi::c_uint;
        pub type byte = ::core::ffi::c_uchar;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __byte_operand {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_bool__close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_bool__close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_char_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_char_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_signed_char_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_signed_char_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_unsigned_char_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_unsigned_char_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_wchar_t_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_wchar_t_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_char16_t_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_char16_t_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_char32_t_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_char32_t_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_short_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_short_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_unsigned_short_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_unsigned_short_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_int_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_int_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_unsigned_int_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_unsigned_int_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_long_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_long_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_unsigned_long_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_unsigned_long_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_long_long_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_long_long_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __byte_operand_open0_unsigned_long_long_close0"]
                [::core::mem::size_of::<root::std::__byte_operand>() - 1usize];
            ["Align of template specialization: __byte_operand_open0_unsigned_long_long_close0"]
                [::core::mem::align_of::<root::std::__byte_operand>() - 1usize];
        };
        pub type __byte_op_t = root::std::__byte_operand;
    }
    pub mod __gnu_cxx {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub type __conditional_type___type<_Iftrue> = _Iftrue;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __add_unsigned {
            pub _address: u8,
        }
        pub type __add_unsigned___if_type = u8;
        pub type __add_unsigned___type = root::__gnu_cxx::__add_unsigned___if_type;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __add_unsigned_open0_char_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
            ["Align of template specialization: __add_unsigned_open0_char_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __add_unsigned_open0_signed_char_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
            ["Align of template specialization: __add_unsigned_open0_signed_char_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __add_unsigned_open0_short_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
            ["Align of template specialization: __add_unsigned_open0_short_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __add_unsigned_open0_int_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
            ["Align of template specialization: __add_unsigned_open0_int_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __add_unsigned_open0_long_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
            ["Align of template specialization: __add_unsigned_open0_long_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __add_unsigned_open0_long_long_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
            ["Align of template specialization: __add_unsigned_open0_long_long_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__add_unsigned>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __remove_unsigned {
            pub _address: u8,
        }
        pub type __remove_unsigned___if_type = u8;
        pub type __remove_unsigned___type = root::__gnu_cxx::__remove_unsigned___if_type;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __remove_unsigned_open0_char_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
            ["Align of template specialization: __remove_unsigned_open0_char_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __remove_unsigned_open0_unsigned_char_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
            ["Align of template specialization: __remove_unsigned_open0_unsigned_char_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __remove_unsigned_open0_unsigned_short_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
            ["Align of template specialization: __remove_unsigned_open0_unsigned_short_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __remove_unsigned_open0_unsigned_int_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
            ["Align of template specialization: __remove_unsigned_open0_unsigned_int_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __remove_unsigned_open0_unsigned_long_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
            ["Align of template specialization: __remove_unsigned_open0_unsigned_long_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__remove_unsigned>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __remove_unsigned_open0_unsigned_long_long_close0"] [:: core :: mem :: size_of :: < root :: __gnu_cxx :: __remove_unsigned > () - 1usize] ;
            ["Align of template specialization: __remove_unsigned_open0_unsigned_long_long_close0"] [:: core :: mem :: align_of :: < root :: __gnu_cxx :: __remove_unsigned > () - 1usize] ;
        };
        pub type __promote___type = f64;
        pub type __promoted_t = u8;
        pub type __promote_2 = u8;
        pub type __promote_3 = u8;
        pub type __promote_4 = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_integer_nonstrict {
            pub _address: u8,
        }
        pub const __is_integer_nonstrict___width:
            root::__gnu_cxx::__is_integer_nonstrict__bindgen_ty_1 = 0;
        pub type __is_integer_nonstrict__bindgen_ty_1 = i32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __numeric_traits_integer {
            pub _address: u8,
        }
        unsafe extern "C" {
            pub static __min: _Value;
        }
        unsafe extern "C" {
            pub static __max: _Value;
        }
        unsafe extern "C" {
            pub static __is_signed: bool;
        }
        unsafe extern "C" {
            pub static __digits: ::core::ffi::c_int;
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_nonstrict_open0___int128_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__is_integer_nonstrict>() - 1usize];
            ["Align of template specialization: __is_integer_nonstrict_open0___int128_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__is_integer_nonstrict>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __is_integer_nonstrict_open0_unsigned___int128_close0"] [:: core :: mem :: size_of :: < root :: __gnu_cxx :: __is_integer_nonstrict > () - 1usize] ;
            ["Align of template specialization: __is_integer_nonstrict_open0_unsigned___int128_close0"] [:: core :: mem :: align_of :: < root :: __gnu_cxx :: __is_integer_nonstrict > () - 1usize] ;
        };
        pub type __int_traits = root::__gnu_cxx::__numeric_traits_integer;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __numeric_traits_floating {
            pub _address: u8,
        }
        unsafe extern "C" {
            pub static __max_digits10: ::core::ffi::c_int;
        }
        unsafe extern "C" {
            pub static __digits10: ::core::ffi::c_int;
        }
        unsafe extern "C" {
            pub static __max_exponent10: ::core::ffi::c_int;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __numeric_traits {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __numeric_traits_open0_float_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__numeric_traits>() - 1usize];
            ["Align of template specialization: __numeric_traits_open0_float_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__numeric_traits>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __numeric_traits_open0_double_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__numeric_traits>() - 1usize];
            ["Align of template specialization: __numeric_traits_open0_double_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__numeric_traits>() - 1usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of template specialization: __numeric_traits_open0_long_double_close0"]
                [::core::mem::size_of::<root::__gnu_cxx::__numeric_traits>() - 1usize];
            ["Align of template specialization: __numeric_traits_open0_long_double_close0"]
                [::core::mem::align_of::<root::__gnu_cxx::__numeric_traits>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __normal_iterator<_Iterator> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Iterator>>,
            pub _M_current: _Iterator,
        }
        pub type __normal_iterator___traits_type = root::std::iterator_traits;
        pub type __normal_iterator___convertible_from = root::std::__enable_if_t;
        pub type __normal_iterator_iterator_type<_Iterator> = _Iterator;
        pub type __normal_iterator_iterator_category =
            root::__gnu_cxx::__normal_iterator___traits_type;
        pub type __normal_iterator_value_type = root::__gnu_cxx::__normal_iterator___traits_type;
        pub type __normal_iterator_difference_type =
            root::__gnu_cxx::__normal_iterator___traits_type;
        pub type __normal_iterator_reference = root::__gnu_cxx::__normal_iterator___traits_type;
        pub type __normal_iterator_pointer = root::__gnu_cxx::__normal_iterator___traits_type;
        pub mod __ops {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_less_iter {
                pub _address: u8,
            }
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of _Iter_less_iter"][::core::mem::size_of::<_Iter_less_iter>() - 1usize];
                ["Alignment of _Iter_less_iter"]
                    [::core::mem::align_of::<_Iter_less_iter>() - 1usize];
            };
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_less_val {
                pub _address: u8,
            }
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of _Iter_less_val"][::core::mem::size_of::<_Iter_less_val>() - 1usize];
                ["Alignment of _Iter_less_val"][::core::mem::align_of::<_Iter_less_val>() - 1usize];
            };
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Val_less_iter {
                pub _address: u8,
            }
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of _Val_less_iter"][::core::mem::size_of::<_Val_less_iter>() - 1usize];
                ["Alignment of _Val_less_iter"][::core::mem::align_of::<_Val_less_iter>() - 1usize];
            };
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_equal_to_iter {
                pub _address: u8,
            }
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of _Iter_equal_to_iter"]
                    [::core::mem::size_of::<_Iter_equal_to_iter>() - 1usize];
                ["Alignment of _Iter_equal_to_iter"]
                    [::core::mem::align_of::<_Iter_equal_to_iter>() - 1usize];
            };
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_equal_to_val {
                pub _address: u8,
            }
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of _Iter_equal_to_val"]
                    [::core::mem::size_of::<_Iter_equal_to_val>() - 1usize];
                ["Alignment of _Iter_equal_to_val"]
                    [::core::mem::align_of::<_Iter_equal_to_val>() - 1usize];
            };
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_comp_iter<_Compare> {
                pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Compare>>,
                pub _M_comp: _Compare,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_comp_val<_Compare> {
                pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Compare>>,
                pub _M_comp: _Compare,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Val_comp_iter<_Compare> {
                pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Compare>>,
                pub _M_comp: _Compare,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_equals_val<_Value> {
                pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Value>>,
                pub _M_value: *mut _Value,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_equals_iter<_Iterator1> {
                pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Iterator1>>,
                pub _M_it1: _Iterator1,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_pred<_Predicate> {
                pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Predicate>>,
                pub _M_pred: _Predicate,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_comp_to_val<_Compare, _Value> {
                pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Compare>>,
                pub _phantom_1: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Value>>,
                pub _M_comp: _Compare,
                pub _M_value: *mut _Value,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_comp_to_iter<_Compare, _Iterator1> {
                pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Compare>>,
                pub _phantom_1: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Iterator1>>,
                pub _M_comp: _Compare,
                pub _M_it1: _Iterator1,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_negate<_Predicate> {
                pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<_Predicate>>,
                pub _M_pred: _Predicate,
            }
        }
    }
    unsafe extern "C" {
        pub fn __sysconf(__name: ::core::ffi::c_int) -> ::core::ffi::c_long;
    }
    pub type __cfloat128 = root::__BindgenComplex<u128>;
    pub type _Float128 = u128;
    pub type _Float32 = f32;
    pub type _Float64 = f64;
    pub type _Float32x = f64;
    pub type _Float64x = u128;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct div_t {
        pub quot: ::core::ffi::c_int,
        pub rem: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of div_t"][::core::mem::size_of::<div_t>() - 8usize];
        ["Alignment of div_t"][::core::mem::align_of::<div_t>() - 4usize];
        ["Offset of field: div_t::quot"][::core::mem::offset_of!(div_t, quot) - 0usize];
        ["Offset of field: div_t::rem"][::core::mem::offset_of!(div_t, rem) - 4usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ldiv_t {
        pub quot: ::core::ffi::c_long,
        pub rem: ::core::ffi::c_long,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of ldiv_t"][::core::mem::size_of::<ldiv_t>() - 16usize];
        ["Alignment of ldiv_t"][::core::mem::align_of::<ldiv_t>() - 8usize];
        ["Offset of field: ldiv_t::quot"][::core::mem::offset_of!(ldiv_t, quot) - 0usize];
        ["Offset of field: ldiv_t::rem"][::core::mem::offset_of!(ldiv_t, rem) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lldiv_t {
        pub quot: ::core::ffi::c_longlong,
        pub rem: ::core::ffi::c_longlong,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of lldiv_t"][::core::mem::size_of::<lldiv_t>() - 16usize];
        ["Alignment of lldiv_t"][::core::mem::align_of::<lldiv_t>() - 8usize];
        ["Offset of field: lldiv_t::quot"][::core::mem::offset_of!(lldiv_t, quot) - 0usize];
        ["Offset of field: lldiv_t::rem"][::core::mem::offset_of!(lldiv_t, rem) - 8usize];
    };
    unsafe extern "C" {
        pub fn __ctype_get_mb_cur_max() -> usize;
    }
    unsafe extern "C" {
        pub fn atof(__nptr: *const ::core::ffi::c_char) -> f64;
    }
    unsafe extern "C" {
        pub fn atoi(__nptr: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn atol(__nptr: *const ::core::ffi::c_char) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn atoll(__nptr: *const ::core::ffi::c_char) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn strtod(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
        ) -> f64;
    }
    unsafe extern "C" {
        pub fn strtof(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
        ) -> f32;
    }
    unsafe extern "C" {
        pub fn strtold(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
        ) -> u128;
    }
    unsafe extern "C" {
        pub fn strtof32(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
        ) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn strtof64(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
        ) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn strtof128(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
        ) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn strtof32x(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
        ) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn strtof64x(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
        ) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn strtol(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn strtoul(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_ulong;
    }
    unsafe extern "C" {
        pub fn strtoq(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn strtouq(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_ulonglong;
    }
    unsafe extern "C" {
        pub fn strtoll(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn strtoull(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_ulonglong;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_strtol"]
        pub fn strtol1(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_strtoul"]
        pub fn strtoul1(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_ulong;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_strtoll"]
        pub fn strtoq1(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_strtoull"]
        pub fn strtouq1(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
        ) -> ::core::ffi::c_ulonglong;
    }
    unsafe extern "C" {
        pub fn strfromd(
            __dest: *mut ::core::ffi::c_char,
            __size: usize,
            __format: *const ::core::ffi::c_char,
            __f: f64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strfromf(
            __dest: *mut ::core::ffi::c_char,
            __size: usize,
            __format: *const ::core::ffi::c_char,
            __f: f32,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strfroml(
            __dest: *mut ::core::ffi::c_char,
            __size: usize,
            __format: *const ::core::ffi::c_char,
            __f: u128,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strfromf32(
            __dest: *mut ::core::ffi::c_char,
            __size: usize,
            __format: *const ::core::ffi::c_char,
            __f: root::_Float32,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strfromf64(
            __dest: *mut ::core::ffi::c_char,
            __size: usize,
            __format: *const ::core::ffi::c_char,
            __f: root::_Float64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strfromf128(
            __dest: *mut ::core::ffi::c_char,
            __size: usize,
            __format: *const ::core::ffi::c_char,
            __f: root::_Float128,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strfromf32x(
            __dest: *mut ::core::ffi::c_char,
            __size: usize,
            __format: *const ::core::ffi::c_char,
            __f: root::_Float32x,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn strfromf64x(
            __dest: *mut ::core::ffi::c_char,
            __size: usize,
            __format: *const ::core::ffi::c_char,
            __f: root::_Float64x,
        ) -> ::core::ffi::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __locale_struct {
        pub __locales: [*mut root::__locale_data; 13usize],
        pub __ctype_b: *const ::core::ffi::c_ushort,
        pub __ctype_tolower: *const ::core::ffi::c_int,
        pub __ctype_toupper: *const ::core::ffi::c_int,
        pub __names: [*const ::core::ffi::c_char; 13usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __locale_struct"][::core::mem::size_of::<__locale_struct>() - 232usize];
        ["Alignment of __locale_struct"][::core::mem::align_of::<__locale_struct>() - 8usize];
        ["Offset of field: __locale_struct::__locales"]
            [::core::mem::offset_of!(__locale_struct, __locales) - 0usize];
        ["Offset of field: __locale_struct::__ctype_b"]
            [::core::mem::offset_of!(__locale_struct, __ctype_b) - 104usize];
        ["Offset of field: __locale_struct::__ctype_tolower"]
            [::core::mem::offset_of!(__locale_struct, __ctype_tolower) - 112usize];
        ["Offset of field: __locale_struct::__ctype_toupper"]
            [::core::mem::offset_of!(__locale_struct, __ctype_toupper) - 120usize];
        ["Offset of field: __locale_struct::__names"]
            [::core::mem::offset_of!(__locale_struct, __names) - 128usize];
    };
    pub type __locale_t = *mut root::__locale_struct;
    pub type locale_t = root::__locale_t;
    unsafe extern "C" {
        pub fn strtol_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn strtoul_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_ulong;
    }
    unsafe extern "C" {
        pub fn strtoll_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn strtoull_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_ulonglong;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_strtol_l"]
        pub fn strtol_l1(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_strtoul_l"]
        pub fn strtoul_l1(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_ulong;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_strtoll_l"]
        pub fn strtoll_l1(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_strtoull_l"]
        pub fn strtoull_l1(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __base: ::core::ffi::c_int,
            __loc: root::locale_t,
        ) -> ::core::ffi::c_ulonglong;
    }
    unsafe extern "C" {
        pub fn strtod_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __loc: root::locale_t,
        ) -> f64;
    }
    unsafe extern "C" {
        pub fn strtof_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __loc: root::locale_t,
        ) -> f32;
    }
    unsafe extern "C" {
        pub fn strtold_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __loc: root::locale_t,
        ) -> u128;
    }
    unsafe extern "C" {
        pub fn strtof32_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __loc: root::locale_t,
        ) -> root::_Float32;
    }
    unsafe extern "C" {
        pub fn strtof64_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __loc: root::locale_t,
        ) -> root::_Float64;
    }
    unsafe extern "C" {
        pub fn strtof128_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __loc: root::locale_t,
        ) -> root::_Float128;
    }
    unsafe extern "C" {
        pub fn strtof32x_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __loc: root::locale_t,
        ) -> root::_Float32x;
    }
    unsafe extern "C" {
        pub fn strtof64x_l(
            __nptr: *const ::core::ffi::c_char,
            __endptr: *mut *mut ::core::ffi::c_char,
            __loc: root::locale_t,
        ) -> root::_Float64x;
    }
    unsafe extern "C" {
        pub fn l64a(__n: ::core::ffi::c_long) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn a64l(__s: *const ::core::ffi::c_char) -> ::core::ffi::c_long;
    }
    pub type __u_char = ::core::ffi::c_uchar;
    pub type __u_short = ::core::ffi::c_ushort;
    pub type __u_int = ::core::ffi::c_uint;
    pub type __u_long = ::core::ffi::c_ulong;
    pub type __int8_t = ::core::ffi::c_schar;
    pub type __uint8_t = ::core::ffi::c_uchar;
    pub type __int16_t = ::core::ffi::c_short;
    pub type __uint16_t = ::core::ffi::c_ushort;
    pub type __int32_t = ::core::ffi::c_int;
    pub type __uint32_t = ::core::ffi::c_uint;
    pub type __int64_t = ::core::ffi::c_long;
    pub type __uint64_t = ::core::ffi::c_ulong;
    pub type __int_least8_t = root::__int8_t;
    pub type __uint_least8_t = root::__uint8_t;
    pub type __int_least16_t = root::__int16_t;
    pub type __uint_least16_t = root::__uint16_t;
    pub type __int_least32_t = root::__int32_t;
    pub type __uint_least32_t = root::__uint32_t;
    pub type __int_least64_t = root::__int64_t;
    pub type __uint_least64_t = root::__uint64_t;
    pub type __quad_t = ::core::ffi::c_long;
    pub type __u_quad_t = ::core::ffi::c_ulong;
    pub type __intmax_t = ::core::ffi::c_long;
    pub type __uintmax_t = ::core::ffi::c_ulong;
    pub type __dev_t = ::core::ffi::c_ulong;
    pub type __uid_t = ::core::ffi::c_uint;
    pub type __gid_t = ::core::ffi::c_uint;
    pub type __ino_t = ::core::ffi::c_ulong;
    pub type __ino64_t = ::core::ffi::c_ulong;
    pub type __mode_t = ::core::ffi::c_uint;
    pub type __nlink_t = ::core::ffi::c_ulong;
    pub type __off_t = ::core::ffi::c_long;
    pub type __off64_t = ::core::ffi::c_long;
    pub type __pid_t = ::core::ffi::c_int;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __fsid_t {
        pub __val: [::core::ffi::c_int; 2usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __fsid_t"][::core::mem::size_of::<__fsid_t>() - 8usize];
        ["Alignment of __fsid_t"][::core::mem::align_of::<__fsid_t>() - 4usize];
        ["Offset of field: __fsid_t::__val"][::core::mem::offset_of!(__fsid_t, __val) - 0usize];
    };
    pub type __clock_t = ::core::ffi::c_long;
    pub type __rlim_t = ::core::ffi::c_ulong;
    pub type __rlim64_t = ::core::ffi::c_ulong;
    pub type __id_t = ::core::ffi::c_uint;
    pub type __time_t = ::core::ffi::c_long;
    pub type __useconds_t = ::core::ffi::c_uint;
    pub type __suseconds_t = ::core::ffi::c_long;
    pub type __suseconds64_t = ::core::ffi::c_long;
    pub type __daddr_t = ::core::ffi::c_int;
    pub type __key_t = ::core::ffi::c_int;
    pub type __clockid_t = ::core::ffi::c_int;
    pub type __timer_t = *mut ::core::ffi::c_void;
    pub type __blksize_t = ::core::ffi::c_long;
    pub type __blkcnt_t = ::core::ffi::c_long;
    pub type __blkcnt64_t = ::core::ffi::c_long;
    pub type __fsblkcnt_t = ::core::ffi::c_ulong;
    pub type __fsblkcnt64_t = ::core::ffi::c_ulong;
    pub type __fsfilcnt_t = ::core::ffi::c_ulong;
    pub type __fsfilcnt64_t = ::core::ffi::c_ulong;
    pub type __fsword_t = ::core::ffi::c_long;
    pub type __ssize_t = ::core::ffi::c_long;
    pub type __syscall_slong_t = ::core::ffi::c_long;
    pub type __syscall_ulong_t = ::core::ffi::c_ulong;
    pub type __loff_t = root::__off64_t;
    pub type __caddr_t = *mut ::core::ffi::c_char;
    pub type __intptr_t = ::core::ffi::c_long;
    pub type __socklen_t = ::core::ffi::c_uint;
    pub type __sig_atomic_t = ::core::ffi::c_int;
    pub type u_char = root::__u_char;
    pub type u_short = root::__u_short;
    pub type u_int = root::__u_int;
    pub type u_long = root::__u_long;
    pub type quad_t = root::__quad_t;
    pub type u_quad_t = root::__u_quad_t;
    pub type fsid_t = root::__fsid_t;
    pub type loff_t = root::__loff_t;
    pub type ino_t = root::__ino_t;
    pub type ino64_t = root::__ino64_t;
    pub type dev_t = root::__dev_t;
    pub type gid_t = root::__gid_t;
    pub type mode_t = root::__mode_t;
    pub type nlink_t = root::__nlink_t;
    pub type uid_t = root::__uid_t;
    pub type off_t = root::__off_t;
    pub type off64_t = root::__off64_t;
    pub type pid_t = root::__pid_t;
    pub type id_t = root::__id_t;
    pub type daddr_t = root::__daddr_t;
    pub type caddr_t = root::__caddr_t;
    pub type key_t = root::__key_t;
    pub type clock_t = root::__clock_t;
    pub type clockid_t = root::__clockid_t;
    pub type time_t = root::__time_t;
    pub type timer_t = root::__timer_t;
    pub type useconds_t = root::__useconds_t;
    pub type suseconds_t = root::__suseconds_t;
    pub type ulong = ::core::ffi::c_ulong;
    pub type ushort = ::core::ffi::c_ushort;
    pub type uint = ::core::ffi::c_uint;
    pub type u_int8_t = root::__uint8_t;
    pub type u_int16_t = root::__uint16_t;
    pub type u_int32_t = root::__uint32_t;
    pub type u_int64_t = root::__uint64_t;
    pub type register_t = ::core::ffi::c_long;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __sigset_t {
        pub __val: [::core::ffi::c_ulong; 16usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __sigset_t"][::core::mem::size_of::<__sigset_t>() - 128usize];
        ["Alignment of __sigset_t"][::core::mem::align_of::<__sigset_t>() - 8usize];
        ["Offset of field: __sigset_t::__val"][::core::mem::offset_of!(__sigset_t, __val) - 0usize];
    };
    pub type sigset_t = root::__sigset_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct timeval {
        pub tv_sec: root::__time_t,
        pub tv_usec: root::__suseconds_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of timeval"][::core::mem::size_of::<timeval>() - 16usize];
        ["Alignment of timeval"][::core::mem::align_of::<timeval>() - 8usize];
        ["Offset of field: timeval::tv_sec"][::core::mem::offset_of!(timeval, tv_sec) - 0usize];
        ["Offset of field: timeval::tv_usec"][::core::mem::offset_of!(timeval, tv_usec) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct timespec {
        pub tv_sec: root::__time_t,
        pub tv_nsec: root::__syscall_slong_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of timespec"][::core::mem::size_of::<timespec>() - 16usize];
        ["Alignment of timespec"][::core::mem::align_of::<timespec>() - 8usize];
        ["Offset of field: timespec::tv_sec"][::core::mem::offset_of!(timespec, tv_sec) - 0usize];
        ["Offset of field: timespec::tv_nsec"][::core::mem::offset_of!(timespec, tv_nsec) - 8usize];
    };
    pub type __fd_mask = ::core::ffi::c_long;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct fd_set {
        pub fds_bits: [root::__fd_mask; 16usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of fd_set"][::core::mem::size_of::<fd_set>() - 128usize];
        ["Alignment of fd_set"][::core::mem::align_of::<fd_set>() - 8usize];
        ["Offset of field: fd_set::fds_bits"][::core::mem::offset_of!(fd_set, fds_bits) - 0usize];
    };
    pub type fd_mask = root::__fd_mask;
    unsafe extern "C" {
        pub fn select(
            __nfds: ::core::ffi::c_int,
            __readfds: *mut root::fd_set,
            __writefds: *mut root::fd_set,
            __exceptfds: *mut root::fd_set,
            __timeout: *mut root::timeval,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pselect(
            __nfds: ::core::ffi::c_int,
            __readfds: *mut root::fd_set,
            __writefds: *mut root::fd_set,
            __exceptfds: *mut root::fd_set,
            __timeout: *const root::timespec,
            __sigmask: *const root::__sigset_t,
        ) -> ::core::ffi::c_int;
    }
    pub type blksize_t = root::__blksize_t;
    pub type blkcnt_t = root::__blkcnt_t;
    pub type fsblkcnt_t = root::__fsblkcnt_t;
    pub type fsfilcnt_t = root::__fsfilcnt_t;
    pub type blkcnt64_t = root::__blkcnt64_t;
    pub type fsblkcnt64_t = root::__fsblkcnt64_t;
    pub type fsfilcnt64_t = root::__fsfilcnt64_t;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __atomic_wide_counter {
        pub __value64: ::core::ffi::c_ulonglong,
        pub __value32: root::__atomic_wide_counter__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __atomic_wide_counter__bindgen_ty_1 {
        pub __low: ::core::ffi::c_uint,
        pub __high: ::core::ffi::c_uint,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __atomic_wide_counter__bindgen_ty_1"]
            [::core::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>() - 8usize];
        ["Alignment of __atomic_wide_counter__bindgen_ty_1"]
            [::core::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>() - 4usize];
        ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__low"]
            [::core::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __low) - 0usize];
        ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__high"]
            [::core::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __high) - 4usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __atomic_wide_counter"][::core::mem::size_of::<__atomic_wide_counter>() - 8usize];
        ["Alignment of __atomic_wide_counter"]
            [::core::mem::align_of::<__atomic_wide_counter>() - 8usize];
        ["Offset of field: __atomic_wide_counter::__value64"]
            [::core::mem::offset_of!(__atomic_wide_counter, __value64) - 0usize];
        ["Offset of field: __atomic_wide_counter::__value32"]
            [::core::mem::offset_of!(__atomic_wide_counter, __value32) - 0usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_internal_list {
        pub __prev: *mut root::__pthread_internal_list,
        pub __next: *mut root::__pthread_internal_list,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_internal_list"]
            [::core::mem::size_of::<__pthread_internal_list>() - 16usize];
        ["Alignment of __pthread_internal_list"]
            [::core::mem::align_of::<__pthread_internal_list>() - 8usize];
        ["Offset of field: __pthread_internal_list::__prev"]
            [::core::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
        ["Offset of field: __pthread_internal_list::__next"]
            [::core::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
    };
    pub type __pthread_list_t = root::__pthread_internal_list;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_internal_slist {
        pub __next: *mut root::__pthread_internal_slist,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_internal_slist"]
            [::core::mem::size_of::<__pthread_internal_slist>() - 8usize];
        ["Alignment of __pthread_internal_slist"]
            [::core::mem::align_of::<__pthread_internal_slist>() - 8usize];
        ["Offset of field: __pthread_internal_slist::__next"]
            [::core::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
    };
    pub type __pthread_slist_t = root::__pthread_internal_slist;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_mutex_s {
        pub __lock: ::core::ffi::c_int,
        pub __count: ::core::ffi::c_uint,
        pub __owner: ::core::ffi::c_int,
        pub __nusers: ::core::ffi::c_uint,
        pub __kind: ::core::ffi::c_int,
        pub __spins: ::core::ffi::c_short,
        pub __elision: ::core::ffi::c_short,
        pub __list: root::__pthread_list_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_mutex_s"][::core::mem::size_of::<__pthread_mutex_s>() - 40usize];
        ["Alignment of __pthread_mutex_s"][::core::mem::align_of::<__pthread_mutex_s>() - 8usize];
        ["Offset of field: __pthread_mutex_s::__lock"]
            [::core::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
        ["Offset of field: __pthread_mutex_s::__count"]
            [::core::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
        ["Offset of field: __pthread_mutex_s::__owner"]
            [::core::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
        ["Offset of field: __pthread_mutex_s::__nusers"]
            [::core::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
        ["Offset of field: __pthread_mutex_s::__kind"]
            [::core::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
        ["Offset of field: __pthread_mutex_s::__spins"]
            [::core::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
        ["Offset of field: __pthread_mutex_s::__elision"]
            [::core::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
        ["Offset of field: __pthread_mutex_s::__list"]
            [::core::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_rwlock_arch_t {
        pub __readers: ::core::ffi::c_uint,
        pub __writers: ::core::ffi::c_uint,
        pub __wrphase_futex: ::core::ffi::c_uint,
        pub __writers_futex: ::core::ffi::c_uint,
        pub __pad3: ::core::ffi::c_uint,
        pub __pad4: ::core::ffi::c_uint,
        pub __cur_writer: ::core::ffi::c_int,
        pub __shared: ::core::ffi::c_int,
        pub __rwelision: ::core::ffi::c_schar,
        pub __pad1: [::core::ffi::c_uchar; 7usize],
        pub __pad2: ::core::ffi::c_ulong,
        pub __flags: ::core::ffi::c_uint,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_rwlock_arch_t"]
            [::core::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
        ["Alignment of __pthread_rwlock_arch_t"]
            [::core::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
        ["Offset of field: __pthread_rwlock_arch_t::__readers"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
        ["Offset of field: __pthread_rwlock_arch_t::__writers"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
        ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
        ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
        ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
        ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
        ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
        ["Offset of field: __pthread_rwlock_arch_t::__shared"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
        ["Offset of field: __pthread_rwlock_arch_t::__rwelision"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __rwelision) - 32usize];
        ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
        ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
        ["Offset of field: __pthread_rwlock_arch_t::__flags"]
            [::core::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __pthread_cond_s {
        pub __wseq: root::__atomic_wide_counter,
        pub __g1_start: root::__atomic_wide_counter,
        pub __g_size: [::core::ffi::c_uint; 2usize],
        pub __g1_orig_size: ::core::ffi::c_uint,
        pub __wrefs: ::core::ffi::c_uint,
        pub __g_signals: [::core::ffi::c_uint; 2usize],
        pub __unused_initialized_1: ::core::ffi::c_uint,
        pub __unused_initialized_2: ::core::ffi::c_uint,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __pthread_cond_s"][::core::mem::size_of::<__pthread_cond_s>() - 48usize];
        ["Alignment of __pthread_cond_s"][::core::mem::align_of::<__pthread_cond_s>() - 8usize];
        ["Offset of field: __pthread_cond_s::__wseq"]
            [::core::mem::offset_of!(__pthread_cond_s, __wseq) - 0usize];
        ["Offset of field: __pthread_cond_s::__g1_start"]
            [::core::mem::offset_of!(__pthread_cond_s, __g1_start) - 8usize];
        ["Offset of field: __pthread_cond_s::__g_size"]
            [::core::mem::offset_of!(__pthread_cond_s, __g_size) - 16usize];
        ["Offset of field: __pthread_cond_s::__g1_orig_size"]
            [::core::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 24usize];
        ["Offset of field: __pthread_cond_s::__wrefs"]
            [::core::mem::offset_of!(__pthread_cond_s, __wrefs) - 28usize];
        ["Offset of field: __pthread_cond_s::__g_signals"]
            [::core::mem::offset_of!(__pthread_cond_s, __g_signals) - 32usize];
        ["Offset of field: __pthread_cond_s::__unused_initialized_1"]
            [::core::mem::offset_of!(__pthread_cond_s, __unused_initialized_1) - 40usize];
        ["Offset of field: __pthread_cond_s::__unused_initialized_2"]
            [::core::mem::offset_of!(__pthread_cond_s, __unused_initialized_2) - 44usize];
    };
    pub type __tss_t = ::core::ffi::c_uint;
    pub type __thrd_t = ::core::ffi::c_ulong;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __once_flag {
        pub __data: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __once_flag"][::core::mem::size_of::<__once_flag>() - 4usize];
        ["Alignment of __once_flag"][::core::mem::align_of::<__once_flag>() - 4usize];
        ["Offset of field: __once_flag::__data"]
            [::core::mem::offset_of!(__once_flag, __data) - 0usize];
    };
    pub type pthread_t = ::core::ffi::c_ulong;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_mutexattr_t {
        pub __size: [::core::ffi::c_char; 4usize],
        pub __align: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_mutexattr_t"][::core::mem::size_of::<pthread_mutexattr_t>() - 4usize];
        ["Alignment of pthread_mutexattr_t"]
            [::core::mem::align_of::<pthread_mutexattr_t>() - 4usize];
        ["Offset of field: pthread_mutexattr_t::__size"]
            [::core::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
        ["Offset of field: pthread_mutexattr_t::__align"]
            [::core::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_condattr_t {
        pub __size: [::core::ffi::c_char; 4usize],
        pub __align: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_condattr_t"][::core::mem::size_of::<pthread_condattr_t>() - 4usize];
        ["Alignment of pthread_condattr_t"][::core::mem::align_of::<pthread_condattr_t>() - 4usize];
        ["Offset of field: pthread_condattr_t::__size"]
            [::core::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
        ["Offset of field: pthread_condattr_t::__align"]
            [::core::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
    };
    pub type pthread_key_t = ::core::ffi::c_uint;
    pub type pthread_once_t = ::core::ffi::c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_attr_t {
        pub __size: [::core::ffi::c_char; 56usize],
        pub __align: ::core::ffi::c_long,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_attr_t"][::core::mem::size_of::<pthread_attr_t>() - 56usize];
        ["Alignment of pthread_attr_t"][::core::mem::align_of::<pthread_attr_t>() - 8usize];
        ["Offset of field: pthread_attr_t::__size"]
            [::core::mem::offset_of!(pthread_attr_t, __size) - 0usize];
        ["Offset of field: pthread_attr_t::__align"]
            [::core::mem::offset_of!(pthread_attr_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_mutex_t {
        pub __data: root::__pthread_mutex_s,
        pub __size: [::core::ffi::c_char; 40usize],
        pub __align: ::core::ffi::c_long,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_mutex_t"][::core::mem::size_of::<pthread_mutex_t>() - 40usize];
        ["Alignment of pthread_mutex_t"][::core::mem::align_of::<pthread_mutex_t>() - 8usize];
        ["Offset of field: pthread_mutex_t::__data"]
            [::core::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
        ["Offset of field: pthread_mutex_t::__size"]
            [::core::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
        ["Offset of field: pthread_mutex_t::__align"]
            [::core::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_cond_t {
        pub __data: root::__pthread_cond_s,
        pub __size: [::core::ffi::c_char; 48usize],
        pub __align: ::core::ffi::c_longlong,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_cond_t"][::core::mem::size_of::<pthread_cond_t>() - 48usize];
        ["Alignment of pthread_cond_t"][::core::mem::align_of::<pthread_cond_t>() - 8usize];
        ["Offset of field: pthread_cond_t::__data"]
            [::core::mem::offset_of!(pthread_cond_t, __data) - 0usize];
        ["Offset of field: pthread_cond_t::__size"]
            [::core::mem::offset_of!(pthread_cond_t, __size) - 0usize];
        ["Offset of field: pthread_cond_t::__align"]
            [::core::mem::offset_of!(pthread_cond_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_rwlock_t {
        pub __data: root::__pthread_rwlock_arch_t,
        pub __size: [::core::ffi::c_char; 56usize],
        pub __align: ::core::ffi::c_long,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_rwlock_t"][::core::mem::size_of::<pthread_rwlock_t>() - 56usize];
        ["Alignment of pthread_rwlock_t"][::core::mem::align_of::<pthread_rwlock_t>() - 8usize];
        ["Offset of field: pthread_rwlock_t::__data"]
            [::core::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
        ["Offset of field: pthread_rwlock_t::__size"]
            [::core::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
        ["Offset of field: pthread_rwlock_t::__align"]
            [::core::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_rwlockattr_t {
        pub __size: [::core::ffi::c_char; 8usize],
        pub __align: ::core::ffi::c_long,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_rwlockattr_t"][::core::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
        ["Alignment of pthread_rwlockattr_t"]
            [::core::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
        ["Offset of field: pthread_rwlockattr_t::__size"]
            [::core::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
        ["Offset of field: pthread_rwlockattr_t::__align"]
            [::core::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
    };
    pub type pthread_spinlock_t = ::core::ffi::c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_barrier_t {
        pub __size: [::core::ffi::c_char; 32usize],
        pub __align: ::core::ffi::c_long,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_barrier_t"][::core::mem::size_of::<pthread_barrier_t>() - 32usize];
        ["Alignment of pthread_barrier_t"][::core::mem::align_of::<pthread_barrier_t>() - 8usize];
        ["Offset of field: pthread_barrier_t::__size"]
            [::core::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
        ["Offset of field: pthread_barrier_t::__align"]
            [::core::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_barrierattr_t {
        pub __size: [::core::ffi::c_char; 4usize],
        pub __align: ::core::ffi::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of pthread_barrierattr_t"][::core::mem::size_of::<pthread_barrierattr_t>() - 4usize];
        ["Alignment of pthread_barrierattr_t"]
            [::core::mem::align_of::<pthread_barrierattr_t>() - 4usize];
        ["Offset of field: pthread_barrierattr_t::__size"]
            [::core::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
        ["Offset of field: pthread_barrierattr_t::__align"]
            [::core::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
    };
    unsafe extern "C" {
        pub fn random() -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn srandom(__seed: ::core::ffi::c_uint);
    }
    unsafe extern "C" {
        pub fn initstate(
            __seed: ::core::ffi::c_uint,
            __statebuf: *mut ::core::ffi::c_char,
            __statelen: usize,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn setstate(__statebuf: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct random_data {
        pub fptr: *mut i32,
        pub rptr: *mut i32,
        pub state: *mut i32,
        pub rand_type: ::core::ffi::c_int,
        pub rand_deg: ::core::ffi::c_int,
        pub rand_sep: ::core::ffi::c_int,
        pub end_ptr: *mut i32,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of random_data"][::core::mem::size_of::<random_data>() - 48usize];
        ["Alignment of random_data"][::core::mem::align_of::<random_data>() - 8usize];
        ["Offset of field: random_data::fptr"][::core::mem::offset_of!(random_data, fptr) - 0usize];
        ["Offset of field: random_data::rptr"][::core::mem::offset_of!(random_data, rptr) - 8usize];
        ["Offset of field: random_data::state"]
            [::core::mem::offset_of!(random_data, state) - 16usize];
        ["Offset of field: random_data::rand_type"]
            [::core::mem::offset_of!(random_data, rand_type) - 24usize];
        ["Offset of field: random_data::rand_deg"]
            [::core::mem::offset_of!(random_data, rand_deg) - 28usize];
        ["Offset of field: random_data::rand_sep"]
            [::core::mem::offset_of!(random_data, rand_sep) - 32usize];
        ["Offset of field: random_data::end_ptr"]
            [::core::mem::offset_of!(random_data, end_ptr) - 40usize];
    };
    unsafe extern "C" {
        pub fn random_r(__buf: *mut root::random_data, __result: *mut i32) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn srandom_r(
            __seed: ::core::ffi::c_uint,
            __buf: *mut root::random_data,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn initstate_r(
            __seed: ::core::ffi::c_uint,
            __statebuf: *mut ::core::ffi::c_char,
            __statelen: usize,
            __buf: *mut root::random_data,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setstate_r(
            __statebuf: *mut ::core::ffi::c_char,
            __buf: *mut root::random_data,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn rand() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn srand(__seed: ::core::ffi::c_uint);
    }
    unsafe extern "C" {
        pub fn rand_r(__seed: *mut ::core::ffi::c_uint) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn drand48() -> f64;
    }
    unsafe extern "C" {
        pub fn erand48(__xsubi: *mut ::core::ffi::c_ushort) -> f64;
    }
    unsafe extern "C" {
        pub fn lrand48() -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn nrand48(__xsubi: *mut ::core::ffi::c_ushort) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn mrand48() -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn jrand48(__xsubi: *mut ::core::ffi::c_ushort) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn srand48(__seedval: ::core::ffi::c_long);
    }
    unsafe extern "C" {
        pub fn seed48(__seed16v: *mut ::core::ffi::c_ushort) -> *mut ::core::ffi::c_ushort;
    }
    unsafe extern "C" {
        pub fn lcong48(__param: *mut ::core::ffi::c_ushort);
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct drand48_data {
        pub __x: [::core::ffi::c_ushort; 3usize],
        pub __old_x: [::core::ffi::c_ushort; 3usize],
        pub __c: ::core::ffi::c_ushort,
        pub __init: ::core::ffi::c_ushort,
        pub __a: ::core::ffi::c_ulonglong,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of drand48_data"][::core::mem::size_of::<drand48_data>() - 24usize];
        ["Alignment of drand48_data"][::core::mem::align_of::<drand48_data>() - 8usize];
        ["Offset of field: drand48_data::__x"][::core::mem::offset_of!(drand48_data, __x) - 0usize];
        ["Offset of field: drand48_data::__old_x"]
            [::core::mem::offset_of!(drand48_data, __old_x) - 6usize];
        ["Offset of field: drand48_data::__c"]
            [::core::mem::offset_of!(drand48_data, __c) - 12usize];
        ["Offset of field: drand48_data::__init"]
            [::core::mem::offset_of!(drand48_data, __init) - 14usize];
        ["Offset of field: drand48_data::__a"]
            [::core::mem::offset_of!(drand48_data, __a) - 16usize];
    };
    unsafe extern "C" {
        pub fn drand48_r(
            __buffer: *mut root::drand48_data,
            __result: *mut f64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn erand48_r(
            __xsubi: *mut ::core::ffi::c_ushort,
            __buffer: *mut root::drand48_data,
            __result: *mut f64,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn lrand48_r(
            __buffer: *mut root::drand48_data,
            __result: *mut ::core::ffi::c_long,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn nrand48_r(
            __xsubi: *mut ::core::ffi::c_ushort,
            __buffer: *mut root::drand48_data,
            __result: *mut ::core::ffi::c_long,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mrand48_r(
            __buffer: *mut root::drand48_data,
            __result: *mut ::core::ffi::c_long,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn jrand48_r(
            __xsubi: *mut ::core::ffi::c_ushort,
            __buffer: *mut root::drand48_data,
            __result: *mut ::core::ffi::c_long,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn srand48_r(
            __seedval: ::core::ffi::c_long,
            __buffer: *mut root::drand48_data,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn seed48_r(
            __seed16v: *mut ::core::ffi::c_ushort,
            __buffer: *mut root::drand48_data,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn lcong48_r(
            __param: *mut ::core::ffi::c_ushort,
            __buffer: *mut root::drand48_data,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn arc4random() -> root::__uint32_t;
    }
    unsafe extern "C" {
        pub fn arc4random_buf(__buf: *mut ::core::ffi::c_void, __size: usize);
    }
    unsafe extern "C" {
        pub fn arc4random_uniform(__upper_bound: root::__uint32_t) -> root::__uint32_t;
    }
    unsafe extern "C" {
        pub fn malloc(__size: usize) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn calloc(__nmemb: usize, __size: usize) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn realloc(__ptr: *mut ::core::ffi::c_void, __size: usize) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn free(__ptr: *mut ::core::ffi::c_void);
    }
    unsafe extern "C" {
        pub fn reallocarray(
            __ptr: *mut ::core::ffi::c_void,
            __nmemb: usize,
            __size: usize,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn alloca(__size: usize) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn valloc(__size: usize) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn posix_memalign(
            __memptr: *mut *mut ::core::ffi::c_void,
            __alignment: usize,
            __size: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn abort() -> !;
    }
    unsafe extern "C" {
        pub fn atexit(__func: ::core::option::Option<unsafe extern "C" fn()>)
            -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn at_quick_exit(
            __func: ::core::option::Option<unsafe extern "C" fn()>,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn on_exit(
            __func: ::core::option::Option<
                unsafe extern "C" fn(__status: ::core::ffi::c_int, __arg: *mut ::core::ffi::c_void),
            >,
            __arg: *mut ::core::ffi::c_void,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn exit(__status: ::core::ffi::c_int) -> !;
    }
    unsafe extern "C" {
        pub fn quick_exit(__status: ::core::ffi::c_int) -> !;
    }
    unsafe extern "C" {
        pub fn _Exit(__status: ::core::ffi::c_int) -> !;
    }
    unsafe extern "C" {
        pub fn getenv(__name: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn secure_getenv(__name: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn putenv(__string: *mut ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setenv(
            __name: *const ::core::ffi::c_char,
            __value: *const ::core::ffi::c_char,
            __replace: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn unsetenv(__name: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn clearenv() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mktemp(__template: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn mkstemp(__template: *mut ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mkstemp64(__template: *mut ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mkstemps(
            __template: *mut ::core::ffi::c_char,
            __suffixlen: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mkstemps64(
            __template: *mut ::core::ffi::c_char,
            __suffixlen: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mkdtemp(__template: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn mkostemp(
            __template: *mut ::core::ffi::c_char,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mkostemp64(
            __template: *mut ::core::ffi::c_char,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mkostemps(
            __template: *mut ::core::ffi::c_char,
            __suffixlen: ::core::ffi::c_int,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mkostemps64(
            __template: *mut ::core::ffi::c_char,
            __suffixlen: ::core::ffi::c_int,
            __flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn system(__command: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn canonicalize_file_name(
            __name: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn realpath(
            __name: *const ::core::ffi::c_char,
            __resolved: *mut ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    pub type __compar_fn_t = ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::core::ffi::c_void,
            arg2: *const ::core::ffi::c_void,
        ) -> ::core::ffi::c_int,
    >;
    pub type comparison_fn_t = root::__compar_fn_t;
    pub type __compar_d_fn_t = ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::core::ffi::c_void,
            arg2: *const ::core::ffi::c_void,
            arg3: *mut ::core::ffi::c_void,
        ) -> ::core::ffi::c_int,
    >;
    unsafe extern "C" {
        pub fn bsearch(
            __key: *const ::core::ffi::c_void,
            __base: *const ::core::ffi::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: root::__compar_fn_t,
        ) -> *mut ::core::ffi::c_void;
    }
    unsafe extern "C" {
        pub fn qsort(
            __base: *mut ::core::ffi::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: root::__compar_fn_t,
        );
    }
    unsafe extern "C" {
        pub fn qsort_r(
            __base: *mut ::core::ffi::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: root::__compar_d_fn_t,
            __arg: *mut ::core::ffi::c_void,
        );
    }
    unsafe extern "C" {
        pub fn abs(__x: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn labs(__x: ::core::ffi::c_long) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn llabs(__x: ::core::ffi::c_longlong) -> ::core::ffi::c_longlong;
    }
    unsafe extern "C" {
        pub fn div(__numer: ::core::ffi::c_int, __denom: ::core::ffi::c_int) -> root::div_t;
    }
    unsafe extern "C" {
        pub fn ldiv(__numer: ::core::ffi::c_long, __denom: ::core::ffi::c_long) -> root::ldiv_t;
    }
    unsafe extern "C" {
        pub fn lldiv(
            __numer: ::core::ffi::c_longlong,
            __denom: ::core::ffi::c_longlong,
        ) -> root::lldiv_t;
    }
    unsafe extern "C" {
        pub fn ecvt(
            __value: f64,
            __ndigit: ::core::ffi::c_int,
            __decpt: *mut ::core::ffi::c_int,
            __sign: *mut ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn fcvt(
            __value: f64,
            __ndigit: ::core::ffi::c_int,
            __decpt: *mut ::core::ffi::c_int,
            __sign: *mut ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn gcvt(
            __value: f64,
            __ndigit: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn qecvt(
            __value: u128,
            __ndigit: ::core::ffi::c_int,
            __decpt: *mut ::core::ffi::c_int,
            __sign: *mut ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn qfcvt(
            __value: u128,
            __ndigit: ::core::ffi::c_int,
            __decpt: *mut ::core::ffi::c_int,
            __sign: *mut ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn qgcvt(
            __value: u128,
            __ndigit: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn ecvt_r(
            __value: f64,
            __ndigit: ::core::ffi::c_int,
            __decpt: *mut ::core::ffi::c_int,
            __sign: *mut ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __len: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fcvt_r(
            __value: f64,
            __ndigit: ::core::ffi::c_int,
            __decpt: *mut ::core::ffi::c_int,
            __sign: *mut ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __len: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn qecvt_r(
            __value: u128,
            __ndigit: ::core::ffi::c_int,
            __decpt: *mut ::core::ffi::c_int,
            __sign: *mut ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __len: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn qfcvt_r(
            __value: u128,
            __ndigit: ::core::ffi::c_int,
            __decpt: *mut ::core::ffi::c_int,
            __sign: *mut ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __len: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mblen(__s: *const ::core::ffi::c_char, __n: usize) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mbtowc(
            __pwc: *mut u32,
            __s: *const ::core::ffi::c_char,
            __n: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn wctomb(__s: *mut ::core::ffi::c_char, __wchar: u32) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn mbstowcs(__pwcs: *mut u32, __s: *const ::core::ffi::c_char, __n: usize) -> usize;
    }
    unsafe extern "C" {
        pub fn wcstombs(__s: *mut ::core::ffi::c_char, __pwcs: *const u32, __n: usize) -> usize;
    }
    unsafe extern "C" {
        pub fn rpmatch(__response: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getsubopt(
            __optionp: *mut *mut ::core::ffi::c_char,
            __tokens: *const *mut ::core::ffi::c_char,
            __valuep: *mut *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn posix_openpt(__oflag: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn grantpt(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn unlockpt(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ptsname(__fd: ::core::ffi::c_int) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn ptsname_r(
            __fd: ::core::ffi::c_int,
            __buf: *mut ::core::ffi::c_char,
            __buflen: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getpt() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getloadavg(__loadavg: *mut f64, __nelem: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    pub type __gnuc_va_list = root::__builtin_va_list;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __mbstate_t {
        pub __count: ::core::ffi::c_int,
        pub __value: root::__mbstate_t__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __mbstate_t__bindgen_ty_1 {
        pub __wch: ::core::ffi::c_uint,
        pub __wchb: [::core::ffi::c_char; 4usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __mbstate_t__bindgen_ty_1"]
            [::core::mem::size_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
        ["Alignment of __mbstate_t__bindgen_ty_1"]
            [::core::mem::align_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
        ["Offset of field: __mbstate_t__bindgen_ty_1::__wch"]
            [::core::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wch) - 0usize];
        ["Offset of field: __mbstate_t__bindgen_ty_1::__wchb"]
            [::core::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wchb) - 0usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __mbstate_t"][::core::mem::size_of::<__mbstate_t>() - 8usize];
        ["Alignment of __mbstate_t"][::core::mem::align_of::<__mbstate_t>() - 4usize];
        ["Offset of field: __mbstate_t::__count"]
            [::core::mem::offset_of!(__mbstate_t, __count) - 0usize];
        ["Offset of field: __mbstate_t::__value"]
            [::core::mem::offset_of!(__mbstate_t, __value) - 4usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _G_fpos_t {
        pub __pos: root::__off_t,
        pub __state: root::__mbstate_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of _G_fpos_t"][::core::mem::size_of::<_G_fpos_t>() - 16usize];
        ["Alignment of _G_fpos_t"][::core::mem::align_of::<_G_fpos_t>() - 8usize];
        ["Offset of field: _G_fpos_t::__pos"][::core::mem::offset_of!(_G_fpos_t, __pos) - 0usize];
        ["Offset of field: _G_fpos_t::__state"]
            [::core::mem::offset_of!(_G_fpos_t, __state) - 8usize];
    };
    pub type __fpos_t = root::_G_fpos_t;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _G_fpos64_t {
        pub __pos: root::__off64_t,
        pub __state: root::__mbstate_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of _G_fpos64_t"][::core::mem::size_of::<_G_fpos64_t>() - 16usize];
        ["Alignment of _G_fpos64_t"][::core::mem::align_of::<_G_fpos64_t>() - 8usize];
        ["Offset of field: _G_fpos64_t::__pos"]
            [::core::mem::offset_of!(_G_fpos64_t, __pos) - 0usize];
        ["Offset of field: _G_fpos64_t::__state"]
            [::core::mem::offset_of!(_G_fpos64_t, __state) - 8usize];
    };
    pub type __fpos64_t = root::_G_fpos64_t;
    pub type __FILE = root::_IO_FILE;
    pub type FILE = root::_IO_FILE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_marker {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_codecvt {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_wide_data {
        _unused: [u8; 0],
    }
    pub type _IO_lock_t = ::core::ffi::c_void;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_FILE {
        pub _flags: ::core::ffi::c_int,
        pub _IO_read_ptr: *mut ::core::ffi::c_char,
        pub _IO_read_end: *mut ::core::ffi::c_char,
        pub _IO_read_base: *mut ::core::ffi::c_char,
        pub _IO_write_base: *mut ::core::ffi::c_char,
        pub _IO_write_ptr: *mut ::core::ffi::c_char,
        pub _IO_write_end: *mut ::core::ffi::c_char,
        pub _IO_buf_base: *mut ::core::ffi::c_char,
        pub _IO_buf_end: *mut ::core::ffi::c_char,
        pub _IO_save_base: *mut ::core::ffi::c_char,
        pub _IO_backup_base: *mut ::core::ffi::c_char,
        pub _IO_save_end: *mut ::core::ffi::c_char,
        pub _markers: *mut root::_IO_marker,
        pub _chain: *mut root::_IO_FILE,
        pub _fileno: ::core::ffi::c_int,
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 3usize]>,
        pub _short_backupbuf: [::core::ffi::c_char; 1usize],
        pub _old_offset: root::__off_t,
        pub _cur_column: ::core::ffi::c_ushort,
        pub _vtable_offset: ::core::ffi::c_schar,
        pub _shortbuf: [::core::ffi::c_char; 1usize],
        pub _lock: *mut root::_IO_lock_t,
        pub _offset: root::__off64_t,
        pub _codecvt: *mut root::_IO_codecvt,
        pub _wide_data: *mut root::_IO_wide_data,
        pub _freeres_list: *mut root::_IO_FILE,
        pub _freeres_buf: *mut ::core::ffi::c_void,
        pub _prevchain: *mut *mut root::_IO_FILE,
        pub _mode: ::core::ffi::c_int,
        pub _unused2: [::core::ffi::c_char; 20usize],
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of _IO_FILE"][::core::mem::size_of::<_IO_FILE>() - 216usize];
        ["Alignment of _IO_FILE"][::core::mem::align_of::<_IO_FILE>() - 8usize];
        ["Offset of field: _IO_FILE::_flags"][::core::mem::offset_of!(_IO_FILE, _flags) - 0usize];
        ["Offset of field: _IO_FILE::_IO_read_ptr"]
            [::core::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
        ["Offset of field: _IO_FILE::_IO_read_end"]
            [::core::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
        ["Offset of field: _IO_FILE::_IO_read_base"]
            [::core::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
        ["Offset of field: _IO_FILE::_IO_write_base"]
            [::core::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
        ["Offset of field: _IO_FILE::_IO_write_ptr"]
            [::core::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
        ["Offset of field: _IO_FILE::_IO_write_end"]
            [::core::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
        ["Offset of field: _IO_FILE::_IO_buf_base"]
            [::core::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
        ["Offset of field: _IO_FILE::_IO_buf_end"]
            [::core::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
        ["Offset of field: _IO_FILE::_IO_save_base"]
            [::core::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
        ["Offset of field: _IO_FILE::_IO_backup_base"]
            [::core::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
        ["Offset of field: _IO_FILE::_IO_save_end"]
            [::core::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
        ["Offset of field: _IO_FILE::_markers"]
            [::core::mem::offset_of!(_IO_FILE, _markers) - 96usize];
        ["Offset of field: _IO_FILE::_chain"][::core::mem::offset_of!(_IO_FILE, _chain) - 104usize];
        ["Offset of field: _IO_FILE::_fileno"]
            [::core::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
        ["Offset of field: _IO_FILE::_short_backupbuf"]
            [::core::mem::offset_of!(_IO_FILE, _short_backupbuf) - 119usize];
        ["Offset of field: _IO_FILE::_old_offset"]
            [::core::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
        ["Offset of field: _IO_FILE::_cur_column"]
            [::core::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
        ["Offset of field: _IO_FILE::_vtable_offset"]
            [::core::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
        ["Offset of field: _IO_FILE::_shortbuf"]
            [::core::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
        ["Offset of field: _IO_FILE::_lock"][::core::mem::offset_of!(_IO_FILE, _lock) - 136usize];
        ["Offset of field: _IO_FILE::_offset"]
            [::core::mem::offset_of!(_IO_FILE, _offset) - 144usize];
        ["Offset of field: _IO_FILE::_codecvt"]
            [::core::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
        ["Offset of field: _IO_FILE::_wide_data"]
            [::core::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
        ["Offset of field: _IO_FILE::_freeres_list"]
            [::core::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
        ["Offset of field: _IO_FILE::_freeres_buf"]
            [::core::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
        ["Offset of field: _IO_FILE::_prevchain"]
            [::core::mem::offset_of!(_IO_FILE, _prevchain) - 184usize];
        ["Offset of field: _IO_FILE::_mode"][::core::mem::offset_of!(_IO_FILE, _mode) - 192usize];
        ["Offset of field: _IO_FILE::_unused2"]
            [::core::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
    };
    impl _IO_FILE {
        #[inline]
        pub fn _flags2(&self) -> ::core::ffi::c_int {
            unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
        }
        #[inline]
        pub fn set__flags2(&mut self, val: ::core::ffi::c_int) {
            unsafe {
                let val: u32 = ::core::mem::transmute(val);
                self._bitfield_1.set(0usize, 24u8, val as u64)
            }
        }
        #[inline]
        pub unsafe fn _flags2_raw(this: *const Self) -> ::core::ffi::c_int {
            unsafe {
                ::core::mem::transmute(<root::__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                    ::core::ptr::addr_of!((*this)._bitfield_1),
                    0usize,
                    24u8,
                ) as u32)
            }
        }
        #[inline]
        pub unsafe fn set__flags2_raw(this: *mut Self, val: ::core::ffi::c_int) {
            unsafe {
                let val: u32 = ::core::mem::transmute(val);
                <root::__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                    ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                    0usize,
                    24u8,
                    val as u64,
                )
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            _flags2: ::core::ffi::c_int,
        ) -> root::__BindgenBitfieldUnit<[u8; 3usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 3usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 24u8, {
                let _flags2: u32 = unsafe { ::core::mem::transmute(_flags2) };
                _flags2 as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub type cookie_read_function_t = ::core::option::Option<
        unsafe extern "C" fn(
            __cookie: *mut ::core::ffi::c_void,
            __buf: *mut ::core::ffi::c_char,
            __nbytes: usize,
        ) -> root::__ssize_t,
    >;
    pub type cookie_write_function_t = ::core::option::Option<
        unsafe extern "C" fn(
            __cookie: *mut ::core::ffi::c_void,
            __buf: *const ::core::ffi::c_char,
            __nbytes: usize,
        ) -> root::__ssize_t,
    >;
    pub type cookie_seek_function_t = ::core::option::Option<
        unsafe extern "C" fn(
            __cookie: *mut ::core::ffi::c_void,
            __pos: *mut root::__off64_t,
            __w: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >;
    pub type cookie_close_function_t = ::core::option::Option<
        unsafe extern "C" fn(__cookie: *mut ::core::ffi::c_void) -> ::core::ffi::c_int,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_cookie_io_functions_t {
        pub read: root::cookie_read_function_t,
        pub write: root::cookie_write_function_t,
        pub seek: root::cookie_seek_function_t,
        pub close: root::cookie_close_function_t,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of _IO_cookie_io_functions_t"]
            [::core::mem::size_of::<_IO_cookie_io_functions_t>() - 32usize];
        ["Alignment of _IO_cookie_io_functions_t"]
            [::core::mem::align_of::<_IO_cookie_io_functions_t>() - 8usize];
        ["Offset of field: _IO_cookie_io_functions_t::read"]
            [::core::mem::offset_of!(_IO_cookie_io_functions_t, read) - 0usize];
        ["Offset of field: _IO_cookie_io_functions_t::write"]
            [::core::mem::offset_of!(_IO_cookie_io_functions_t, write) - 8usize];
        ["Offset of field: _IO_cookie_io_functions_t::seek"]
            [::core::mem::offset_of!(_IO_cookie_io_functions_t, seek) - 16usize];
        ["Offset of field: _IO_cookie_io_functions_t::close"]
            [::core::mem::offset_of!(_IO_cookie_io_functions_t, close) - 24usize];
    };
    pub type cookie_io_functions_t = root::_IO_cookie_io_functions_t;
    pub type va_list = root::__gnuc_va_list;
    pub type fpos_t = root::__fpos_t;
    pub type fpos64_t = root::__fpos64_t;
    unsafe extern "C" {
        pub static mut stdin: *mut root::FILE;
    }
    unsafe extern "C" {
        pub static mut stdout: *mut root::FILE;
    }
    unsafe extern "C" {
        pub static mut stderr: *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn remove(__filename: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn rename(
            __old: *const ::core::ffi::c_char,
            __new: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn renameat(
            __oldfd: ::core::ffi::c_int,
            __old: *const ::core::ffi::c_char,
            __newfd: ::core::ffi::c_int,
            __new: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn renameat2(
            __oldfd: ::core::ffi::c_int,
            __old: *const ::core::ffi::c_char,
            __newfd: ::core::ffi::c_int,
            __new: *const ::core::ffi::c_char,
            __flags: ::core::ffi::c_uint,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fclose(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn tmpfile() -> *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn tmpfile64() -> *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn tmpnam(arg1: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn tmpnam_r(__s: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn tempnam(
            __dir: *const ::core::ffi::c_char,
            __pfx: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn fflush(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fflush_unlocked(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fcloseall() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fopen(
            __filename: *const ::core::ffi::c_char,
            __modes: *const ::core::ffi::c_char,
        ) -> *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn freopen(
            __filename: *const ::core::ffi::c_char,
            __modes: *const ::core::ffi::c_char,
            __stream: *mut root::FILE,
        ) -> *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn fopen64(
            __filename: *const ::core::ffi::c_char,
            __modes: *const ::core::ffi::c_char,
        ) -> *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn freopen64(
            __filename: *const ::core::ffi::c_char,
            __modes: *const ::core::ffi::c_char,
            __stream: *mut root::FILE,
        ) -> *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn fdopen(
            __fd: ::core::ffi::c_int,
            __modes: *const ::core::ffi::c_char,
        ) -> *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn fopencookie(
            __magic_cookie: *mut ::core::ffi::c_void,
            __modes: *const ::core::ffi::c_char,
            __io_funcs: root::cookie_io_functions_t,
        ) -> *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn fmemopen(
            __s: *mut ::core::ffi::c_void,
            __len: usize,
            __modes: *const ::core::ffi::c_char,
        ) -> *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn open_memstream(
            __bufloc: *mut *mut ::core::ffi::c_char,
            __sizeloc: *mut usize,
        ) -> *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn setbuf(__stream: *mut root::FILE, __buf: *mut ::core::ffi::c_char);
    }
    unsafe extern "C" {
        pub fn setvbuf(
            __stream: *mut root::FILE,
            __buf: *mut ::core::ffi::c_char,
            __modes: ::core::ffi::c_int,
            __n: usize,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn setbuffer(__stream: *mut root::FILE, __buf: *mut ::core::ffi::c_char, __size: usize);
    }
    unsafe extern "C" {
        pub fn setlinebuf(__stream: *mut root::FILE);
    }
    unsafe extern "C" {
        pub fn fprintf(
            __stream: *mut root::FILE,
            __format: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn printf(__format: *const ::core::ffi::c_char, ...) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sprintf(
            __s: *mut ::core::ffi::c_char,
            __format: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vfprintf(
            __s: *mut root::FILE,
            __format: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vprintf(
            __format: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vsprintf(
            __s: *mut ::core::ffi::c_char,
            __format: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn snprintf(
            __s: *mut ::core::ffi::c_char,
            __maxlen: usize,
            __format: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vsnprintf(
            __s: *mut ::core::ffi::c_char,
            __maxlen: usize,
            __format: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vasprintf(
            __ptr: *mut *mut ::core::ffi::c_char,
            __f: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __asprintf(
            __ptr: *mut *mut ::core::ffi::c_char,
            __fmt: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn asprintf(
            __ptr: *mut *mut ::core::ffi::c_char,
            __fmt: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vdprintf(
            __fd: ::core::ffi::c_int,
            __fmt: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn dprintf(
            __fd: ::core::ffi::c_int,
            __fmt: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fscanf(
            __stream: *mut root::FILE,
            __format: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn scanf(__format: *const ::core::ffi::c_char, ...) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn sscanf(
            __s: *const ::core::ffi::c_char,
            __format: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_fscanf"]
        pub fn fscanf1(
            __stream: *mut root::FILE,
            __format: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_scanf"]
        pub fn scanf1(__format: *const ::core::ffi::c_char, ...) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_sscanf"]
        pub fn sscanf1(
            __s: *const ::core::ffi::c_char,
            __format: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vfscanf(
            __s: *mut root::FILE,
            __format: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vscanf(
            __format: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn vsscanf(
            __s: *const ::core::ffi::c_char,
            __format: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_vfscanf"]
        pub fn vfscanf1(
            __s: *mut root::FILE,
            __format: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_vscanf"]
        pub fn vscanf1(
            __format: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}__isoc23_vsscanf"]
        pub fn vsscanf1(
            __s: *const ::core::ffi::c_char,
            __format: *const ::core::ffi::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fgetc(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getc(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getchar() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getc_unlocked(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getchar_unlocked() -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fgetc_unlocked(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fputc(__c: ::core::ffi::c_int, __stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn putc(__c: ::core::ffi::c_int, __stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn putchar(__c: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fputc_unlocked(
            __c: ::core::ffi::c_int,
            __stream: *mut root::FILE,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn putc_unlocked(
            __c: ::core::ffi::c_int,
            __stream: *mut root::FILE,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn putchar_unlocked(__c: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn getw(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn putw(__w: ::core::ffi::c_int, __stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fgets(
            __s: *mut ::core::ffi::c_char,
            __n: ::core::ffi::c_int,
            __stream: *mut root::FILE,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn fgets_unlocked(
            __s: *mut ::core::ffi::c_char,
            __n: ::core::ffi::c_int,
            __stream: *mut root::FILE,
        ) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn __getdelim(
            __lineptr: *mut *mut ::core::ffi::c_char,
            __n: *mut usize,
            __delimiter: ::core::ffi::c_int,
            __stream: *mut root::FILE,
        ) -> root::__ssize_t;
    }
    unsafe extern "C" {
        pub fn getdelim(
            __lineptr: *mut *mut ::core::ffi::c_char,
            __n: *mut usize,
            __delimiter: ::core::ffi::c_int,
            __stream: *mut root::FILE,
        ) -> root::__ssize_t;
    }
    unsafe extern "C" {
        pub fn getline(
            __lineptr: *mut *mut ::core::ffi::c_char,
            __n: *mut usize,
            __stream: *mut root::FILE,
        ) -> root::__ssize_t;
    }
    unsafe extern "C" {
        pub fn fputs(
            __s: *const ::core::ffi::c_char,
            __stream: *mut root::FILE,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn puts(__s: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ungetc(__c: ::core::ffi::c_int, __stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fread(
            __ptr: *mut ::core::ffi::c_void,
            __size: usize,
            __n: usize,
            __stream: *mut root::FILE,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn fwrite(
            __ptr: *const ::core::ffi::c_void,
            __size: usize,
            __n: usize,
            __s: *mut root::FILE,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn fputs_unlocked(
            __s: *const ::core::ffi::c_char,
            __stream: *mut root::FILE,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fread_unlocked(
            __ptr: *mut ::core::ffi::c_void,
            __size: usize,
            __n: usize,
            __stream: *mut root::FILE,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn fwrite_unlocked(
            __ptr: *const ::core::ffi::c_void,
            __size: usize,
            __n: usize,
            __stream: *mut root::FILE,
        ) -> usize;
    }
    unsafe extern "C" {
        pub fn fseek(
            __stream: *mut root::FILE,
            __off: ::core::ffi::c_long,
            __whence: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ftell(__stream: *mut root::FILE) -> ::core::ffi::c_long;
    }
    unsafe extern "C" {
        pub fn rewind(__stream: *mut root::FILE);
    }
    unsafe extern "C" {
        pub fn fseeko(
            __stream: *mut root::FILE,
            __off: root::__off_t,
            __whence: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ftello(__stream: *mut root::FILE) -> root::__off_t;
    }
    unsafe extern "C" {
        pub fn fgetpos(__stream: *mut root::FILE, __pos: *mut root::fpos_t) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fsetpos(__stream: *mut root::FILE, __pos: *const root::fpos_t)
            -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fseeko64(
            __stream: *mut root::FILE,
            __off: root::__off64_t,
            __whence: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ftello64(__stream: *mut root::FILE) -> root::__off64_t;
    }
    unsafe extern "C" {
        pub fn fgetpos64(
            __stream: *mut root::FILE,
            __pos: *mut root::fpos64_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fsetpos64(
            __stream: *mut root::FILE,
            __pos: *const root::fpos64_t,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn clearerr(__stream: *mut root::FILE);
    }
    unsafe extern "C" {
        pub fn feof(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ferror(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn clearerr_unlocked(__stream: *mut root::FILE);
    }
    unsafe extern "C" {
        pub fn feof_unlocked(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn ferror_unlocked(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn perror(__s: *const ::core::ffi::c_char);
    }
    unsafe extern "C" {
        pub fn fileno(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn fileno_unlocked(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn pclose(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn popen(
            __command: *const ::core::ffi::c_char,
            __modes: *const ::core::ffi::c_char,
        ) -> *mut root::FILE;
    }
    unsafe extern "C" {
        pub fn ctermid(__s: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    unsafe extern "C" {
        pub fn cuserid(__s: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct obstack {
        _unused: [u8; 0],
    }
    unsafe extern "C" {
        pub fn obstack_printf(
            __obstack: *mut root::obstack,
            __format: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn obstack_vprintf(
            __obstack: *mut root::obstack,
            __format: *const ::core::ffi::c_char,
            __args: *mut root::__va_list_tag,
        ) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn flockfile(__stream: *mut root::FILE);
    }
    unsafe extern "C" {
        pub fn ftrylockfile(__stream: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn funlockfile(__stream: *mut root::FILE);
    }
    unsafe extern "C" {
        pub fn __uflow(arg1: *mut root::FILE) -> ::core::ffi::c_int;
    }
    unsafe extern "C" {
        pub fn __overflow(arg1: *mut root::FILE, arg2: ::core::ffi::c_int) -> ::core::ffi::c_int;
    }
    pub mod ke {
        #[allow(unused_imports)]
        use self::super::super::root;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct SystemAllocatorPolicy {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of SystemAllocatorPolicy"]
                [::core::mem::size_of::<SystemAllocatorPolicy>() - 1usize];
            ["Alignment of SystemAllocatorPolicy"]
                [::core::mem::align_of::<SystemAllocatorPolicy>() - 1usize];
        };
        pub const kMallocAlignment: usize = 16;
        pub const kKB: usize = 1024;
        pub const kMB: usize = 1048576;
        pub const kGB: usize = 1073741824;
        pub mod detail {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct HashTableEntry<T> {
                pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<T>>,
                pub hash_: u32,
                pub t_: T,
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct HashTable<AllocPolicy> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<AllocPolicy>>,
            pub _base: AllocPolicy,
            pub capacity_: u32,
            pub nelements_: u32,
            pub ndeleted_: u32,
            pub table_: *mut root::ke::HashTable_Entry,
            pub minCapacity_: u32,
        }
        pub type HashTable_Payload = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type HashTable_Entry = root::ke::detail::HashTableEntry<root::ke::HashTable_Payload>;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct HashTable_Result {
            pub entry_: *mut root::ke::HashTable_Entry,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct HashTable_Insert {
            pub _base: root::ke::HashTable_Result,
            pub hash_: u32,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct HashTable_Probulator {
            pub hash_: u32,
            pub capacity_: u32,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct HashTable_iterator<AllocPolicy> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<AllocPolicy>>,
            pub table_: *mut root::ke::HashTable<AllocPolicy>,
            pub i_: *mut root::ke::HashTable_Entry,
            pub end_: *mut root::ke::HashTable_Entry,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct CharacterStreamHasher {
            pub hash: u32,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of CharacterStreamHasher"]
                [::core::mem::size_of::<CharacterStreamHasher>() - 4usize];
            ["Alignment of CharacterStreamHasher"]
                [::core::mem::align_of::<CharacterStreamHasher>() - 4usize];
            ["Offset of field: CharacterStreamHasher::hash"]
                [::core::mem::offset_of!(CharacterStreamHasher, hash) - 0usize];
        };
        #[repr(C)]
        #[derive(Debug)]
        pub struct HashSet<AllocPolicy> {
            pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<AllocPolicy>>,
            pub _base: AllocPolicy,
            pub table_: root::ke::HashSet_Internal<AllocPolicy>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct HashSet_Policy {
            pub _address: u8,
        }
        pub type HashSet_Policy_Payload<K> = K;
        pub type HashSet_Internal<AllocPolicy> = root::ke::HashTable<AllocPolicy>;
        pub type HashSet_Result<AllocPolicy> = root::ke::HashSet_Internal<AllocPolicy>;
        pub type HashSet_Insert<AllocPolicy> = root::ke::HashSet_Internal<AllocPolicy>;
        pub type HashSet_iterator<AllocPolicy> = root::ke::HashSet_Internal<AllocPolicy>;
    }
    unsafe extern "C" {
        pub fn __assert_fail(
            __assertion: *const ::core::ffi::c_char,
            __file: *const ::core::ffi::c_char,
            __line: ::core::ffi::c_uint,
            __function: *const ::core::ffi::c_char,
        ) -> !;
    }
    unsafe extern "C" {
        pub fn __assert_perror_fail(
            __errnum: ::core::ffi::c_int,
            __file: *const ::core::ffi::c_char,
            __line: ::core::ffi::c_uint,
            __function: *const ::core::ffi::c_char,
        ) -> !;
    }
    unsafe extern "C" {
        pub fn __assert(
            __assertion: *const ::core::ffi::c_char,
            __file: *const ::core::ffi::c_char,
            __line: ::core::ffi::c_int,
        ) -> !;
    }
    #[repr(C)]
    #[repr(align(16))]
    #[derive(Debug, Copy, Clone)]
    pub struct max_align_t {
        pub __clang_max_align_nonce1: ::core::ffi::c_longlong,
        pub __bindgen_padding_0: u64,
        pub __clang_max_align_nonce2: u128,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of max_align_t"][::core::mem::size_of::<max_align_t>() - 32usize];
        ["Alignment of max_align_t"][::core::mem::align_of::<max_align_t>() - 16usize];
        ["Offset of field: max_align_t::__clang_max_align_nonce1"]
            [::core::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
        ["Offset of field: max_align_t::__clang_max_align_nonce2"]
            [::core::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
    };
    pub type int_least8_t = root::__int_least8_t;
    pub type int_least16_t = root::__int_least16_t;
    pub type int_least32_t = root::__int_least32_t;
    pub type int_least64_t = root::__int_least64_t;
    pub type uint_least8_t = root::__uint_least8_t;
    pub type uint_least16_t = root::__uint_least16_t;
    pub type uint_least32_t = root::__uint_least32_t;
    pub type uint_least64_t = root::__uint_least64_t;
    pub type int_fast8_t = ::core::ffi::c_schar;
    pub type int_fast16_t = ::core::ffi::c_long;
    pub type int_fast32_t = ::core::ffi::c_long;
    pub type int_fast64_t = ::core::ffi::c_long;
    pub type uint_fast8_t = ::core::ffi::c_uchar;
    pub type uint_fast16_t = ::core::ffi::c_ulong;
    pub type uint_fast32_t = ::core::ffi::c_ulong;
    pub type uint_fast64_t = ::core::ffi::c_ulong;
    pub type intmax_t = root::__intmax_t;
    pub type uintmax_t = root::__uintmax_t;
    pub mod __gnu_debug {
        #[allow(unused_imports)]
        use self::super::super::root;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Safe_iterator {
            pub _address: u8,
        }
    }
    pub mod __pstl {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub mod execution {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct sequenced_policy {
                pub _address: u8,
            }
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of sequenced_policy"][::core::mem::size_of::<sequenced_policy>() - 1usize];
                ["Alignment of sequenced_policy"]
                    [::core::mem::align_of::<sequenced_policy>() - 1usize];
            };
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct parallel_policy {
                pub _address: u8,
            }
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of parallel_policy"][::core::mem::size_of::<parallel_policy>() - 1usize];
                ["Alignment of parallel_policy"]
                    [::core::mem::align_of::<parallel_policy>() - 1usize];
            };
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct parallel_unsequenced_policy {
                pub _address: u8,
            }
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of parallel_unsequenced_policy"]
                    [::core::mem::size_of::<parallel_unsequenced_policy>() - 1usize];
                ["Alignment of parallel_unsequenced_policy"]
                    [::core::mem::align_of::<parallel_unsequenced_policy>() - 1usize];
            };
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct unsequenced_policy {
                pub _address: u8,
            }
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of unsequenced_policy"]
                    [::core::mem::size_of::<unsequenced_policy>() - 1usize];
                ["Alignment of unsequenced_policy"]
                    [::core::mem::align_of::<unsequenced_policy>() - 1usize];
            };
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN6__pstl9execution2v13seqE"]
                pub static seq: root::__pstl::execution::sequenced_policy;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN6__pstl9execution2v13parE"]
                pub static par: root::__pstl::execution::parallel_policy;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN6__pstl9execution2v19par_unseqE"]
                pub static par_unseq: root::__pstl::execution::parallel_unsequenced_policy;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN6__pstl9execution2v15unseqE"]
                pub static unseq: root::__pstl::execution::unsequenced_policy;
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_execution_policy {
                pub _base: root::std::false_type,
            }
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of template specialization: is_execution_policy_open0_sequenced_policy_close0"] [:: core :: mem :: size_of :: < root :: __pstl :: execution :: is_execution_policy > () - 1usize] ;
                ["Align of template specialization: is_execution_policy_open0_sequenced_policy_close0"] [:: core :: mem :: align_of :: < root :: __pstl :: execution :: is_execution_policy > () - 1usize] ;
            };
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of template specialization: is_execution_policy_open0_parallel_policy_close0"] [:: core :: mem :: size_of :: < root :: __pstl :: execution :: is_execution_policy > () - 1usize] ;
                ["Align of template specialization: is_execution_policy_open0_parallel_policy_close0"] [:: core :: mem :: align_of :: < root :: __pstl :: execution :: is_execution_policy > () - 1usize] ;
            };
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of template specialization: is_execution_policy_open0_parallel_unsequenced_policy_close0"] [:: core :: mem :: size_of :: < root :: __pstl :: execution :: is_execution_policy > () - 1usize] ;
                ["Align of template specialization: is_execution_policy_open0_parallel_unsequenced_policy_close0"] [:: core :: mem :: align_of :: < root :: __pstl :: execution :: is_execution_policy > () - 1usize] ;
            };
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of template specialization: is_execution_policy_open0_unsequenced_policy_close0"] [:: core :: mem :: size_of :: < root :: __pstl :: execution :: is_execution_policy > () - 1usize] ;
                ["Align of template specialization: is_execution_policy_open0_unsequenced_policy_close0"] [:: core :: mem :: align_of :: < root :: __pstl :: execution :: is_execution_policy > () - 1usize] ;
            };
        }
        pub mod __internal {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            pub type __enable_if_execution_policy = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __serial_tag {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __parallel_tag {
                pub _address: u8,
            }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_1 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_2 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_3 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_4 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_5 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_6 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_7 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_8 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_9 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_10 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_11 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_12 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_13 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_14 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_15 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_16 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_17 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_18 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_19 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_20 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_21 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_22 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_23 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_24 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_25 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_26 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_27 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_28 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_29 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_30 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_31 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_32 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __locale_data {
        pub _address: u8,
    }
    pub type __builtin_va_list = [root::__va_list_tag; 1usize];
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __va_list_tag {
        pub gp_offset: ::core::ffi::c_uint,
        pub fp_offset: ::core::ffi::c_uint,
        pub overflow_arg_area: *mut ::core::ffi::c_void,
        pub reg_save_area: *mut ::core::ffi::c_void,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __va_list_tag"][::core::mem::size_of::<__va_list_tag>() - 24usize];
        ["Alignment of __va_list_tag"][::core::mem::align_of::<__va_list_tag>() - 8usize];
        ["Offset of field: __va_list_tag::gp_offset"]
            [::core::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
        ["Offset of field: __va_list_tag::fp_offset"]
            [::core::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
        ["Offset of field: __va_list_tag::overflow_arg_area"]
            [::core::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
        ["Offset of field: __va_list_tag::reg_save_area"]
            [::core::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: iterator_open0_output_iterator_tag_void_void_void_void_close0"] [:: core :: mem :: size_of :: < root :: std :: iterator > () - 1usize] ;
        ["Align of template specialization: iterator_open0_output_iterator_tag_void_void_void_void_close0"] [:: core :: mem :: align_of :: < root :: std :: iterator > () - 1usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: iterator_open0_output_iterator_tag_void_void_void_void_close0"] [:: core :: mem :: size_of :: < root :: std :: iterator > () - 1usize] ;
        ["Align of template specialization: iterator_open0_output_iterator_tag_void_void_void_void_close0"] [:: core :: mem :: align_of :: < root :: std :: iterator > () - 1usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: iterator_open0_output_iterator_tag_void_void_void_void_close0"] [:: core :: mem :: size_of :: < root :: std :: iterator > () - 1usize] ;
        ["Align of template specialization: iterator_open0_output_iterator_tag_void_void_void_void_close0"] [:: core :: mem :: align_of :: < root :: std :: iterator > () - 1usize] ;
    };
}
